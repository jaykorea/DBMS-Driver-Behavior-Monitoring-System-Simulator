
DBMSprototypeForSimulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001218c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001b00  08012330  08012330  00022330  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013e30  08013e30  00030218  2**0
                  CONTENTS
  4 .ARM          00000008  08013e30  08013e30  00023e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013e38  08013e38  00030218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08013e38  08013e38  00023e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013e40  08013e40  00023e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  08013e44  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018d8  20000218  0801405c  00030218  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001af0  0801405c  00031af0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e44f  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004c24  00000000  00000000  0005e697  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b8  00000000  00000000  000632c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001290  00000000  00000000  00064678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001efe4  00000000  00000000  00065908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ae31  00000000  00000000  000848ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000954f4  00000000  00000000  0009f71d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00134c11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066f4  00000000  00000000  00134c64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000218 	.word	0x20000218
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012314 	.word	0x08012314

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000021c 	.word	0x2000021c
 80001dc:	08012314 	.word	0x08012314

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_frsub>:
 8000c98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c9c:	e002      	b.n	8000ca4 <__addsf3>
 8000c9e:	bf00      	nop

08000ca0 <__aeabi_fsub>:
 8000ca0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ca4 <__addsf3>:
 8000ca4:	0042      	lsls	r2, r0, #1
 8000ca6:	bf1f      	itttt	ne
 8000ca8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000cac:	ea92 0f03 	teqne	r2, r3
 8000cb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb8:	d06a      	beq.n	8000d90 <__addsf3+0xec>
 8000cba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cc2:	bfc1      	itttt	gt
 8000cc4:	18d2      	addgt	r2, r2, r3
 8000cc6:	4041      	eorgt	r1, r0
 8000cc8:	4048      	eorgt	r0, r1
 8000cca:	4041      	eorgt	r1, r0
 8000ccc:	bfb8      	it	lt
 8000cce:	425b      	neglt	r3, r3
 8000cd0:	2b19      	cmp	r3, #25
 8000cd2:	bf88      	it	hi
 8000cd4:	4770      	bxhi	lr
 8000cd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ce2:	bf18      	it	ne
 8000ce4:	4240      	negne	r0, r0
 8000ce6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cf2:	bf18      	it	ne
 8000cf4:	4249      	negne	r1, r1
 8000cf6:	ea92 0f03 	teq	r2, r3
 8000cfa:	d03f      	beq.n	8000d7c <__addsf3+0xd8>
 8000cfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000d00:	fa41 fc03 	asr.w	ip, r1, r3
 8000d04:	eb10 000c 	adds.w	r0, r0, ip
 8000d08:	f1c3 0320 	rsb	r3, r3, #32
 8000d0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000d10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__addsf3+0x78>
 8000d16:	4249      	negs	r1, r1
 8000d18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d20:	d313      	bcc.n	8000d4a <__addsf3+0xa6>
 8000d22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d26:	d306      	bcc.n	8000d36 <__addsf3+0x92>
 8000d28:	0840      	lsrs	r0, r0, #1
 8000d2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d2e:	f102 0201 	add.w	r2, r2, #1
 8000d32:	2afe      	cmp	r2, #254	; 0xfe
 8000d34:	d251      	bcs.n	8000dda <__addsf3+0x136>
 8000d36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d3e:	bf08      	it	eq
 8000d40:	f020 0001 	biceq.w	r0, r0, #1
 8000d44:	ea40 0003 	orr.w	r0, r0, r3
 8000d48:	4770      	bx	lr
 8000d4a:	0049      	lsls	r1, r1, #1
 8000d4c:	eb40 0000 	adc.w	r0, r0, r0
 8000d50:	3a01      	subs	r2, #1
 8000d52:	bf28      	it	cs
 8000d54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d58:	d2ed      	bcs.n	8000d36 <__addsf3+0x92>
 8000d5a:	fab0 fc80 	clz	ip, r0
 8000d5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d62:	ebb2 020c 	subs.w	r2, r2, ip
 8000d66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d6a:	bfaa      	itet	ge
 8000d6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d70:	4252      	neglt	r2, r2
 8000d72:	4318      	orrge	r0, r3
 8000d74:	bfbc      	itt	lt
 8000d76:	40d0      	lsrlt	r0, r2
 8000d78:	4318      	orrlt	r0, r3
 8000d7a:	4770      	bx	lr
 8000d7c:	f092 0f00 	teq	r2, #0
 8000d80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d84:	bf06      	itte	eq
 8000d86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d8a:	3201      	addeq	r2, #1
 8000d8c:	3b01      	subne	r3, #1
 8000d8e:	e7b5      	b.n	8000cfc <__addsf3+0x58>
 8000d90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d98:	bf18      	it	ne
 8000d9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d9e:	d021      	beq.n	8000de4 <__addsf3+0x140>
 8000da0:	ea92 0f03 	teq	r2, r3
 8000da4:	d004      	beq.n	8000db0 <__addsf3+0x10c>
 8000da6:	f092 0f00 	teq	r2, #0
 8000daa:	bf08      	it	eq
 8000dac:	4608      	moveq	r0, r1
 8000dae:	4770      	bx	lr
 8000db0:	ea90 0f01 	teq	r0, r1
 8000db4:	bf1c      	itt	ne
 8000db6:	2000      	movne	r0, #0
 8000db8:	4770      	bxne	lr
 8000dba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000dbe:	d104      	bne.n	8000dca <__addsf3+0x126>
 8000dc0:	0040      	lsls	r0, r0, #1
 8000dc2:	bf28      	it	cs
 8000dc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dc8:	4770      	bx	lr
 8000dca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dce:	bf3c      	itt	cc
 8000dd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dd4:	4770      	bxcc	lr
 8000dd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de2:	4770      	bx	lr
 8000de4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de8:	bf16      	itet	ne
 8000dea:	4608      	movne	r0, r1
 8000dec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000df0:	4601      	movne	r1, r0
 8000df2:	0242      	lsls	r2, r0, #9
 8000df4:	bf06      	itte	eq
 8000df6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dfa:	ea90 0f01 	teqeq	r0, r1
 8000dfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000e02:	4770      	bx	lr

08000e04 <__aeabi_ui2f>:
 8000e04:	f04f 0300 	mov.w	r3, #0
 8000e08:	e004      	b.n	8000e14 <__aeabi_i2f+0x8>
 8000e0a:	bf00      	nop

08000e0c <__aeabi_i2f>:
 8000e0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e10:	bf48      	it	mi
 8000e12:	4240      	negmi	r0, r0
 8000e14:	ea5f 0c00 	movs.w	ip, r0
 8000e18:	bf08      	it	eq
 8000e1a:	4770      	bxeq	lr
 8000e1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e20:	4601      	mov	r1, r0
 8000e22:	f04f 0000 	mov.w	r0, #0
 8000e26:	e01c      	b.n	8000e62 <__aeabi_l2f+0x2a>

08000e28 <__aeabi_ul2f>:
 8000e28:	ea50 0201 	orrs.w	r2, r0, r1
 8000e2c:	bf08      	it	eq
 8000e2e:	4770      	bxeq	lr
 8000e30:	f04f 0300 	mov.w	r3, #0
 8000e34:	e00a      	b.n	8000e4c <__aeabi_l2f+0x14>
 8000e36:	bf00      	nop

08000e38 <__aeabi_l2f>:
 8000e38:	ea50 0201 	orrs.w	r2, r0, r1
 8000e3c:	bf08      	it	eq
 8000e3e:	4770      	bxeq	lr
 8000e40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e44:	d502      	bpl.n	8000e4c <__aeabi_l2f+0x14>
 8000e46:	4240      	negs	r0, r0
 8000e48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e4c:	ea5f 0c01 	movs.w	ip, r1
 8000e50:	bf02      	ittt	eq
 8000e52:	4684      	moveq	ip, r0
 8000e54:	4601      	moveq	r1, r0
 8000e56:	2000      	moveq	r0, #0
 8000e58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e5c:	bf08      	it	eq
 8000e5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e66:	fabc f28c 	clz	r2, ip
 8000e6a:	3a08      	subs	r2, #8
 8000e6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e70:	db10      	blt.n	8000e94 <__aeabi_l2f+0x5c>
 8000e72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e76:	4463      	add	r3, ip
 8000e78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e7c:	f1c2 0220 	rsb	r2, r2, #32
 8000e80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e84:	fa20 f202 	lsr.w	r2, r0, r2
 8000e88:	eb43 0002 	adc.w	r0, r3, r2
 8000e8c:	bf08      	it	eq
 8000e8e:	f020 0001 	biceq.w	r0, r0, #1
 8000e92:	4770      	bx	lr
 8000e94:	f102 0220 	add.w	r2, r2, #32
 8000e98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e9c:	f1c2 0220 	rsb	r2, r2, #32
 8000ea0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ea4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea8:	eb43 0002 	adc.w	r0, r3, r2
 8000eac:	bf08      	it	eq
 8000eae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eb2:	4770      	bx	lr

08000eb4 <__aeabi_uldivmod>:
 8000eb4:	b953      	cbnz	r3, 8000ecc <__aeabi_uldivmod+0x18>
 8000eb6:	b94a      	cbnz	r2, 8000ecc <__aeabi_uldivmod+0x18>
 8000eb8:	2900      	cmp	r1, #0
 8000eba:	bf08      	it	eq
 8000ebc:	2800      	cmpeq	r0, #0
 8000ebe:	bf1c      	itt	ne
 8000ec0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ec4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ec8:	f000 b9a4 	b.w	8001214 <__aeabi_idiv0>
 8000ecc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ed0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ed4:	f000 f83c 	bl	8000f50 <__udivmoddi4>
 8000ed8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000edc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ee0:	b004      	add	sp, #16
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_d2lz>:
 8000ee4:	b538      	push	{r3, r4, r5, lr}
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2300      	movs	r3, #0
 8000eea:	4604      	mov	r4, r0
 8000eec:	460d      	mov	r5, r1
 8000eee:	f7ff fdfd 	bl	8000aec <__aeabi_dcmplt>
 8000ef2:	b928      	cbnz	r0, 8000f00 <__aeabi_d2lz+0x1c>
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	4629      	mov	r1, r5
 8000ef8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000efc:	f000 b80a 	b.w	8000f14 <__aeabi_d2ulz>
 8000f00:	4620      	mov	r0, r4
 8000f02:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000f06:	f000 f805 	bl	8000f14 <__aeabi_d2ulz>
 8000f0a:	4240      	negs	r0, r0
 8000f0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f10:	bd38      	pop	{r3, r4, r5, pc}
 8000f12:	bf00      	nop

08000f14 <__aeabi_d2ulz>:
 8000f14:	b5d0      	push	{r4, r6, r7, lr}
 8000f16:	4b0c      	ldr	r3, [pc, #48]	; (8000f48 <__aeabi_d2ulz+0x34>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	4606      	mov	r6, r0
 8000f1c:	460f      	mov	r7, r1
 8000f1e:	f7ff fb73 	bl	8000608 <__aeabi_dmul>
 8000f22:	f7ff fe49 	bl	8000bb8 <__aeabi_d2uiz>
 8000f26:	4604      	mov	r4, r0
 8000f28:	f7ff faf4 	bl	8000514 <__aeabi_ui2d>
 8000f2c:	4b07      	ldr	r3, [pc, #28]	; (8000f4c <__aeabi_d2ulz+0x38>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f7ff fb6a 	bl	8000608 <__aeabi_dmul>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	4630      	mov	r0, r6
 8000f3a:	4639      	mov	r1, r7
 8000f3c:	f7ff f9ac 	bl	8000298 <__aeabi_dsub>
 8000f40:	f7ff fe3a 	bl	8000bb8 <__aeabi_d2uiz>
 8000f44:	4621      	mov	r1, r4
 8000f46:	bdd0      	pop	{r4, r6, r7, pc}
 8000f48:	3df00000 	.word	0x3df00000
 8000f4c:	41f00000 	.word	0x41f00000

08000f50 <__udivmoddi4>:
 8000f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f54:	9d08      	ldr	r5, [sp, #32]
 8000f56:	4604      	mov	r4, r0
 8000f58:	468c      	mov	ip, r1
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	f040 8083 	bne.w	8001066 <__udivmoddi4+0x116>
 8000f60:	428a      	cmp	r2, r1
 8000f62:	4617      	mov	r7, r2
 8000f64:	d947      	bls.n	8000ff6 <__udivmoddi4+0xa6>
 8000f66:	fab2 f282 	clz	r2, r2
 8000f6a:	b142      	cbz	r2, 8000f7e <__udivmoddi4+0x2e>
 8000f6c:	f1c2 0020 	rsb	r0, r2, #32
 8000f70:	fa24 f000 	lsr.w	r0, r4, r0
 8000f74:	4091      	lsls	r1, r2
 8000f76:	4097      	lsls	r7, r2
 8000f78:	ea40 0c01 	orr.w	ip, r0, r1
 8000f7c:	4094      	lsls	r4, r2
 8000f7e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000f82:	0c23      	lsrs	r3, r4, #16
 8000f84:	fbbc f6f8 	udiv	r6, ip, r8
 8000f88:	fa1f fe87 	uxth.w	lr, r7
 8000f8c:	fb08 c116 	mls	r1, r8, r6, ip
 8000f90:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f94:	fb06 f10e 	mul.w	r1, r6, lr
 8000f98:	4299      	cmp	r1, r3
 8000f9a:	d909      	bls.n	8000fb0 <__udivmoddi4+0x60>
 8000f9c:	18fb      	adds	r3, r7, r3
 8000f9e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000fa2:	f080 8119 	bcs.w	80011d8 <__udivmoddi4+0x288>
 8000fa6:	4299      	cmp	r1, r3
 8000fa8:	f240 8116 	bls.w	80011d8 <__udivmoddi4+0x288>
 8000fac:	3e02      	subs	r6, #2
 8000fae:	443b      	add	r3, r7
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fb8:	fb08 3310 	mls	r3, r8, r0, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fc4:	45a6      	cmp	lr, r4
 8000fc6:	d909      	bls.n	8000fdc <__udivmoddi4+0x8c>
 8000fc8:	193c      	adds	r4, r7, r4
 8000fca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000fce:	f080 8105 	bcs.w	80011dc <__udivmoddi4+0x28c>
 8000fd2:	45a6      	cmp	lr, r4
 8000fd4:	f240 8102 	bls.w	80011dc <__udivmoddi4+0x28c>
 8000fd8:	3802      	subs	r0, #2
 8000fda:	443c      	add	r4, r7
 8000fdc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000fe0:	eba4 040e 	sub.w	r4, r4, lr
 8000fe4:	2600      	movs	r6, #0
 8000fe6:	b11d      	cbz	r5, 8000ff0 <__udivmoddi4+0xa0>
 8000fe8:	40d4      	lsrs	r4, r2
 8000fea:	2300      	movs	r3, #0
 8000fec:	e9c5 4300 	strd	r4, r3, [r5]
 8000ff0:	4631      	mov	r1, r6
 8000ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff6:	b902      	cbnz	r2, 8000ffa <__udivmoddi4+0xaa>
 8000ff8:	deff      	udf	#255	; 0xff
 8000ffa:	fab2 f282 	clz	r2, r2
 8000ffe:	2a00      	cmp	r2, #0
 8001000:	d150      	bne.n	80010a4 <__udivmoddi4+0x154>
 8001002:	1bcb      	subs	r3, r1, r7
 8001004:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001008:	fa1f f887 	uxth.w	r8, r7
 800100c:	2601      	movs	r6, #1
 800100e:	fbb3 fcfe 	udiv	ip, r3, lr
 8001012:	0c21      	lsrs	r1, r4, #16
 8001014:	fb0e 331c 	mls	r3, lr, ip, r3
 8001018:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800101c:	fb08 f30c 	mul.w	r3, r8, ip
 8001020:	428b      	cmp	r3, r1
 8001022:	d907      	bls.n	8001034 <__udivmoddi4+0xe4>
 8001024:	1879      	adds	r1, r7, r1
 8001026:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800102a:	d202      	bcs.n	8001032 <__udivmoddi4+0xe2>
 800102c:	428b      	cmp	r3, r1
 800102e:	f200 80e9 	bhi.w	8001204 <__udivmoddi4+0x2b4>
 8001032:	4684      	mov	ip, r0
 8001034:	1ac9      	subs	r1, r1, r3
 8001036:	b2a3      	uxth	r3, r4
 8001038:	fbb1 f0fe 	udiv	r0, r1, lr
 800103c:	fb0e 1110 	mls	r1, lr, r0, r1
 8001040:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8001044:	fb08 f800 	mul.w	r8, r8, r0
 8001048:	45a0      	cmp	r8, r4
 800104a:	d907      	bls.n	800105c <__udivmoddi4+0x10c>
 800104c:	193c      	adds	r4, r7, r4
 800104e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001052:	d202      	bcs.n	800105a <__udivmoddi4+0x10a>
 8001054:	45a0      	cmp	r8, r4
 8001056:	f200 80d9 	bhi.w	800120c <__udivmoddi4+0x2bc>
 800105a:	4618      	mov	r0, r3
 800105c:	eba4 0408 	sub.w	r4, r4, r8
 8001060:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8001064:	e7bf      	b.n	8000fe6 <__udivmoddi4+0x96>
 8001066:	428b      	cmp	r3, r1
 8001068:	d909      	bls.n	800107e <__udivmoddi4+0x12e>
 800106a:	2d00      	cmp	r5, #0
 800106c:	f000 80b1 	beq.w	80011d2 <__udivmoddi4+0x282>
 8001070:	2600      	movs	r6, #0
 8001072:	e9c5 0100 	strd	r0, r1, [r5]
 8001076:	4630      	mov	r0, r6
 8001078:	4631      	mov	r1, r6
 800107a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800107e:	fab3 f683 	clz	r6, r3
 8001082:	2e00      	cmp	r6, #0
 8001084:	d14a      	bne.n	800111c <__udivmoddi4+0x1cc>
 8001086:	428b      	cmp	r3, r1
 8001088:	d302      	bcc.n	8001090 <__udivmoddi4+0x140>
 800108a:	4282      	cmp	r2, r0
 800108c:	f200 80b8 	bhi.w	8001200 <__udivmoddi4+0x2b0>
 8001090:	1a84      	subs	r4, r0, r2
 8001092:	eb61 0103 	sbc.w	r1, r1, r3
 8001096:	2001      	movs	r0, #1
 8001098:	468c      	mov	ip, r1
 800109a:	2d00      	cmp	r5, #0
 800109c:	d0a8      	beq.n	8000ff0 <__udivmoddi4+0xa0>
 800109e:	e9c5 4c00 	strd	r4, ip, [r5]
 80010a2:	e7a5      	b.n	8000ff0 <__udivmoddi4+0xa0>
 80010a4:	f1c2 0320 	rsb	r3, r2, #32
 80010a8:	fa20 f603 	lsr.w	r6, r0, r3
 80010ac:	4097      	lsls	r7, r2
 80010ae:	fa01 f002 	lsl.w	r0, r1, r2
 80010b2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80010b6:	40d9      	lsrs	r1, r3
 80010b8:	4330      	orrs	r0, r6
 80010ba:	0c03      	lsrs	r3, r0, #16
 80010bc:	fbb1 f6fe 	udiv	r6, r1, lr
 80010c0:	fa1f f887 	uxth.w	r8, r7
 80010c4:	fb0e 1116 	mls	r1, lr, r6, r1
 80010c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80010cc:	fb06 f108 	mul.w	r1, r6, r8
 80010d0:	4299      	cmp	r1, r3
 80010d2:	fa04 f402 	lsl.w	r4, r4, r2
 80010d6:	d909      	bls.n	80010ec <__udivmoddi4+0x19c>
 80010d8:	18fb      	adds	r3, r7, r3
 80010da:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80010de:	f080 808d 	bcs.w	80011fc <__udivmoddi4+0x2ac>
 80010e2:	4299      	cmp	r1, r3
 80010e4:	f240 808a 	bls.w	80011fc <__udivmoddi4+0x2ac>
 80010e8:	3e02      	subs	r6, #2
 80010ea:	443b      	add	r3, r7
 80010ec:	1a5b      	subs	r3, r3, r1
 80010ee:	b281      	uxth	r1, r0
 80010f0:	fbb3 f0fe 	udiv	r0, r3, lr
 80010f4:	fb0e 3310 	mls	r3, lr, r0, r3
 80010f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80010fc:	fb00 f308 	mul.w	r3, r0, r8
 8001100:	428b      	cmp	r3, r1
 8001102:	d907      	bls.n	8001114 <__udivmoddi4+0x1c4>
 8001104:	1879      	adds	r1, r7, r1
 8001106:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800110a:	d273      	bcs.n	80011f4 <__udivmoddi4+0x2a4>
 800110c:	428b      	cmp	r3, r1
 800110e:	d971      	bls.n	80011f4 <__udivmoddi4+0x2a4>
 8001110:	3802      	subs	r0, #2
 8001112:	4439      	add	r1, r7
 8001114:	1acb      	subs	r3, r1, r3
 8001116:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800111a:	e778      	b.n	800100e <__udivmoddi4+0xbe>
 800111c:	f1c6 0c20 	rsb	ip, r6, #32
 8001120:	fa03 f406 	lsl.w	r4, r3, r6
 8001124:	fa22 f30c 	lsr.w	r3, r2, ip
 8001128:	431c      	orrs	r4, r3
 800112a:	fa20 f70c 	lsr.w	r7, r0, ip
 800112e:	fa01 f306 	lsl.w	r3, r1, r6
 8001132:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8001136:	fa21 f10c 	lsr.w	r1, r1, ip
 800113a:	431f      	orrs	r7, r3
 800113c:	0c3b      	lsrs	r3, r7, #16
 800113e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001142:	fa1f f884 	uxth.w	r8, r4
 8001146:	fb0e 1119 	mls	r1, lr, r9, r1
 800114a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800114e:	fb09 fa08 	mul.w	sl, r9, r8
 8001152:	458a      	cmp	sl, r1
 8001154:	fa02 f206 	lsl.w	r2, r2, r6
 8001158:	fa00 f306 	lsl.w	r3, r0, r6
 800115c:	d908      	bls.n	8001170 <__udivmoddi4+0x220>
 800115e:	1861      	adds	r1, r4, r1
 8001160:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8001164:	d248      	bcs.n	80011f8 <__udivmoddi4+0x2a8>
 8001166:	458a      	cmp	sl, r1
 8001168:	d946      	bls.n	80011f8 <__udivmoddi4+0x2a8>
 800116a:	f1a9 0902 	sub.w	r9, r9, #2
 800116e:	4421      	add	r1, r4
 8001170:	eba1 010a 	sub.w	r1, r1, sl
 8001174:	b2bf      	uxth	r7, r7
 8001176:	fbb1 f0fe 	udiv	r0, r1, lr
 800117a:	fb0e 1110 	mls	r1, lr, r0, r1
 800117e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8001182:	fb00 f808 	mul.w	r8, r0, r8
 8001186:	45b8      	cmp	r8, r7
 8001188:	d907      	bls.n	800119a <__udivmoddi4+0x24a>
 800118a:	19e7      	adds	r7, r4, r7
 800118c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8001190:	d22e      	bcs.n	80011f0 <__udivmoddi4+0x2a0>
 8001192:	45b8      	cmp	r8, r7
 8001194:	d92c      	bls.n	80011f0 <__udivmoddi4+0x2a0>
 8001196:	3802      	subs	r0, #2
 8001198:	4427      	add	r7, r4
 800119a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800119e:	eba7 0708 	sub.w	r7, r7, r8
 80011a2:	fba0 8902 	umull	r8, r9, r0, r2
 80011a6:	454f      	cmp	r7, r9
 80011a8:	46c6      	mov	lr, r8
 80011aa:	4649      	mov	r1, r9
 80011ac:	d31a      	bcc.n	80011e4 <__udivmoddi4+0x294>
 80011ae:	d017      	beq.n	80011e0 <__udivmoddi4+0x290>
 80011b0:	b15d      	cbz	r5, 80011ca <__udivmoddi4+0x27a>
 80011b2:	ebb3 020e 	subs.w	r2, r3, lr
 80011b6:	eb67 0701 	sbc.w	r7, r7, r1
 80011ba:	fa07 fc0c 	lsl.w	ip, r7, ip
 80011be:	40f2      	lsrs	r2, r6
 80011c0:	ea4c 0202 	orr.w	r2, ip, r2
 80011c4:	40f7      	lsrs	r7, r6
 80011c6:	e9c5 2700 	strd	r2, r7, [r5]
 80011ca:	2600      	movs	r6, #0
 80011cc:	4631      	mov	r1, r6
 80011ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80011d2:	462e      	mov	r6, r5
 80011d4:	4628      	mov	r0, r5
 80011d6:	e70b      	b.n	8000ff0 <__udivmoddi4+0xa0>
 80011d8:	4606      	mov	r6, r0
 80011da:	e6e9      	b.n	8000fb0 <__udivmoddi4+0x60>
 80011dc:	4618      	mov	r0, r3
 80011de:	e6fd      	b.n	8000fdc <__udivmoddi4+0x8c>
 80011e0:	4543      	cmp	r3, r8
 80011e2:	d2e5      	bcs.n	80011b0 <__udivmoddi4+0x260>
 80011e4:	ebb8 0e02 	subs.w	lr, r8, r2
 80011e8:	eb69 0104 	sbc.w	r1, r9, r4
 80011ec:	3801      	subs	r0, #1
 80011ee:	e7df      	b.n	80011b0 <__udivmoddi4+0x260>
 80011f0:	4608      	mov	r0, r1
 80011f2:	e7d2      	b.n	800119a <__udivmoddi4+0x24a>
 80011f4:	4660      	mov	r0, ip
 80011f6:	e78d      	b.n	8001114 <__udivmoddi4+0x1c4>
 80011f8:	4681      	mov	r9, r0
 80011fa:	e7b9      	b.n	8001170 <__udivmoddi4+0x220>
 80011fc:	4666      	mov	r6, ip
 80011fe:	e775      	b.n	80010ec <__udivmoddi4+0x19c>
 8001200:	4630      	mov	r0, r6
 8001202:	e74a      	b.n	800109a <__udivmoddi4+0x14a>
 8001204:	f1ac 0c02 	sub.w	ip, ip, #2
 8001208:	4439      	add	r1, r7
 800120a:	e713      	b.n	8001034 <__udivmoddi4+0xe4>
 800120c:	3802      	subs	r0, #2
 800120e:	443c      	add	r4, r7
 8001210:	e724      	b.n	800105c <__udivmoddi4+0x10c>
 8001212:	bf00      	nop

08001214 <__aeabi_idiv0>:
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop

08001218 <__io_putchar>:
float mapArduino(float val, float I_Min, float I_Max, float O_Min, float O_Max) {
    return (((val - I_Min) * ((O_Max - O_Min) / (I_Max - I_Min))) + O_Min);
}

PUTCHAR_PROTOTYPE
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
    /* Place your implementation of fputc here */
    /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart2, (uint8_t *) &ch, 1, 0xFFFF);
 8001220:	1d39      	adds	r1, r7, #4
 8001222:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001226:	2201      	movs	r2, #1
 8001228:	4803      	ldr	r0, [pc, #12]	; (8001238 <__io_putchar+0x20>)
 800122a:	f008 f975 	bl	8009518 <HAL_UART_Transmit>

    return ch;
 800122e:	687b      	ldr	r3, [r7, #4]
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20001630 	.word	0x20001630

0800123c <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8001240:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <Ringbuf_init+0x3c>)
 8001242:	4a0e      	ldr	r2, [pc, #56]	; (800127c <Ringbuf_init+0x40>)
 8001244:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8001246:	4b0e      	ldr	r3, [pc, #56]	; (8001280 <Ringbuf_init+0x44>)
 8001248:	4a0e      	ldr	r2, [pc, #56]	; (8001284 <Ringbuf_init+0x48>)
 800124a:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 800124c:	4b0e      	ldr	r3, [pc, #56]	; (8001288 <Ringbuf_init+0x4c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	695a      	ldr	r2, [r3, #20]
 8001252:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <Ringbuf_init+0x4c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f042 0201 	orr.w	r2, r2, #1
 800125a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <Ringbuf_init+0x4c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	68da      	ldr	r2, [r3, #12]
 8001262:	4b09      	ldr	r3, [pc, #36]	; (8001288 <Ringbuf_init+0x4c>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f042 0220 	orr.w	r2, r2, #32
 800126a:	60da      	str	r2, [r3, #12]
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20001450 	.word	0x20001450
 800127c:	20000234 	.word	0x20000234
 8001280:	2000144c 	.word	0x2000144c
 8001284:	2000043c 	.word	0x2000043c
 8001288:	20001454 	.word	0x20001454

0800128c <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	6039      	str	r1, [r7, #0]
 8001296:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800129e:	3301      	adds	r3, #1
 80012a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012a4:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d009      	beq.n	80012c6 <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012b8:	683a      	ldr	r2, [r7, #0]
 80012ba:	79f9      	ldrb	r1, [r7, #7]
 80012bc:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 80012c6:	bf00      	nop
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 80012da:	4b13      	ldr	r3, [pc, #76]	; (8001328 <Uart_read+0x54>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80012e2:	4b11      	ldr	r3, [pc, #68]	; (8001328 <Uart_read+0x54>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d102      	bne.n	80012f4 <Uart_read+0x20>
  {
    return -1;
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80012f2:	e013      	b.n	800131c <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <Uart_read+0x54>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b0b      	ldr	r3, [pc, #44]	; (8001328 <Uart_read+0x54>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001300:	5cd3      	ldrb	r3, [r2, r3]
 8001302:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001304:	4b08      	ldr	r3, [pc, #32]	; (8001328 <Uart_read+0x54>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800130c:	1c5a      	adds	r2, r3, #1
 800130e:	4b06      	ldr	r3, [pc, #24]	; (8001328 <Uart_read+0x54>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001316:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 800131a:	79fb      	ldrb	r3, [r7, #7]
  }
}
 800131c:	4618      	mov	r0, r3
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	20001450 	.word	0x20001450

0800132c <Uart_write>:

/* writes a single character to the uart and increments head
 */
int Uart_write(int c)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2b00      	cmp	r3, #0
 8001338:	db27      	blt.n	800138a <Uart_write+0x5e>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 800133a:	4b18      	ldr	r3, [pc, #96]	; (800139c <Uart_write+0x70>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001342:	3301      	adds	r3, #1
 8001344:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001348:	60fb      	str	r3, [r7, #12]
		while (i == _tx_buffer->tail);
 800134a:	bf00      	nop
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <Uart_write+0x70>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	429a      	cmp	r2, r3
 8001358:	d0f8      	beq.n	800134c <Uart_write+0x20>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <Uart_write+0x70>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	4b0f      	ldr	r3, [pc, #60]	; (800139c <Uart_write+0x70>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001366:	6879      	ldr	r1, [r7, #4]
 8001368:	b2c9      	uxtb	r1, r1
 800136a:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <Uart_write+0x70>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <Uart_write+0x74>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68da      	ldr	r2, [r3, #12]
 800137c:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <Uart_write+0x74>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001384:	60da      	str	r2, [r3, #12]
		return 0;
 8001386:	2300      	movs	r3, #0
 8001388:	e001      	b.n	800138e <Uart_write+0x62>
	}
	return -1;
 800138a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800138e:	4618      	mov	r0, r3
 8001390:	3714      	adds	r7, #20
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	2000144c 	.word	0x2000144c
 80013a0:	20001454 	.word	0x20001454

080013a4 <IsDataAvailable>:

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 80013a8:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <IsDataAvailable+0x30>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <IsDataAvailable+0x30>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	b29b      	uxth	r3, r3
 80013c0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	20001450 	.word	0x20001450

080013d8 <Uart_sendstring>:

/* sends the string to the uart
 */
void Uart_sendstring (const char *s)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 80013e0:	e006      	b.n	80013f0 <Uart_sendstring+0x18>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	1c5a      	adds	r2, r3, #1
 80013e6:	607a      	str	r2, [r7, #4]
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff ff9e 	bl	800132c <Uart_write>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1f4      	bne.n	80013e2 <Uart_sendstring+0xa>
}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <Uart_flush>:
		indx++;
	}
}

void Uart_flush (void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	memset(_rx_buffer->buffer,'\0', UART_BUFFER_SIZE);
 8001408:	4b09      	ldr	r3, [pc, #36]	; (8001430 <Uart_flush+0x2c>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001410:	2100      	movs	r1, #0
 8001412:	4618      	mov	r0, r3
 8001414:	f00c fa50 	bl	800d8b8 <memset>
	_rx_buffer->head = 0;
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <Uart_flush+0x2c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2200      	movs	r2, #0
 800141e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	_rx_buffer->tail = 0;
 8001422:	4b03      	ldr	r3, [pc, #12]	; (8001430 <Uart_flush+0x2c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2200      	movs	r2, #0
 8001428:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20001450 	.word	0x20001450

08001434 <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	68db      	ldr	r3, [r3, #12]
 800144a:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	f003 0320 	and.w	r3, r3, #32
 8001452:	2b00      	cmp	r3, #0
 8001454:	d013      	beq.n	800147e <Uart_isr+0x4a>
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	f003 0320 	and.w	r3, r3, #32
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00e      	beq.n	800147e <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 800146e:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <Uart_isr+0xb4>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	4611      	mov	r1, r2
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff ff08 	bl	800128c <store_char>
        return;
 800147c:	e031      	b.n	80014e2 <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001484:	2b00      	cmp	r3, #0
 8001486:	d02c      	beq.n	80014e2 <Uart_isr+0xae>
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800148e:	2b00      	cmp	r3, #0
 8001490:	d027      	beq.n	80014e2 <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 8001492:	4b16      	ldr	r3, [pc, #88]	; (80014ec <Uart_isr+0xb8>)
 8001494:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001498:	4b14      	ldr	r3, [pc, #80]	; (80014ec <Uart_isr+0xb8>)
 800149a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800149e:	429a      	cmp	r2, r3
 80014a0:	d108      	bne.n	80014b4 <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	68da      	ldr	r2, [r3, #12]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014b0:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80014b2:	e015      	b.n	80014e0 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80014b4:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <Uart_isr+0xb8>)
 80014b6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80014ba:	4a0c      	ldr	r2, [pc, #48]	; (80014ec <Uart_isr+0xb8>)
 80014bc:	5cd3      	ldrb	r3, [r2, r3]
 80014be:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80014c0:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <Uart_isr+0xb8>)
 80014c2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80014c6:	3301      	adds	r3, #1
 80014c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014cc:	4a07      	ldr	r2, [pc, #28]	; (80014ec <Uart_isr+0xb8>)
 80014ce:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	7bba      	ldrb	r2, [r7, #14]
 80014de:	605a      	str	r2, [r3, #4]
    	return;
 80014e0:	bf00      	nop
    }
}
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20001450 	.word	0x20001450
 80014ec:	2000043c 	.word	0x2000043c

080014f0 <Ringbuf_init2>:

void store_char2(unsigned char c, ring_buffer2 *buffer2);


void Ringbuf_init2(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  _rx_buffer2 = &rx_buffer2;
 80014f4:	4b0d      	ldr	r3, [pc, #52]	; (800152c <Ringbuf_init2+0x3c>)
 80014f6:	4a0e      	ldr	r2, [pc, #56]	; (8001530 <Ringbuf_init2+0x40>)
 80014f8:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 80014fa:	4b0e      	ldr	r3, [pc, #56]	; (8001534 <Ringbuf_init2+0x44>)
 80014fc:	4a0e      	ldr	r2, [pc, #56]	; (8001538 <Ringbuf_init2+0x48>)
 80014fe:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart2, UART_IT_ERR);
 8001500:	4b0e      	ldr	r3, [pc, #56]	; (800153c <Ringbuf_init2+0x4c>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	695a      	ldr	r2, [r3, #20]
 8001506:	4b0d      	ldr	r3, [pc, #52]	; (800153c <Ringbuf_init2+0x4c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0201 	orr.w	r2, r2, #1
 800150e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart2, UART_IT_RXNE);
 8001510:	4b0a      	ldr	r3, [pc, #40]	; (800153c <Ringbuf_init2+0x4c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68da      	ldr	r2, [r3, #12]
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <Ringbuf_init2+0x4c>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f042 0220 	orr.w	r2, r2, #32
 800151e:	60da      	str	r2, [r3, #12]
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	200014e8 	.word	0x200014e8
 8001530:	20000644 	.word	0x20000644
 8001534:	2000149c 	.word	0x2000149c
 8001538:	20000a4c 	.word	0x20000a4c
 800153c:	200014a4 	.word	0x200014a4

08001540 <store_char2>:

void store_char2(unsigned char c, ring_buffer2 *buffer2)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	4603      	mov	r3, r0
 8001548:	6039      	str	r1, [r7, #0]
 800154a:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer2->head2 + 1) % UART_BUFFER_SIZE2;
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001552:	3301      	adds	r3, #1
 8001554:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001558:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer2->tail2) {
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	429a      	cmp	r2, r3
 8001564:	d009      	beq.n	800157a <store_char2+0x3a>
    buffer2->buffer2[buffer2->head2] = c;
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	79f9      	ldrb	r1, [r7, #7]
 8001570:	54d1      	strb	r1, [r2, r3]
    buffer2->head2 = i;
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
  }
}
 800157a:	bf00      	nop
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <Uart_read2>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read2(void)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer2->head2 == _rx_buffer2->tail2)
 800158e:	4b13      	ldr	r3, [pc, #76]	; (80015dc <Uart_read2+0x54>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8001596:	4b11      	ldr	r3, [pc, #68]	; (80015dc <Uart_read2+0x54>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800159e:	429a      	cmp	r2, r3
 80015a0:	d102      	bne.n	80015a8 <Uart_read2+0x20>
  {
    return -1;
 80015a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015a6:	e013      	b.n	80015d0 <Uart_read2+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer2->buffer2[_rx_buffer2->tail2];
 80015a8:	4b0c      	ldr	r3, [pc, #48]	; (80015dc <Uart_read2+0x54>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <Uart_read2+0x54>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80015b4:	5cd3      	ldrb	r3, [r2, r3]
 80015b6:	71fb      	strb	r3, [r7, #7]
    _rx_buffer2->tail2 = (unsigned int)(_rx_buffer2->tail2 + 1) % UART_BUFFER_SIZE2;
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <Uart_read2+0x54>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80015c0:	1c5a      	adds	r2, r3, #1
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <Uart_read2+0x54>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80015ca:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
    return c;
 80015ce:	79fb      	ldrb	r3, [r7, #7]
  }
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	200014e8 	.word	0x200014e8

080015e0 <Uart_write2>:

/* writes a single character to the uart and increments head
 */
int Uart_write2(int c)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	if (c>=0)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	db27      	blt.n	800163e <Uart_write2+0x5e>
	{
		int i = (_tx_buffer2->head2 + 1) % UART_BUFFER_SIZE2;
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <Uart_write2+0x70>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80015f6:	3301      	adds	r3, #1
 80015f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015fc:	60fb      	str	r3, [r7, #12]
		while (i == _tx_buffer2->tail2);
 80015fe:	bf00      	nop
 8001600:	4b13      	ldr	r3, [pc, #76]	; (8001650 <Uart_write2+0x70>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	429a      	cmp	r2, r3
 800160c:	d0f8      	beq.n	8001600 <Uart_write2+0x20>

		_tx_buffer2->buffer2[_tx_buffer2->head2] = (uint8_t)c;
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <Uart_write2+0x70>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <Uart_write2+0x70>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	b2c9      	uxtb	r1, r1
 800161e:	54d1      	strb	r1, [r2, r3]
		_tx_buffer2->head2 = i;
 8001620:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <Uart_write2+0x70>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

		__HAL_UART_ENABLE_IT(uart2, UART_IT_TXE); // Enable UART transmission interrupt
 800162a:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <Uart_write2+0x74>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	68da      	ldr	r2, [r3, #12]
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <Uart_write2+0x74>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001638:	60da      	str	r2, [r3, #12]
		return 0;
 800163a:	2300      	movs	r3, #0
 800163c:	e001      	b.n	8001642 <Uart_write2+0x62>
	}
	return -1;
 800163e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001642:	4618      	mov	r0, r3
 8001644:	3714      	adds	r7, #20
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	2000149c 	.word	0x2000149c
 8001654:	200014a4 	.word	0x200014a4

08001658 <IsDataAvailable2>:

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable2(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE2 + _rx_buffer2->head2 - _rx_buffer2->tail2) % UART_BUFFER_SIZE2;
 800165c:	4b0a      	ldr	r3, [pc, #40]	; (8001688 <IsDataAvailable2+0x30>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001664:	b29a      	uxth	r2, r3
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <IsDataAvailable2+0x30>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800166e:	b29b      	uxth	r3, r3
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	b29b      	uxth	r3, r3
 8001674:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001678:	b29b      	uxth	r3, r3
 800167a:	f3c3 0309 	ubfx	r3, r3, #0, #10
}
 800167e:	4618      	mov	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	200014e8 	.word	0x200014e8

0800168c <Uart_sendstring2>:

/* sends the string to the uart
 */
void Uart_sendstring2 (const char *s)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write2(*s++);
 8001694:	e006      	b.n	80016a4 <Uart_sendstring2+0x18>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	1c5a      	adds	r2, r3, #1
 800169a:	607a      	str	r2, [r7, #4]
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff ff9e 	bl	80015e0 <Uart_write2>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1f4      	bne.n	8001696 <Uart_sendstring2+0xa>
}
 80016ac:	bf00      	nop
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <Uart_flush2>:
		indx++;
	}
}

void Uart_flush2 (void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	memset(_rx_buffer2->buffer2,'\0', UART_BUFFER_SIZE2);
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <Uart_flush2+0x2c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016c4:	2100      	movs	r1, #0
 80016c6:	4618      	mov	r0, r3
 80016c8:	f00c f8f6 	bl	800d8b8 <memset>
	_rx_buffer2->head2 = 0;
 80016cc:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <Uart_flush2+0x2c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	_rx_buffer2->tail2 = 0;
 80016d6:	4b03      	ldr	r3, [pc, #12]	; (80016e4 <Uart_flush2+0x2c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	2200      	movs	r2, #0
 80016dc:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
}
 80016e0:	bf00      	nop
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	200014e8 	.word	0x200014e8

080016e8 <Uart_isr2>:




void Uart_isr2 (UART_HandleTypeDef *huart)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	f003 0320 	and.w	r3, r3, #32
 8001706:	2b00      	cmp	r3, #0
 8001708:	d013      	beq.n	8001732 <Uart_isr2+0x4a>
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	f003 0320 	and.w	r3, r3, #32
 8001710:	2b00      	cmp	r3, #0
 8001712:	d00e      	beq.n	8001732 <Uart_isr2+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	73fb      	strb	r3, [r7, #15]
        store_char2 (c, _rx_buffer2);  // store data in buffer
 8001722:	4b1e      	ldr	r3, [pc, #120]	; (800179c <Uart_isr2+0xb4>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	4611      	mov	r1, r2
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff ff08 	bl	8001540 <store_char2>
        return;
 8001730:	e031      	b.n	8001796 <Uart_isr2+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001738:	2b00      	cmp	r3, #0
 800173a:	d02c      	beq.n	8001796 <Uart_isr2+0xae>
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001742:	2b00      	cmp	r3, #0
 8001744:	d027      	beq.n	8001796 <Uart_isr2+0xae>
    {
    	if(tx_buffer2.head2 == tx_buffer2.tail2)
 8001746:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <Uart_isr2+0xb8>)
 8001748:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 800174c:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <Uart_isr2+0xb8>)
 800174e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8001752:	429a      	cmp	r2, r3
 8001754:	d108      	bne.n	8001768 <Uart_isr2+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	68da      	ldr	r2, [r3, #12]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001764:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 8001766:	e015      	b.n	8001794 <Uart_isr2+0xac>
    	      unsigned char c = tx_buffer2.buffer2[tx_buffer2.tail2];
 8001768:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <Uart_isr2+0xb8>)
 800176a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800176e:	4a0c      	ldr	r2, [pc, #48]	; (80017a0 <Uart_isr2+0xb8>)
 8001770:	5cd3      	ldrb	r3, [r2, r3]
 8001772:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer2.tail2 = (tx_buffer2.tail2 + 1) % UART_BUFFER_SIZE2;
 8001774:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <Uart_isr2+0xb8>)
 8001776:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800177a:	3301      	adds	r3, #1
 800177c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001780:	4a07      	ldr	r2, [pc, #28]	; (80017a0 <Uart_isr2+0xb8>)
 8001782:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
    	      huart->Instance->SR;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	7bba      	ldrb	r2, [r7, #14]
 8001792:	605a      	str	r2, [r3, #4]
    	return;
 8001794:	bf00      	nop
    }
}
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	200014e8 	.word	0x200014e8
 80017a0:	20000a4c 	.word	0x20000a4c

080017a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	607b      	str	r3, [r7, #4]
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <MX_DMA_Init+0x4c>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a0f      	ldr	r2, [pc, #60]	; (80017f0 <MX_DMA_Init+0x4c>)
 80017b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b0d      	ldr	r3, [pc, #52]	; (80017f0 <MX_DMA_Init+0x4c>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2100      	movs	r1, #0
 80017ca:	203b      	movs	r0, #59	; 0x3b
 80017cc:	f005 f941 	bl	8006a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80017d0:	203b      	movs	r0, #59	; 0x3b
 80017d2:	f005 f95a 	bl	8006a8a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2100      	movs	r1, #0
 80017da:	2045      	movs	r0, #69	; 0x45
 80017dc:	f005 f939 	bl	8006a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80017e0:	2045      	movs	r0, #69	; 0x45
 80017e2:	f005 f952 	bl	8006a8a <HAL_NVIC_EnableIRQ>

}
 80017e6:	bf00      	nop
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40023800 	.word	0x40023800

080017f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08a      	sub	sp, #40	; 0x28
 80017f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	4b2d      	ldr	r3, [pc, #180]	; (80018c4 <MX_GPIO_Init+0xd0>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a2c      	ldr	r2, [pc, #176]	; (80018c4 <MX_GPIO_Init+0xd0>)
 8001814:	f043 0304 	orr.w	r3, r3, #4
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b2a      	ldr	r3, [pc, #168]	; (80018c4 <MX_GPIO_Init+0xd0>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0304 	and.w	r3, r3, #4
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	4b26      	ldr	r3, [pc, #152]	; (80018c4 <MX_GPIO_Init+0xd0>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a25      	ldr	r2, [pc, #148]	; (80018c4 <MX_GPIO_Init+0xd0>)
 8001830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b23      	ldr	r3, [pc, #140]	; (80018c4 <MX_GPIO_Init+0xd0>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <MX_GPIO_Init+0xd0>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a1e      	ldr	r2, [pc, #120]	; (80018c4 <MX_GPIO_Init+0xd0>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b1c      	ldr	r3, [pc, #112]	; (80018c4 <MX_GPIO_Init+0xd0>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	4b18      	ldr	r3, [pc, #96]	; (80018c4 <MX_GPIO_Init+0xd0>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a17      	ldr	r2, [pc, #92]	; (80018c4 <MX_GPIO_Init+0xd0>)
 8001868:	f043 0302 	orr.w	r3, r3, #2
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b15      	ldr	r3, [pc, #84]	; (80018c4 <MX_GPIO_Init+0xd0>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800187a:	2200      	movs	r2, #0
 800187c:	2120      	movs	r1, #32
 800187e:	4812      	ldr	r0, [pc, #72]	; (80018c8 <MX_GPIO_Init+0xd4>)
 8001880:	f005 fe40 	bl	8007504 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800188a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800188e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001894:	f107 0314 	add.w	r3, r7, #20
 8001898:	4619      	mov	r1, r3
 800189a:	480c      	ldr	r0, [pc, #48]	; (80018cc <MX_GPIO_Init+0xd8>)
 800189c:	f005 fcae 	bl	80071fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80018a0:	2320      	movs	r3, #32
 80018a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a4:	2301      	movs	r3, #1
 80018a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a8:	2300      	movs	r3, #0
 80018aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ac:	2300      	movs	r3, #0
 80018ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018b0:	f107 0314 	add.w	r3, r7, #20
 80018b4:	4619      	mov	r1, r3
 80018b6:	4804      	ldr	r0, [pc, #16]	; (80018c8 <MX_GPIO_Init+0xd4>)
 80018b8:	f005 fca0 	bl	80071fc <HAL_GPIO_Init>

}
 80018bc:	bf00      	nop
 80018be:	3728      	adds	r7, #40	; 0x28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40020000 	.word	0x40020000
 80018cc:	40020800 	.word	0x40020800

080018d0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80018d4:	f3bf 8f4f 	dsb	sy
}
 80018d8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <__NVIC_SystemReset+0x24>)
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80018e2:	4904      	ldr	r1, [pc, #16]	; (80018f4 <__NVIC_SystemReset+0x24>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80018e4:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <__NVIC_SystemReset+0x28>)
 80018e6:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80018e8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80018ea:	f3bf 8f4f 	dsb	sy
}
 80018ee:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80018f0:	bf00      	nop
 80018f2:	e7fd      	b.n	80018f0 <__NVIC_SystemReset+0x20>
 80018f4:	e000ed00 	.word	0xe000ed00
 80018f8:	05fa0004 	.word	0x05fa0004

080018fc <_ZSt5isnanf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isnan(float __x)
  { return __builtin_isnan(__x); }
 80018fc:	b480      	push	{r7}
 80018fe:	b083      	sub	sp, #12
 8001900:	af00      	add	r7, sp, #0
 8001902:	ed87 0a01 	vstr	s0, [r7, #4]
 8001906:	ed97 7a01 	vldr	s14, [r7, #4]
 800190a:	edd7 7a01 	vldr	s15, [r7, #4]
 800190e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001916:	bf6c      	ite	vs
 8001918:	2301      	movvs	r3, #1
 800191a:	2300      	movvc	r3, #0
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b00      	cmp	r3, #0
 8001920:	bf14      	ite	ne
 8001922:	2301      	movne	r3, #1
 8001924:	2300      	moveq	r3, #0
 8001926:	b2db      	uxtb	r3, r3
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <_ZN7STN1110C1Ev>:
const int8_t ELM_GENERAL_ERROR     = -1;




class STN1110
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	711a      	strb	r2, [r3, #4]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	22ff      	movs	r2, #255	; 0xff
 8001946:	739a      	strb	r2, [r3, #14]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	3326      	adds	r3, #38	; 0x26
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	f8c3 2003 	str.w	r2, [r3, #3]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4618      	mov	r0, r3
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800196c:	b5b0      	push	{r4, r5, r7, lr}
 800196e:	b0a6      	sub	sp, #152	; 0x98
 8001970:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001972:	f004 fefd 	bl	8006770 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001976:	f000 fda3 	bl	80024c0 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800197a:	f7ff ff3b 	bl	80017f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800197e:	f004 fdb7 	bl	80064f0 <MX_USART2_UART_Init>
  MX_SDIO_SD_Init();
 8001982:	f003 f8cb 	bl	8004b1c <MX_SDIO_SD_Init>
  MX_USART6_UART_Init();
 8001986:	f004 fddd 	bl	8006544 <MX_USART6_UART_Init>
  MX_FATFS_Init();
 800198a:	f008 fe01 	bl	800a590 <MX_FATFS_Init>
  MX_DMA_Init();
 800198e:	f7ff ff09 	bl	80017a4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001992:	f004 fd83 	bl	800649c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  Ringbuf_init();
 8001996:	f7ff fc51 	bl	800123c <Ringbuf_init>
  Ringbuf_init2();
 800199a:	f7ff fda9 	bl	80014f0 <Ringbuf_init2>

  /////////////////////////////////////////////MPU6050//////////////////////////////////////////////////////////

 ///////////////////////////////////////////SDIO/////////////////////////////////////////////////////////////

    	    if(f_mount(&myFatFS, SDPath, 1) == FR_OK)
 800199e:	2201      	movs	r2, #1
 80019a0:	49bb      	ldr	r1, [pc, #748]	; (8001c90 <main+0x324>)
 80019a2:	48bc      	ldr	r0, [pc, #752]	; (8001c94 <main+0x328>)
 80019a4:	f00a fd78 	bl	800c498 <f_mount>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	bf0c      	ite	eq
 80019ae:	2301      	moveq	r3, #1
 80019b0:	2300      	movne	r3, #0
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 80eb 	beq.w	8001b90 <main+0x224>
    	     {
    	   	  printf("SD Mount 'Success'\r\n");
 80019ba:	48b7      	ldr	r0, [pc, #732]	; (8001c98 <main+0x32c>)
 80019bc:	f00c ff2e 	bl	800e81c <puts>
    	   	  fr = f_getfree("", &fre_clust, &fs);
 80019c0:	4ab6      	ldr	r2, [pc, #728]	; (8001c9c <main+0x330>)
 80019c2:	49b7      	ldr	r1, [pc, #732]	; (8001ca0 <main+0x334>)
 80019c4:	48b7      	ldr	r0, [pc, #732]	; (8001ca4 <main+0x338>)
 80019c6:	f00b fb91 	bl	800d0ec <f_getfree>
 80019ca:	4603      	mov	r3, r0
 80019cc:	461a      	mov	r2, r3
 80019ce:	4bb6      	ldr	r3, [pc, #728]	; (8001ca8 <main+0x33c>)
 80019d0:	701a      	strb	r2, [r3, #0]
    	   	    /* Get total sectors and free sectors */
    	   	    tot_sect = (fs->n_fatent - 2) * fs->csize;
 80019d2:	4bb2      	ldr	r3, [pc, #712]	; (8001c9c <main+0x330>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	3b02      	subs	r3, #2
 80019da:	4ab0      	ldr	r2, [pc, #704]	; (8001c9c <main+0x330>)
 80019dc:	6812      	ldr	r2, [r2, #0]
 80019de:	8952      	ldrh	r2, [r2, #10]
 80019e0:	fb02 f303 	mul.w	r3, r2, r3
 80019e4:	4ab1      	ldr	r2, [pc, #708]	; (8001cac <main+0x340>)
 80019e6:	6013      	str	r3, [r2, #0]
    	   	    fre_sect = fre_clust * fs->csize;
 80019e8:	4bac      	ldr	r3, [pc, #688]	; (8001c9c <main+0x330>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	895b      	ldrh	r3, [r3, #10]
 80019ee:	461a      	mov	r2, r3
 80019f0:	4bab      	ldr	r3, [pc, #684]	; (8001ca0 <main+0x334>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	fb03 f302 	mul.w	r3, r3, r2
 80019f8:	4aad      	ldr	r2, [pc, #692]	; (8001cb0 <main+0x344>)
 80019fa:	6013      	str	r3, [r2, #0]
    	   	    /* Print the free space (assuming 512 bytes/sector) */
    	   	    printf("SD card stauts : %lu MB total drive space.\r\n", (tot_sect / 2)/997);
 80019fc:	4bab      	ldr	r3, [pc, #684]	; (8001cac <main+0x340>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	085b      	lsrs	r3, r3, #1
 8001a02:	4aac      	ldr	r2, [pc, #688]	; (8001cb4 <main+0x348>)
 8001a04:	fba2 2303 	umull	r2, r3, r2, r3
 8001a08:	0a5b      	lsrs	r3, r3, #9
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	48aa      	ldr	r0, [pc, #680]	; (8001cb8 <main+0x34c>)
 8001a0e:	f00c fe7f 	bl	800e710 <iprintf>
    	   	    printf("Remaining space : %lu MB available.\r\n", (fre_sect / 2)/997);
 8001a12:	4ba7      	ldr	r3, [pc, #668]	; (8001cb0 <main+0x344>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	085b      	lsrs	r3, r3, #1
 8001a18:	4aa6      	ldr	r2, [pc, #664]	; (8001cb4 <main+0x348>)
 8001a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1e:	0a5b      	lsrs	r3, r3, #9
 8001a20:	4619      	mov	r1, r3
 8001a22:	48a6      	ldr	r0, [pc, #664]	; (8001cbc <main+0x350>)
 8001a24:	f00c fe74 	bl	800e710 <iprintf>
    	   //	    if (((fre_sect/2)/997) < 10)
    	   //	    {
    	   //			?��?�� �?족시 ?��?��?��?�� 루틴 만들�?
    	   //	    }

    	   	  for (unsigned int k = 0; k < 100000; k++)
 8001a28:	2300      	movs	r3, #0
 8001a2a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001a2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a32:	4aa3      	ldr	r2, [pc, #652]	; (8001cc0 <main+0x354>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d869      	bhi.n	8001b0c <main+0x1a0>
    	   	  {
    	   		Filename[3] = k / 10000 + '0'; //만자�?
 8001a38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001a3c:	4aa1      	ldr	r2, [pc, #644]	; (8001cc4 <main+0x358>)
 8001a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a42:	0b5b      	lsrs	r3, r3, #13
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	3330      	adds	r3, #48	; 0x30
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	4b9f      	ldr	r3, [pc, #636]	; (8001cc8 <main+0x35c>)
 8001a4c:	70da      	strb	r2, [r3, #3]
    	   		Filename[4] = ((k % 10000) / 1000) + '0';//천자�?
 8001a4e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001a52:	4b9c      	ldr	r3, [pc, #624]	; (8001cc4 <main+0x358>)
 8001a54:	fba3 1302 	umull	r1, r3, r3, r2
 8001a58:	0b5b      	lsrs	r3, r3, #13
 8001a5a:	f242 7110 	movw	r1, #10000	; 0x2710
 8001a5e:	fb01 f303 	mul.w	r3, r1, r3
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	4a99      	ldr	r2, [pc, #612]	; (8001ccc <main+0x360>)
 8001a66:	fba2 2303 	umull	r2, r3, r2, r3
 8001a6a:	099b      	lsrs	r3, r3, #6
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	3330      	adds	r3, #48	; 0x30
 8001a70:	b2da      	uxtb	r2, r3
 8001a72:	4b95      	ldr	r3, [pc, #596]	; (8001cc8 <main+0x35c>)
 8001a74:	711a      	strb	r2, [r3, #4]
    	   		Filename[5] = ((k % 1000) / 100) + '0';//백자�?
 8001a76:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001a7a:	4b94      	ldr	r3, [pc, #592]	; (8001ccc <main+0x360>)
 8001a7c:	fba3 1302 	umull	r1, r3, r3, r2
 8001a80:	099b      	lsrs	r3, r3, #6
 8001a82:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001a86:	fb01 f303 	mul.w	r3, r1, r3
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	4a90      	ldr	r2, [pc, #576]	; (8001cd0 <main+0x364>)
 8001a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a92:	095b      	lsrs	r3, r3, #5
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	3330      	adds	r3, #48	; 0x30
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	4b8b      	ldr	r3, [pc, #556]	; (8001cc8 <main+0x35c>)
 8001a9c:	715a      	strb	r2, [r3, #5]
    	   		Filename[6] = ((k % 100) / 10) + '0'; //?��?���?
 8001a9e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001aa2:	4b8b      	ldr	r3, [pc, #556]	; (8001cd0 <main+0x364>)
 8001aa4:	fba3 1302 	umull	r1, r3, r3, r2
 8001aa8:	095b      	lsrs	r3, r3, #5
 8001aaa:	2164      	movs	r1, #100	; 0x64
 8001aac:	fb01 f303 	mul.w	r3, r1, r3
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	4a88      	ldr	r2, [pc, #544]	; (8001cd4 <main+0x368>)
 8001ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab8:	08db      	lsrs	r3, r3, #3
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	3330      	adds	r3, #48	; 0x30
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	4b81      	ldr	r3, [pc, #516]	; (8001cc8 <main+0x35c>)
 8001ac2:	719a      	strb	r2, [r3, #6]
    	   		Filename[7] = k % 10 + '0'; //?��?���?
 8001ac4:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8001ac8:	4b82      	ldr	r3, [pc, #520]	; (8001cd4 <main+0x368>)
 8001aca:	fba3 2301 	umull	r2, r3, r3, r1
 8001ace:	08da      	lsrs	r2, r3, #3
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	4413      	add	r3, r2
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	1aca      	subs	r2, r1, r3
 8001ada:	b2d3      	uxtb	r3, r2
 8001adc:	3330      	adds	r3, #48	; 0x30
 8001ade:	b2da      	uxtb	r2, r3
 8001ae0:	4b79      	ldr	r3, [pc, #484]	; (8001cc8 <main+0x35c>)
 8001ae2:	71da      	strb	r2, [r3, #7]
    	   		fr = f_open(&myFile, Filename, FA_WRITE | FA_CREATE_NEW);
 8001ae4:	2206      	movs	r2, #6
 8001ae6:	4978      	ldr	r1, [pc, #480]	; (8001cc8 <main+0x35c>)
 8001ae8:	487b      	ldr	r0, [pc, #492]	; (8001cd8 <main+0x36c>)
 8001aea:	f00a fd1b 	bl	800c524 <f_open>
 8001aee:	4603      	mov	r3, r0
 8001af0:	461a      	mov	r2, r3
 8001af2:	4b6d      	ldr	r3, [pc, #436]	; (8001ca8 <main+0x33c>)
 8001af4:	701a      	strb	r2, [r3, #0]
    	   		if (fr == FR_OK)
 8001af6:	4b6c      	ldr	r3, [pc, #432]	; (8001ca8 <main+0x33c>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d005      	beq.n	8001b0a <main+0x19e>
    	   	  for (unsigned int k = 0; k < 100000; k++)
 8001afe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001b02:	3301      	adds	r3, #1
 8001b04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001b08:	e791      	b.n	8001a2e <main+0xc2>
    	   		{
    	   			break;
 8001b0a:	bf00      	nop
    	   		}
    	   	  }
    	   	  printf("Logging to : ");
 8001b0c:	4873      	ldr	r0, [pc, #460]	; (8001cdc <main+0x370>)
 8001b0e:	f00c fdff 	bl	800e710 <iprintf>
    	   	  printf("%s\r\n", Filename);
 8001b12:	496d      	ldr	r1, [pc, #436]	; (8001cc8 <main+0x35c>)
 8001b14:	4872      	ldr	r0, [pc, #456]	; (8001ce0 <main+0x374>)
 8001b16:	f00c fdfb 	bl	800e710 <iprintf>
    	   	  f_printf(&myFile, "%s", "First Boot");
 8001b1a:	4a72      	ldr	r2, [pc, #456]	; (8001ce4 <main+0x378>)
 8001b1c:	4972      	ldr	r1, [pc, #456]	; (8001ce8 <main+0x37c>)
 8001b1e:	486e      	ldr	r0, [pc, #440]	; (8001cd8 <main+0x36c>)
 8001b20:	f00b fc10 	bl	800d344 <f_printf>
    	   	  f_printf(&myFile, "%s", "\n");
 8001b24:	4a71      	ldr	r2, [pc, #452]	; (8001cec <main+0x380>)
 8001b26:	4970      	ldr	r1, [pc, #448]	; (8001ce8 <main+0x37c>)
 8001b28:	486b      	ldr	r0, [pc, #428]	; (8001cd8 <main+0x36c>)
 8001b2a:	f00b fc0b 	bl	800d344 <f_printf>
    	   	  f_printf(&myFile, "%s", "Time,ELM327_Status,RunTime,Rpm,Kph,EngineLoad,throttle,InstantFuelConsume,counter_AccelYp,counter_Fuel,counter_Rpm,efficiencyScore,counter_AccelX,counter_AccelYm,AccelYm2,counter_Time,counter_KphRpm,safetyScore,drivingScore,averagedrivingScore,f_pitch,f_roll,f_accelX,f_accelY");
 8001b2e:	4a70      	ldr	r2, [pc, #448]	; (8001cf0 <main+0x384>)
 8001b30:	496d      	ldr	r1, [pc, #436]	; (8001ce8 <main+0x37c>)
 8001b32:	4869      	ldr	r0, [pc, #420]	; (8001cd8 <main+0x36c>)
 8001b34:	f00b fc06 	bl	800d344 <f_printf>
    	   	  f_printf(&myFile, "%s", "\n");
 8001b38:	4a6c      	ldr	r2, [pc, #432]	; (8001cec <main+0x380>)
 8001b3a:	496b      	ldr	r1, [pc, #428]	; (8001ce8 <main+0x37c>)
 8001b3c:	4866      	ldr	r0, [pc, #408]	; (8001cd8 <main+0x36c>)
 8001b3e:	f00b fc01 	bl	800d344 <f_printf>
    	   	  f_close(&myFile);
 8001b42:	4865      	ldr	r0, [pc, #404]	; (8001cd8 <main+0x36c>)
 8001b44:	f00b f89f 	bl	800cc86 <f_close>
    	  /////////////////////////////////////////////SDIO/////////////////////////////////////////////////////////////


  /////////////////////////////////////////////stn1110//////////////////////////////////////////////////////////

    if (!stn.begin(&huart6, false, 2000))
 8001b48:	2300      	movs	r3, #0
 8001b4a:	757b      	strb	r3, [r7, #21]
 8001b4c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001b50:	82fb      	strh	r3, [r7, #22]
	byte responseByte_7;

	


	bool begin(UART_HandleTypeDef *STN_PORT, const bool& debug = false, const uint16_t& timeout = 5000, const char& protocol = '0', const uint16_t& payloadLen = 200, const byte& dataTimeout = 0);
 8001b52:	2330      	movs	r3, #48	; 0x30
 8001b54:	767b      	strb	r3, [r7, #25]
 8001b56:	23c8      	movs	r3, #200	; 0xc8
 8001b58:	837b      	strh	r3, [r7, #26]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	777b      	strb	r3, [r7, #29]
 8001b5e:	f107 0116 	add.w	r1, r7, #22
 8001b62:	f107 0215 	add.w	r2, r7, #21
 8001b66:	f107 031d 	add.w	r3, r7, #29
 8001b6a:	9302      	str	r3, [sp, #8]
 8001b6c:	f107 031a 	add.w	r3, r7, #26
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	f107 0319 	add.w	r3, r7, #25
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	495e      	ldr	r1, [pc, #376]	; (8001cf4 <main+0x388>)
 8001b7c:	485e      	ldr	r0, [pc, #376]	; (8001cf8 <main+0x38c>)
 8001b7e:	f003 f983 	bl	8004e88 <_ZN7STN11105beginEP20__UART_HandleTypeDefRKbRKtRKcS5_RKa>
 8001b82:	4603      	mov	r3, r0
 8001b84:	f083 0301 	eor.w	r3, r3, #1
 8001b88:	b2db      	uxtb	r3, r3
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d009      	beq.n	8001ba2 <main+0x236>
 8001b8e:	e004      	b.n	8001b9a <main+0x22e>
    	     else { printf("SD Mount 'Failed'\r\n"); NVIC_SystemReset(); }
 8001b90:	485a      	ldr	r0, [pc, #360]	; (8001cfc <main+0x390>)
 8001b92:	f00c fe43 	bl	800e81c <puts>
 8001b96:	f7ff fe9b 	bl	80018d0 <__NVIC_SystemReset>
    	{
    		printf("Couldn't connect to STN1110");
 8001b9a:	4859      	ldr	r0, [pc, #356]	; (8001d00 <main+0x394>)
 8001b9c:	f00c fdb8 	bl	800e710 <iprintf>
    		while(1);
 8001ba0:	e7fe      	b.n	8001ba0 <main+0x234>
    	}
    else printf("Connected to STN1110\r\n");
 8001ba2:	4858      	ldr	r0, [pc, #352]	; (8001d04 <main+0x398>)
 8001ba4:	f00c fe3a 	bl	800e81c <puts>

	uint8_t Uart6_counter = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
	uint16_t Uart6_PAYLOAD_LEN;
	char* Uart6_payload;
	bool Uart6_debugMode = false;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
	const uint16_t& Uart6_payloadLen = 40;
 8001bb4:	2328      	movs	r3, #40	; 0x28
 8001bb6:	83fb      	strh	r3, [r7, #30]
 8001bb8:	f107 031e 	add.w	r3, r7, #30
 8001bbc:	67fb      	str	r3, [r7, #124]	; 0x7c
	Uart6_PAYLOAD_LEN = Uart6_payloadLen;
 8001bbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001bc0:	881b      	ldrh	r3, [r3, #0]
 8001bc2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
	Uart6_payload = (char*)malloc(Uart6_PAYLOAD_LEN + 1);
 8001bc6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8001bca:	3301      	adds	r3, #1
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f00b fe6b 	bl	800d8a8 <malloc>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	677b      	str	r3, [r7, #116]	; 0x74
  /* USER CODE BEGIN WHILE */
  while (1)
  {
/////////////////////////////////////////////mpu6050//////////////////////////////////////////////////////////
		// clear payload buffer
		memset(Uart6_payload, '\0', Uart6_PAYLOAD_LEN + 1);
 8001bd6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8001bda:	3301      	adds	r3, #1
 8001bdc:	461a      	mov	r2, r3
 8001bde:	2100      	movs	r1, #0
 8001be0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8001be2:	f00b fe69 	bl	800d8b8 <memset>
		Uart6_counter = 0;
 8001be6:	2300      	movs	r3, #0
 8001be8:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		flushInputBuff();
 8001bec:	f002 ff5c 	bl	8004aa8 <_Z14flushInputBuffv>
		Uart_flush();
 8001bf0:	f7ff fc08 	bl	8001404 <Uart_flush>

//		uint8_t str[] = "at+qd\r\n";
//		HAL_UART_Transmit(&huart1, (uint8_t*)str, 8, 1000); //uart번호, 출력할 문자열, 문자 개수, timeout

		Uart_sendstring("at+qd\r\n");
 8001bf4:	4844      	ldr	r0, [pc, #272]	; (8001d08 <main+0x39c>)
 8001bf6:	f7ff fbef 	bl	80013d8 <Uart_sendstring>

		// prime the timeout timer
		Uart6_previousTime = millis();
 8001bfa:	f004 fe1f 	bl	800683c <HAL_GetTick>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	4a42      	ldr	r2, [pc, #264]	; (8001d0c <main+0x3a0>)
 8001c02:	6013      	str	r3, [r2, #0]
		Uart6_currentTime  = Uart6_previousTime;
 8001c04:	4b41      	ldr	r3, [pc, #260]	; (8001d0c <main+0x3a0>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a41      	ldr	r2, [pc, #260]	; (8001d10 <main+0x3a4>)
 8001c0a:	6013      	str	r3, [r2, #0]

		while ((Uart6_counter < Uart6_PAYLOAD_LEN) && !Uart6_timeout())
 8001c0c:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 8001c10:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8001c14:	429a      	cmp	r2, r3
 8001c16:	da09      	bge.n	8001c2c <main+0x2c0>
 8001c18:	f002 ff2e 	bl	8004a78 <_Z13Uart6_timeoutv>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	f083 0301 	eor.w	r3, r3, #1
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <main+0x2c0>
 8001c28:	2301      	movs	r3, #1
 8001c2a:	e000      	b.n	8001c2e <main+0x2c2>
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 80ae 	beq.w	8001d90 <main+0x424>
		{
	//		printf("this is sendcommand while loop");

			if (IsDataAvailable())
 8001c34:	f7ff fbb6 	bl	80013a4 <IsDataAvailable>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	bf14      	ite	ne
 8001c3e:	2301      	movne	r3, #1
 8001c40:	2300      	moveq	r3, #0
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d0e1      	beq.n	8001c0c <main+0x2a0>
			{

				char recGyro = Uart_read();
 8001c48:	f7ff fb44 	bl	80012d4 <Uart_read>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73

				if (Uart6_debugMode)
 8001c52:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d07a      	beq.n	8001d50 <main+0x3e4>
				{
					printf("\tReceived char: ");
 8001c5a:	482e      	ldr	r0, [pc, #184]	; (8001d14 <main+0x3a8>)
 8001c5c:	f00c fd58 	bl	800e710 <iprintf>

					if (recGyro == '\f')
 8001c60:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001c64:	2b0c      	cmp	r3, #12
 8001c66:	d103      	bne.n	8001c70 <main+0x304>
						printf("\\f\r\n");
 8001c68:	482b      	ldr	r0, [pc, #172]	; (8001d18 <main+0x3ac>)
 8001c6a:	f00c fdd7 	bl	800e81c <puts>
 8001c6e:	e06f      	b.n	8001d50 <main+0x3e4>
					else if (recGyro == '\n')
 8001c70:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001c74:	2b0a      	cmp	r3, #10
 8001c76:	d103      	bne.n	8001c80 <main+0x314>
						printf("\\n\r\n");
 8001c78:	4828      	ldr	r0, [pc, #160]	; (8001d1c <main+0x3b0>)
 8001c7a:	f00c fdcf 	bl	800e81c <puts>
 8001c7e:	e067      	b.n	8001d50 <main+0x3e4>
					else if (recGyro == '\r')
 8001c80:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001c84:	2b0d      	cmp	r3, #13
 8001c86:	d14d      	bne.n	8001d24 <main+0x3b8>
						printf("\\r\r\n");
 8001c88:	4825      	ldr	r0, [pc, #148]	; (8001d20 <main+0x3b4>)
 8001c8a:	f00c fdc7 	bl	800e81c <puts>
 8001c8e:	e05f      	b.n	8001d50 <main+0x3e4>
 8001c90:	2000167c 	.word	0x2000167c
 8001c94:	20000f88 	.word	0x20000f88
 8001c98:	08012724 	.word	0x08012724
 8001c9c:	200011b8 	.word	0x200011b8
 8001ca0:	200013f4 	.word	0x200013f4
 8001ca4:	08012738 	.word	0x08012738
 8001ca8:	200013f0 	.word	0x200013f0
 8001cac:	200013fc 	.word	0x200013fc
 8001cb0:	200013f8 	.word	0x200013f8
 8001cb4:	837765f1 	.word	0x837765f1
 8001cb8:	0801273c 	.word	0x0801273c
 8001cbc:	0801276c 	.word	0x0801276c
 8001cc0:	0001869f 	.word	0x0001869f
 8001cc4:	d1b71759 	.word	0xd1b71759
 8001cc8:	20000000 	.word	0x20000000
 8001ccc:	10624dd3 	.word	0x10624dd3
 8001cd0:	51eb851f 	.word	0x51eb851f
 8001cd4:	cccccccd 	.word	0xcccccccd
 8001cd8:	200011bc 	.word	0x200011bc
 8001cdc:	08012794 	.word	0x08012794
 8001ce0:	080127a4 	.word	0x080127a4
 8001ce4:	080127ac 	.word	0x080127ac
 8001ce8:	080127b8 	.word	0x080127b8
 8001cec:	080127bc 	.word	0x080127bc
 8001cf0:	080127c0 	.word	0x080127c0
 8001cf4:	200014a4 	.word	0x200014a4
 8001cf8:	20000f50 	.word	0x20000f50
 8001cfc:	080128d8 	.word	0x080128d8
 8001d00:	080128ec 	.word	0x080128ec
 8001d04:	08012908 	.word	0x08012908
 8001d08:	08012920 	.word	0x08012920
 8001d0c:	20000e70 	.word	0x20000e70
 8001d10:	20000e6c 	.word	0x20000e6c
 8001d14:	08012928 	.word	0x08012928
 8001d18:	0801293c 	.word	0x0801293c
 8001d1c:	08012940 	.word	0x08012940
 8001d20:	08012944 	.word	0x08012944
					else if (recGyro == '\t')
 8001d24:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001d28:	2b09      	cmp	r3, #9
 8001d2a:	d103      	bne.n	8001d34 <main+0x3c8>
						printf("\\t\r\n");
 8001d2c:	48b4      	ldr	r0, [pc, #720]	; (8002000 <main+0x694>)
 8001d2e:	f00c fd75 	bl	800e81c <puts>
 8001d32:	e00d      	b.n	8001d50 <main+0x3e4>
					else if (recGyro == '\v')
 8001d34:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001d38:	2b0b      	cmp	r3, #11
 8001d3a:	d103      	bne.n	8001d44 <main+0x3d8>
						printf("\\v\r\n");
 8001d3c:	48b1      	ldr	r0, [pc, #708]	; (8002004 <main+0x698>)
 8001d3e:	f00c fd6d 	bl	800e81c <puts>
 8001d42:	e005      	b.n	8001d50 <main+0x3e4>
					else
						printf("%c\r\n", recGyro);
 8001d44:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001d48:	4619      	mov	r1, r3
 8001d4a:	48af      	ldr	r0, [pc, #700]	; (8002008 <main+0x69c>)
 8001d4c:	f00c fce0 	bl	800e710 <iprintf>
				}

				if (recGyro == '<')
 8001d50:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001d54:	2b3c      	cmp	r3, #60	; 0x3c
 8001d56:	d107      	bne.n	8001d68 <main+0x3fc>
				{
					if (Uart6_debugMode)
 8001d58:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d016      	beq.n	8001d8e <main+0x422>
						printf("Delimiter found\r\n");
 8001d60:	48aa      	ldr	r0, [pc, #680]	; (800200c <main+0x6a0>)
 8001d62:	f00c fd5b 	bl	800e81c <puts>

					break;
 8001d66:	e012      	b.n	8001d8e <main+0x422>
				}
//				else if (!isalnum(recGyro) && (recGyro != ':'))
				else if ((recGyro == '.'))
 8001d68:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001d6c:	2b2e      	cmp	r3, #46	; 0x2e
 8001d6e:	d00c      	beq.n	8001d8a <main+0x41e>
					continue;

				Uart6_payload[Uart6_counter] = recGyro;
 8001d70:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001d74:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001d76:	4413      	add	r3, r2
 8001d78:	f897 2073 	ldrb.w	r2, [r7, #115]	; 0x73
 8001d7c:	701a      	strb	r2, [r3, #0]
				Uart6_counter++;
 8001d7e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001d82:	3301      	adds	r3, #1
 8001d84:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 8001d88:	e740      	b.n	8001c0c <main+0x2a0>
					continue;
 8001d8a:	bf00      	nop
		while ((Uart6_counter < Uart6_PAYLOAD_LEN) && !Uart6_timeout())
 8001d8c:	e73e      	b.n	8001c0c <main+0x2a0>
					break;
 8001d8e:	bf00      	nop
			}
		}
		//printf("%s\r\n", Uart6_payload);
		char Gyro_payload[10];
		char* token;
		char del[] = ",";
 8001d90:	232c      	movs	r3, #44	; 0x2c
 8001d92:	80bb      	strh	r3, [r7, #4]
		memcpy(Gyro_payload, Uart6_payload, sizeof(Gyro_payload));
 8001d94:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001d96:	f107 0308 	add.w	r3, r7, #8
 8001d9a:	6810      	ldr	r0, [r2, #0]
 8001d9c:	6851      	ldr	r1, [r2, #4]
 8001d9e:	c303      	stmia	r3!, {r0, r1}
 8001da0:	8912      	ldrh	r2, [r2, #8]
 8001da2:	801a      	strh	r2, [r3, #0]
//		printf("%s\r\n", Gyro_payload);

		token = strtok(Gyro_payload, del);
 8001da4:	1d3a      	adds	r2, r7, #4
 8001da6:	f107 0308 	add.w	r3, r7, #8
 8001daa:	4611      	mov	r1, r2
 8001dac:	4618      	mov	r0, r3
 8001dae:	f00d fbb7 	bl	800f520 <strtok>
 8001db2:	66f8      	str	r0, [r7, #108]	; 0x6c
//		printf("first one : %s\r\n", token);
		i_accelX = atoi(token);
 8001db4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001db6:	f00b fd40 	bl	800d83a <atoi>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	4a94      	ldr	r2, [pc, #592]	; (8002010 <main+0x6a4>)
 8001dbe:	6013      	str	r3, [r2, #0]
		f_accelX = i_accelX / (float)100;
 8001dc0:	4b93      	ldr	r3, [pc, #588]	; (8002010 <main+0x6a4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	ee07 3a90 	vmov	s15, r3
 8001dc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dcc:	eddf 6a91 	vldr	s13, [pc, #580]	; 8002014 <main+0x6a8>
 8001dd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dd4:	4b90      	ldr	r3, [pc, #576]	; (8002018 <main+0x6ac>)
 8001dd6:	edc3 7a00 	vstr	s15, [r3]

		token = strtok(NULL, del);
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	4619      	mov	r1, r3
 8001dde:	2000      	movs	r0, #0
 8001de0:	f00d fb9e 	bl	800f520 <strtok>
 8001de4:	66f8      	str	r0, [r7, #108]	; 0x6c
//		printf("second one : %s\r\n", token);
		i_accelY = atoi(token);
 8001de6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001de8:	f00b fd27 	bl	800d83a <atoi>
 8001dec:	4603      	mov	r3, r0
 8001dee:	4a8b      	ldr	r2, [pc, #556]	; (800201c <main+0x6b0>)
 8001df0:	6013      	str	r3, [r2, #0]
		f_accelY = i_accelY / (float)100;
 8001df2:	4b8a      	ldr	r3, [pc, #552]	; (800201c <main+0x6b0>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	ee07 3a90 	vmov	s15, r3
 8001dfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dfe:	eddf 6a85 	vldr	s13, [pc, #532]	; 8002014 <main+0x6a8>
 8001e02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e06:	4b86      	ldr	r3, [pc, #536]	; (8002020 <main+0x6b4>)
 8001e08:	edc3 7a00 	vstr	s15, [r3]
/////////////////////////////////////////////stn1110//////////////////////////////////////////////////////////

  	  	 	 	    static int8_t cur_myELM327_STATUS; // ?��?��?��?�� ?��?���??��
		  	  	    static int8_t pre_myELM327_STATUS; // ?��?��?��?�� ?��?���??��

		  	  	    c_time = millis() / 1000; //?���?
 8001e0c:	f004 fd16 	bl	800683c <HAL_GetTick>
 8001e10:	4603      	mov	r3, r0
 8001e12:	4a84      	ldr	r2, [pc, #528]	; (8002024 <main+0x6b8>)
 8001e14:	fba2 2303 	umull	r2, r3, r2, r3
 8001e18:	099b      	lsrs	r3, r3, #6
 8001e1a:	4a83      	ldr	r2, [pc, #524]	; (8002028 <main+0x6bc>)
 8001e1c:	6013      	str	r3, [r2, #0]

		  	  	    SEC = c_time % 60;
 8001e1e:	4b82      	ldr	r3, [pc, #520]	; (8002028 <main+0x6bc>)
 8001e20:	6819      	ldr	r1, [r3, #0]
 8001e22:	4b82      	ldr	r3, [pc, #520]	; (800202c <main+0x6c0>)
 8001e24:	fba3 2301 	umull	r2, r3, r3, r1
 8001e28:	095a      	lsrs	r2, r3, #5
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	011b      	lsls	r3, r3, #4
 8001e2e:	1a9b      	subs	r3, r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	1aca      	subs	r2, r1, r3
 8001e34:	4b7e      	ldr	r3, [pc, #504]	; (8002030 <main+0x6c4>)
 8001e36:	601a      	str	r2, [r3, #0]
		  	  	    MIN = (c_time / 60) % 60;
 8001e38:	4b7b      	ldr	r3, [pc, #492]	; (8002028 <main+0x6bc>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a7b      	ldr	r2, [pc, #492]	; (800202c <main+0x6c0>)
 8001e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e42:	0959      	lsrs	r1, r3, #5
 8001e44:	4b79      	ldr	r3, [pc, #484]	; (800202c <main+0x6c0>)
 8001e46:	fba3 2301 	umull	r2, r3, r3, r1
 8001e4a:	095a      	lsrs	r2, r3, #5
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	1aca      	subs	r2, r1, r3
 8001e56:	4b77      	ldr	r3, [pc, #476]	; (8002034 <main+0x6c8>)
 8001e58:	601a      	str	r2, [r3, #0]
		  	  	    HOUR = (c_time / (60 * 60)) % 24;
 8001e5a:	4b73      	ldr	r3, [pc, #460]	; (8002028 <main+0x6bc>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a76      	ldr	r2, [pc, #472]	; (8002038 <main+0x6cc>)
 8001e60:	fba2 2303 	umull	r2, r3, r2, r3
 8001e64:	0ad9      	lsrs	r1, r3, #11
 8001e66:	4b75      	ldr	r3, [pc, #468]	; (800203c <main+0x6d0>)
 8001e68:	fba3 2301 	umull	r2, r3, r3, r1
 8001e6c:	091a      	lsrs	r2, r3, #4
 8001e6e:	4613      	mov	r3, r2
 8001e70:	005b      	lsls	r3, r3, #1
 8001e72:	4413      	add	r3, r2
 8001e74:	00db      	lsls	r3, r3, #3
 8001e76:	1aca      	subs	r2, r1, r3
 8001e78:	4b71      	ldr	r3, [pc, #452]	; (8002040 <main+0x6d4>)
 8001e7a:	601a      	str	r2, [r3, #0]

		  	  	    float tempRPM = stn.rpm();
 8001e7c:	4871      	ldr	r0, [pc, #452]	; (8002044 <main+0x6d8>)
 8001e7e:	f003 faff 	bl	8005480 <_ZN7STN11103rpmEv>
 8001e82:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68
		  	  	    uint32_t tempVEHICLE_SPEED = stn.kph();
 8001e86:	486f      	ldr	r0, [pc, #444]	; (8002044 <main+0x6d8>)
 8001e88:	f003 fb2c 	bl	80054e4 <_ZN7STN11103kphEv>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	667b      	str	r3, [r7, #100]	; 0x64
		  	  	    float tempENGINE_LOAD = stn.engineLoad();
 8001e90:	486c      	ldr	r0, [pc, #432]	; (8002044 <main+0x6d8>)
 8001e92:	f003 fa57 	bl	8005344 <_ZN7STN111010engineLoadEv>
 8001e96:	ed87 0a18 	vstr	s0, [r7, #96]	; 0x60
		  	  	    uint16_t tempRUN_TIME_SINCE_ENGINE_START = stn.runTime();
 8001e9a:	486a      	ldr	r0, [pc, #424]	; (8002044 <main+0x6d8>)
 8001e9c:	f003 fc2a 	bl	80056f4 <_ZN7STN11107runTimeEv>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
		  	  	    uint8_t tempFUEL_TYPE = stn.fuelType();
 8001ea6:	4867      	ldr	r0, [pc, #412]	; (8002044 <main+0x6d8>)
 8001ea8:	f003 fdfc 	bl	8005aa4 <_ZN7STN11108fuelTypeEv>
 8001eac:	4603      	mov	r3, r0
 8001eae:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
		  	  	    float tempENGINE_OIL_TEMP = stn.oilTemp();
 8001eb2:	4864      	ldr	r0, [pc, #400]	; (8002044 <main+0x6d8>)
 8001eb4:	f003 fe60 	bl	8005b78 <_ZN7STN11107oilTempEv>
 8001eb8:	ed87 0a16 	vstr	s0, [r7, #88]	; 0x58
		  	  	    float tempENGINE_COOLANT_TEMP = stn.engineCoolantTemp();
 8001ebc:	4861      	ldr	r0, [pc, #388]	; (8002044 <main+0x6d8>)
 8001ebe:	f003 fa75 	bl	80053ac <_ZN7STN111017engineCoolantTempEv>
 8001ec2:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
		  	  	    float tempRELATIVE_ACCELERATOR_PEDAL_POS = stn.relativePedalPos();
 8001ec6:	485f      	ldr	r0, [pc, #380]	; (8002044 <main+0x6d8>)
 8001ec8:	f003 fe22 	bl	8005b10 <_ZN7STN111016relativePedalPosEv>
 8001ecc:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
		  	  	    float tempTHROTTLE_POSITION = stn.throttle();
 8001ed0:	485c      	ldr	r0, [pc, #368]	; (8002044 <main+0x6d8>)
 8001ed2:	f003 fba5 	bl	8005620 <_ZN7STN11108throttleEv>
 8001ed6:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
		  	  	    float tempCOMMANDED_THROTTLE_ACTUATOR = stn.commandedThrottleActuator();
 8001eda:	485a      	ldr	r0, [pc, #360]	; (8002044 <main+0x6d8>)
 8001edc:	f003 fdae 	bl	8005a3c <_ZN7STN111025commandedThrottleActuatorEv>
 8001ee0:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
		  	  	    float tempRELATIVE_THROTTLE_POSITION = stn.relativeThrottle();
 8001ee4:	4857      	ldr	r0, [pc, #348]	; (8002044 <main+0x6d8>)
 8001ee6:	f003 fd41 	bl	800596c <_ZN7STN111016relativeThrottleEv>
 8001eea:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
		  	  	    float tempINTAKE_AIR_TEMP = stn.intakeAirTemp();
 8001eee:	4855      	ldr	r0, [pc, #340]	; (8002044 <main+0x6d8>)
 8001ef0:	f003 fb2e 	bl	8005550 <_ZN7STN111013intakeAirTempEv>
 8001ef4:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
		  	  	    uint8_t tempINTAKE_MANIFOLD_ABS_PRESSURE = stn.manifoldPressure();
 8001ef8:	4852      	ldr	r0, [pc, #328]	; (8002044 <main+0x6d8>)
 8001efa:	f003 fa8b 	bl	8005414 <_ZN7STN111016manifoldPressureEv>
 8001efe:	4603      	mov	r3, r0
 8001f00:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		  	  	    float tempFUEL_TANK_LEVEL_INPUT = stn.fuelLevel();
 8001f04:	484f      	ldr	r0, [pc, #316]	; (8002044 <main+0x6d8>)
 8001f06:	f003 fc61 	bl	80057cc <_ZN7STN11109fuelLevelEv>
 8001f0a:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
		  	  	    uint8_t tempOBD_STANDARDS = stn.obdStandards();
 8001f0e:	484d      	ldr	r0, [pc, #308]	; (8002044 <main+0x6d8>)
 8001f10:	f003 fbba 	bl	8005688 <_ZN7STN111012obdStandardsEv>
 8001f14:	4603      	mov	r3, r0
 8001f16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		  	  	    float tempCONTROL_MODULE_VOLTAGE = stn.ctrlModVoltage();
 8001f1a:	484a      	ldr	r0, [pc, #296]	; (8002044 <main+0x6d8>)
 8001f1c:	f003 fcc0 	bl	80058a0 <_ZN7STN111014ctrlModVoltageEv>
 8001f20:	ed87 0a0c 	vstr	s0, [r7, #48]	; 0x30
		  	  	    float tempAMBIENT_AIR_TEMP = stn.ambientAirTemp();
 8001f24:	4847      	ldr	r0, [pc, #284]	; (8002044 <main+0x6d8>)
 8001f26:	f003 fd55 	bl	80059d4 <_ZN7STN111014ambientAirTempEv>
 8001f2a:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
		  	  	    uint16_t tempDISTANCE_TRAVELED_WITH_MIL_ON = stn.distTravelWithMIL();
 8001f2e:	4845      	ldr	r0, [pc, #276]	; (8002044 <main+0x6d8>)
 8001f30:	f003 fc16 	bl	8005760 <_ZN7STN111017distTravelWithMILEv>
 8001f34:	4603      	mov	r3, r0
 8001f36:	857b      	strh	r3, [r7, #42]	; 0x2a
		  	  	    uint16_t tempDIST_TRAV_SINCE_CODES_CLEARED = stn.distSinceCodesCleared();
 8001f38:	4842      	ldr	r0, [pc, #264]	; (8002044 <main+0x6d8>)
 8001f3a:	f003 fc7b 	bl	8005834 <_ZN7STN111021distSinceCodesClearedEv>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	853b      	strh	r3, [r7, #40]	; 0x28
		  	  	    float tempMAF_FLOW_RATE = stn.mafRate();
 8001f42:	4840      	ldr	r0, [pc, #256]	; (8002044 <main+0x6d8>)
 8001f44:	f003 fb38 	bl	80055b8 <_ZN7STN11107mafRateEv>
 8001f48:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
		  	  	    float tempFUEL_AIR_MANDED_EQUIV_RATIO = stn.commandedAirFuelRatio();
 8001f4c:	483d      	ldr	r0, [pc, #244]	; (8002044 <main+0x6d8>)
 8001f4e:	f003 fcdb 	bl	8005908 <_ZN7STN111021commandedAirFuelRatioEv>
 8001f52:	ed87 0a08 	vstr	s0, [r7, #32]

		  	  	    mafRateCheck(tempMAF_FLOW_RATE);
 8001f56:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 8001f5a:	f002 fd69 	bl	8004a30 <_Z12mafRateCheckf>

		  	  	    curS = stn.status; //?��?��?��?�� 갱신
 8001f5e:	4b39      	ldr	r3, [pc, #228]	; (8002044 <main+0x6d8>)
 8001f60:	f993 200e 	ldrsb.w	r2, [r3, #14]
 8001f64:	4b38      	ldr	r3, [pc, #224]	; (8002048 <main+0x6dc>)
 8001f66:	701a      	strb	r2, [r3, #0]

		  	  	    switch (curS) {
 8001f68:	4b37      	ldr	r3, [pc, #220]	; (8002048 <main+0x6dc>)
 8001f6a:	f993 3000 	ldrsb.w	r3, [r3]
 8001f6e:	2b07      	cmp	r3, #7
 8001f70:	d87c      	bhi.n	800206c <main+0x700>
 8001f72:	a201      	add	r2, pc, #4	; (adr r2, 8001f78 <main+0x60c>)
 8001f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f78:	08001f99 	.word	0x08001f99
 8001f7c:	08001fa5 	.word	0x08001fa5
 8001f80:	08001fb3 	.word	0x08001fb3
 8001f84:	0800206d 	.word	0x0800206d
 8001f88:	08001fc5 	.word	0x08001fc5
 8001f8c:	08001fdd 	.word	0x08001fdd
 8001f90:	08001fe9 	.word	0x08001fe9
 8001f94:	08001ff5 	.word	0x08001ff5
		  	  	         case ELM_SUCCESS:
		  	  	         strcpy(car_state, "ELM_SUCCESS");
 8001f98:	4b2c      	ldr	r3, [pc, #176]	; (800204c <main+0x6e0>)
 8001f9a:	4a2d      	ldr	r2, [pc, #180]	; (8002050 <main+0x6e4>)
 8001f9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f9e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		  	  	         break;
 8001fa2:	e069      	b.n	8002078 <main+0x70c>

		  	  	         case ELM_NO_RESPONSE:
		  	  	         strcpy(car_state, "ELM_NO_RESPONSE");
 8001fa4:	4a29      	ldr	r2, [pc, #164]	; (800204c <main+0x6e0>)
 8001fa6:	4b2b      	ldr	r3, [pc, #172]	; (8002054 <main+0x6e8>)
 8001fa8:	4614      	mov	r4, r2
 8001faa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		  	  	         break;
 8001fb0:	e062      	b.n	8002078 <main+0x70c>

		  	  	         case ELM_BUFFER_OVERFLOW:
		  	  	         strcpy(car_state, "ELM_BUFFER_OVERFLOW");
 8001fb2:	4a26      	ldr	r2, [pc, #152]	; (800204c <main+0x6e0>)
 8001fb4:	4b28      	ldr	r3, [pc, #160]	; (8002058 <main+0x6ec>)
 8001fb6:	4614      	mov	r4, r2
 8001fb8:	461d      	mov	r5, r3
 8001fba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fbe:	682b      	ldr	r3, [r5, #0]
 8001fc0:	6023      	str	r3, [r4, #0]
		  	  	         break;
 8001fc2:	e059      	b.n	8002078 <main+0x70c>

		  	  	         case ELM_UNABLE_TO_CONNECT:
		  	  	         strcpy(car_state, "ELM_UNABLE_TO_CONNECT");
 8001fc4:	4a21      	ldr	r2, [pc, #132]	; (800204c <main+0x6e0>)
 8001fc6:	4b25      	ldr	r3, [pc, #148]	; (800205c <main+0x6f0>)
 8001fc8:	4614      	mov	r4, r2
 8001fca:	461d      	mov	r5, r3
 8001fcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fd0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001fd4:	6020      	str	r0, [r4, #0]
 8001fd6:	3404      	adds	r4, #4
 8001fd8:	8021      	strh	r1, [r4, #0]
		  	  	         break;
 8001fda:	e04d      	b.n	8002078 <main+0x70c>

		  	  	         case ELM_NO_DATA:
		  	  	         strcpy(car_state, "ELM_NO_DATA");
 8001fdc:	4b1b      	ldr	r3, [pc, #108]	; (800204c <main+0x6e0>)
 8001fde:	4a20      	ldr	r2, [pc, #128]	; (8002060 <main+0x6f4>)
 8001fe0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fe2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		  	  	         break;
 8001fe6:	e047      	b.n	8002078 <main+0x70c>

		  	  	         case ELM_STOPPED:
		  	  	         strcpy(car_state, "ELM_STOPPED");
 8001fe8:	4b18      	ldr	r3, [pc, #96]	; (800204c <main+0x6e0>)
 8001fea:	4a1e      	ldr	r2, [pc, #120]	; (8002064 <main+0x6f8>)
 8001fec:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		  	  	         break;
 8001ff2:	e041      	b.n	8002078 <main+0x70c>

		  	  	         case ELM_TIMEOUT:
		  	  	         strcpy(car_state, "ELM_TIMEOUT");
 8001ff4:	4b15      	ldr	r3, [pc, #84]	; (800204c <main+0x6e0>)
 8001ff6:	4a1c      	ldr	r2, [pc, #112]	; (8002068 <main+0x6fc>)
 8001ff8:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ffa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		  	  	         break;
 8001ffe:	e03b      	b.n	8002078 <main+0x70c>
 8002000:	08012948 	.word	0x08012948
 8002004:	0801294c 	.word	0x0801294c
 8002008:	08012950 	.word	0x08012950
 800200c:	08012958 	.word	0x08012958
 8002010:	20000e64 	.word	0x20000e64
 8002014:	42c80000 	.word	0x42c80000
 8002018:	20000e5c 	.word	0x20000e5c
 800201c:	20000e68 	.word	0x20000e68
 8002020:	20000e60 	.word	0x20000e60
 8002024:	10624dd3 	.word	0x10624dd3
 8002028:	20000f30 	.word	0x20000f30
 800202c:	88888889 	.word	0x88888889
 8002030:	20000f40 	.word	0x20000f40
 8002034:	20000f3c 	.word	0x20000f3c
 8002038:	91a2b3c5 	.word	0x91a2b3c5
 800203c:	aaaaaaab 	.word	0xaaaaaaab
 8002040:	20000f38 	.word	0x20000f38
 8002044:	20000f50 	.word	0x20000f50
 8002048:	20001400 	.word	0x20001400
 800204c:	20000f0c 	.word	0x20000f0c
 8002050:	0801296c 	.word	0x0801296c
 8002054:	08012978 	.word	0x08012978
 8002058:	08012988 	.word	0x08012988
 800205c:	0801299c 	.word	0x0801299c
 8002060:	080129b4 	.word	0x080129b4
 8002064:	080129c0 	.word	0x080129c0
 8002068:	080129cc 	.word	0x080129cc

		  	  	         default:
		  	  	         strcpy(car_state, "UNKNOWN_ERROR");
 800206c:	4a7c      	ldr	r2, [pc, #496]	; (8002260 <main+0x8f4>)
 800206e:	4b7d      	ldr	r3, [pc, #500]	; (8002264 <main+0x8f8>)
 8002070:	4614      	mov	r4, r2
 8002072:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002074:	c407      	stmia	r4!, {r0, r1, r2}
 8002076:	8023      	strh	r3, [r4, #0]
		  	  	       }

		  	      if ( (curS != preS) && (mafRatecheck == true)) // 이전상태와 현재상태가 다를시 새파일 생성 (mafRate 값 받아와질시 저장)
 8002078:	4b7b      	ldr	r3, [pc, #492]	; (8002268 <main+0x8fc>)
 800207a:	f993 2000 	ldrsb.w	r2, [r3]
 800207e:	4b7b      	ldr	r3, [pc, #492]	; (800226c <main+0x900>)
 8002080:	f993 3000 	ldrsb.w	r3, [r3]
 8002084:	429a      	cmp	r2, r3
 8002086:	d006      	beq.n	8002096 <main+0x72a>
 8002088:	4b79      	ldr	r3, [pc, #484]	; (8002270 <main+0x904>)
 800208a:	781b      	ldrb	r3, [r3, #0]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d102      	bne.n	8002096 <main+0x72a>
		  	          createNewfile();
 8002090:	f001 f90a 	bl	80032a8 <_Z13createNewfilev>
 8002094:	e00d      	b.n	80020b2 <main+0x746>
		  	      else if ( (curS != preS) && (mafRatecheck == false)) // 이전상태와 현재상태가 다를시 새파일 생성 (commandedThrottleActuatorAlgorithm 실행시 저장)
 8002096:	4b74      	ldr	r3, [pc, #464]	; (8002268 <main+0x8fc>)
 8002098:	f993 2000 	ldrsb.w	r2, [r3]
 800209c:	4b73      	ldr	r3, [pc, #460]	; (800226c <main+0x900>)
 800209e:	f993 3000 	ldrsb.w	r3, [r3]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d005      	beq.n	80020b2 <main+0x746>
 80020a6:	4b72      	ldr	r3, [pc, #456]	; (8002270 <main+0x904>)
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <main+0x746>
		  	          createNewfile2();
 80020ae:	f001 f9a1 	bl	80033f4 <_Z14createNewfile2v>

		  	  	    preS = curS; // ?��?��?��?�� ?��?��?��?���? 갱신
 80020b2:	4b6d      	ldr	r3, [pc, #436]	; (8002268 <main+0x8fc>)
 80020b4:	f993 2000 	ldrsb.w	r2, [r3]
 80020b8:	4b6c      	ldr	r3, [pc, #432]	; (800226c <main+0x900>)
 80020ba:	701a      	strb	r2, [r3, #0]

		  	  	  if (curS == ELM_SUCCESS)
 80020bc:	4b6a      	ldr	r3, [pc, #424]	; (8002268 <main+0x8fc>)
 80020be:	f993 3000 	ldrsb.w	r3, [r3]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f040 8191 	bne.w	80023ea <main+0xa7e>
		  	  	  {
		  	  		 elmstatusCheck = 0; //elmstatusCheck Reset!
 80020c8:	4b6a      	ldr	r3, [pc, #424]	; (8002274 <main+0x908>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]

		  	  		  runTime = (uint16_t)tempRUN_TIME_SINCE_ENGINE_START; //?��진켜진시?�� ?��?�� ?��?��?���?
 80020ce:	4a6a      	ldr	r2, [pc, #424]	; (8002278 <main+0x90c>)
 80020d0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80020d4:	8013      	strh	r3, [r2, #0]
		  	  		  fuelType = (int32_t)tempFUEL_TYPE; //?��?�� ?��료정�?
 80020d6:	4a69      	ldr	r2, [pc, #420]	; (800227c <main+0x910>)
 80020d8:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80020dc:	7013      	strb	r3, [r2, #0]
		  	  		  rpm = (uint32_t)tempRPM; //차량 RPM
 80020de:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 80020e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020e6:	ee17 2a90 	vmov	r2, s15
 80020ea:	4b65      	ldr	r3, [pc, #404]	; (8002280 <main+0x914>)
 80020ec:	601a      	str	r2, [r3, #0]
		  	  		  kph = (uint32_t)tempVEHICLE_SPEED; //차량?��?��
 80020ee:	4a65      	ldr	r2, [pc, #404]	; (8002284 <main+0x918>)
 80020f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020f2:	6013      	str	r3, [r2, #0]
		  	  		  engineLoad = (uint32_t)tempENGINE_LOAD; //?��진�??��
 80020f4:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80020f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020fc:	ee17 2a90 	vmov	r2, s15
 8002100:	4b61      	ldr	r3, [pc, #388]	; (8002288 <main+0x91c>)
 8002102:	601a      	str	r2, [r3, #0]
		  	  		  oilTemp = (int32_t)tempENGINE_OIL_TEMP; //?��?��?��?��
 8002104:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8002108:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800210c:	ee17 2a90 	vmov	r2, s15
 8002110:	4b5e      	ldr	r3, [pc, #376]	; (800228c <main+0x920>)
 8002112:	601a      	str	r2, [r3, #0]
		  	  		  engineCoolantTemp = (int32_t)tempENGINE_COOLANT_TEMP; //?���? ?��각수 ?��?��
 8002114:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8002118:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800211c:	ee17 2a90 	vmov	r2, s15
 8002120:	4b5b      	ldr	r3, [pc, #364]	; (8002290 <main+0x924>)
 8002122:	601a      	str	r2, [r3, #0]
		  	  		  relativePedalPos = (uint32_t)tempRELATIVE_ACCELERATOR_PEDAL_POS;
 8002124:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8002128:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800212c:	ee17 2a90 	vmov	r2, s15
 8002130:	4b58      	ldr	r3, [pc, #352]	; (8002294 <main+0x928>)
 8002132:	601a      	str	r2, [r3, #0]
		  	  		  throttle = (uint32_t)tempTHROTTLE_POSITION; //?��로�? ?���??��
 8002134:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002138:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800213c:	ee17 2a90 	vmov	r2, s15
 8002140:	4b55      	ldr	r3, [pc, #340]	; (8002298 <main+0x92c>)
 8002142:	601a      	str	r2, [r3, #0]
		  	  		  relativeThrottle = (uint32_t)tempRELATIVE_THROTTLE_POSITION; //?��?? ?��로�? ?���??��
 8002144:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002148:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800214c:	ee17 2a90 	vmov	r2, s15
 8002150:	4b52      	ldr	r3, [pc, #328]	; (800229c <main+0x930>)
 8002152:	601a      	str	r2, [r3, #0]
		  	  		  commandedThrottleActuator = (float)tempCOMMANDED_THROTTLE_ACTUATOR; //?��로�? ?��츄에?��?��
 8002154:	4a52      	ldr	r2, [pc, #328]	; (80022a0 <main+0x934>)
 8002156:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002158:	6013      	str	r3, [r2, #0]
		  	  		  intakeAirTemp = (int32_t)tempINTAKE_AIR_TEMP; //?��?��공기 ?��?��
 800215a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800215e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002162:	ee17 2a90 	vmov	r2, s15
 8002166:	4b4f      	ldr	r3, [pc, #316]	; (80022a4 <main+0x938>)
 8002168:	601a      	str	r2, [r3, #0]
		  	  		  mafRate = (float)tempMAF_FLOW_RATE; //공기?��?��
 800216a:	4a4f      	ldr	r2, [pc, #316]	; (80022a8 <main+0x93c>)
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	6013      	str	r3, [r2, #0]
		  	  		  manifoldPressure = (uint8_t)tempINTAKE_MANIFOLD_ABS_PRESSURE; //?��기매?��?��?�� ?��???��?��
 8002170:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002174:	4a4d      	ldr	r2, [pc, #308]	; (80022ac <main+0x940>)
 8002176:	6013      	str	r3, [r2, #0]
		  	  		  ambientAirTemp = (int16_t)tempAMBIENT_AIR_TEMP; //?��기온?��
 8002178:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800217c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002180:	ee17 3a90 	vmov	r3, s15
 8002184:	b21a      	sxth	r2, r3
 8002186:	4b4a      	ldr	r3, [pc, #296]	; (80022b0 <main+0x944>)
 8002188:	801a      	strh	r2, [r3, #0]
		  	  		  distTravelWithMIL = (uint16_t)tempDISTANCE_TRAVELED_WITH_MIL_ON; //경고?�� ?��?��?��?�� 주행거리
 800218a:	4a4a      	ldr	r2, [pc, #296]	; (80022b4 <main+0x948>)
 800218c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800218e:	8013      	strh	r3, [r2, #0]
		  	  		  distSinceCodesCleared = (uint16_t)tempDIST_TRAV_SINCE_CODES_CLEARED; //DTC ?��거후 주행거리
 8002190:	4a49      	ldr	r2, [pc, #292]	; (80022b8 <main+0x94c>)
 8002192:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002194:	8013      	strh	r3, [r2, #0]
		  	  		  fuelLevel = (uint32_t)tempFUEL_TANK_LEVEL_INPUT; //?��료레�?
 8002196:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800219a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800219e:	ee17 2a90 	vmov	r2, s15
 80021a2:	4b46      	ldr	r3, [pc, #280]	; (80022bc <main+0x950>)
 80021a4:	601a      	str	r2, [r3, #0]
		  	  		  ctrlModVoltage = (uint32_t)tempCONTROL_MODULE_VOLTAGE; //컨트�? 모듈 ?��?��
 80021a6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80021aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021ae:	ee17 2a90 	vmov	r2, s15
 80021b2:	4b43      	ldr	r3, [pc, #268]	; (80022c0 <main+0x954>)
 80021b4:	601a      	str	r2, [r3, #0]
		  	  		  obdStandards = (uint8_t)tempOBD_STANDARDS; //OBD ?���? - ?��치값 wikipedia �??��
 80021b6:	4a43      	ldr	r2, [pc, #268]	; (80022c4 <main+0x958>)
 80021b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80021bc:	7013      	strb	r3, [r2, #0]
		  	  		  commandedAirFuelRatio = (float)tempFUEL_AIR_MANDED_EQUIV_RATIO;
 80021be:	4a42      	ldr	r2, [pc, #264]	; (80022c8 <main+0x95c>)
 80021c0:	6a3b      	ldr	r3, [r7, #32]
 80021c2:	6013      	str	r3, [r2, #0]

		  	  	    if (errorValueReset() == true) {printf("Error Value Reset!\r\n"); } //errorvalue 확인후 조건수정
 80021c4:	f002 fbb4 	bl	8004930 <_Z15errorValueResetv>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	bf0c      	ite	eq
 80021ce:	2301      	moveq	r3, #1
 80021d0:	2300      	movne	r3, #0
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d002      	beq.n	80021de <main+0x872>
 80021d8:	483c      	ldr	r0, [pc, #240]	; (80022cc <main+0x960>)
 80021da:	f00c fb1f 	bl	800e81c <puts>
		  	  	    if ( (kph == 0) && (rpm >= 550) ) counter_Idle++;
 80021de:	4b29      	ldr	r3, [pc, #164]	; (8002284 <main+0x918>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d10a      	bne.n	80021fc <main+0x890>
 80021e6:	4b26      	ldr	r3, [pc, #152]	; (8002280 <main+0x914>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f240 2225 	movw	r2, #549	; 0x225
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d904      	bls.n	80021fc <main+0x890>
 80021f2:	4b37      	ldr	r3, [pc, #220]	; (80022d0 <main+0x964>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	3301      	adds	r3, #1
 80021f8:	4a35      	ldr	r2, [pc, #212]	; (80022d0 <main+0x964>)
 80021fa:	6013      	str	r3, [r2, #0]

		  	  	    if (mafRatecheck == true)
 80021fc:	4b1c      	ldr	r3, [pc, #112]	; (8002270 <main+0x904>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b01      	cmp	r3, #1
 8002202:	f040 80e4 	bne.w	80023ce <main+0xa62>
		  	  	    {
		  	  	      switch (fuelType) {
 8002206:	4b1d      	ldr	r3, [pc, #116]	; (800227c <main+0x910>)
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	3b01      	subs	r3, #1
 800220c:	2b05      	cmp	r3, #5
 800220e:	d86f      	bhi.n	80022f0 <main+0x984>
 8002210:	a201      	add	r2, pc, #4	; (adr r2, 8002218 <main+0x8ac>)
 8002212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002216:	bf00      	nop
 8002218:	08002231 	.word	0x08002231
 800221c:	08002239 	.word	0x08002239
 8002220:	08002241 	.word	0x08002241
 8002224:	08002249 	.word	0x08002249
 8002228:	08002251 	.word	0x08002251
 800222c:	08002259 	.word	0x08002259
		  	  	      case 1 : AFR = 14.7;
 8002230:	4b28      	ldr	r3, [pc, #160]	; (80022d4 <main+0x968>)
 8002232:	4a29      	ldr	r2, [pc, #164]	; (80022d8 <main+0x96c>)
 8002234:	601a      	str	r2, [r3, #0]
		  	  	      break;
 8002236:	e05f      	b.n	80022f8 <main+0x98c>
		  	  	      case 2 : AFR = 6.4;
 8002238:	4b26      	ldr	r3, [pc, #152]	; (80022d4 <main+0x968>)
 800223a:	4a28      	ldr	r2, [pc, #160]	; (80022dc <main+0x970>)
 800223c:	601a      	str	r2, [r3, #0]
		  	  	      break;
 800223e:	e05b      	b.n	80022f8 <main+0x98c>
		  	  	      case 3 : AFR = 9.0;
 8002240:	4b24      	ldr	r3, [pc, #144]	; (80022d4 <main+0x968>)
 8002242:	4a27      	ldr	r2, [pc, #156]	; (80022e0 <main+0x974>)
 8002244:	601a      	str	r2, [r3, #0]
		  	  	      break;
 8002246:	e057      	b.n	80022f8 <main+0x98c>
		  	  	      case 4 : AFR = 14.6;
 8002248:	4b22      	ldr	r3, [pc, #136]	; (80022d4 <main+0x968>)
 800224a:	4a26      	ldr	r2, [pc, #152]	; (80022e4 <main+0x978>)
 800224c:	601a      	str	r2, [r3, #0]
		  	  	      break;
 800224e:	e053      	b.n	80022f8 <main+0x98c>
		  	  	      case 5 : AFR = 15.5;
 8002250:	4b20      	ldr	r3, [pc, #128]	; (80022d4 <main+0x968>)
 8002252:	4a25      	ldr	r2, [pc, #148]	; (80022e8 <main+0x97c>)
 8002254:	601a      	str	r2, [r3, #0]
		  	  	      break;
 8002256:	e04f      	b.n	80022f8 <main+0x98c>
		  	  	      case 6 : AFR = 17.2;
 8002258:	4b1e      	ldr	r3, [pc, #120]	; (80022d4 <main+0x968>)
 800225a:	4a24      	ldr	r2, [pc, #144]	; (80022ec <main+0x980>)
 800225c:	601a      	str	r2, [r3, #0]
		  	  	      break;
 800225e:	e04b      	b.n	80022f8 <main+0x98c>
 8002260:	20000f0c 	.word	0x20000f0c
 8002264:	080129d8 	.word	0x080129d8
 8002268:	20001400 	.word	0x20001400
 800226c:	20001401 	.word	0x20001401
 8002270:	20000f2a 	.word	0x20000f2a
 8002274:	20000f2c 	.word	0x20000f2c
 8002278:	20000e80 	.word	0x20000e80
 800227c:	20000e82 	.word	0x20000e82
 8002280:	20000e74 	.word	0x20000e74
 8002284:	20000e78 	.word	0x20000e78
 8002288:	20000e7c 	.word	0x20000e7c
 800228c:	20000e84 	.word	0x20000e84
 8002290:	20000eb4 	.word	0x20000eb4
 8002294:	20000e88 	.word	0x20000e88
 8002298:	20000e8c 	.word	0x20000e8c
 800229c:	20000e90 	.word	0x20000e90
 80022a0:	20000eb8 	.word	0x20000eb8
 80022a4:	20000e94 	.word	0x20000e94
 80022a8:	20000e9c 	.word	0x20000e9c
 80022ac:	20000eb0 	.word	0x20000eb0
 80022b0:	20000eac 	.word	0x20000eac
 80022b4:	20000ea2 	.word	0x20000ea2
 80022b8:	20000ea4 	.word	0x20000ea4
 80022bc:	20000e98 	.word	0x20000e98
 80022c0:	20000ea8 	.word	0x20000ea8
 80022c4:	20000ea0 	.word	0x20000ea0
 80022c8:	20000ebc 	.word	0x20000ebc
 80022cc:	080129e8 	.word	0x080129e8
 80022d0:	20000eec 	.word	0x20000eec
 80022d4:	20000024 	.word	0x20000024
 80022d8:	416b3333 	.word	0x416b3333
 80022dc:	40cccccd 	.word	0x40cccccd
 80022e0:	41100000 	.word	0x41100000
 80022e4:	4169999a 	.word	0x4169999a
 80022e8:	41780000 	.word	0x41780000
 80022ec:	4189999a 	.word	0x4189999a
		  	  	      default : AFR = 14.7;
 80022f0:	4b61      	ldr	r3, [pc, #388]	; (8002478 <main+0xb0c>)
 80022f2:	4a62      	ldr	r2, [pc, #392]	; (800247c <main+0xb10>)
 80022f4:	601a      	str	r2, [r3, #0]
		  	  	      break; }
 80022f6:	bf00      	nop

		  	  	      instantFuelConsume = ((kph*AFR*commandedAirFuelRatio*710.0)/(mafRate*3600)); //Km/L
 80022f8:	4b61      	ldr	r3, [pc, #388]	; (8002480 <main+0xb14>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	ee07 3a90 	vmov	s15, r3
 8002300:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002304:	4b5c      	ldr	r3, [pc, #368]	; (8002478 <main+0xb0c>)
 8002306:	edd3 7a00 	vldr	s15, [r3]
 800230a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800230e:	4b5d      	ldr	r3, [pc, #372]	; (8002484 <main+0xb18>)
 8002310:	edd3 7a00 	vldr	s15, [r3]
 8002314:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002318:	ee17 0a90 	vmov	r0, s15
 800231c:	f7fe f91c 	bl	8000558 <__aeabi_f2d>
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	4b58      	ldr	r3, [pc, #352]	; (8002488 <main+0xb1c>)
 8002326:	f7fe f96f 	bl	8000608 <__aeabi_dmul>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	4614      	mov	r4, r2
 8002330:	461d      	mov	r5, r3
 8002332:	4b56      	ldr	r3, [pc, #344]	; (800248c <main+0xb20>)
 8002334:	edd3 7a00 	vldr	s15, [r3]
 8002338:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8002490 <main+0xb24>
 800233c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002340:	ee17 0a90 	vmov	r0, s15
 8002344:	f7fe f908 	bl	8000558 <__aeabi_f2d>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4620      	mov	r0, r4
 800234e:	4629      	mov	r1, r5
 8002350:	f7fe fa84 	bl	800085c <__aeabi_ddiv>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4610      	mov	r0, r2
 800235a:	4619      	mov	r1, r3
 800235c:	f7fe fc4c 	bl	8000bf8 <__aeabi_d2f>
 8002360:	4603      	mov	r3, r0
 8002362:	4a4c      	ldr	r2, [pc, #304]	; (8002494 <main+0xb28>)
 8002364:	6013      	str	r3, [r2, #0]
		  	  	      // **instantFuelConsume = kph*1/3600*1/mafRate*AFR*770*commandedAirFuelRatio;    //km/l 단위변환
		  	  	      // **instantFuelConsume = ((mafRate*36000)/(kph*commandedAirFuelRatio*AFR*770)); //1L/100km 단위변환

		  	  	      if ( instantFuelConsume >= 30.0 )
 8002366:	4b4b      	ldr	r3, [pc, #300]	; (8002494 <main+0xb28>)
 8002368:	edd3 7a00 	vldr	s15, [r3]
 800236c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002378:	db02      	blt.n	8002380 <main+0xa14>
		  	  	      {instantFuelConsume = 30.0;}
 800237a:	4b46      	ldr	r3, [pc, #280]	; (8002494 <main+0xb28>)
 800237c:	4a46      	ldr	r2, [pc, #280]	; (8002498 <main+0xb2c>)
 800237e:	601a      	str	r2, [r3, #0]

		  	  	      printf("instantFuelConsume : ");
 8002380:	4846      	ldr	r0, [pc, #280]	; (800249c <main+0xb30>)
 8002382:	f00c f9c5 	bl	800e710 <iprintf>
		  	  	      printf("%f\r\n", instantFuelConsume);
 8002386:	4b43      	ldr	r3, [pc, #268]	; (8002494 <main+0xb28>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe f8e4 	bl	8000558 <__aeabi_f2d>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4842      	ldr	r0, [pc, #264]	; (80024a0 <main+0xb34>)
 8002396:	f00c f9bb 	bl	800e710 <iprintf>
		  	  	      printf("commandedAirFuelRatio : ");
 800239a:	4842      	ldr	r0, [pc, #264]	; (80024a4 <main+0xb38>)
 800239c:	f00c f9b8 	bl	800e710 <iprintf>
		  	  	      printf("%f\r\n", commandedAirFuelRatio);
 80023a0:	4b38      	ldr	r3, [pc, #224]	; (8002484 <main+0xb18>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe f8d7 	bl	8000558 <__aeabi_f2d>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	483c      	ldr	r0, [pc, #240]	; (80024a0 <main+0xb34>)
 80023b0:	f00c f9ae 	bl	800e710 <iprintf>
		  	  	      printf("AFR : ");
 80023b4:	483c      	ldr	r0, [pc, #240]	; (80024a8 <main+0xb3c>)
 80023b6:	f00c f9ab 	bl	800e710 <iprintf>
		  	  	      printf("%f\r\n", AFR);
 80023ba:	4b2f      	ldr	r3, [pc, #188]	; (8002478 <main+0xb0c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe f8ca 	bl	8000558 <__aeabi_f2d>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	4835      	ldr	r0, [pc, #212]	; (80024a0 <main+0xb34>)
 80023ca:	f00c f9a1 	bl	800e710 <iprintf>
		  	  	     }

		  	  	    if (mafRatecheck == true) {LogToSDcard();} // 시리얼모니터 확인 및 sd 카드 저장함수
 80023ce:	4b37      	ldr	r3, [pc, #220]	; (80024ac <main+0xb40>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d102      	bne.n	80023dc <main+0xa70>
 80023d6:	f000 f945 	bl	8002664 <_Z11LogToSDcardv>
 80023da:	e00c      	b.n	80023f6 <main+0xa8a>
		  	  	    else if (mafRatecheck == false) {LogToSDcard2();}
 80023dc:	4b33      	ldr	r3, [pc, #204]	; (80024ac <main+0xb40>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d108      	bne.n	80023f6 <main+0xa8a>
 80023e4:	f000 fbb0 	bl	8002b48 <_Z12LogToSDcard2v>
 80023e8:	e005      	b.n	80023f6 <main+0xa8a>
		  	   	  }
		  	  	  else {
		  	  		  printError(curS);
 80023ea:	4b31      	ldr	r3, [pc, #196]	; (80024b0 <main+0xb44>)
 80023ec:	f993 3000 	ldrsb.w	r3, [r3]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f000 f8d7 	bl	80025a4 <_Z10printErrora>
		  	  	  }

		  	  	if ( (rpm >100) && (pre_rpm > 100) && (curS == ELM_SUCCESS ) ) //알고리즘 실행 조건 수정필요
 80023f6:	4b2f      	ldr	r3, [pc, #188]	; (80024b4 <main+0xb48>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2b64      	cmp	r3, #100	; 0x64
 80023fc:	d931      	bls.n	8002462 <main+0xaf6>
 80023fe:	4b2e      	ldr	r3, [pc, #184]	; (80024b8 <main+0xb4c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2b64      	cmp	r3, #100	; 0x64
 8002404:	d92d      	bls.n	8002462 <main+0xaf6>
 8002406:	4b2a      	ldr	r3, [pc, #168]	; (80024b0 <main+0xb44>)
 8002408:	f993 3000 	ldrsb.w	r3, [r3]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d128      	bne.n	8002462 <main+0xaf6>
		  	  	      {
		  	  	        if (mafRatecheck == false)
 8002410:	4b26      	ldr	r3, [pc, #152]	; (80024ac <main+0xb40>)
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d108      	bne.n	800242a <main+0xabe>
		  	  	        {
		  	  	          commandedThrottleActuatorAlgorithm();
 8002418:	f001 f95e 	bl	80036d8 <_Z34commandedThrottleActuatorAlgorithmv>
		  	  	          accelYpAlgorithm();
 800241c:	f001 f890 	bl	8003540 <_Z16accelYpAlgorithmv>
		  	  	          rpmAlgorithm();
 8002420:	f001 fa4e 	bl	80038c0 <_Z12rpmAlgorithmv>
		  	  	          efficiencyScoreAlgorithm2();
 8002424:	f001 fbd2 	bl	8003bcc <_Z25efficiencyScoreAlgorithm2v>
 8002428:	e00b      	b.n	8002442 <main+0xad6>
		  	  	        }

		  	  	        else if (mafRatecheck == true)
 800242a:	4b20      	ldr	r3, [pc, #128]	; (80024ac <main+0xb40>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d107      	bne.n	8002442 <main+0xad6>
		  	  	        {
		  	  	          fuelAlgorithm();
 8002432:	f001 f8c1 	bl	80035b8 <_Z13fuelAlgorithmv>
		  	  	          accelYpAlgorithm();
 8002436:	f001 f883 	bl	8003540 <_Z16accelYpAlgorithmv>
		  	  	          rpmAlgorithm();
 800243a:	f001 fa41 	bl	80038c0 <_Z12rpmAlgorithmv>
		  	  	          efficiencyScoreAlgorithm();
 800243e:	f001 fa95 	bl	800396c <_Z24efficiencyScoreAlgorithmv>
		  	  	        }

		  	  	        accelXAlgorithm();
 8002442:	f001 fcf5 	bl	8003e30 <_Z15accelXAlgorithmv>
		  	  	        accelYmAlgorithm();
 8002446:	f001 fd57 	bl	8003ef8 <_Z16accelYmAlgorithmv>
		  	  	        accelYmAlgorithm2();
 800244a:	f001 fd91 	bl	8003f70 <_Z17accelYmAlgorithm2v>
		  	  	        timeAlgorithm();
 800244e:	f001 fdcb 	bl	8003fe8 <_Z13timeAlgorithmv>
		  	  	        kphrpmAlgorithm();
 8002452:	f001 fdf3 	bl	800403c <_Z15kphrpmAlgorithmv>
		  	  	        safetyScoreAlgorithm();
 8002456:	f001 fe55 	bl	8004104 <_Z20safetyScoreAlgorithmv>

		  	  	        drivingScoreAlgorithm();
 800245a:	f001 ffd3 	bl	8004404 <_Z21drivingScoreAlgorithmv>
		  	  	        averagedrivingScoreAlgorithm();
 800245e:	f002 f8f9 	bl	8004654 <_Z28averagedrivingScoreAlgorithmv>
		  	  	      }
		  	  	      pre_DataUpdate();
 8002462:	f002 f947 	bl	80046f4 <_Z14pre_DataUpdatev>

		  	  	      if (elmstatusCheck > 5)
 8002466:	4b15      	ldr	r3, [pc, #84]	; (80024bc <main+0xb50>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2b05      	cmp	r3, #5
 800246c:	f67f abb3 	bls.w	8001bd6 <main+0x26a>
		  	  	      { counterReset(); }
 8002470:	f002 f9f2 	bl	8004858 <_Z12counterResetv>

/////////////////////////////////////////////stn1110//////////////////////////////////////////////////////////
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 8002474:	f7ff bbaf 	b.w	8001bd6 <main+0x26a>
 8002478:	20000024 	.word	0x20000024
 800247c:	416b3333 	.word	0x416b3333
 8002480:	20000e78 	.word	0x20000e78
 8002484:	20000ebc 	.word	0x20000ebc
 8002488:	40863000 	.word	0x40863000
 800248c:	20000e9c 	.word	0x20000e9c
 8002490:	45610000 	.word	0x45610000
 8002494:	20000028 	.word	0x20000028
 8002498:	41f00000 	.word	0x41f00000
 800249c:	080129fc 	.word	0x080129fc
 80024a0:	08012a14 	.word	0x08012a14
 80024a4:	08012a1c 	.word	0x08012a1c
 80024a8:	08012a38 	.word	0x08012a38
 80024ac:	20000f2a 	.word	0x20000f2a
 80024b0:	20001400 	.word	0x20001400
 80024b4:	20000e74 	.word	0x20000e74
 80024b8:	20000efc 	.word	0x20000efc
 80024bc:	20000f2c 	.word	0x20000f2c

080024c0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b094      	sub	sp, #80	; 0x50
 80024c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024c6:	f107 0320 	add.w	r3, r7, #32
 80024ca:	2230      	movs	r2, #48	; 0x30
 80024cc:	2100      	movs	r1, #0
 80024ce:	4618      	mov	r0, r3
 80024d0:	f00b f9f2 	bl	800d8b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024d4:	f107 030c 	add.w	r3, r7, #12
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	60da      	str	r2, [r3, #12]
 80024e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80024e4:	2300      	movs	r3, #0
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	4b2c      	ldr	r3, [pc, #176]	; (800259c <_Z18SystemClock_Configv+0xdc>)
 80024ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ec:	4a2b      	ldr	r2, [pc, #172]	; (800259c <_Z18SystemClock_Configv+0xdc>)
 80024ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f2:	6413      	str	r3, [r2, #64]	; 0x40
 80024f4:	4b29      	ldr	r3, [pc, #164]	; (800259c <_Z18SystemClock_Configv+0xdc>)
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fc:	60bb      	str	r3, [r7, #8]
 80024fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002500:	2300      	movs	r3, #0
 8002502:	607b      	str	r3, [r7, #4]
 8002504:	4b26      	ldr	r3, [pc, #152]	; (80025a0 <_Z18SystemClock_Configv+0xe0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a25      	ldr	r2, [pc, #148]	; (80025a0 <_Z18SystemClock_Configv+0xe0>)
 800250a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800250e:	6013      	str	r3, [r2, #0]
 8002510:	4b23      	ldr	r3, [pc, #140]	; (80025a0 <_Z18SystemClock_Configv+0xe0>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002518:	607b      	str	r3, [r7, #4]
 800251a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800251c:	2301      	movs	r3, #1
 800251e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002520:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002524:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002526:	2302      	movs	r3, #2
 8002528:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800252a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800252e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002530:	2304      	movs	r3, #4
 8002532:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8002534:	2364      	movs	r3, #100	; 0x64
 8002536:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002538:	2302      	movs	r3, #2
 800253a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800253c:	2305      	movs	r3, #5
 800253e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002540:	f107 0320 	add.w	r3, r7, #32
 8002544:	4618      	mov	r0, r3
 8002546:	f004 fff7 	bl	8007538 <HAL_RCC_OscConfig>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	bf14      	ite	ne
 8002550:	2301      	movne	r3, #1
 8002552:	2300      	moveq	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <_Z18SystemClock_Configv+0x9e>
  {
    Error_Handler();
 800255a:	f002 fabb 	bl	8004ad4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800255e:	230f      	movs	r3, #15
 8002560:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002562:	2302      	movs	r3, #2
 8002564:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002566:	2300      	movs	r3, #0
 8002568:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800256a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800256e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002570:	2300      	movs	r3, #0
 8002572:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002574:	f107 030c 	add.w	r3, r7, #12
 8002578:	2103      	movs	r1, #3
 800257a:	4618      	mov	r0, r3
 800257c:	f005 fa54 	bl	8007a28 <HAL_RCC_ClockConfig>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	bf14      	ite	ne
 8002586:	2301      	movne	r3, #1
 8002588:	2300      	moveq	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <_Z18SystemClock_Configv+0xd4>
  {
    Error_Handler();
 8002590:	f002 faa0 	bl	8004ad4 <Error_Handler>
  }
}
 8002594:	bf00      	nop
 8002596:	3750      	adds	r7, #80	; 0x50
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	40023800 	.word	0x40023800
 80025a0:	40007000 	.word	0x40007000

080025a4 <_Z10printErrora>:
/* USER CODE BEGIN 4 */

////////////////////////////////////////////stn1110///////////////////////////////////////////////////////////

void printError(int8_t curS)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	71fb      	strb	r3, [r7, #7]
    elmstatusCheck++;
 80025ae:	4b24      	ldr	r3, [pc, #144]	; (8002640 <_Z10printErrora+0x9c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	3301      	adds	r3, #1
 80025b4:	4a22      	ldr	r2, [pc, #136]	; (8002640 <_Z10printErrora+0x9c>)
 80025b6:	6013      	str	r3, [r2, #0]

    if (curS == ELM_NO_RESPONSE)
 80025b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d103      	bne.n	80025c8 <_Z10printErrora+0x24>
    {
        printf("ERROR: ELM_NO_RESPONSE");
 80025c0:	4820      	ldr	r0, [pc, #128]	; (8002644 <_Z10printErrora+0xa0>)
 80025c2:	f00c f8a5 	bl	800e710 <iprintf>
 80025c6:	e02f      	b.n	8002628 <_Z10printErrora+0x84>
    }
    else if (curS == ELM_BUFFER_OVERFLOW)
 80025c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d103      	bne.n	80025d8 <_Z10printErrora+0x34>
    {
        printf("ERROR: ELM_BUFFER_OVERFLOW");
 80025d0:	481d      	ldr	r0, [pc, #116]	; (8002648 <_Z10printErrora+0xa4>)
 80025d2:	f00c f89d 	bl	800e710 <iprintf>
 80025d6:	e027      	b.n	8002628 <_Z10printErrora+0x84>
    }
    else if (curS == ELM_UNABLE_TO_CONNECT)
 80025d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025dc:	2b04      	cmp	r3, #4
 80025de:	d103      	bne.n	80025e8 <_Z10printErrora+0x44>
    {
    	printf("ERROR: ELM_UNABLE_TO_CONNECT");
 80025e0:	481a      	ldr	r0, [pc, #104]	; (800264c <_Z10printErrora+0xa8>)
 80025e2:	f00c f895 	bl	800e710 <iprintf>
 80025e6:	e01f      	b.n	8002628 <_Z10printErrora+0x84>
    }
    else if (curS == ELM_NO_DATA)
 80025e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ec:	2b05      	cmp	r3, #5
 80025ee:	d103      	bne.n	80025f8 <_Z10printErrora+0x54>
    {
    	printf("ERROR: ELM_NO_DATA");
 80025f0:	4817      	ldr	r0, [pc, #92]	; (8002650 <_Z10printErrora+0xac>)
 80025f2:	f00c f88d 	bl	800e710 <iprintf>
 80025f6:	e017      	b.n	8002628 <_Z10printErrora+0x84>
    }
    else if (curS == ELM_STOPPED)
 80025f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fc:	2b06      	cmp	r3, #6
 80025fe:	d103      	bne.n	8002608 <_Z10printErrora+0x64>
    {
    	printf("ERROR: ELM_STOPPED");
 8002600:	4814      	ldr	r0, [pc, #80]	; (8002654 <_Z10printErrora+0xb0>)
 8002602:	f00c f885 	bl	800e710 <iprintf>
 8002606:	e00f      	b.n	8002628 <_Z10printErrora+0x84>
    }
    else if (curS == ELM_TIMEOUT)
 8002608:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260c:	2b07      	cmp	r3, #7
 800260e:	d103      	bne.n	8002618 <_Z10printErrora+0x74>
    {
    	printf("ERROR: ELM_TIMEOUT");
 8002610:	4811      	ldr	r0, [pc, #68]	; (8002658 <_Z10printErrora+0xb4>)
 8002612:	f00c f87d 	bl	800e710 <iprintf>
 8002616:	e007      	b.n	8002628 <_Z10printErrora+0x84>
    }
    else if (curS == ELM_GENERAL_ERROR)
 8002618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002620:	d102      	bne.n	8002628 <_Z10printErrora+0x84>
    {
    	printf("ERROR: ELM_GENERAL_ERROR");
 8002622:	480e      	ldr	r0, [pc, #56]	; (800265c <_Z10printErrora+0xb8>)
 8002624:	f00c f874 	bl	800e710 <iprintf>
    }
    printf("\r\n");
 8002628:	480d      	ldr	r0, [pc, #52]	; (8002660 <_Z10printErrora+0xbc>)
 800262a:	f00c f8f7 	bl	800e81c <puts>


    LogToSDcardError(curS);
 800262e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002632:	4618      	mov	r0, r3
 8002634:	f000 fcf4 	bl	8003020 <_Z16LogToSDcardErrora>
}
 8002638:	bf00      	nop
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20000f2c 	.word	0x20000f2c
 8002644:	08012a40 	.word	0x08012a40
 8002648:	08012a58 	.word	0x08012a58
 800264c:	08012a74 	.word	0x08012a74
 8002650:	08012a94 	.word	0x08012a94
 8002654:	08012aa8 	.word	0x08012aa8
 8002658:	08012abc 	.word	0x08012abc
 800265c:	08012ad0 	.word	0x08012ad0
 8002660:	08012aec 	.word	0x08012aec

08002664 <_Z11LogToSDcardv>:

void LogToSDcard()
   {
 8002664:	b580      	push	{r7, lr}
 8002666:	b092      	sub	sp, #72	; 0x48
 8002668:	af00      	add	r7, sp, #0
	char logBuf[64];
	int loglen;

    // open the file. note that only one file can be open at a time,
    // so you have to close this one before opening another.
    fr = f_open(&myFile, Filename,  FA_WRITE | FA_OPEN_APPEND);
 800266a:	2232      	movs	r2, #50	; 0x32
 800266c:	49ab      	ldr	r1, [pc, #684]	; (800291c <_Z11LogToSDcardv+0x2b8>)
 800266e:	48ac      	ldr	r0, [pc, #688]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 8002670:	f009 ff58 	bl	800c524 <f_open>
 8002674:	4603      	mov	r3, r0
 8002676:	461a      	mov	r2, r3
 8002678:	4baa      	ldr	r3, [pc, #680]	; (8002924 <_Z11LogToSDcardv+0x2c0>)
 800267a:	701a      	strb	r2, [r3, #0]

    // if the file is available, write to it:
    if (fr == FR_OK)
 800267c:	4ba9      	ldr	r3, [pc, #676]	; (8002924 <_Z11LogToSDcardv+0x2c0>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b00      	cmp	r3, #0
 8002682:	f040 823d 	bne.w	8002b00 <_Z11LogToSDcardv+0x49c>
    {
        printf("ELM327 Data Logging...\r\n");
 8002686:	48a8      	ldr	r0, [pc, #672]	; (8002928 <_Z11LogToSDcardv+0x2c4>)
 8002688:	f00c f8c8 	bl	800e81c <puts>
        f_printf(&myFile, "%d", HOUR);
 800268c:	4ba7      	ldr	r3, [pc, #668]	; (800292c <_Z11LogToSDcardv+0x2c8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	461a      	mov	r2, r3
 8002692:	49a7      	ldr	r1, [pc, #668]	; (8002930 <_Z11LogToSDcardv+0x2cc>)
 8002694:	48a2      	ldr	r0, [pc, #648]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 8002696:	f00a fe55 	bl	800d344 <f_printf>
        f_printf(&myFile, "%s", "h_");
 800269a:	4aa6      	ldr	r2, [pc, #664]	; (8002934 <_Z11LogToSDcardv+0x2d0>)
 800269c:	49a6      	ldr	r1, [pc, #664]	; (8002938 <_Z11LogToSDcardv+0x2d4>)
 800269e:	48a0      	ldr	r0, [pc, #640]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 80026a0:	f00a fe50 	bl	800d344 <f_printf>
        f_printf(&myFile, "%d", MIN);
 80026a4:	4ba5      	ldr	r3, [pc, #660]	; (800293c <_Z11LogToSDcardv+0x2d8>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	461a      	mov	r2, r3
 80026aa:	49a1      	ldr	r1, [pc, #644]	; (8002930 <_Z11LogToSDcardv+0x2cc>)
 80026ac:	489c      	ldr	r0, [pc, #624]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 80026ae:	f00a fe49 	bl	800d344 <f_printf>
        f_printf(&myFile, "%s", "m_");
 80026b2:	4aa3      	ldr	r2, [pc, #652]	; (8002940 <_Z11LogToSDcardv+0x2dc>)
 80026b4:	49a0      	ldr	r1, [pc, #640]	; (8002938 <_Z11LogToSDcardv+0x2d4>)
 80026b6:	489a      	ldr	r0, [pc, #616]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 80026b8:	f00a fe44 	bl	800d344 <f_printf>
        f_printf(&myFile, "%d", SEC);
 80026bc:	4ba1      	ldr	r3, [pc, #644]	; (8002944 <_Z11LogToSDcardv+0x2e0>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	461a      	mov	r2, r3
 80026c2:	499b      	ldr	r1, [pc, #620]	; (8002930 <_Z11LogToSDcardv+0x2cc>)
 80026c4:	4896      	ldr	r0, [pc, #600]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 80026c6:	f00a fe3d 	bl	800d344 <f_printf>
        f_printf(&myFile, "%s", "s");
 80026ca:	4a9f      	ldr	r2, [pc, #636]	; (8002948 <_Z11LogToSDcardv+0x2e4>)
 80026cc:	499a      	ldr	r1, [pc, #616]	; (8002938 <_Z11LogToSDcardv+0x2d4>)
 80026ce:	4894      	ldr	r0, [pc, #592]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 80026d0:	f00a fe38 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%c", ',');
 80026d4:	222c      	movs	r2, #44	; 0x2c
 80026d6:	499d      	ldr	r1, [pc, #628]	; (800294c <_Z11LogToSDcardv+0x2e8>)
 80026d8:	4891      	ldr	r0, [pc, #580]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 80026da:	f00a fe33 	bl	800d344 <f_printf>

        f_printf(&myFile, "%s", "ELM_SUCCESS");
 80026de:	4a9c      	ldr	r2, [pc, #624]	; (8002950 <_Z11LogToSDcardv+0x2ec>)
 80026e0:	4995      	ldr	r1, [pc, #596]	; (8002938 <_Z11LogToSDcardv+0x2d4>)
 80026e2:	488f      	ldr	r0, [pc, #572]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 80026e4:	f00a fe2e 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%c", ',');
 80026e8:	222c      	movs	r2, #44	; 0x2c
 80026ea:	4998      	ldr	r1, [pc, #608]	; (800294c <_Z11LogToSDcardv+0x2e8>)
 80026ec:	488c      	ldr	r0, [pc, #560]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 80026ee:	f00a fe29 	bl	800d344 <f_printf>

        f_printf(&myFile, "%u", runTime/60);
 80026f2:	4b98      	ldr	r3, [pc, #608]	; (8002954 <_Z11LogToSDcardv+0x2f0>)
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	4a98      	ldr	r2, [pc, #608]	; (8002958 <_Z11LogToSDcardv+0x2f4>)
 80026f8:	fba2 2303 	umull	r2, r3, r2, r3
 80026fc:	095b      	lsrs	r3, r3, #5
 80026fe:	b29b      	uxth	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	4996      	ldr	r1, [pc, #600]	; (800295c <_Z11LogToSDcardv+0x2f8>)
 8002704:	4886      	ldr	r0, [pc, #536]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 8002706:	f00a fe1d 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%c", ',');
 800270a:	222c      	movs	r2, #44	; 0x2c
 800270c:	498f      	ldr	r1, [pc, #572]	; (800294c <_Z11LogToSDcardv+0x2e8>)
 800270e:	4884      	ldr	r0, [pc, #528]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 8002710:	f00a fe18 	bl	800d344 <f_printf>

        f_printf(&myFile, "%u", rpm);
 8002714:	4b92      	ldr	r3, [pc, #584]	; (8002960 <_Z11LogToSDcardv+0x2fc>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	461a      	mov	r2, r3
 800271a:	4990      	ldr	r1, [pc, #576]	; (800295c <_Z11LogToSDcardv+0x2f8>)
 800271c:	4880      	ldr	r0, [pc, #512]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 800271e:	f00a fe11 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%c", ',');
 8002722:	222c      	movs	r2, #44	; 0x2c
 8002724:	4989      	ldr	r1, [pc, #548]	; (800294c <_Z11LogToSDcardv+0x2e8>)
 8002726:	487e      	ldr	r0, [pc, #504]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 8002728:	f00a fe0c 	bl	800d344 <f_printf>

        f_printf(&myFile, "%u", kph);
 800272c:	4b8d      	ldr	r3, [pc, #564]	; (8002964 <_Z11LogToSDcardv+0x300>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	498a      	ldr	r1, [pc, #552]	; (800295c <_Z11LogToSDcardv+0x2f8>)
 8002734:	487a      	ldr	r0, [pc, #488]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 8002736:	f00a fe05 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%c", ',');
 800273a:	222c      	movs	r2, #44	; 0x2c
 800273c:	4983      	ldr	r1, [pc, #524]	; (800294c <_Z11LogToSDcardv+0x2e8>)
 800273e:	4878      	ldr	r0, [pc, #480]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 8002740:	f00a fe00 	bl	800d344 <f_printf>

        f_printf(&myFile, "%u", engineLoad);
 8002744:	4b88      	ldr	r3, [pc, #544]	; (8002968 <_Z11LogToSDcardv+0x304>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	461a      	mov	r2, r3
 800274a:	4984      	ldr	r1, [pc, #528]	; (800295c <_Z11LogToSDcardv+0x2f8>)
 800274c:	4874      	ldr	r0, [pc, #464]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 800274e:	f00a fdf9 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%c", ',');
 8002752:	222c      	movs	r2, #44	; 0x2c
 8002754:	497d      	ldr	r1, [pc, #500]	; (800294c <_Z11LogToSDcardv+0x2e8>)
 8002756:	4872      	ldr	r0, [pc, #456]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 8002758:	f00a fdf4 	bl	800d344 <f_printf>

        f_printf(&myFile, "%u", throttle);
 800275c:	4b83      	ldr	r3, [pc, #524]	; (800296c <_Z11LogToSDcardv+0x308>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	461a      	mov	r2, r3
 8002762:	497e      	ldr	r1, [pc, #504]	; (800295c <_Z11LogToSDcardv+0x2f8>)
 8002764:	486e      	ldr	r0, [pc, #440]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 8002766:	f00a fded 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%c", ',');
 800276a:	222c      	movs	r2, #44	; 0x2c
 800276c:	4977      	ldr	r1, [pc, #476]	; (800294c <_Z11LogToSDcardv+0x2e8>)
 800276e:	486c      	ldr	r0, [pc, #432]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 8002770:	f00a fde8 	bl	800d344 <f_printf>

    	f_lseek(&myFile, f_size(&myFile));
 8002774:	4b6a      	ldr	r3, [pc, #424]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	4619      	mov	r1, r3
 800277a:	4869      	ldr	r0, [pc, #420]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 800277c:	f00a faad 	bl	800ccda <f_lseek>
    	loglen = sprintf(logBuf, "%f", instantFuelConsume);
 8002780:	4b7b      	ldr	r3, [pc, #492]	; (8002970 <_Z11LogToSDcardv+0x30c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4618      	mov	r0, r3
 8002786:	f7fd fee7 	bl	8000558 <__aeabi_f2d>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	1d38      	adds	r0, r7, #4
 8002790:	4978      	ldr	r1, [pc, #480]	; (8002974 <_Z11LogToSDcardv+0x310>)
 8002792:	f00c f861 	bl	800e858 <siprintf>
 8002796:	6478      	str	r0, [r7, #68]	; 0x44
    	f_write(&myFile, logBuf, loglen, &myBytes);
 8002798:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800279a:	1d39      	adds	r1, r7, #4
 800279c:	4b76      	ldr	r3, [pc, #472]	; (8002978 <_Z11LogToSDcardv+0x314>)
 800279e:	4860      	ldr	r0, [pc, #384]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 80027a0:	f00a f87e 	bl	800c8a0 <f_write>
        //f_printf(&myFile, "%f", instantFuelConsume);
    	f_printf(&myFile, "%c", ',');
 80027a4:	222c      	movs	r2, #44	; 0x2c
 80027a6:	4969      	ldr	r1, [pc, #420]	; (800294c <_Z11LogToSDcardv+0x2e8>)
 80027a8:	485d      	ldr	r0, [pc, #372]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 80027aa:	f00a fdcb 	bl	800d344 <f_printf>

        f_printf(&myFile, "%u", counter_AccelYp);
 80027ae:	4b73      	ldr	r3, [pc, #460]	; (800297c <_Z11LogToSDcardv+0x318>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	4969      	ldr	r1, [pc, #420]	; (800295c <_Z11LogToSDcardv+0x2f8>)
 80027b6:	485a      	ldr	r0, [pc, #360]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 80027b8:	f00a fdc4 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%c", ',');
 80027bc:	222c      	movs	r2, #44	; 0x2c
 80027be:	4963      	ldr	r1, [pc, #396]	; (800294c <_Z11LogToSDcardv+0x2e8>)
 80027c0:	4857      	ldr	r0, [pc, #348]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 80027c2:	f00a fdbf 	bl	800d344 <f_printf>

        f_printf(&myFile, "%u", counter_Fuel);
 80027c6:	4b6e      	ldr	r3, [pc, #440]	; (8002980 <_Z11LogToSDcardv+0x31c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	461a      	mov	r2, r3
 80027cc:	4963      	ldr	r1, [pc, #396]	; (800295c <_Z11LogToSDcardv+0x2f8>)
 80027ce:	4854      	ldr	r0, [pc, #336]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 80027d0:	f00a fdb8 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%c", ',');
 80027d4:	222c      	movs	r2, #44	; 0x2c
 80027d6:	495d      	ldr	r1, [pc, #372]	; (800294c <_Z11LogToSDcardv+0x2e8>)
 80027d8:	4851      	ldr	r0, [pc, #324]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 80027da:	f00a fdb3 	bl	800d344 <f_printf>

        f_printf(&myFile, "%u", counter_Rpm);
 80027de:	4b69      	ldr	r3, [pc, #420]	; (8002984 <_Z11LogToSDcardv+0x320>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	461a      	mov	r2, r3
 80027e4:	495d      	ldr	r1, [pc, #372]	; (800295c <_Z11LogToSDcardv+0x2f8>)
 80027e6:	484e      	ldr	r0, [pc, #312]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 80027e8:	f00a fdac 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%c", ',');
 80027ec:	222c      	movs	r2, #44	; 0x2c
 80027ee:	4957      	ldr	r1, [pc, #348]	; (800294c <_Z11LogToSDcardv+0x2e8>)
 80027f0:	484b      	ldr	r0, [pc, #300]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 80027f2:	f00a fda7 	bl	800d344 <f_printf>

    	logBuf[0] = {0,};
 80027f6:	2300      	movs	r3, #0
 80027f8:	713b      	strb	r3, [r7, #4]
    	f_lseek(&myFile, f_size(&myFile));
 80027fa:	4b49      	ldr	r3, [pc, #292]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4619      	mov	r1, r3
 8002800:	4847      	ldr	r0, [pc, #284]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 8002802:	f00a fa6a 	bl	800ccda <f_lseek>
    	loglen = sprintf(logBuf, "%f", efficiencyScore);
 8002806:	4b60      	ldr	r3, [pc, #384]	; (8002988 <_Z11LogToSDcardv+0x324>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4618      	mov	r0, r3
 800280c:	f7fd fea4 	bl	8000558 <__aeabi_f2d>
 8002810:	4602      	mov	r2, r0
 8002812:	460b      	mov	r3, r1
 8002814:	1d38      	adds	r0, r7, #4
 8002816:	4957      	ldr	r1, [pc, #348]	; (8002974 <_Z11LogToSDcardv+0x310>)
 8002818:	f00c f81e 	bl	800e858 <siprintf>
 800281c:	6478      	str	r0, [r7, #68]	; 0x44
    	f_write(&myFile, logBuf, loglen, &myBytes);
 800281e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002820:	1d39      	adds	r1, r7, #4
 8002822:	4b55      	ldr	r3, [pc, #340]	; (8002978 <_Z11LogToSDcardv+0x314>)
 8002824:	483e      	ldr	r0, [pc, #248]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 8002826:	f00a f83b 	bl	800c8a0 <f_write>
        //f_printf(&myFile, "%f", efficiencyScore);
    	f_printf(&myFile, "%c", ',');
 800282a:	222c      	movs	r2, #44	; 0x2c
 800282c:	4947      	ldr	r1, [pc, #284]	; (800294c <_Z11LogToSDcardv+0x2e8>)
 800282e:	483c      	ldr	r0, [pc, #240]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 8002830:	f00a fd88 	bl	800d344 <f_printf>

        f_printf(&myFile, "%u", counter_AccelX);
 8002834:	4b55      	ldr	r3, [pc, #340]	; (800298c <_Z11LogToSDcardv+0x328>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	461a      	mov	r2, r3
 800283a:	4948      	ldr	r1, [pc, #288]	; (800295c <_Z11LogToSDcardv+0x2f8>)
 800283c:	4838      	ldr	r0, [pc, #224]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 800283e:	f00a fd81 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%c", ',');
 8002842:	222c      	movs	r2, #44	; 0x2c
 8002844:	4941      	ldr	r1, [pc, #260]	; (800294c <_Z11LogToSDcardv+0x2e8>)
 8002846:	4836      	ldr	r0, [pc, #216]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 8002848:	f00a fd7c 	bl	800d344 <f_printf>

        f_printf(&myFile, "%u", counter_AccelYm);
 800284c:	4b50      	ldr	r3, [pc, #320]	; (8002990 <_Z11LogToSDcardv+0x32c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	461a      	mov	r2, r3
 8002852:	4942      	ldr	r1, [pc, #264]	; (800295c <_Z11LogToSDcardv+0x2f8>)
 8002854:	4832      	ldr	r0, [pc, #200]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 8002856:	f00a fd75 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%c", ',');
 800285a:	222c      	movs	r2, #44	; 0x2c
 800285c:	493b      	ldr	r1, [pc, #236]	; (800294c <_Z11LogToSDcardv+0x2e8>)
 800285e:	4830      	ldr	r0, [pc, #192]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 8002860:	f00a fd70 	bl	800d344 <f_printf>

        f_printf(&myFile, "%u", counter_AccelYm2);
 8002864:	4b4b      	ldr	r3, [pc, #300]	; (8002994 <_Z11LogToSDcardv+0x330>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	461a      	mov	r2, r3
 800286a:	493c      	ldr	r1, [pc, #240]	; (800295c <_Z11LogToSDcardv+0x2f8>)
 800286c:	482c      	ldr	r0, [pc, #176]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 800286e:	f00a fd69 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%c", ',');
 8002872:	222c      	movs	r2, #44	; 0x2c
 8002874:	4935      	ldr	r1, [pc, #212]	; (800294c <_Z11LogToSDcardv+0x2e8>)
 8002876:	482a      	ldr	r0, [pc, #168]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 8002878:	f00a fd64 	bl	800d344 <f_printf>

        f_printf(&myFile, "%u", counter_Time);
 800287c:	4b46      	ldr	r3, [pc, #280]	; (8002998 <_Z11LogToSDcardv+0x334>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	461a      	mov	r2, r3
 8002882:	4936      	ldr	r1, [pc, #216]	; (800295c <_Z11LogToSDcardv+0x2f8>)
 8002884:	4826      	ldr	r0, [pc, #152]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 8002886:	f00a fd5d 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%c", ',');
 800288a:	222c      	movs	r2, #44	; 0x2c
 800288c:	492f      	ldr	r1, [pc, #188]	; (800294c <_Z11LogToSDcardv+0x2e8>)
 800288e:	4824      	ldr	r0, [pc, #144]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 8002890:	f00a fd58 	bl	800d344 <f_printf>

        f_printf(&myFile, "%u", counter_KphRpm);
 8002894:	4b41      	ldr	r3, [pc, #260]	; (800299c <_Z11LogToSDcardv+0x338>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	4930      	ldr	r1, [pc, #192]	; (800295c <_Z11LogToSDcardv+0x2f8>)
 800289c:	4820      	ldr	r0, [pc, #128]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 800289e:	f00a fd51 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%c", ',');
 80028a2:	222c      	movs	r2, #44	; 0x2c
 80028a4:	4929      	ldr	r1, [pc, #164]	; (800294c <_Z11LogToSDcardv+0x2e8>)
 80028a6:	481e      	ldr	r0, [pc, #120]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 80028a8:	f00a fd4c 	bl	800d344 <f_printf>

    	logBuf[0] = {0,};
 80028ac:	2300      	movs	r3, #0
 80028ae:	713b      	strb	r3, [r7, #4]
    	f_lseek(&myFile, f_size(&myFile));
 80028b0:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	4619      	mov	r1, r3
 80028b6:	481a      	ldr	r0, [pc, #104]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 80028b8:	f00a fa0f 	bl	800ccda <f_lseek>
    	loglen = sprintf(logBuf, "%f", safetyScore);
 80028bc:	4b38      	ldr	r3, [pc, #224]	; (80029a0 <_Z11LogToSDcardv+0x33c>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7fd fe49 	bl	8000558 <__aeabi_f2d>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	1d38      	adds	r0, r7, #4
 80028cc:	4929      	ldr	r1, [pc, #164]	; (8002974 <_Z11LogToSDcardv+0x310>)
 80028ce:	f00b ffc3 	bl	800e858 <siprintf>
 80028d2:	6478      	str	r0, [r7, #68]	; 0x44
    	f_write(&myFile, logBuf, loglen, &myBytes);
 80028d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028d6:	1d39      	adds	r1, r7, #4
 80028d8:	4b27      	ldr	r3, [pc, #156]	; (8002978 <_Z11LogToSDcardv+0x314>)
 80028da:	4811      	ldr	r0, [pc, #68]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 80028dc:	f009 ffe0 	bl	800c8a0 <f_write>
        //f_printf(&myFile, "%f", safetyScore);
    	f_printf(&myFile, "%c", ',');
 80028e0:	222c      	movs	r2, #44	; 0x2c
 80028e2:	491a      	ldr	r1, [pc, #104]	; (800294c <_Z11LogToSDcardv+0x2e8>)
 80028e4:	480e      	ldr	r0, [pc, #56]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 80028e6:	f00a fd2d 	bl	800d344 <f_printf>

    	logBuf[0] = {0,};
 80028ea:	2300      	movs	r3, #0
 80028ec:	713b      	strb	r3, [r7, #4]
    	f_lseek(&myFile, f_size(&myFile));
 80028ee:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	4619      	mov	r1, r3
 80028f4:	480a      	ldr	r0, [pc, #40]	; (8002920 <_Z11LogToSDcardv+0x2bc>)
 80028f6:	f00a f9f0 	bl	800ccda <f_lseek>
    	loglen = sprintf(logBuf, "%f", drivingScore);
 80028fa:	4b2a      	ldr	r3, [pc, #168]	; (80029a4 <_Z11LogToSDcardv+0x340>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7fd fe2a 	bl	8000558 <__aeabi_f2d>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	1d38      	adds	r0, r7, #4
 800290a:	491a      	ldr	r1, [pc, #104]	; (8002974 <_Z11LogToSDcardv+0x310>)
 800290c:	f00b ffa4 	bl	800e858 <siprintf>
 8002910:	6478      	str	r0, [r7, #68]	; 0x44
    	f_write(&myFile, logBuf, loglen, &myBytes);
 8002912:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002914:	1d39      	adds	r1, r7, #4
 8002916:	4b18      	ldr	r3, [pc, #96]	; (8002978 <_Z11LogToSDcardv+0x314>)
 8002918:	e046      	b.n	80029a8 <_Z11LogToSDcardv+0x344>
 800291a:	bf00      	nop
 800291c:	20000000 	.word	0x20000000
 8002920:	200011bc 	.word	0x200011bc
 8002924:	200013f0 	.word	0x200013f0
 8002928:	08012af0 	.word	0x08012af0
 800292c:	20000f38 	.word	0x20000f38
 8002930:	08012b08 	.word	0x08012b08
 8002934:	08012b0c 	.word	0x08012b0c
 8002938:	080127b8 	.word	0x080127b8
 800293c:	20000f3c 	.word	0x20000f3c
 8002940:	08012b10 	.word	0x08012b10
 8002944:	20000f40 	.word	0x20000f40
 8002948:	08012b14 	.word	0x08012b14
 800294c:	08012b18 	.word	0x08012b18
 8002950:	0801296c 	.word	0x0801296c
 8002954:	20000e80 	.word	0x20000e80
 8002958:	88888889 	.word	0x88888889
 800295c:	08012b1c 	.word	0x08012b1c
 8002960:	20000e74 	.word	0x20000e74
 8002964:	20000e78 	.word	0x20000e78
 8002968:	20000e7c 	.word	0x20000e7c
 800296c:	20000e8c 	.word	0x20000e8c
 8002970:	20000028 	.word	0x20000028
 8002974:	08012b20 	.word	0x08012b20
 8002978:	200013ec 	.word	0x200013ec
 800297c:	20000ec0 	.word	0x20000ec0
 8002980:	20000ec4 	.word	0x20000ec4
 8002984:	20000ec8 	.word	0x20000ec8
 8002988:	20000ecc 	.word	0x20000ecc
 800298c:	20000ed0 	.word	0x20000ed0
 8002990:	20000ed4 	.word	0x20000ed4
 8002994:	20000ed8 	.word	0x20000ed8
 8002998:	20000edc 	.word	0x20000edc
 800299c:	20000ee0 	.word	0x20000ee0
 80029a0:	20000ee8 	.word	0x20000ee8
 80029a4:	20000010 	.word	0x20000010
 80029a8:	4859      	ldr	r0, [pc, #356]	; (8002b10 <_Z11LogToSDcardv+0x4ac>)
 80029aa:	f009 ff79 	bl	800c8a0 <f_write>
        //f_printf(&myFile, "%f", drivingScore);
    	f_printf(&myFile, "%c", ',');
 80029ae:	222c      	movs	r2, #44	; 0x2c
 80029b0:	4958      	ldr	r1, [pc, #352]	; (8002b14 <_Z11LogToSDcardv+0x4b0>)
 80029b2:	4857      	ldr	r0, [pc, #348]	; (8002b10 <_Z11LogToSDcardv+0x4ac>)
 80029b4:	f00a fcc6 	bl	800d344 <f_printf>

    	logBuf[0] = {0,};
 80029b8:	2300      	movs	r3, #0
 80029ba:	713b      	strb	r3, [r7, #4]
    	f_lseek(&myFile, f_size(&myFile));
 80029bc:	4b54      	ldr	r3, [pc, #336]	; (8002b10 <_Z11LogToSDcardv+0x4ac>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	4619      	mov	r1, r3
 80029c2:	4853      	ldr	r0, [pc, #332]	; (8002b10 <_Z11LogToSDcardv+0x4ac>)
 80029c4:	f00a f989 	bl	800ccda <f_lseek>
    	loglen = sprintf(logBuf, "%f", averagedrivingScore);
 80029c8:	4b53      	ldr	r3, [pc, #332]	; (8002b18 <_Z11LogToSDcardv+0x4b4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fdc3 	bl	8000558 <__aeabi_f2d>
 80029d2:	4602      	mov	r2, r0
 80029d4:	460b      	mov	r3, r1
 80029d6:	1d38      	adds	r0, r7, #4
 80029d8:	4950      	ldr	r1, [pc, #320]	; (8002b1c <_Z11LogToSDcardv+0x4b8>)
 80029da:	f00b ff3d 	bl	800e858 <siprintf>
 80029de:	6478      	str	r0, [r7, #68]	; 0x44
    	f_write(&myFile, logBuf, loglen, &myBytes);
 80029e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029e2:	1d39      	adds	r1, r7, #4
 80029e4:	4b4e      	ldr	r3, [pc, #312]	; (8002b20 <_Z11LogToSDcardv+0x4bc>)
 80029e6:	484a      	ldr	r0, [pc, #296]	; (8002b10 <_Z11LogToSDcardv+0x4ac>)
 80029e8:	f009 ff5a 	bl	800c8a0 <f_write>
        //f_printf(&myFile, "%f", averagedrivingScore);
    	f_printf(&myFile, "%c", ',');
 80029ec:	222c      	movs	r2, #44	; 0x2c
 80029ee:	4949      	ldr	r1, [pc, #292]	; (8002b14 <_Z11LogToSDcardv+0x4b0>)
 80029f0:	4847      	ldr	r0, [pc, #284]	; (8002b10 <_Z11LogToSDcardv+0x4ac>)
 80029f2:	f00a fca7 	bl	800d344 <f_printf>

    	logBuf[0] = {0,};
 80029f6:	2300      	movs	r3, #0
 80029f8:	713b      	strb	r3, [r7, #4]
    	f_lseek(&myFile, f_size(&myFile));
 80029fa:	4b45      	ldr	r3, [pc, #276]	; (8002b10 <_Z11LogToSDcardv+0x4ac>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	4619      	mov	r1, r3
 8002a00:	4843      	ldr	r0, [pc, #268]	; (8002b10 <_Z11LogToSDcardv+0x4ac>)
 8002a02:	f00a f96a 	bl	800ccda <f_lseek>
    	loglen = sprintf(logBuf, "%.2f", f_pitch);
 8002a06:	4b47      	ldr	r3, [pc, #284]	; (8002b24 <_Z11LogToSDcardv+0x4c0>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7fd fda4 	bl	8000558 <__aeabi_f2d>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	1d38      	adds	r0, r7, #4
 8002a16:	4944      	ldr	r1, [pc, #272]	; (8002b28 <_Z11LogToSDcardv+0x4c4>)
 8002a18:	f00b ff1e 	bl	800e858 <siprintf>
 8002a1c:	6478      	str	r0, [r7, #68]	; 0x44
    	f_write(&myFile, logBuf, loglen, &myBytes);
 8002a1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a20:	1d39      	adds	r1, r7, #4
 8002a22:	4b3f      	ldr	r3, [pc, #252]	; (8002b20 <_Z11LogToSDcardv+0x4bc>)
 8002a24:	483a      	ldr	r0, [pc, #232]	; (8002b10 <_Z11LogToSDcardv+0x4ac>)
 8002a26:	f009 ff3b 	bl	800c8a0 <f_write>
        //f_printf(&myFile, "%f", f_pitch);
    	f_printf(&myFile, "%c", ',');
 8002a2a:	222c      	movs	r2, #44	; 0x2c
 8002a2c:	4939      	ldr	r1, [pc, #228]	; (8002b14 <_Z11LogToSDcardv+0x4b0>)
 8002a2e:	4838      	ldr	r0, [pc, #224]	; (8002b10 <_Z11LogToSDcardv+0x4ac>)
 8002a30:	f00a fc88 	bl	800d344 <f_printf>

    	logBuf[0] = {0,};
 8002a34:	2300      	movs	r3, #0
 8002a36:	713b      	strb	r3, [r7, #4]
    	f_lseek(&myFile, f_size(&myFile));
 8002a38:	4b35      	ldr	r3, [pc, #212]	; (8002b10 <_Z11LogToSDcardv+0x4ac>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	4834      	ldr	r0, [pc, #208]	; (8002b10 <_Z11LogToSDcardv+0x4ac>)
 8002a40:	f00a f94b 	bl	800ccda <f_lseek>
    	loglen = sprintf(logBuf, "%.2f", f_roll);
 8002a44:	4b39      	ldr	r3, [pc, #228]	; (8002b2c <_Z11LogToSDcardv+0x4c8>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fd fd85 	bl	8000558 <__aeabi_f2d>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	460b      	mov	r3, r1
 8002a52:	1d38      	adds	r0, r7, #4
 8002a54:	4934      	ldr	r1, [pc, #208]	; (8002b28 <_Z11LogToSDcardv+0x4c4>)
 8002a56:	f00b feff 	bl	800e858 <siprintf>
 8002a5a:	6478      	str	r0, [r7, #68]	; 0x44
    	f_write(&myFile, logBuf, loglen, &myBytes);
 8002a5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a5e:	1d39      	adds	r1, r7, #4
 8002a60:	4b2f      	ldr	r3, [pc, #188]	; (8002b20 <_Z11LogToSDcardv+0x4bc>)
 8002a62:	482b      	ldr	r0, [pc, #172]	; (8002b10 <_Z11LogToSDcardv+0x4ac>)
 8002a64:	f009 ff1c 	bl	800c8a0 <f_write>
        //f_printf(&myFile, "%f", f_roll);
    	f_printf(&myFile, "%c", ',');
 8002a68:	222c      	movs	r2, #44	; 0x2c
 8002a6a:	492a      	ldr	r1, [pc, #168]	; (8002b14 <_Z11LogToSDcardv+0x4b0>)
 8002a6c:	4828      	ldr	r0, [pc, #160]	; (8002b10 <_Z11LogToSDcardv+0x4ac>)
 8002a6e:	f00a fc69 	bl	800d344 <f_printf>

    	logBuf[0] = {0,};
 8002a72:	2300      	movs	r3, #0
 8002a74:	713b      	strb	r3, [r7, #4]
    	f_lseek(&myFile, f_size(&myFile));
 8002a76:	4b26      	ldr	r3, [pc, #152]	; (8002b10 <_Z11LogToSDcardv+0x4ac>)
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4824      	ldr	r0, [pc, #144]	; (8002b10 <_Z11LogToSDcardv+0x4ac>)
 8002a7e:	f00a f92c 	bl	800ccda <f_lseek>
    	loglen = sprintf(logBuf, "%.2f", f_accelX);
 8002a82:	4b2b      	ldr	r3, [pc, #172]	; (8002b30 <_Z11LogToSDcardv+0x4cc>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7fd fd66 	bl	8000558 <__aeabi_f2d>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	1d38      	adds	r0, r7, #4
 8002a92:	4925      	ldr	r1, [pc, #148]	; (8002b28 <_Z11LogToSDcardv+0x4c4>)
 8002a94:	f00b fee0 	bl	800e858 <siprintf>
 8002a98:	6478      	str	r0, [r7, #68]	; 0x44
    	f_write(&myFile, logBuf, loglen, &myBytes);
 8002a9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a9c:	1d39      	adds	r1, r7, #4
 8002a9e:	4b20      	ldr	r3, [pc, #128]	; (8002b20 <_Z11LogToSDcardv+0x4bc>)
 8002aa0:	481b      	ldr	r0, [pc, #108]	; (8002b10 <_Z11LogToSDcardv+0x4ac>)
 8002aa2:	f009 fefd 	bl	800c8a0 <f_write>
        //f_printf(&myFile, "%f", f_accelX);
    	f_printf(&myFile, "%c", ',');
 8002aa6:	222c      	movs	r2, #44	; 0x2c
 8002aa8:	491a      	ldr	r1, [pc, #104]	; (8002b14 <_Z11LogToSDcardv+0x4b0>)
 8002aaa:	4819      	ldr	r0, [pc, #100]	; (8002b10 <_Z11LogToSDcardv+0x4ac>)
 8002aac:	f00a fc4a 	bl	800d344 <f_printf>

    	logBuf[0] = {0,};
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	713b      	strb	r3, [r7, #4]
    	f_lseek(&myFile, f_size(&myFile));
 8002ab4:	4b16      	ldr	r3, [pc, #88]	; (8002b10 <_Z11LogToSDcardv+0x4ac>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4815      	ldr	r0, [pc, #84]	; (8002b10 <_Z11LogToSDcardv+0x4ac>)
 8002abc:	f00a f90d 	bl	800ccda <f_lseek>
    	loglen = sprintf(logBuf, "%.2f", f_accelY);
 8002ac0:	4b1c      	ldr	r3, [pc, #112]	; (8002b34 <_Z11LogToSDcardv+0x4d0>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fd fd47 	bl	8000558 <__aeabi_f2d>
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	1d38      	adds	r0, r7, #4
 8002ad0:	4915      	ldr	r1, [pc, #84]	; (8002b28 <_Z11LogToSDcardv+0x4c4>)
 8002ad2:	f00b fec1 	bl	800e858 <siprintf>
 8002ad6:	6478      	str	r0, [r7, #68]	; 0x44
    	f_write(&myFile, logBuf, loglen, &myBytes);
 8002ad8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ada:	1d39      	adds	r1, r7, #4
 8002adc:	4b10      	ldr	r3, [pc, #64]	; (8002b20 <_Z11LogToSDcardv+0x4bc>)
 8002ade:	480c      	ldr	r0, [pc, #48]	; (8002b10 <_Z11LogToSDcardv+0x4ac>)
 8002ae0:	f009 fede 	bl	800c8a0 <f_write>
        //f_printf(&myFile, "%f", f_accelY);
    	f_printf(&myFile, "%c", ',');
 8002ae4:	222c      	movs	r2, #44	; 0x2c
 8002ae6:	490b      	ldr	r1, [pc, #44]	; (8002b14 <_Z11LogToSDcardv+0x4b0>)
 8002ae8:	4809      	ldr	r0, [pc, #36]	; (8002b10 <_Z11LogToSDcardv+0x4ac>)
 8002aea:	f00a fc2b 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%s", "\n");
 8002aee:	4a12      	ldr	r2, [pc, #72]	; (8002b38 <_Z11LogToSDcardv+0x4d4>)
 8002af0:	4912      	ldr	r1, [pc, #72]	; (8002b3c <_Z11LogToSDcardv+0x4d8>)
 8002af2:	4807      	ldr	r0, [pc, #28]	; (8002b10 <_Z11LogToSDcardv+0x4ac>)
 8002af4:	f00a fc26 	bl	800d344 <f_printf>

        f_close(&myFile);
 8002af8:	4805      	ldr	r0, [pc, #20]	; (8002b10 <_Z11LogToSDcardv+0x4ac>)
 8002afa:	f00a f8c4 	bl	800cc86 <f_close>
    /*else
    {
        Serial.println("error opening LOG_XXXX.txt");
        delay(100);
    }*/
}
 8002afe:	e003      	b.n	8002b08 <_Z11LogToSDcardv+0x4a4>
    	printf("Failed to open %s \r\n", Filename);
 8002b00:	490f      	ldr	r1, [pc, #60]	; (8002b40 <_Z11LogToSDcardv+0x4dc>)
 8002b02:	4810      	ldr	r0, [pc, #64]	; (8002b44 <_Z11LogToSDcardv+0x4e0>)
 8002b04:	f00b fe04 	bl	800e710 <iprintf>
}
 8002b08:	bf00      	nop
 8002b0a:	3748      	adds	r7, #72	; 0x48
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	200011bc 	.word	0x200011bc
 8002b14:	08012b18 	.word	0x08012b18
 8002b18:	20000014 	.word	0x20000014
 8002b1c:	08012b20 	.word	0x08012b20
 8002b20:	200013ec 	.word	0x200013ec
 8002b24:	20000e54 	.word	0x20000e54
 8002b28:	08012b24 	.word	0x08012b24
 8002b2c:	20000e58 	.word	0x20000e58
 8002b30:	20000e5c 	.word	0x20000e5c
 8002b34:	20000e60 	.word	0x20000e60
 8002b38:	080127bc 	.word	0x080127bc
 8002b3c:	080127b8 	.word	0x080127b8
 8002b40:	20000000 	.word	0x20000000
 8002b44:	08012b2c 	.word	0x08012b2c

08002b48 <_Z12LogToSDcard2v>:

void LogToSDcard2()
   {
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b092      	sub	sp, #72	; 0x48
 8002b4c:	af00      	add	r7, sp, #0
	char logBuf[64];
	int loglen;

    // open the file. note that only one file can be open at a time,
    // so you have to close this one before opening another.
    fr = f_open(&myFile, Filename,  FA_WRITE | FA_OPEN_APPEND);
 8002b4e:	2232      	movs	r2, #50	; 0x32
 8002b50:	49ab      	ldr	r1, [pc, #684]	; (8002e00 <_Z12LogToSDcard2v+0x2b8>)
 8002b52:	48ac      	ldr	r0, [pc, #688]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002b54:	f009 fce6 	bl	800c524 <f_open>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	4baa      	ldr	r3, [pc, #680]	; (8002e08 <_Z12LogToSDcard2v+0x2c0>)
 8002b5e:	701a      	strb	r2, [r3, #0]

    // if the file is available, write to it:
    if (fr == FR_OK)
 8002b60:	4ba9      	ldr	r3, [pc, #676]	; (8002e08 <_Z12LogToSDcard2v+0x2c0>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f040 8237 	bne.w	8002fd8 <_Z12LogToSDcard2v+0x490>
    {
    	f_printf(&myFile, "%d", HOUR);
 8002b6a:	4ba8      	ldr	r3, [pc, #672]	; (8002e0c <_Z12LogToSDcard2v+0x2c4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	49a7      	ldr	r1, [pc, #668]	; (8002e10 <_Z12LogToSDcard2v+0x2c8>)
 8002b72:	48a4      	ldr	r0, [pc, #656]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002b74:	f00a fbe6 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%s", "h_");
 8002b78:	4aa6      	ldr	r2, [pc, #664]	; (8002e14 <_Z12LogToSDcard2v+0x2cc>)
 8002b7a:	49a7      	ldr	r1, [pc, #668]	; (8002e18 <_Z12LogToSDcard2v+0x2d0>)
 8002b7c:	48a1      	ldr	r0, [pc, #644]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002b7e:	f00a fbe1 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%d", MIN);
 8002b82:	4ba6      	ldr	r3, [pc, #664]	; (8002e1c <_Z12LogToSDcard2v+0x2d4>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	461a      	mov	r2, r3
 8002b88:	49a1      	ldr	r1, [pc, #644]	; (8002e10 <_Z12LogToSDcard2v+0x2c8>)
 8002b8a:	489e      	ldr	r0, [pc, #632]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002b8c:	f00a fbda 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%s", "m_");
 8002b90:	4aa3      	ldr	r2, [pc, #652]	; (8002e20 <_Z12LogToSDcard2v+0x2d8>)
 8002b92:	49a1      	ldr	r1, [pc, #644]	; (8002e18 <_Z12LogToSDcard2v+0x2d0>)
 8002b94:	489b      	ldr	r0, [pc, #620]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002b96:	f00a fbd5 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%d", SEC);
 8002b9a:	4ba2      	ldr	r3, [pc, #648]	; (8002e24 <_Z12LogToSDcard2v+0x2dc>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	499b      	ldr	r1, [pc, #620]	; (8002e10 <_Z12LogToSDcard2v+0x2c8>)
 8002ba2:	4898      	ldr	r0, [pc, #608]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002ba4:	f00a fbce 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%s", "s");
 8002ba8:	4a9f      	ldr	r2, [pc, #636]	; (8002e28 <_Z12LogToSDcard2v+0x2e0>)
 8002baa:	499b      	ldr	r1, [pc, #620]	; (8002e18 <_Z12LogToSDcard2v+0x2d0>)
 8002bac:	4895      	ldr	r0, [pc, #596]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002bae:	f00a fbc9 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%c", ',');
 8002bb2:	222c      	movs	r2, #44	; 0x2c
 8002bb4:	499d      	ldr	r1, [pc, #628]	; (8002e2c <_Z12LogToSDcard2v+0x2e4>)
 8002bb6:	4893      	ldr	r0, [pc, #588]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002bb8:	f00a fbc4 	bl	800d344 <f_printf>

    	f_printf(&myFile, "%s", "ELM_SUCCESS");
 8002bbc:	4a9c      	ldr	r2, [pc, #624]	; (8002e30 <_Z12LogToSDcard2v+0x2e8>)
 8002bbe:	4996      	ldr	r1, [pc, #600]	; (8002e18 <_Z12LogToSDcard2v+0x2d0>)
 8002bc0:	4890      	ldr	r0, [pc, #576]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002bc2:	f00a fbbf 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%c", ',');
 8002bc6:	222c      	movs	r2, #44	; 0x2c
 8002bc8:	4998      	ldr	r1, [pc, #608]	; (8002e2c <_Z12LogToSDcard2v+0x2e4>)
 8002bca:	488e      	ldr	r0, [pc, #568]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002bcc:	f00a fbba 	bl	800d344 <f_printf>

    	f_printf(&myFile, "%u", runTime/60);
 8002bd0:	4b98      	ldr	r3, [pc, #608]	; (8002e34 <_Z12LogToSDcard2v+0x2ec>)
 8002bd2:	881b      	ldrh	r3, [r3, #0]
 8002bd4:	4a98      	ldr	r2, [pc, #608]	; (8002e38 <_Z12LogToSDcard2v+0x2f0>)
 8002bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	461a      	mov	r2, r3
 8002be0:	4996      	ldr	r1, [pc, #600]	; (8002e3c <_Z12LogToSDcard2v+0x2f4>)
 8002be2:	4888      	ldr	r0, [pc, #544]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002be4:	f00a fbae 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%c", ',');
 8002be8:	222c      	movs	r2, #44	; 0x2c
 8002bea:	4990      	ldr	r1, [pc, #576]	; (8002e2c <_Z12LogToSDcard2v+0x2e4>)
 8002bec:	4885      	ldr	r0, [pc, #532]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002bee:	f00a fba9 	bl	800d344 <f_printf>

 	    f_printf(&myFile, "%u", rpm);
 8002bf2:	4b93      	ldr	r3, [pc, #588]	; (8002e40 <_Z12LogToSDcard2v+0x2f8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	4990      	ldr	r1, [pc, #576]	; (8002e3c <_Z12LogToSDcard2v+0x2f4>)
 8002bfa:	4882      	ldr	r0, [pc, #520]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002bfc:	f00a fba2 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%c", ',');
 8002c00:	222c      	movs	r2, #44	; 0x2c
 8002c02:	498a      	ldr	r1, [pc, #552]	; (8002e2c <_Z12LogToSDcard2v+0x2e4>)
 8002c04:	487f      	ldr	r0, [pc, #508]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002c06:	f00a fb9d 	bl	800d344 <f_printf>

    	f_printf(&myFile, "%u", kph);
 8002c0a:	4b8e      	ldr	r3, [pc, #568]	; (8002e44 <_Z12LogToSDcard2v+0x2fc>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	461a      	mov	r2, r3
 8002c10:	498a      	ldr	r1, [pc, #552]	; (8002e3c <_Z12LogToSDcard2v+0x2f4>)
 8002c12:	487c      	ldr	r0, [pc, #496]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002c14:	f00a fb96 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%c", ',');
 8002c18:	222c      	movs	r2, #44	; 0x2c
 8002c1a:	4984      	ldr	r1, [pc, #528]	; (8002e2c <_Z12LogToSDcard2v+0x2e4>)
 8002c1c:	4879      	ldr	r0, [pc, #484]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002c1e:	f00a fb91 	bl	800d344 <f_printf>

    	f_printf(&myFile, "%u", engineLoad);
 8002c22:	4b89      	ldr	r3, [pc, #548]	; (8002e48 <_Z12LogToSDcard2v+0x300>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	461a      	mov	r2, r3
 8002c28:	4984      	ldr	r1, [pc, #528]	; (8002e3c <_Z12LogToSDcard2v+0x2f4>)
 8002c2a:	4876      	ldr	r0, [pc, #472]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002c2c:	f00a fb8a 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%c", ',');
 8002c30:	222c      	movs	r2, #44	; 0x2c
 8002c32:	497e      	ldr	r1, [pc, #504]	; (8002e2c <_Z12LogToSDcard2v+0x2e4>)
 8002c34:	4873      	ldr	r0, [pc, #460]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002c36:	f00a fb85 	bl	800d344 <f_printf>

    	f_printf(&myFile, "%u", throttle);
 8002c3a:	4b84      	ldr	r3, [pc, #528]	; (8002e4c <_Z12LogToSDcard2v+0x304>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	461a      	mov	r2, r3
 8002c40:	497e      	ldr	r1, [pc, #504]	; (8002e3c <_Z12LogToSDcard2v+0x2f4>)
 8002c42:	4870      	ldr	r0, [pc, #448]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002c44:	f00a fb7e 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%c", ',');
 8002c48:	222c      	movs	r2, #44	; 0x2c
 8002c4a:	4978      	ldr	r1, [pc, #480]	; (8002e2c <_Z12LogToSDcard2v+0x2e4>)
 8002c4c:	486d      	ldr	r0, [pc, #436]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002c4e:	f00a fb79 	bl	800d344 <f_printf>


    	f_lseek(&myFile, f_size(&myFile));
 8002c52:	4b6c      	ldr	r3, [pc, #432]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	4619      	mov	r1, r3
 8002c58:	486a      	ldr	r0, [pc, #424]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002c5a:	f00a f83e 	bl	800ccda <f_lseek>
    	loglen = sprintf(logBuf, "%f", commandedThrottleActuator);
 8002c5e:	4b7c      	ldr	r3, [pc, #496]	; (8002e50 <_Z12LogToSDcard2v+0x308>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fd fc78 	bl	8000558 <__aeabi_f2d>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	1d38      	adds	r0, r7, #4
 8002c6e:	4979      	ldr	r1, [pc, #484]	; (8002e54 <_Z12LogToSDcard2v+0x30c>)
 8002c70:	f00b fdf2 	bl	800e858 <siprintf>
 8002c74:	6478      	str	r0, [r7, #68]	; 0x44
    	f_write(&myFile, logBuf, loglen, &myBytes);
 8002c76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c78:	1d39      	adds	r1, r7, #4
 8002c7a:	4b77      	ldr	r3, [pc, #476]	; (8002e58 <_Z12LogToSDcard2v+0x310>)
 8002c7c:	4861      	ldr	r0, [pc, #388]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002c7e:	f009 fe0f 	bl	800c8a0 <f_write>
    	//f_printf(&myFile, "%f", commandedThrottleActuator);
    	f_printf(&myFile, "%c", ',');
 8002c82:	222c      	movs	r2, #44	; 0x2c
 8002c84:	4969      	ldr	r1, [pc, #420]	; (8002e2c <_Z12LogToSDcard2v+0x2e4>)
 8002c86:	485f      	ldr	r0, [pc, #380]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002c88:	f00a fb5c 	bl	800d344 <f_printf>

 	    f_printf(&myFile, "%u", counter_AccelYp);
 8002c8c:	4b73      	ldr	r3, [pc, #460]	; (8002e5c <_Z12LogToSDcard2v+0x314>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	461a      	mov	r2, r3
 8002c92:	496a      	ldr	r1, [pc, #424]	; (8002e3c <_Z12LogToSDcard2v+0x2f4>)
 8002c94:	485b      	ldr	r0, [pc, #364]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002c96:	f00a fb55 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%c", ',');
 8002c9a:	222c      	movs	r2, #44	; 0x2c
 8002c9c:	4963      	ldr	r1, [pc, #396]	; (8002e2c <_Z12LogToSDcard2v+0x2e4>)
 8002c9e:	4859      	ldr	r0, [pc, #356]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002ca0:	f00a fb50 	bl	800d344 <f_printf>

 	    f_printf(&myFile, "%u", counter_Throttle);
 8002ca4:	4b6e      	ldr	r3, [pc, #440]	; (8002e60 <_Z12LogToSDcard2v+0x318>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	461a      	mov	r2, r3
 8002caa:	4964      	ldr	r1, [pc, #400]	; (8002e3c <_Z12LogToSDcard2v+0x2f4>)
 8002cac:	4855      	ldr	r0, [pc, #340]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002cae:	f00a fb49 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%c", ',');
 8002cb2:	222c      	movs	r2, #44	; 0x2c
 8002cb4:	495d      	ldr	r1, [pc, #372]	; (8002e2c <_Z12LogToSDcard2v+0x2e4>)
 8002cb6:	4853      	ldr	r0, [pc, #332]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002cb8:	f00a fb44 	bl	800d344 <f_printf>

 	    f_printf(&myFile, "%u", counter_Rpm);
 8002cbc:	4b69      	ldr	r3, [pc, #420]	; (8002e64 <_Z12LogToSDcard2v+0x31c>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	495e      	ldr	r1, [pc, #376]	; (8002e3c <_Z12LogToSDcard2v+0x2f4>)
 8002cc4:	484f      	ldr	r0, [pc, #316]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002cc6:	f00a fb3d 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%c", ',');
 8002cca:	222c      	movs	r2, #44	; 0x2c
 8002ccc:	4957      	ldr	r1, [pc, #348]	; (8002e2c <_Z12LogToSDcard2v+0x2e4>)
 8002cce:	484d      	ldr	r0, [pc, #308]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002cd0:	f00a fb38 	bl	800d344 <f_printf>

    	logBuf[0] = {0,};
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	713b      	strb	r3, [r7, #4]
    	f_lseek(&myFile, f_size(&myFile));
 8002cd8:	4b4a      	ldr	r3, [pc, #296]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	4849      	ldr	r0, [pc, #292]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002ce0:	f009 fffb 	bl	800ccda <f_lseek>
    	loglen = sprintf(logBuf, "%f", efficiencyScore);
 8002ce4:	4b60      	ldr	r3, [pc, #384]	; (8002e68 <_Z12LogToSDcard2v+0x320>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fd fc35 	bl	8000558 <__aeabi_f2d>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	1d38      	adds	r0, r7, #4
 8002cf4:	4957      	ldr	r1, [pc, #348]	; (8002e54 <_Z12LogToSDcard2v+0x30c>)
 8002cf6:	f00b fdaf 	bl	800e858 <siprintf>
 8002cfa:	6478      	str	r0, [r7, #68]	; 0x44
    	f_write(&myFile, logBuf, loglen, &myBytes);
 8002cfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cfe:	1d39      	adds	r1, r7, #4
 8002d00:	4b55      	ldr	r3, [pc, #340]	; (8002e58 <_Z12LogToSDcard2v+0x310>)
 8002d02:	4840      	ldr	r0, [pc, #256]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002d04:	f009 fdcc 	bl	800c8a0 <f_write>
 	    //f_printf(&myFile, "%f", efficiencyScore);
    	f_printf(&myFile, "%c", ',');
 8002d08:	222c      	movs	r2, #44	; 0x2c
 8002d0a:	4948      	ldr	r1, [pc, #288]	; (8002e2c <_Z12LogToSDcard2v+0x2e4>)
 8002d0c:	483d      	ldr	r0, [pc, #244]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002d0e:	f00a fb19 	bl	800d344 <f_printf>

 	    f_printf(&myFile, "%u", counter_AccelX);
 8002d12:	4b56      	ldr	r3, [pc, #344]	; (8002e6c <_Z12LogToSDcard2v+0x324>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	461a      	mov	r2, r3
 8002d18:	4948      	ldr	r1, [pc, #288]	; (8002e3c <_Z12LogToSDcard2v+0x2f4>)
 8002d1a:	483a      	ldr	r0, [pc, #232]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002d1c:	f00a fb12 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%c", ',');
 8002d20:	222c      	movs	r2, #44	; 0x2c
 8002d22:	4942      	ldr	r1, [pc, #264]	; (8002e2c <_Z12LogToSDcard2v+0x2e4>)
 8002d24:	4837      	ldr	r0, [pc, #220]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002d26:	f00a fb0d 	bl	800d344 <f_printf>

 	    f_printf(&myFile, "%u", counter_AccelYm);
 8002d2a:	4b51      	ldr	r3, [pc, #324]	; (8002e70 <_Z12LogToSDcard2v+0x328>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	4942      	ldr	r1, [pc, #264]	; (8002e3c <_Z12LogToSDcard2v+0x2f4>)
 8002d32:	4834      	ldr	r0, [pc, #208]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002d34:	f00a fb06 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%c", ',');
 8002d38:	222c      	movs	r2, #44	; 0x2c
 8002d3a:	493c      	ldr	r1, [pc, #240]	; (8002e2c <_Z12LogToSDcard2v+0x2e4>)
 8002d3c:	4831      	ldr	r0, [pc, #196]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002d3e:	f00a fb01 	bl	800d344 <f_printf>

 	    f_printf(&myFile, "%u", counter_AccelYm2);
 8002d42:	4b4c      	ldr	r3, [pc, #304]	; (8002e74 <_Z12LogToSDcard2v+0x32c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	461a      	mov	r2, r3
 8002d48:	493c      	ldr	r1, [pc, #240]	; (8002e3c <_Z12LogToSDcard2v+0x2f4>)
 8002d4a:	482e      	ldr	r0, [pc, #184]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002d4c:	f00a fafa 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%c", ',');
 8002d50:	222c      	movs	r2, #44	; 0x2c
 8002d52:	4936      	ldr	r1, [pc, #216]	; (8002e2c <_Z12LogToSDcard2v+0x2e4>)
 8002d54:	482b      	ldr	r0, [pc, #172]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002d56:	f00a faf5 	bl	800d344 <f_printf>

 	    f_printf(&myFile, "%u", counter_Time);
 8002d5a:	4b47      	ldr	r3, [pc, #284]	; (8002e78 <_Z12LogToSDcard2v+0x330>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	461a      	mov	r2, r3
 8002d60:	4936      	ldr	r1, [pc, #216]	; (8002e3c <_Z12LogToSDcard2v+0x2f4>)
 8002d62:	4828      	ldr	r0, [pc, #160]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002d64:	f00a faee 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%c", ',');
 8002d68:	222c      	movs	r2, #44	; 0x2c
 8002d6a:	4930      	ldr	r1, [pc, #192]	; (8002e2c <_Z12LogToSDcard2v+0x2e4>)
 8002d6c:	4825      	ldr	r0, [pc, #148]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002d6e:	f00a fae9 	bl	800d344 <f_printf>

 	    f_printf(&myFile, "%u", counter_KphRpm);
 8002d72:	4b42      	ldr	r3, [pc, #264]	; (8002e7c <_Z12LogToSDcard2v+0x334>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	4930      	ldr	r1, [pc, #192]	; (8002e3c <_Z12LogToSDcard2v+0x2f4>)
 8002d7a:	4822      	ldr	r0, [pc, #136]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002d7c:	f00a fae2 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%c", ',');
 8002d80:	222c      	movs	r2, #44	; 0x2c
 8002d82:	492a      	ldr	r1, [pc, #168]	; (8002e2c <_Z12LogToSDcard2v+0x2e4>)
 8002d84:	481f      	ldr	r0, [pc, #124]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002d86:	f00a fadd 	bl	800d344 <f_printf>

    	logBuf[0] = {0,};
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	713b      	strb	r3, [r7, #4]
    	f_lseek(&myFile, f_size(&myFile));
 8002d8e:	4b1d      	ldr	r3, [pc, #116]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	4619      	mov	r1, r3
 8002d94:	481b      	ldr	r0, [pc, #108]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002d96:	f009 ffa0 	bl	800ccda <f_lseek>
    	loglen = sprintf(logBuf, "%f", safetyScore);
 8002d9a:	4b39      	ldr	r3, [pc, #228]	; (8002e80 <_Z12LogToSDcard2v+0x338>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7fd fbda 	bl	8000558 <__aeabi_f2d>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	1d38      	adds	r0, r7, #4
 8002daa:	492a      	ldr	r1, [pc, #168]	; (8002e54 <_Z12LogToSDcard2v+0x30c>)
 8002dac:	f00b fd54 	bl	800e858 <siprintf>
 8002db0:	6478      	str	r0, [r7, #68]	; 0x44
    	f_write(&myFile, logBuf, loglen, &myBytes);
 8002db2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002db4:	1d39      	adds	r1, r7, #4
 8002db6:	4b28      	ldr	r3, [pc, #160]	; (8002e58 <_Z12LogToSDcard2v+0x310>)
 8002db8:	4812      	ldr	r0, [pc, #72]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002dba:	f009 fd71 	bl	800c8a0 <f_write>
 	    //f_printf(&myFile, "%f", safetyScore);
    	f_printf(&myFile, "%c", ',');
 8002dbe:	222c      	movs	r2, #44	; 0x2c
 8002dc0:	491a      	ldr	r1, [pc, #104]	; (8002e2c <_Z12LogToSDcard2v+0x2e4>)
 8002dc2:	4810      	ldr	r0, [pc, #64]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002dc4:	f00a fabe 	bl	800d344 <f_printf>

    	logBuf[0] = {0,};
 8002dc8:	2300      	movs	r3, #0
 8002dca:	713b      	strb	r3, [r7, #4]
    	f_lseek(&myFile, f_size(&myFile));
 8002dcc:	4b0d      	ldr	r3, [pc, #52]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	480c      	ldr	r0, [pc, #48]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002dd4:	f009 ff81 	bl	800ccda <f_lseek>
    	loglen = sprintf(logBuf, "%f", drivingScore);
 8002dd8:	4b2a      	ldr	r3, [pc, #168]	; (8002e84 <_Z12LogToSDcard2v+0x33c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f7fd fbbb 	bl	8000558 <__aeabi_f2d>
 8002de2:	4602      	mov	r2, r0
 8002de4:	460b      	mov	r3, r1
 8002de6:	1d38      	adds	r0, r7, #4
 8002de8:	491a      	ldr	r1, [pc, #104]	; (8002e54 <_Z12LogToSDcard2v+0x30c>)
 8002dea:	f00b fd35 	bl	800e858 <siprintf>
 8002dee:	6478      	str	r0, [r7, #68]	; 0x44
    	f_write(&myFile, logBuf, loglen, &myBytes);
 8002df0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002df2:	1d39      	adds	r1, r7, #4
 8002df4:	4b18      	ldr	r3, [pc, #96]	; (8002e58 <_Z12LogToSDcard2v+0x310>)
 8002df6:	4803      	ldr	r0, [pc, #12]	; (8002e04 <_Z12LogToSDcard2v+0x2bc>)
 8002df8:	f009 fd52 	bl	800c8a0 <f_write>
 	    //f_printf(&myFile, "%f", drivingScore);
    	f_printf(&myFile, "%c", ',');
 8002dfc:	222c      	movs	r2, #44	; 0x2c
 8002dfe:	e043      	b.n	8002e88 <_Z12LogToSDcard2v+0x340>
 8002e00:	20000000 	.word	0x20000000
 8002e04:	200011bc 	.word	0x200011bc
 8002e08:	200013f0 	.word	0x200013f0
 8002e0c:	20000f38 	.word	0x20000f38
 8002e10:	08012b08 	.word	0x08012b08
 8002e14:	08012b0c 	.word	0x08012b0c
 8002e18:	080127b8 	.word	0x080127b8
 8002e1c:	20000f3c 	.word	0x20000f3c
 8002e20:	08012b10 	.word	0x08012b10
 8002e24:	20000f40 	.word	0x20000f40
 8002e28:	08012b14 	.word	0x08012b14
 8002e2c:	08012b18 	.word	0x08012b18
 8002e30:	0801296c 	.word	0x0801296c
 8002e34:	20000e80 	.word	0x20000e80
 8002e38:	88888889 	.word	0x88888889
 8002e3c:	08012b1c 	.word	0x08012b1c
 8002e40:	20000e74 	.word	0x20000e74
 8002e44:	20000e78 	.word	0x20000e78
 8002e48:	20000e7c 	.word	0x20000e7c
 8002e4c:	20000e8c 	.word	0x20000e8c
 8002e50:	20000eb8 	.word	0x20000eb8
 8002e54:	08012b20 	.word	0x08012b20
 8002e58:	200013ec 	.word	0x200013ec
 8002e5c:	20000ec0 	.word	0x20000ec0
 8002e60:	20000ee4 	.word	0x20000ee4
 8002e64:	20000ec8 	.word	0x20000ec8
 8002e68:	20000ecc 	.word	0x20000ecc
 8002e6c:	20000ed0 	.word	0x20000ed0
 8002e70:	20000ed4 	.word	0x20000ed4
 8002e74:	20000ed8 	.word	0x20000ed8
 8002e78:	20000edc 	.word	0x20000edc
 8002e7c:	20000ee0 	.word	0x20000ee0
 8002e80:	20000ee8 	.word	0x20000ee8
 8002e84:	20000010 	.word	0x20000010
 8002e88:	4957      	ldr	r1, [pc, #348]	; (8002fe8 <_Z12LogToSDcard2v+0x4a0>)
 8002e8a:	4858      	ldr	r0, [pc, #352]	; (8002fec <_Z12LogToSDcard2v+0x4a4>)
 8002e8c:	f00a fa5a 	bl	800d344 <f_printf>

    	logBuf[0] = {0,};
 8002e90:	2300      	movs	r3, #0
 8002e92:	713b      	strb	r3, [r7, #4]
    	f_lseek(&myFile, f_size(&myFile));
 8002e94:	4b55      	ldr	r3, [pc, #340]	; (8002fec <_Z12LogToSDcard2v+0x4a4>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4854      	ldr	r0, [pc, #336]	; (8002fec <_Z12LogToSDcard2v+0x4a4>)
 8002e9c:	f009 ff1d 	bl	800ccda <f_lseek>
    	loglen = sprintf(logBuf, "%f", averagedrivingScore);
 8002ea0:	4b53      	ldr	r3, [pc, #332]	; (8002ff0 <_Z12LogToSDcard2v+0x4a8>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7fd fb57 	bl	8000558 <__aeabi_f2d>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	460b      	mov	r3, r1
 8002eae:	1d38      	adds	r0, r7, #4
 8002eb0:	4950      	ldr	r1, [pc, #320]	; (8002ff4 <_Z12LogToSDcard2v+0x4ac>)
 8002eb2:	f00b fcd1 	bl	800e858 <siprintf>
 8002eb6:	6478      	str	r0, [r7, #68]	; 0x44
    	f_write(&myFile, logBuf, loglen, &myBytes);
 8002eb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002eba:	1d39      	adds	r1, r7, #4
 8002ebc:	4b4e      	ldr	r3, [pc, #312]	; (8002ff8 <_Z12LogToSDcard2v+0x4b0>)
 8002ebe:	484b      	ldr	r0, [pc, #300]	; (8002fec <_Z12LogToSDcard2v+0x4a4>)
 8002ec0:	f009 fcee 	bl	800c8a0 <f_write>
 	    //f_printf(&myFile, "%f", averagedrivingScore);
    	f_printf(&myFile, "%c", ',');
 8002ec4:	222c      	movs	r2, #44	; 0x2c
 8002ec6:	4948      	ldr	r1, [pc, #288]	; (8002fe8 <_Z12LogToSDcard2v+0x4a0>)
 8002ec8:	4848      	ldr	r0, [pc, #288]	; (8002fec <_Z12LogToSDcard2v+0x4a4>)
 8002eca:	f00a fa3b 	bl	800d344 <f_printf>

    	logBuf[0] = {0,};
 8002ece:	2300      	movs	r3, #0
 8002ed0:	713b      	strb	r3, [r7, #4]
    	f_lseek(&myFile, f_size(&myFile));
 8002ed2:	4b46      	ldr	r3, [pc, #280]	; (8002fec <_Z12LogToSDcard2v+0x4a4>)
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4844      	ldr	r0, [pc, #272]	; (8002fec <_Z12LogToSDcard2v+0x4a4>)
 8002eda:	f009 fefe 	bl	800ccda <f_lseek>
    	loglen = sprintf(logBuf, "%.2f", f_pitch);
 8002ede:	4b47      	ldr	r3, [pc, #284]	; (8002ffc <_Z12LogToSDcard2v+0x4b4>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fd fb38 	bl	8000558 <__aeabi_f2d>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	1d38      	adds	r0, r7, #4
 8002eee:	4944      	ldr	r1, [pc, #272]	; (8003000 <_Z12LogToSDcard2v+0x4b8>)
 8002ef0:	f00b fcb2 	bl	800e858 <siprintf>
 8002ef4:	6478      	str	r0, [r7, #68]	; 0x44
    	f_write(&myFile, logBuf, loglen, &myBytes);
 8002ef6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ef8:	1d39      	adds	r1, r7, #4
 8002efa:	4b3f      	ldr	r3, [pc, #252]	; (8002ff8 <_Z12LogToSDcard2v+0x4b0>)
 8002efc:	483b      	ldr	r0, [pc, #236]	; (8002fec <_Z12LogToSDcard2v+0x4a4>)
 8002efe:	f009 fccf 	bl	800c8a0 <f_write>
 	    //f_printf(&myFile, "%f", f_pitch);
    	f_printf(&myFile, "%c", ',');
 8002f02:	222c      	movs	r2, #44	; 0x2c
 8002f04:	4938      	ldr	r1, [pc, #224]	; (8002fe8 <_Z12LogToSDcard2v+0x4a0>)
 8002f06:	4839      	ldr	r0, [pc, #228]	; (8002fec <_Z12LogToSDcard2v+0x4a4>)
 8002f08:	f00a fa1c 	bl	800d344 <f_printf>

    	logBuf[0] = {0,};
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	713b      	strb	r3, [r7, #4]
    	f_lseek(&myFile, f_size(&myFile));
 8002f10:	4b36      	ldr	r3, [pc, #216]	; (8002fec <_Z12LogToSDcard2v+0x4a4>)
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	4619      	mov	r1, r3
 8002f16:	4835      	ldr	r0, [pc, #212]	; (8002fec <_Z12LogToSDcard2v+0x4a4>)
 8002f18:	f009 fedf 	bl	800ccda <f_lseek>
    	loglen = sprintf(logBuf, "%.2f", f_roll);
 8002f1c:	4b39      	ldr	r3, [pc, #228]	; (8003004 <_Z12LogToSDcard2v+0x4bc>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fd fb19 	bl	8000558 <__aeabi_f2d>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	1d38      	adds	r0, r7, #4
 8002f2c:	4934      	ldr	r1, [pc, #208]	; (8003000 <_Z12LogToSDcard2v+0x4b8>)
 8002f2e:	f00b fc93 	bl	800e858 <siprintf>
 8002f32:	6478      	str	r0, [r7, #68]	; 0x44
    	f_write(&myFile, logBuf, loglen, &myBytes);
 8002f34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f36:	1d39      	adds	r1, r7, #4
 8002f38:	4b2f      	ldr	r3, [pc, #188]	; (8002ff8 <_Z12LogToSDcard2v+0x4b0>)
 8002f3a:	482c      	ldr	r0, [pc, #176]	; (8002fec <_Z12LogToSDcard2v+0x4a4>)
 8002f3c:	f009 fcb0 	bl	800c8a0 <f_write>
 	    //f_printf(&myFile, "%f", f_roll);
    	f_printf(&myFile, "%c", ',');
 8002f40:	222c      	movs	r2, #44	; 0x2c
 8002f42:	4929      	ldr	r1, [pc, #164]	; (8002fe8 <_Z12LogToSDcard2v+0x4a0>)
 8002f44:	4829      	ldr	r0, [pc, #164]	; (8002fec <_Z12LogToSDcard2v+0x4a4>)
 8002f46:	f00a f9fd 	bl	800d344 <f_printf>

    	logBuf[0] = {0,};
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	713b      	strb	r3, [r7, #4]
    	f_lseek(&myFile, f_size(&myFile));
 8002f4e:	4b27      	ldr	r3, [pc, #156]	; (8002fec <_Z12LogToSDcard2v+0x4a4>)
 8002f50:	68db      	ldr	r3, [r3, #12]
 8002f52:	4619      	mov	r1, r3
 8002f54:	4825      	ldr	r0, [pc, #148]	; (8002fec <_Z12LogToSDcard2v+0x4a4>)
 8002f56:	f009 fec0 	bl	800ccda <f_lseek>
    	loglen = sprintf(logBuf, "%.2f", f_accelX);
 8002f5a:	4b2b      	ldr	r3, [pc, #172]	; (8003008 <_Z12LogToSDcard2v+0x4c0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fd fafa 	bl	8000558 <__aeabi_f2d>
 8002f64:	4602      	mov	r2, r0
 8002f66:	460b      	mov	r3, r1
 8002f68:	1d38      	adds	r0, r7, #4
 8002f6a:	4925      	ldr	r1, [pc, #148]	; (8003000 <_Z12LogToSDcard2v+0x4b8>)
 8002f6c:	f00b fc74 	bl	800e858 <siprintf>
 8002f70:	6478      	str	r0, [r7, #68]	; 0x44
    	f_write(&myFile, logBuf, loglen, &myBytes);
 8002f72:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f74:	1d39      	adds	r1, r7, #4
 8002f76:	4b20      	ldr	r3, [pc, #128]	; (8002ff8 <_Z12LogToSDcard2v+0x4b0>)
 8002f78:	481c      	ldr	r0, [pc, #112]	; (8002fec <_Z12LogToSDcard2v+0x4a4>)
 8002f7a:	f009 fc91 	bl	800c8a0 <f_write>
 	    //f_printf(&myFile, "%f", f_accelX);
    	f_printf(&myFile, "%c", ',');
 8002f7e:	222c      	movs	r2, #44	; 0x2c
 8002f80:	4919      	ldr	r1, [pc, #100]	; (8002fe8 <_Z12LogToSDcard2v+0x4a0>)
 8002f82:	481a      	ldr	r0, [pc, #104]	; (8002fec <_Z12LogToSDcard2v+0x4a4>)
 8002f84:	f00a f9de 	bl	800d344 <f_printf>

    	logBuf[0] = {0,};
 8002f88:	2300      	movs	r3, #0
 8002f8a:	713b      	strb	r3, [r7, #4]
    	f_lseek(&myFile, f_size(&myFile));
 8002f8c:	4b17      	ldr	r3, [pc, #92]	; (8002fec <_Z12LogToSDcard2v+0x4a4>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	4619      	mov	r1, r3
 8002f92:	4816      	ldr	r0, [pc, #88]	; (8002fec <_Z12LogToSDcard2v+0x4a4>)
 8002f94:	f009 fea1 	bl	800ccda <f_lseek>
    	loglen = sprintf(logBuf, "%.2f", f_accelY);
 8002f98:	4b1c      	ldr	r3, [pc, #112]	; (800300c <_Z12LogToSDcard2v+0x4c4>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7fd fadb 	bl	8000558 <__aeabi_f2d>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	1d38      	adds	r0, r7, #4
 8002fa8:	4915      	ldr	r1, [pc, #84]	; (8003000 <_Z12LogToSDcard2v+0x4b8>)
 8002faa:	f00b fc55 	bl	800e858 <siprintf>
 8002fae:	6478      	str	r0, [r7, #68]	; 0x44
    	f_write(&myFile, logBuf, loglen, &myBytes);
 8002fb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002fb2:	1d39      	adds	r1, r7, #4
 8002fb4:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <_Z12LogToSDcard2v+0x4b0>)
 8002fb6:	480d      	ldr	r0, [pc, #52]	; (8002fec <_Z12LogToSDcard2v+0x4a4>)
 8002fb8:	f009 fc72 	bl	800c8a0 <f_write>
 	    //f_printf(&myFile, "%f", f_accelY);
    	f_printf(&myFile, "%c", ',');
 8002fbc:	222c      	movs	r2, #44	; 0x2c
 8002fbe:	490a      	ldr	r1, [pc, #40]	; (8002fe8 <_Z12LogToSDcard2v+0x4a0>)
 8002fc0:	480a      	ldr	r0, [pc, #40]	; (8002fec <_Z12LogToSDcard2v+0x4a4>)
 8002fc2:	f00a f9bf 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%s", "\n");
 8002fc6:	4a12      	ldr	r2, [pc, #72]	; (8003010 <_Z12LogToSDcard2v+0x4c8>)
 8002fc8:	4912      	ldr	r1, [pc, #72]	; (8003014 <_Z12LogToSDcard2v+0x4cc>)
 8002fca:	4808      	ldr	r0, [pc, #32]	; (8002fec <_Z12LogToSDcard2v+0x4a4>)
 8002fcc:	f00a f9ba 	bl	800d344 <f_printf>

        f_close(&myFile);
 8002fd0:	4806      	ldr	r0, [pc, #24]	; (8002fec <_Z12LogToSDcard2v+0x4a4>)
 8002fd2:	f009 fe58 	bl	800cc86 <f_close>
    /*else
    {
        Serial.println("error opening LOG_XXXX.txt");
        delay(100);
    }*/
}
 8002fd6:	e003      	b.n	8002fe0 <_Z12LogToSDcard2v+0x498>
    	printf("Failed to open %s \r\n", Filename);
 8002fd8:	490f      	ldr	r1, [pc, #60]	; (8003018 <_Z12LogToSDcard2v+0x4d0>)
 8002fda:	4810      	ldr	r0, [pc, #64]	; (800301c <_Z12LogToSDcard2v+0x4d4>)
 8002fdc:	f00b fb98 	bl	800e710 <iprintf>
}
 8002fe0:	bf00      	nop
 8002fe2:	3748      	adds	r7, #72	; 0x48
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	08012b18 	.word	0x08012b18
 8002fec:	200011bc 	.word	0x200011bc
 8002ff0:	20000014 	.word	0x20000014
 8002ff4:	08012b20 	.word	0x08012b20
 8002ff8:	200013ec 	.word	0x200013ec
 8002ffc:	20000e54 	.word	0x20000e54
 8003000:	08012b24 	.word	0x08012b24
 8003004:	20000e58 	.word	0x20000e58
 8003008:	20000e5c 	.word	0x20000e5c
 800300c:	20000e60 	.word	0x20000e60
 8003010:	080127bc 	.word	0x080127bc
 8003014:	080127b8 	.word	0x080127b8
 8003018:	20000000 	.word	0x20000000
 800301c:	08012b2c 	.word	0x08012b2c

08003020 <_Z16LogToSDcardErrora>:

void LogToSDcardError(int8_t curS)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	4603      	mov	r3, r0
 8003028:	71fb      	strb	r3, [r7, #7]
	printf("ELM_ERROR LOGGED\r\n");
 800302a:	4882      	ldr	r0, [pc, #520]	; (8003234 <_Z16LogToSDcardErrora+0x214>)
 800302c:	f00b fbf6 	bl	800e81c <puts>

    e_time = millis() / 1000; //에러타임
 8003030:	f003 fc04 	bl	800683c <HAL_GetTick>
 8003034:	4603      	mov	r3, r0
 8003036:	4a80      	ldr	r2, [pc, #512]	; (8003238 <_Z16LogToSDcardErrora+0x218>)
 8003038:	fba2 2303 	umull	r2, r3, r2, r3
 800303c:	099b      	lsrs	r3, r3, #6
 800303e:	4a7f      	ldr	r2, [pc, #508]	; (800323c <_Z16LogToSDcardErrora+0x21c>)
 8003040:	6013      	str	r3, [r2, #0]

    E_SEC = e_time % 60;
 8003042:	4b7e      	ldr	r3, [pc, #504]	; (800323c <_Z16LogToSDcardErrora+0x21c>)
 8003044:	6819      	ldr	r1, [r3, #0]
 8003046:	4b7e      	ldr	r3, [pc, #504]	; (8003240 <_Z16LogToSDcardErrora+0x220>)
 8003048:	fba3 2301 	umull	r2, r3, r3, r1
 800304c:	095a      	lsrs	r2, r3, #5
 800304e:	4613      	mov	r3, r2
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	1a9b      	subs	r3, r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	1aca      	subs	r2, r1, r3
 8003058:	4b7a      	ldr	r3, [pc, #488]	; (8003244 <_Z16LogToSDcardErrora+0x224>)
 800305a:	601a      	str	r2, [r3, #0]
    E_MIN = (e_time / 60) % 60;
 800305c:	4b77      	ldr	r3, [pc, #476]	; (800323c <_Z16LogToSDcardErrora+0x21c>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a77      	ldr	r2, [pc, #476]	; (8003240 <_Z16LogToSDcardErrora+0x220>)
 8003062:	fba2 2303 	umull	r2, r3, r2, r3
 8003066:	0959      	lsrs	r1, r3, #5
 8003068:	4b75      	ldr	r3, [pc, #468]	; (8003240 <_Z16LogToSDcardErrora+0x220>)
 800306a:	fba3 2301 	umull	r2, r3, r3, r1
 800306e:	095a      	lsrs	r2, r3, #5
 8003070:	4613      	mov	r3, r2
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	1a9b      	subs	r3, r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	1aca      	subs	r2, r1, r3
 800307a:	4b73      	ldr	r3, [pc, #460]	; (8003248 <_Z16LogToSDcardErrora+0x228>)
 800307c:	601a      	str	r2, [r3, #0]
    E_HOUR = (e_time / (60 * 60)) % 24;
 800307e:	4b6f      	ldr	r3, [pc, #444]	; (800323c <_Z16LogToSDcardErrora+0x21c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a72      	ldr	r2, [pc, #456]	; (800324c <_Z16LogToSDcardErrora+0x22c>)
 8003084:	fba2 2303 	umull	r2, r3, r2, r3
 8003088:	0ad9      	lsrs	r1, r3, #11
 800308a:	4b71      	ldr	r3, [pc, #452]	; (8003250 <_Z16LogToSDcardErrora+0x230>)
 800308c:	fba3 2301 	umull	r2, r3, r3, r1
 8003090:	091a      	lsrs	r2, r3, #4
 8003092:	4613      	mov	r3, r2
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	4413      	add	r3, r2
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	1aca      	subs	r2, r1, r3
 800309c:	4b6d      	ldr	r3, [pc, #436]	; (8003254 <_Z16LogToSDcardErrora+0x234>)
 800309e:	601a      	str	r2, [r3, #0]

    // open the file. note that only one file can be open at a time,
    // so you have to close this one before opening another.
    fr = f_open(&myFile, Filename, FA_WRITE | FA_OPEN_APPEND );
 80030a0:	2232      	movs	r2, #50	; 0x32
 80030a2:	496d      	ldr	r1, [pc, #436]	; (8003258 <_Z16LogToSDcardErrora+0x238>)
 80030a4:	486d      	ldr	r0, [pc, #436]	; (800325c <_Z16LogToSDcardErrora+0x23c>)
 80030a6:	f009 fa3d 	bl	800c524 <f_open>
 80030aa:	4603      	mov	r3, r0
 80030ac:	461a      	mov	r2, r3
 80030ae:	4b6c      	ldr	r3, [pc, #432]	; (8003260 <_Z16LogToSDcardErrora+0x240>)
 80030b0:	701a      	strb	r2, [r3, #0]

  if (fr == FR_OK)
 80030b2:	4b6b      	ldr	r3, [pc, #428]	; (8003260 <_Z16LogToSDcardErrora+0x240>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f040 80b3 	bne.w	8003222 <_Z16LogToSDcardErrora+0x202>
   {
   	f_printf(&myFile, "%d", E_HOUR);
 80030bc:	4b65      	ldr	r3, [pc, #404]	; (8003254 <_Z16LogToSDcardErrora+0x234>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	461a      	mov	r2, r3
 80030c2:	4968      	ldr	r1, [pc, #416]	; (8003264 <_Z16LogToSDcardErrora+0x244>)
 80030c4:	4865      	ldr	r0, [pc, #404]	; (800325c <_Z16LogToSDcardErrora+0x23c>)
 80030c6:	f00a f93d 	bl	800d344 <f_printf>
   	f_printf(&myFile, "%s", "h_");
 80030ca:	4a67      	ldr	r2, [pc, #412]	; (8003268 <_Z16LogToSDcardErrora+0x248>)
 80030cc:	4967      	ldr	r1, [pc, #412]	; (800326c <_Z16LogToSDcardErrora+0x24c>)
 80030ce:	4863      	ldr	r0, [pc, #396]	; (800325c <_Z16LogToSDcardErrora+0x23c>)
 80030d0:	f00a f938 	bl	800d344 <f_printf>
   	f_printf(&myFile, "%d", E_MIN);
 80030d4:	4b5c      	ldr	r3, [pc, #368]	; (8003248 <_Z16LogToSDcardErrora+0x228>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	461a      	mov	r2, r3
 80030da:	4962      	ldr	r1, [pc, #392]	; (8003264 <_Z16LogToSDcardErrora+0x244>)
 80030dc:	485f      	ldr	r0, [pc, #380]	; (800325c <_Z16LogToSDcardErrora+0x23c>)
 80030de:	f00a f931 	bl	800d344 <f_printf>
   	f_printf(&myFile, "%s", "m_");
 80030e2:	4a63      	ldr	r2, [pc, #396]	; (8003270 <_Z16LogToSDcardErrora+0x250>)
 80030e4:	4961      	ldr	r1, [pc, #388]	; (800326c <_Z16LogToSDcardErrora+0x24c>)
 80030e6:	485d      	ldr	r0, [pc, #372]	; (800325c <_Z16LogToSDcardErrora+0x23c>)
 80030e8:	f00a f92c 	bl	800d344 <f_printf>
   	f_printf(&myFile, "%d", E_SEC);
 80030ec:	4b55      	ldr	r3, [pc, #340]	; (8003244 <_Z16LogToSDcardErrora+0x224>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	461a      	mov	r2, r3
 80030f2:	495c      	ldr	r1, [pc, #368]	; (8003264 <_Z16LogToSDcardErrora+0x244>)
 80030f4:	4859      	ldr	r0, [pc, #356]	; (800325c <_Z16LogToSDcardErrora+0x23c>)
 80030f6:	f00a f925 	bl	800d344 <f_printf>
   	f_printf(&myFile, "%s", "s");
 80030fa:	4a5e      	ldr	r2, [pc, #376]	; (8003274 <_Z16LogToSDcardErrora+0x254>)
 80030fc:	495b      	ldr	r1, [pc, #364]	; (800326c <_Z16LogToSDcardErrora+0x24c>)
 80030fe:	4857      	ldr	r0, [pc, #348]	; (800325c <_Z16LogToSDcardErrora+0x23c>)
 8003100:	f00a f920 	bl	800d344 <f_printf>
  	f_printf(&myFile, "%c", ',');
 8003104:	222c      	movs	r2, #44	; 0x2c
 8003106:	495c      	ldr	r1, [pc, #368]	; (8003278 <_Z16LogToSDcardErrora+0x258>)
 8003108:	4854      	ldr	r0, [pc, #336]	; (800325c <_Z16LogToSDcardErrora+0x23c>)
 800310a:	f00a f91b 	bl	800d344 <f_printf>

     if (curS == ELM_NO_RESPONSE) {
 800310e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d10a      	bne.n	800312c <_Z16LogToSDcardErrora+0x10c>

     f_printf(&myFile, "%s", "ERROR: ELM_NO_RESPONSE");
 8003116:	4a59      	ldr	r2, [pc, #356]	; (800327c <_Z16LogToSDcardErrora+0x25c>)
 8003118:	4954      	ldr	r1, [pc, #336]	; (800326c <_Z16LogToSDcardErrora+0x24c>)
 800311a:	4850      	ldr	r0, [pc, #320]	; (800325c <_Z16LogToSDcardErrora+0x23c>)
 800311c:	f00a f912 	bl	800d344 <f_printf>
     f_printf(&myFile, "%s", "\n"); }
 8003120:	4a57      	ldr	r2, [pc, #348]	; (8003280 <_Z16LogToSDcardErrora+0x260>)
 8003122:	4952      	ldr	r1, [pc, #328]	; (800326c <_Z16LogToSDcardErrora+0x24c>)
 8003124:	484d      	ldr	r0, [pc, #308]	; (800325c <_Z16LogToSDcardErrora+0x23c>)
 8003126:	f00a f90d 	bl	800d344 <f_printf>
 800312a:	e076      	b.n	800321a <_Z16LogToSDcardErrora+0x1fa>

     else if (curS == ELM_BUFFER_OVERFLOW) {
 800312c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003130:	2b02      	cmp	r3, #2
 8003132:	d10a      	bne.n	800314a <_Z16LogToSDcardErrora+0x12a>

     f_printf(&myFile, "%s", "ERROR: ELM_BUFFER_OVERFLOW");
 8003134:	4a53      	ldr	r2, [pc, #332]	; (8003284 <_Z16LogToSDcardErrora+0x264>)
 8003136:	494d      	ldr	r1, [pc, #308]	; (800326c <_Z16LogToSDcardErrora+0x24c>)
 8003138:	4848      	ldr	r0, [pc, #288]	; (800325c <_Z16LogToSDcardErrora+0x23c>)
 800313a:	f00a f903 	bl	800d344 <f_printf>
 	 f_printf(&myFile, "%s", "\n"); }
 800313e:	4a50      	ldr	r2, [pc, #320]	; (8003280 <_Z16LogToSDcardErrora+0x260>)
 8003140:	494a      	ldr	r1, [pc, #296]	; (800326c <_Z16LogToSDcardErrora+0x24c>)
 8003142:	4846      	ldr	r0, [pc, #280]	; (800325c <_Z16LogToSDcardErrora+0x23c>)
 8003144:	f00a f8fe 	bl	800d344 <f_printf>
 8003148:	e067      	b.n	800321a <_Z16LogToSDcardErrora+0x1fa>

     else if (curS == ELM_UNABLE_TO_CONNECT) {
 800314a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314e:	2b04      	cmp	r3, #4
 8003150:	d10a      	bne.n	8003168 <_Z16LogToSDcardErrora+0x148>

     f_printf(&myFile, "%s", "ERROR: ELM_UNABLE_TO_CONNECT");
 8003152:	4a4d      	ldr	r2, [pc, #308]	; (8003288 <_Z16LogToSDcardErrora+0x268>)
 8003154:	4945      	ldr	r1, [pc, #276]	; (800326c <_Z16LogToSDcardErrora+0x24c>)
 8003156:	4841      	ldr	r0, [pc, #260]	; (800325c <_Z16LogToSDcardErrora+0x23c>)
 8003158:	f00a f8f4 	bl	800d344 <f_printf>
     f_printf(&myFile, "%s", "\n"); }
 800315c:	4a48      	ldr	r2, [pc, #288]	; (8003280 <_Z16LogToSDcardErrora+0x260>)
 800315e:	4943      	ldr	r1, [pc, #268]	; (800326c <_Z16LogToSDcardErrora+0x24c>)
 8003160:	483e      	ldr	r0, [pc, #248]	; (800325c <_Z16LogToSDcardErrora+0x23c>)
 8003162:	f00a f8ef 	bl	800d344 <f_printf>
 8003166:	e058      	b.n	800321a <_Z16LogToSDcardErrora+0x1fa>

     else if (curS == ELM_NO_DATA) {
 8003168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316c:	2b05      	cmp	r3, #5
 800316e:	d10a      	bne.n	8003186 <_Z16LogToSDcardErrora+0x166>

     f_printf(&myFile, "%s", "ERROR: ELM_NO_DATA");
 8003170:	4a46      	ldr	r2, [pc, #280]	; (800328c <_Z16LogToSDcardErrora+0x26c>)
 8003172:	493e      	ldr	r1, [pc, #248]	; (800326c <_Z16LogToSDcardErrora+0x24c>)
 8003174:	4839      	ldr	r0, [pc, #228]	; (800325c <_Z16LogToSDcardErrora+0x23c>)
 8003176:	f00a f8e5 	bl	800d344 <f_printf>
 	 f_printf(&myFile, "%s", "\n"); }
 800317a:	4a41      	ldr	r2, [pc, #260]	; (8003280 <_Z16LogToSDcardErrora+0x260>)
 800317c:	493b      	ldr	r1, [pc, #236]	; (800326c <_Z16LogToSDcardErrora+0x24c>)
 800317e:	4837      	ldr	r0, [pc, #220]	; (800325c <_Z16LogToSDcardErrora+0x23c>)
 8003180:	f00a f8e0 	bl	800d344 <f_printf>
 8003184:	e049      	b.n	800321a <_Z16LogToSDcardErrora+0x1fa>

     else if (curS == ELM_STOPPED) {
 8003186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318a:	2b06      	cmp	r3, #6
 800318c:	d10a      	bne.n	80031a4 <_Z16LogToSDcardErrora+0x184>

     f_printf(&myFile, "%s", "ERROR: ELM_STOPPED");
 800318e:	4a40      	ldr	r2, [pc, #256]	; (8003290 <_Z16LogToSDcardErrora+0x270>)
 8003190:	4936      	ldr	r1, [pc, #216]	; (800326c <_Z16LogToSDcardErrora+0x24c>)
 8003192:	4832      	ldr	r0, [pc, #200]	; (800325c <_Z16LogToSDcardErrora+0x23c>)
 8003194:	f00a f8d6 	bl	800d344 <f_printf>
 	 f_printf(&myFile, "%s", "\n"); }
 8003198:	4a39      	ldr	r2, [pc, #228]	; (8003280 <_Z16LogToSDcardErrora+0x260>)
 800319a:	4934      	ldr	r1, [pc, #208]	; (800326c <_Z16LogToSDcardErrora+0x24c>)
 800319c:	482f      	ldr	r0, [pc, #188]	; (800325c <_Z16LogToSDcardErrora+0x23c>)
 800319e:	f00a f8d1 	bl	800d344 <f_printf>
 80031a2:	e03a      	b.n	800321a <_Z16LogToSDcardErrora+0x1fa>

     else if (curS == ELM_CANERROR) {
 80031a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a8:	2b08      	cmp	r3, #8
 80031aa:	d10a      	bne.n	80031c2 <_Z16LogToSDcardErrora+0x1a2>

     f_printf(&myFile, "%s", "ERROR: ELM_CANERROR");
 80031ac:	4a39      	ldr	r2, [pc, #228]	; (8003294 <_Z16LogToSDcardErrora+0x274>)
 80031ae:	492f      	ldr	r1, [pc, #188]	; (800326c <_Z16LogToSDcardErrora+0x24c>)
 80031b0:	482a      	ldr	r0, [pc, #168]	; (800325c <_Z16LogToSDcardErrora+0x23c>)
 80031b2:	f00a f8c7 	bl	800d344 <f_printf>
     f_printf(&myFile, "%s", "\n");
 80031b6:	4a32      	ldr	r2, [pc, #200]	; (8003280 <_Z16LogToSDcardErrora+0x260>)
 80031b8:	492c      	ldr	r1, [pc, #176]	; (800326c <_Z16LogToSDcardErrora+0x24c>)
 80031ba:	4828      	ldr	r0, [pc, #160]	; (800325c <_Z16LogToSDcardErrora+0x23c>)
 80031bc:	f00a f8c2 	bl	800d344 <f_printf>
 80031c0:	e02b      	b.n	800321a <_Z16LogToSDcardErrora+0x1fa>
     }

     else if (curS == ELM_OUTOFMEM) {
 80031c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c6:	2b09      	cmp	r3, #9
 80031c8:	d10a      	bne.n	80031e0 <_Z16LogToSDcardErrora+0x1c0>

     f_printf(&myFile, "%s", "ERROR: ELM_OUTOFMEM");
 80031ca:	4a33      	ldr	r2, [pc, #204]	; (8003298 <_Z16LogToSDcardErrora+0x278>)
 80031cc:	4927      	ldr	r1, [pc, #156]	; (800326c <_Z16LogToSDcardErrora+0x24c>)
 80031ce:	4823      	ldr	r0, [pc, #140]	; (800325c <_Z16LogToSDcardErrora+0x23c>)
 80031d0:	f00a f8b8 	bl	800d344 <f_printf>
     f_printf(&myFile, "%s", "\n");
 80031d4:	4a2a      	ldr	r2, [pc, #168]	; (8003280 <_Z16LogToSDcardErrora+0x260>)
 80031d6:	4925      	ldr	r1, [pc, #148]	; (800326c <_Z16LogToSDcardErrora+0x24c>)
 80031d8:	4820      	ldr	r0, [pc, #128]	; (800325c <_Z16LogToSDcardErrora+0x23c>)
 80031da:	f00a f8b3 	bl	800d344 <f_printf>
 80031de:	e01c      	b.n	800321a <_Z16LogToSDcardErrora+0x1fa>
     }

     else if (curS == ELM_TIMEOUT) {
 80031e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e4:	2b07      	cmp	r3, #7
 80031e6:	d10a      	bne.n	80031fe <_Z16LogToSDcardErrora+0x1de>

     f_printf(&myFile, "%s", "ERROR: ELM_TIMEOUT");
 80031e8:	4a2c      	ldr	r2, [pc, #176]	; (800329c <_Z16LogToSDcardErrora+0x27c>)
 80031ea:	4920      	ldr	r1, [pc, #128]	; (800326c <_Z16LogToSDcardErrora+0x24c>)
 80031ec:	481b      	ldr	r0, [pc, #108]	; (800325c <_Z16LogToSDcardErrora+0x23c>)
 80031ee:	f00a f8a9 	bl	800d344 <f_printf>
 	 f_printf(&myFile, "%s", "\n"); }
 80031f2:	4a23      	ldr	r2, [pc, #140]	; (8003280 <_Z16LogToSDcardErrora+0x260>)
 80031f4:	491d      	ldr	r1, [pc, #116]	; (800326c <_Z16LogToSDcardErrora+0x24c>)
 80031f6:	4819      	ldr	r0, [pc, #100]	; (800325c <_Z16LogToSDcardErrora+0x23c>)
 80031f8:	f00a f8a4 	bl	800d344 <f_printf>
 80031fc:	e00d      	b.n	800321a <_Z16LogToSDcardErrora+0x1fa>

     else if (curS == ELM_TIMEOUT) {
 80031fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003202:	2b07      	cmp	r3, #7
 8003204:	d109      	bne.n	800321a <_Z16LogToSDcardErrora+0x1fa>

     f_printf(&myFile, "%s", "ERROR: ELM_GENERAL_ERROR");
 8003206:	4a26      	ldr	r2, [pc, #152]	; (80032a0 <_Z16LogToSDcardErrora+0x280>)
 8003208:	4918      	ldr	r1, [pc, #96]	; (800326c <_Z16LogToSDcardErrora+0x24c>)
 800320a:	4814      	ldr	r0, [pc, #80]	; (800325c <_Z16LogToSDcardErrora+0x23c>)
 800320c:	f00a f89a 	bl	800d344 <f_printf>
 	 f_printf(&myFile, "%s", "\n"); }
 8003210:	4a1b      	ldr	r2, [pc, #108]	; (8003280 <_Z16LogToSDcardErrora+0x260>)
 8003212:	4916      	ldr	r1, [pc, #88]	; (800326c <_Z16LogToSDcardErrora+0x24c>)
 8003214:	4811      	ldr	r0, [pc, #68]	; (800325c <_Z16LogToSDcardErrora+0x23c>)
 8003216:	f00a f895 	bl	800d344 <f_printf>

     f_close(&myFile);
 800321a:	4810      	ldr	r0, [pc, #64]	; (800325c <_Z16LogToSDcardErrora+0x23c>)
 800321c:	f009 fd33 	bl	800cc86 <f_close>
         }
  else
  	printf("Failed to open %s \r\n", Filename);


}
 8003220:	e003      	b.n	800322a <_Z16LogToSDcardErrora+0x20a>
  	printf("Failed to open %s \r\n", Filename);
 8003222:	490d      	ldr	r1, [pc, #52]	; (8003258 <_Z16LogToSDcardErrora+0x238>)
 8003224:	481f      	ldr	r0, [pc, #124]	; (80032a4 <_Z16LogToSDcardErrora+0x284>)
 8003226:	f00b fa73 	bl	800e710 <iprintf>
}
 800322a:	bf00      	nop
 800322c:	3708      	adds	r7, #8
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	08012b44 	.word	0x08012b44
 8003238:	10624dd3 	.word	0x10624dd3
 800323c:	20000f34 	.word	0x20000f34
 8003240:	88888889 	.word	0x88888889
 8003244:	20000f4c 	.word	0x20000f4c
 8003248:	20000f48 	.word	0x20000f48
 800324c:	91a2b3c5 	.word	0x91a2b3c5
 8003250:	aaaaaaab 	.word	0xaaaaaaab
 8003254:	20000f44 	.word	0x20000f44
 8003258:	20000000 	.word	0x20000000
 800325c:	200011bc 	.word	0x200011bc
 8003260:	200013f0 	.word	0x200013f0
 8003264:	08012b08 	.word	0x08012b08
 8003268:	08012b0c 	.word	0x08012b0c
 800326c:	080127b8 	.word	0x080127b8
 8003270:	08012b10 	.word	0x08012b10
 8003274:	08012b14 	.word	0x08012b14
 8003278:	08012b18 	.word	0x08012b18
 800327c:	08012a40 	.word	0x08012a40
 8003280:	080127bc 	.word	0x080127bc
 8003284:	08012a58 	.word	0x08012a58
 8003288:	08012a74 	.word	0x08012a74
 800328c:	08012a94 	.word	0x08012a94
 8003290:	08012aa8 	.word	0x08012aa8
 8003294:	08012b58 	.word	0x08012b58
 8003298:	08012b6c 	.word	0x08012b6c
 800329c:	08012abc 	.word	0x08012abc
 80032a0:	08012ad0 	.word	0x08012ad0
 80032a4:	08012b2c 	.word	0x08012b2c

080032a8 <_Z13createNewfilev>:

void createNewfile()
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
    //f_close(&myFile);

	  for (unsigned int k = 0; k < 100000; k++)
 80032ae:	2300      	movs	r3, #0
 80032b0:	607b      	str	r3, [r7, #4]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a41      	ldr	r2, [pc, #260]	; (80033bc <_Z13createNewfilev+0x114>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d862      	bhi.n	8003380 <_Z13createNewfilev+0xd8>
	  {
		Filename[3] = k / 10000 + '0'; //만자리
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a40      	ldr	r2, [pc, #256]	; (80033c0 <_Z13createNewfilev+0x118>)
 80032be:	fba2 2303 	umull	r2, r3, r2, r3
 80032c2:	0b5b      	lsrs	r3, r3, #13
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	3330      	adds	r3, #48	; 0x30
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	4b3e      	ldr	r3, [pc, #248]	; (80033c4 <_Z13createNewfilev+0x11c>)
 80032cc:	70da      	strb	r2, [r3, #3]
		Filename[4] = ((k % 10000) / 1000) + '0';//천자리
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	4b3b      	ldr	r3, [pc, #236]	; (80033c0 <_Z13createNewfilev+0x118>)
 80032d2:	fba3 1302 	umull	r1, r3, r3, r2
 80032d6:	0b5b      	lsrs	r3, r3, #13
 80032d8:	f242 7110 	movw	r1, #10000	; 0x2710
 80032dc:	fb01 f303 	mul.w	r3, r1, r3
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	4a39      	ldr	r2, [pc, #228]	; (80033c8 <_Z13createNewfilev+0x120>)
 80032e4:	fba2 2303 	umull	r2, r3, r2, r3
 80032e8:	099b      	lsrs	r3, r3, #6
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	3330      	adds	r3, #48	; 0x30
 80032ee:	b2da      	uxtb	r2, r3
 80032f0:	4b34      	ldr	r3, [pc, #208]	; (80033c4 <_Z13createNewfilev+0x11c>)
 80032f2:	711a      	strb	r2, [r3, #4]
		Filename[5] = ((k % 1000) / 100) + '0';//백자리
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	4b34      	ldr	r3, [pc, #208]	; (80033c8 <_Z13createNewfilev+0x120>)
 80032f8:	fba3 1302 	umull	r1, r3, r3, r2
 80032fc:	099b      	lsrs	r3, r3, #6
 80032fe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003302:	fb01 f303 	mul.w	r3, r1, r3
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	4a30      	ldr	r2, [pc, #192]	; (80033cc <_Z13createNewfilev+0x124>)
 800330a:	fba2 2303 	umull	r2, r3, r2, r3
 800330e:	095b      	lsrs	r3, r3, #5
 8003310:	b2db      	uxtb	r3, r3
 8003312:	3330      	adds	r3, #48	; 0x30
 8003314:	b2da      	uxtb	r2, r3
 8003316:	4b2b      	ldr	r3, [pc, #172]	; (80033c4 <_Z13createNewfilev+0x11c>)
 8003318:	715a      	strb	r2, [r3, #5]
		Filename[6] = ((k % 100) / 10) + '0'; //십자리
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	4b2b      	ldr	r3, [pc, #172]	; (80033cc <_Z13createNewfilev+0x124>)
 800331e:	fba3 1302 	umull	r1, r3, r3, r2
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	2164      	movs	r1, #100	; 0x64
 8003326:	fb01 f303 	mul.w	r3, r1, r3
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	4a28      	ldr	r2, [pc, #160]	; (80033d0 <_Z13createNewfilev+0x128>)
 800332e:	fba2 2303 	umull	r2, r3, r2, r3
 8003332:	08db      	lsrs	r3, r3, #3
 8003334:	b2db      	uxtb	r3, r3
 8003336:	3330      	adds	r3, #48	; 0x30
 8003338:	b2da      	uxtb	r2, r3
 800333a:	4b22      	ldr	r3, [pc, #136]	; (80033c4 <_Z13createNewfilev+0x11c>)
 800333c:	719a      	strb	r2, [r3, #6]
		Filename[7] = k % 10 + '0'; //일자리
 800333e:	6879      	ldr	r1, [r7, #4]
 8003340:	4b23      	ldr	r3, [pc, #140]	; (80033d0 <_Z13createNewfilev+0x128>)
 8003342:	fba3 2301 	umull	r2, r3, r3, r1
 8003346:	08da      	lsrs	r2, r3, #3
 8003348:	4613      	mov	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	1aca      	subs	r2, r1, r3
 8003352:	b2d3      	uxtb	r3, r2
 8003354:	3330      	adds	r3, #48	; 0x30
 8003356:	b2da      	uxtb	r2, r3
 8003358:	4b1a      	ldr	r3, [pc, #104]	; (80033c4 <_Z13createNewfilev+0x11c>)
 800335a:	71da      	strb	r2, [r3, #7]

		fr = f_open(&myFile, Filename, FA_WRITE | FA_CREATE_NEW);
 800335c:	2206      	movs	r2, #6
 800335e:	4919      	ldr	r1, [pc, #100]	; (80033c4 <_Z13createNewfilev+0x11c>)
 8003360:	481c      	ldr	r0, [pc, #112]	; (80033d4 <_Z13createNewfilev+0x12c>)
 8003362:	f009 f8df 	bl	800c524 <f_open>
 8003366:	4603      	mov	r3, r0
 8003368:	461a      	mov	r2, r3
 800336a:	4b1b      	ldr	r3, [pc, #108]	; (80033d8 <_Z13createNewfilev+0x130>)
 800336c:	701a      	strb	r2, [r3, #0]
		if (fr == FR_OK)
 800336e:	4b1a      	ldr	r3, [pc, #104]	; (80033d8 <_Z13createNewfilev+0x130>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <_Z13createNewfilev+0xd6>
	  for (unsigned int k = 0; k < 100000; k++)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	3301      	adds	r3, #1
 800337a:	607b      	str	r3, [r7, #4]
 800337c:	e799      	b.n	80032b2 <_Z13createNewfilev+0xa>
		{
			break;
 800337e:	bf00      	nop
		}
	  }
    printf("Logging to: ");
 8003380:	4816      	ldr	r0, [pc, #88]	; (80033dc <_Z13createNewfilev+0x134>)
 8003382:	f00b f9c5 	bl	800e710 <iprintf>
    printf("%s", Filename);
 8003386:	490f      	ldr	r1, [pc, #60]	; (80033c4 <_Z13createNewfilev+0x11c>)
 8003388:	4815      	ldr	r0, [pc, #84]	; (80033e0 <_Z13createNewfilev+0x138>)
 800338a:	f00b f9c1 	bl	800e710 <iprintf>
    printf("<<---------------------------");
 800338e:	4815      	ldr	r0, [pc, #84]	; (80033e4 <_Z13createNewfilev+0x13c>)
 8003390:	f00b f9be 	bl	800e710 <iprintf>
    printf("Created New File...\r\n");
 8003394:	4814      	ldr	r0, [pc, #80]	; (80033e8 <_Z13createNewfilev+0x140>)
 8003396:	f00b fa41 	bl	800e81c <puts>

       //dataFile.println("Time,ELM327_Status,RunTime,Rpm,Kph,EngineLoad,throttle,InstantFuelConsume,counter_AccelYp,counter_Fuel,counter_Rpm,efficiencyScore,counter_AccelX,counter_AccelYm,AccelYm2,counter_Time,counter_KphRpm,safetyScore,drivingScore,averagedrivingScore,f_pitch,f_roll,f_accelX,f_accelY");
    	f_printf(&myFile, "%s", "Time,ELM327_Status,RunTime,Rpm,Kph,EngineLoad,throttle,InstantFuelConsume,counter_AccelYp,counter_Fuel,counter_Rpm,efficiencyScore,counter_AccelX,counter_AccelYm,AccelYm2,counter_Time,counter_KphRpm,safetyScore,drivingScore,averagedrivingScore,f_pitch,f_roll,f_accelX,f_accelY");
 800339a:	4a14      	ldr	r2, [pc, #80]	; (80033ec <_Z13createNewfilev+0x144>)
 800339c:	4910      	ldr	r1, [pc, #64]	; (80033e0 <_Z13createNewfilev+0x138>)
 800339e:	480d      	ldr	r0, [pc, #52]	; (80033d4 <_Z13createNewfilev+0x12c>)
 80033a0:	f009 ffd0 	bl	800d344 <f_printf>
    	f_printf(&myFile, "%s", "\n");
 80033a4:	4a12      	ldr	r2, [pc, #72]	; (80033f0 <_Z13createNewfilev+0x148>)
 80033a6:	490e      	ldr	r1, [pc, #56]	; (80033e0 <_Z13createNewfilev+0x138>)
 80033a8:	480a      	ldr	r0, [pc, #40]	; (80033d4 <_Z13createNewfilev+0x12c>)
 80033aa:	f009 ffcb 	bl	800d344 <f_printf>
       //csv 엑셀 윗라인 항목 표시띠
        f_close(&myFile);
 80033ae:	4809      	ldr	r0, [pc, #36]	; (80033d4 <_Z13createNewfilev+0x12c>)
 80033b0:	f009 fc69 	bl	800cc86 <f_close>
}
 80033b4:	bf00      	nop
 80033b6:	3708      	adds	r7, #8
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	0001869f 	.word	0x0001869f
 80033c0:	d1b71759 	.word	0xd1b71759
 80033c4:	20000000 	.word	0x20000000
 80033c8:	10624dd3 	.word	0x10624dd3
 80033cc:	51eb851f 	.word	0x51eb851f
 80033d0:	cccccccd 	.word	0xcccccccd
 80033d4:	200011bc 	.word	0x200011bc
 80033d8:	200013f0 	.word	0x200013f0
 80033dc:	08012b80 	.word	0x08012b80
 80033e0:	080127b8 	.word	0x080127b8
 80033e4:	08012b90 	.word	0x08012b90
 80033e8:	08012bb0 	.word	0x08012bb0
 80033ec:	080127c0 	.word	0x080127c0
 80033f0:	080127bc 	.word	0x080127bc

080033f4 <_Z14createNewfile2v>:

void createNewfile2()
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
	 //f_close(&myFile);
		  for (unsigned int k = 0; k < 100000; k++)
 80033fa:	2300      	movs	r3, #0
 80033fc:	607b      	str	r3, [r7, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a41      	ldr	r2, [pc, #260]	; (8003508 <_Z14createNewfile2v+0x114>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d862      	bhi.n	80034cc <_Z14createNewfile2v+0xd8>
		  {
			Filename[3] = k / 10000 + '0'; //만자리
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a40      	ldr	r2, [pc, #256]	; (800350c <_Z14createNewfile2v+0x118>)
 800340a:	fba2 2303 	umull	r2, r3, r2, r3
 800340e:	0b5b      	lsrs	r3, r3, #13
 8003410:	b2db      	uxtb	r3, r3
 8003412:	3330      	adds	r3, #48	; 0x30
 8003414:	b2da      	uxtb	r2, r3
 8003416:	4b3e      	ldr	r3, [pc, #248]	; (8003510 <_Z14createNewfile2v+0x11c>)
 8003418:	70da      	strb	r2, [r3, #3]
			Filename[4] = ((k % 10000) / 1000) + '0';//천자리
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	4b3b      	ldr	r3, [pc, #236]	; (800350c <_Z14createNewfile2v+0x118>)
 800341e:	fba3 1302 	umull	r1, r3, r3, r2
 8003422:	0b5b      	lsrs	r3, r3, #13
 8003424:	f242 7110 	movw	r1, #10000	; 0x2710
 8003428:	fb01 f303 	mul.w	r3, r1, r3
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	4a39      	ldr	r2, [pc, #228]	; (8003514 <_Z14createNewfile2v+0x120>)
 8003430:	fba2 2303 	umull	r2, r3, r2, r3
 8003434:	099b      	lsrs	r3, r3, #6
 8003436:	b2db      	uxtb	r3, r3
 8003438:	3330      	adds	r3, #48	; 0x30
 800343a:	b2da      	uxtb	r2, r3
 800343c:	4b34      	ldr	r3, [pc, #208]	; (8003510 <_Z14createNewfile2v+0x11c>)
 800343e:	711a      	strb	r2, [r3, #4]
			Filename[5] = ((k % 1000) / 100) + '0';//백자리
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	4b34      	ldr	r3, [pc, #208]	; (8003514 <_Z14createNewfile2v+0x120>)
 8003444:	fba3 1302 	umull	r1, r3, r3, r2
 8003448:	099b      	lsrs	r3, r3, #6
 800344a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800344e:	fb01 f303 	mul.w	r3, r1, r3
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	4a30      	ldr	r2, [pc, #192]	; (8003518 <_Z14createNewfile2v+0x124>)
 8003456:	fba2 2303 	umull	r2, r3, r2, r3
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	b2db      	uxtb	r3, r3
 800345e:	3330      	adds	r3, #48	; 0x30
 8003460:	b2da      	uxtb	r2, r3
 8003462:	4b2b      	ldr	r3, [pc, #172]	; (8003510 <_Z14createNewfile2v+0x11c>)
 8003464:	715a      	strb	r2, [r3, #5]
			Filename[6] = ((k % 100) / 10) + '0'; //십자리
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	4b2b      	ldr	r3, [pc, #172]	; (8003518 <_Z14createNewfile2v+0x124>)
 800346a:	fba3 1302 	umull	r1, r3, r3, r2
 800346e:	095b      	lsrs	r3, r3, #5
 8003470:	2164      	movs	r1, #100	; 0x64
 8003472:	fb01 f303 	mul.w	r3, r1, r3
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	4a28      	ldr	r2, [pc, #160]	; (800351c <_Z14createNewfile2v+0x128>)
 800347a:	fba2 2303 	umull	r2, r3, r2, r3
 800347e:	08db      	lsrs	r3, r3, #3
 8003480:	b2db      	uxtb	r3, r3
 8003482:	3330      	adds	r3, #48	; 0x30
 8003484:	b2da      	uxtb	r2, r3
 8003486:	4b22      	ldr	r3, [pc, #136]	; (8003510 <_Z14createNewfile2v+0x11c>)
 8003488:	719a      	strb	r2, [r3, #6]
			Filename[7] = k % 10 + '0'; //일자리
 800348a:	6879      	ldr	r1, [r7, #4]
 800348c:	4b23      	ldr	r3, [pc, #140]	; (800351c <_Z14createNewfile2v+0x128>)
 800348e:	fba3 2301 	umull	r2, r3, r3, r1
 8003492:	08da      	lsrs	r2, r3, #3
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	1aca      	subs	r2, r1, r3
 800349e:	b2d3      	uxtb	r3, r2
 80034a0:	3330      	adds	r3, #48	; 0x30
 80034a2:	b2da      	uxtb	r2, r3
 80034a4:	4b1a      	ldr	r3, [pc, #104]	; (8003510 <_Z14createNewfile2v+0x11c>)
 80034a6:	71da      	strb	r2, [r3, #7]
			fr = f_open(&myFile, Filename, FA_WRITE | FA_CREATE_NEW);
 80034a8:	2206      	movs	r2, #6
 80034aa:	4919      	ldr	r1, [pc, #100]	; (8003510 <_Z14createNewfile2v+0x11c>)
 80034ac:	481c      	ldr	r0, [pc, #112]	; (8003520 <_Z14createNewfile2v+0x12c>)
 80034ae:	f009 f839 	bl	800c524 <f_open>
 80034b2:	4603      	mov	r3, r0
 80034b4:	461a      	mov	r2, r3
 80034b6:	4b1b      	ldr	r3, [pc, #108]	; (8003524 <_Z14createNewfile2v+0x130>)
 80034b8:	701a      	strb	r2, [r3, #0]
			if (fr == FR_OK)
 80034ba:	4b1a      	ldr	r3, [pc, #104]	; (8003524 <_Z14createNewfile2v+0x130>)
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d003      	beq.n	80034ca <_Z14createNewfile2v+0xd6>
		  for (unsigned int k = 0; k < 100000; k++)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3301      	adds	r3, #1
 80034c6:	607b      	str	r3, [r7, #4]
 80034c8:	e799      	b.n	80033fe <_Z14createNewfile2v+0xa>
			{
				break;
 80034ca:	bf00      	nop
			}
		  }
	    printf("Logging to: ");
 80034cc:	4816      	ldr	r0, [pc, #88]	; (8003528 <_Z14createNewfile2v+0x134>)
 80034ce:	f00b f91f 	bl	800e710 <iprintf>
	    printf("%s", Filename);
 80034d2:	490f      	ldr	r1, [pc, #60]	; (8003510 <_Z14createNewfile2v+0x11c>)
 80034d4:	4815      	ldr	r0, [pc, #84]	; (800352c <_Z14createNewfile2v+0x138>)
 80034d6:	f00b f91b 	bl	800e710 <iprintf>
	    printf("<<---------------------------");
 80034da:	4815      	ldr	r0, [pc, #84]	; (8003530 <_Z14createNewfile2v+0x13c>)
 80034dc:	f00b f918 	bl	800e710 <iprintf>
	    printf("Created New File...\r\n");
 80034e0:	4814      	ldr	r0, [pc, #80]	; (8003534 <_Z14createNewfile2v+0x140>)
 80034e2:	f00b f99b 	bl	800e81c <puts>

       //dataFile.println("Time,ELM327_Status,RunTime,Rpm,Kph,EngineLoad,throttle,commandedThrottleActuator,counter_AccelYp,counter_Throttle,counter_Rpm,efficiencyScore,counter_AccelX,counter_AccelYm,AccelYm2,counter_Time,counter_KphRpm,safetyScore,drivingScore,averagedrivingScore,f_pitch,f_roll,f_accelX,f_accelY");
       f_printf(&myFile, "%s", "Time,ELM327_Status,RunTime,Rpm,Kph,EngineLoad,throttle,commandedThrottleActuator,counter_AccelYp,counter_Throttle,counter_Rpm,efficiencyScore,counter_AccelX,counter_AccelYm,AccelYm2,counter_Time,counter_KphRpm,safetyScore,drivingScore,averagedrivingScore,f_pitch,f_roll,f_accelX,f_accelY");
 80034e6:	4a14      	ldr	r2, [pc, #80]	; (8003538 <_Z14createNewfile2v+0x144>)
 80034e8:	4910      	ldr	r1, [pc, #64]	; (800352c <_Z14createNewfile2v+0x138>)
 80034ea:	480d      	ldr	r0, [pc, #52]	; (8003520 <_Z14createNewfile2v+0x12c>)
 80034ec:	f009 ff2a 	bl	800d344 <f_printf>
       f_printf(&myFile, "%s", "\n");
 80034f0:	4a12      	ldr	r2, [pc, #72]	; (800353c <_Z14createNewfile2v+0x148>)
 80034f2:	490e      	ldr	r1, [pc, #56]	; (800352c <_Z14createNewfile2v+0x138>)
 80034f4:	480a      	ldr	r0, [pc, #40]	; (8003520 <_Z14createNewfile2v+0x12c>)
 80034f6:	f009 ff25 	bl	800d344 <f_printf>
       //csv 엑셀 윗라인 항목 표시띠
       f_close(&myFile);
 80034fa:	4809      	ldr	r0, [pc, #36]	; (8003520 <_Z14createNewfile2v+0x12c>)
 80034fc:	f009 fbc3 	bl	800cc86 <f_close>
}
 8003500:	bf00      	nop
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	0001869f 	.word	0x0001869f
 800350c:	d1b71759 	.word	0xd1b71759
 8003510:	20000000 	.word	0x20000000
 8003514:	10624dd3 	.word	0x10624dd3
 8003518:	51eb851f 	.word	0x51eb851f
 800351c:	cccccccd 	.word	0xcccccccd
 8003520:	200011bc 	.word	0x200011bc
 8003524:	200013f0 	.word	0x200013f0
 8003528:	08012b80 	.word	0x08012b80
 800352c:	080127b8 	.word	0x080127b8
 8003530:	08012b90 	.word	0x08012b90
 8003534:	08012bb0 	.word	0x08012bb0
 8003538:	08012bc8 	.word	0x08012bc8
 800353c:	080127bc 	.word	0x080127bc

08003540 <_Z16accelYpAlgorithmv>:
/////////////////////////////////////////////Algorithm////////////////////////////////////////////////////////

//efficiency algorithm//

void accelYpAlgorithm() //forward acceleration algorithm
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
  const float limitAccelY = 0.4;
 8003546:	4b15      	ldr	r3, [pc, #84]	; (800359c <_Z16accelYpAlgorithmv+0x5c>)
 8003548:	607b      	str	r3, [r7, #4]
  //static float pre_f_accelY = 0.0;
  //static int counter_AccelYp = 0;

  if ( (f_accelY >= limitAccelY) && (pre_f_accelY < limitAccelY) )
 800354a:	4b15      	ldr	r3, [pc, #84]	; (80035a0 <_Z16accelYpAlgorithmv+0x60>)
 800354c:	edd3 7a00 	vldr	s15, [r3]
 8003550:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80035a4 <_Z16accelYpAlgorithmv+0x64>
 8003554:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003558:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800355c:	da00      	bge.n	8003560 <_Z16accelYpAlgorithmv+0x20>
    counter_AccelYp++;
    printf("counter_AccelYp : ");
    printf("%lu\r\n", counter_AccelYp);
  }

}
 800355e:	e018      	b.n	8003592 <_Z16accelYpAlgorithmv+0x52>
  if ( (f_accelY >= limitAccelY) && (pre_f_accelY < limitAccelY) )
 8003560:	4b11      	ldr	r3, [pc, #68]	; (80035a8 <_Z16accelYpAlgorithmv+0x68>)
 8003562:	edd3 7a00 	vldr	s15, [r3]
 8003566:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80035a4 <_Z16accelYpAlgorithmv+0x64>
 800356a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800356e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003572:	d400      	bmi.n	8003576 <_Z16accelYpAlgorithmv+0x36>
}
 8003574:	e00d      	b.n	8003592 <_Z16accelYpAlgorithmv+0x52>
    counter_AccelYp++;
 8003576:	4b0d      	ldr	r3, [pc, #52]	; (80035ac <_Z16accelYpAlgorithmv+0x6c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	3301      	adds	r3, #1
 800357c:	4a0b      	ldr	r2, [pc, #44]	; (80035ac <_Z16accelYpAlgorithmv+0x6c>)
 800357e:	6013      	str	r3, [r2, #0]
    printf("counter_AccelYp : ");
 8003580:	480b      	ldr	r0, [pc, #44]	; (80035b0 <_Z16accelYpAlgorithmv+0x70>)
 8003582:	f00b f8c5 	bl	800e710 <iprintf>
    printf("%lu\r\n", counter_AccelYp);
 8003586:	4b09      	ldr	r3, [pc, #36]	; (80035ac <_Z16accelYpAlgorithmv+0x6c>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4619      	mov	r1, r3
 800358c:	4809      	ldr	r0, [pc, #36]	; (80035b4 <_Z16accelYpAlgorithmv+0x74>)
 800358e:	f00b f8bf 	bl	800e710 <iprintf>
}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	3ecccccd 	.word	0x3ecccccd
 80035a0:	20000e60 	.word	0x20000e60
 80035a4:	3ecccccd 	.word	0x3ecccccd
 80035a8:	20000ef4 	.word	0x20000ef4
 80035ac:	20000ec0 	.word	0x20000ec0
 80035b0:	08012ce8 	.word	0x08012ce8
 80035b4:	08012cfc 	.word	0x08012cfc

080035b8 <_Z13fuelAlgorithmv>:

void fuelAlgorithm() //fuel consumption algorithm
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
  const int limitFuel = 8; // km/l
 80035be:	2308      	movs	r3, #8
 80035c0:	607b      	str	r3, [r7, #4]
  //static int counter_Fuel = 0;
  const int limitFuel_max = 12;
 80035c2:	230c      	movs	r3, #12
 80035c4:	603b      	str	r3, [r7, #0]
  //static float pre_instantFuelConsume = 0.0;

  averageFuelConsume = (float)((averageFuelConsume*(counter_N1-1)+instantFuelConsume)/counter_N1);
 80035c6:	4b3d      	ldr	r3, [pc, #244]	; (80036bc <_Z13fuelAlgorithmv+0x104>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	ee07 3a90 	vmov	s15, r3
 80035d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035d4:	4b3a      	ldr	r3, [pc, #232]	; (80036c0 <_Z13fuelAlgorithmv+0x108>)
 80035d6:	edd3 7a00 	vldr	s15, [r3]
 80035da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035de:	4b39      	ldr	r3, [pc, #228]	; (80036c4 <_Z13fuelAlgorithmv+0x10c>)
 80035e0:	edd3 7a00 	vldr	s15, [r3]
 80035e4:	ee77 6a27 	vadd.f32	s13, s14, s15
 80035e8:	4b34      	ldr	r3, [pc, #208]	; (80036bc <_Z13fuelAlgorithmv+0x104>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	ee07 3a90 	vmov	s15, r3
 80035f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035f8:	4b31      	ldr	r3, [pc, #196]	; (80036c0 <_Z13fuelAlgorithmv+0x108>)
 80035fa:	edc3 7a00 	vstr	s15, [r3]

if (averageFuelConsume <= limitFuel_max)
 80035fe:	4b30      	ldr	r3, [pc, #192]	; (80036c0 <_Z13fuelAlgorithmv+0x108>)
 8003600:	edd3 7a00 	vldr	s15, [r3]
 8003604:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8003608:	eef4 7ac7 	vcmpe.f32	s15, s14
 800360c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003610:	d84b      	bhi.n	80036aa <_Z13fuelAlgorithmv+0xf2>
{
  if ( (instantFuelConsume <= limitFuel) && (pre_instantFuelConsume > limitFuel) )
 8003612:	4b2c      	ldr	r3, [pc, #176]	; (80036c4 <_Z13fuelAlgorithmv+0x10c>)
 8003614:	edd3 7a00 	vldr	s15, [r3]
 8003618:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800361c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003624:	d818      	bhi.n	8003658 <_Z13fuelAlgorithmv+0xa0>
 8003626:	4b28      	ldr	r3, [pc, #160]	; (80036c8 <_Z13fuelAlgorithmv+0x110>)
 8003628:	edd3 7a00 	vldr	s15, [r3]
 800362c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8003630:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003638:	dd0e      	ble.n	8003658 <_Z13fuelAlgorithmv+0xa0>
  {
    counter_Fuel++;
 800363a:	4b24      	ldr	r3, [pc, #144]	; (80036cc <_Z13fuelAlgorithmv+0x114>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	3301      	adds	r3, #1
 8003640:	4a22      	ldr	r2, [pc, #136]	; (80036cc <_Z13fuelAlgorithmv+0x114>)
 8003642:	6013      	str	r3, [r2, #0]
    printf("counter_Fuel : ");
 8003644:	4822      	ldr	r0, [pc, #136]	; (80036d0 <_Z13fuelAlgorithmv+0x118>)
 8003646:	f00b f863 	bl	800e710 <iprintf>
    printf("%lu\r\n", counter_Fuel);
 800364a:	4b20      	ldr	r3, [pc, #128]	; (80036cc <_Z13fuelAlgorithmv+0x114>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4619      	mov	r1, r3
 8003650:	4820      	ldr	r0, [pc, #128]	; (80036d4 <_Z13fuelAlgorithmv+0x11c>)
 8003652:	f00b f85d 	bl	800e710 <iprintf>
 8003656:	e028      	b.n	80036aa <_Z13fuelAlgorithmv+0xf2>
  }
  else if ( (instantFuelConsume >= limitFuel_max) && (pre_instantFuelConsume < limitFuel_max) )
 8003658:	4b1a      	ldr	r3, [pc, #104]	; (80036c4 <_Z13fuelAlgorithmv+0x10c>)
 800365a:	edd3 7a00 	vldr	s15, [r3]
 800365e:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8003662:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800366a:	db1e      	blt.n	80036aa <_Z13fuelAlgorithmv+0xf2>
 800366c:	4b16      	ldr	r3, [pc, #88]	; (80036c8 <_Z13fuelAlgorithmv+0x110>)
 800366e:	edd3 7a00 	vldr	s15, [r3]
 8003672:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8003676:	eef4 7ac7 	vcmpe.f32	s15, s14
 800367a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800367e:	d514      	bpl.n	80036aa <_Z13fuelAlgorithmv+0xf2>
  {
    counter_Fuel--;
 8003680:	4b12      	ldr	r3, [pc, #72]	; (80036cc <_Z13fuelAlgorithmv+0x114>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	3b01      	subs	r3, #1
 8003686:	4a11      	ldr	r2, [pc, #68]	; (80036cc <_Z13fuelAlgorithmv+0x114>)
 8003688:	6013      	str	r3, [r2, #0]
    if (counter_Fuel <= 0 )
 800368a:	4b10      	ldr	r3, [pc, #64]	; (80036cc <_Z13fuelAlgorithmv+0x114>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10b      	bne.n	80036aa <_Z13fuelAlgorithmv+0xf2>
    {
      counter_Fuel = 0;
 8003692:	4b0e      	ldr	r3, [pc, #56]	; (80036cc <_Z13fuelAlgorithmv+0x114>)
 8003694:	2200      	movs	r2, #0
 8003696:	601a      	str	r2, [r3, #0]
    printf("counter_Fuel : ");
 8003698:	480d      	ldr	r0, [pc, #52]	; (80036d0 <_Z13fuelAlgorithmv+0x118>)
 800369a:	f00b f839 	bl	800e710 <iprintf>
    printf("%lu\r\n", counter_Fuel);
 800369e:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <_Z13fuelAlgorithmv+0x114>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4619      	mov	r1, r3
 80036a4:	480b      	ldr	r0, [pc, #44]	; (80036d4 <_Z13fuelAlgorithmv+0x11c>)
 80036a6:	f00b f833 	bl	800e710 <iprintf>
    }
  }
}
counter_N1++;
 80036aa:	4b04      	ldr	r3, [pc, #16]	; (80036bc <_Z13fuelAlgorithmv+0x104>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	3301      	adds	r3, #1
 80036b0:	4a02      	ldr	r2, [pc, #8]	; (80036bc <_Z13fuelAlgorithmv+0x104>)
 80036b2:	6013      	str	r3, [r2, #0]
}
 80036b4:	bf00      	nop
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	20000018 	.word	0x20000018
 80036c0:	2000002c 	.word	0x2000002c
 80036c4:	20000028 	.word	0x20000028
 80036c8:	20000ef8 	.word	0x20000ef8
 80036cc:	20000ec4 	.word	0x20000ec4
 80036d0:	08012d04 	.word	0x08012d04
 80036d4:	08012cfc 	.word	0x08012cfc

080036d8 <_Z34commandedThrottleActuatorAlgorithmv>:

void commandedThrottleActuatorAlgorithm()
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
    //static int counter_Throttle = 0;

    const int limit_Throttle_max = 65;
 80036de:	2341      	movs	r3, #65	; 0x41
 80036e0:	60fb      	str	r3, [r7, #12]
    const int limit_Throttle = 20;
 80036e2:	2314      	movs	r3, #20
 80036e4:	60bb      	str	r3, [r7, #8]
    const int limit_Throttle_min = 10;
 80036e6:	230a      	movs	r3, #10
 80036e8:	607b      	str	r3, [r7, #4]

     averagecommandedThrottleActuator = (float)((averagecommandedThrottleActuator*(counter_N2-1)+commandedThrottleActuator)/counter_N2);
 80036ea:	4b6a      	ldr	r3, [pc, #424]	; (8003894 <_Z34commandedThrottleActuatorAlgorithmv+0x1bc>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	3b01      	subs	r3, #1
 80036f0:	ee07 3a90 	vmov	s15, r3
 80036f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036f8:	4b67      	ldr	r3, [pc, #412]	; (8003898 <_Z34commandedThrottleActuatorAlgorithmv+0x1c0>)
 80036fa:	edd3 7a00 	vldr	s15, [r3]
 80036fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003702:	4b66      	ldr	r3, [pc, #408]	; (800389c <_Z34commandedThrottleActuatorAlgorithmv+0x1c4>)
 8003704:	edd3 7a00 	vldr	s15, [r3]
 8003708:	ee77 6a27 	vadd.f32	s13, s14, s15
 800370c:	4b61      	ldr	r3, [pc, #388]	; (8003894 <_Z34commandedThrottleActuatorAlgorithmv+0x1bc>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	ee07 3a90 	vmov	s15, r3
 8003714:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003718:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800371c:	4b5e      	ldr	r3, [pc, #376]	; (8003898 <_Z34commandedThrottleActuatorAlgorithmv+0x1c0>)
 800371e:	edc3 7a00 	vstr	s15, [r3]

if (averagecommandedThrottleActuator >= limit_Throttle_min) {
 8003722:	4b5d      	ldr	r3, [pc, #372]	; (8003898 <_Z34commandedThrottleActuatorAlgorithmv+0x1c0>)
 8003724:	edd3 7a00 	vldr	s15, [r3]
 8003728:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800372c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003734:	f2c0 808f 	blt.w	8003856 <_Z34commandedThrottleActuatorAlgorithmv+0x17e>
  if ( (commandedThrottleActuator >= limit_Throttle) && (pre_commandedThrottleActuator < limit_Throttle) )
 8003738:	4b58      	ldr	r3, [pc, #352]	; (800389c <_Z34commandedThrottleActuatorAlgorithmv+0x1c4>)
 800373a:	edd3 7a00 	vldr	s15, [r3]
 800373e:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003742:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800374a:	db17      	blt.n	800377c <_Z34commandedThrottleActuatorAlgorithmv+0xa4>
 800374c:	4b54      	ldr	r3, [pc, #336]	; (80038a0 <_Z34commandedThrottleActuatorAlgorithmv+0x1c8>)
 800374e:	edd3 7a00 	vldr	s15, [r3]
 8003752:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8003756:	eef4 7ac7 	vcmpe.f32	s15, s14
 800375a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800375e:	d50d      	bpl.n	800377c <_Z34commandedThrottleActuatorAlgorithmv+0xa4>
  {
    counter_Throttle++;
 8003760:	4b50      	ldr	r3, [pc, #320]	; (80038a4 <_Z34commandedThrottleActuatorAlgorithmv+0x1cc>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3301      	adds	r3, #1
 8003766:	4a4f      	ldr	r2, [pc, #316]	; (80038a4 <_Z34commandedThrottleActuatorAlgorithmv+0x1cc>)
 8003768:	6013      	str	r3, [r2, #0]
    printf("counter_Throttle : ");
 800376a:	484f      	ldr	r0, [pc, #316]	; (80038a8 <_Z34commandedThrottleActuatorAlgorithmv+0x1d0>)
 800376c:	f00a ffd0 	bl	800e710 <iprintf>
    printf("%lu\r\n", counter_Throttle);
 8003770:	4b4c      	ldr	r3, [pc, #304]	; (80038a4 <_Z34commandedThrottleActuatorAlgorithmv+0x1cc>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4619      	mov	r1, r3
 8003776:	484d      	ldr	r0, [pc, #308]	; (80038ac <_Z34commandedThrottleActuatorAlgorithmv+0x1d4>)
 8003778:	f00a ffca 	bl	800e710 <iprintf>
  }
    if ( (commandedThrottleActuator >= limit_Throttle_max) && (pre_commandedThrottleActuator < limit_Throttle_max) )
 800377c:	4b47      	ldr	r3, [pc, #284]	; (800389c <_Z34commandedThrottleActuatorAlgorithmv+0x1c4>)
 800377e:	edd3 7a00 	vldr	s15, [r3]
 8003782:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 80038b0 <_Z34commandedThrottleActuatorAlgorithmv+0x1d8>
 8003786:	eef4 7ac7 	vcmpe.f32	s15, s14
 800378a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800378e:	db17      	blt.n	80037c0 <_Z34commandedThrottleActuatorAlgorithmv+0xe8>
 8003790:	4b43      	ldr	r3, [pc, #268]	; (80038a0 <_Z34commandedThrottleActuatorAlgorithmv+0x1c8>)
 8003792:	edd3 7a00 	vldr	s15, [r3]
 8003796:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80038b0 <_Z34commandedThrottleActuatorAlgorithmv+0x1d8>
 800379a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800379e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a2:	d50d      	bpl.n	80037c0 <_Z34commandedThrottleActuatorAlgorithmv+0xe8>
    {
    counter_Throttle++;
 80037a4:	4b3f      	ldr	r3, [pc, #252]	; (80038a4 <_Z34commandedThrottleActuatorAlgorithmv+0x1cc>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	3301      	adds	r3, #1
 80037aa:	4a3e      	ldr	r2, [pc, #248]	; (80038a4 <_Z34commandedThrottleActuatorAlgorithmv+0x1cc>)
 80037ac:	6013      	str	r3, [r2, #0]
    printf("counter_Throttle+ : ");
 80037ae:	4841      	ldr	r0, [pc, #260]	; (80038b4 <_Z34commandedThrottleActuatorAlgorithmv+0x1dc>)
 80037b0:	f00a ffae 	bl	800e710 <iprintf>
    printf("%lu\r\n", counter_Throttle);
 80037b4:	4b3b      	ldr	r3, [pc, #236]	; (80038a4 <_Z34commandedThrottleActuatorAlgorithmv+0x1cc>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4619      	mov	r1, r3
 80037ba:	483c      	ldr	r0, [pc, #240]	; (80038ac <_Z34commandedThrottleActuatorAlgorithmv+0x1d4>)
 80037bc:	f00a ffa8 	bl	800e710 <iprintf>
    }
    if ( (commandedThrottleActuator > limit_Throttle_max) && (pre_commandedThrottleActuator > limit_Throttle) )
 80037c0:	4b36      	ldr	r3, [pc, #216]	; (800389c <_Z34commandedThrottleActuatorAlgorithmv+0x1c4>)
 80037c2:	edd3 7a00 	vldr	s15, [r3]
 80037c6:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80038b0 <_Z34commandedThrottleActuatorAlgorithmv+0x1d8>
 80037ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d2:	dd17      	ble.n	8003804 <_Z34commandedThrottleActuatorAlgorithmv+0x12c>
 80037d4:	4b32      	ldr	r3, [pc, #200]	; (80038a0 <_Z34commandedThrottleActuatorAlgorithmv+0x1c8>)
 80037d6:	edd3 7a00 	vldr	s15, [r3]
 80037da:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80037de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80037e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037e6:	dd0d      	ble.n	8003804 <_Z34commandedThrottleActuatorAlgorithmv+0x12c>
    {
    counter_Throttle++;
 80037e8:	4b2e      	ldr	r3, [pc, #184]	; (80038a4 <_Z34commandedThrottleActuatorAlgorithmv+0x1cc>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	3301      	adds	r3, #1
 80037ee:	4a2d      	ldr	r2, [pc, #180]	; (80038a4 <_Z34commandedThrottleActuatorAlgorithmv+0x1cc>)
 80037f0:	6013      	str	r3, [r2, #0]
    printf("counter_Throttle+ : ");
 80037f2:	4830      	ldr	r0, [pc, #192]	; (80038b4 <_Z34commandedThrottleActuatorAlgorithmv+0x1dc>)
 80037f4:	f00a ff8c 	bl	800e710 <iprintf>
    printf("%lu\r\n", counter_Throttle);
 80037f8:	4b2a      	ldr	r3, [pc, #168]	; (80038a4 <_Z34commandedThrottleActuatorAlgorithmv+0x1cc>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4619      	mov	r1, r3
 80037fe:	482b      	ldr	r0, [pc, #172]	; (80038ac <_Z34commandedThrottleActuatorAlgorithmv+0x1d4>)
 8003800:	f00a ff86 	bl	800e710 <iprintf>
    }
    if ( (commandedThrottleActuator <= limit_Throttle_min) && (pre_commandedThrottleActuator > limit_Throttle_min) )
 8003804:	4b25      	ldr	r3, [pc, #148]	; (800389c <_Z34commandedThrottleActuatorAlgorithmv+0x1c4>)
 8003806:	edd3 7a00 	vldr	s15, [r3]
 800380a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800380e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003816:	d81e      	bhi.n	8003856 <_Z34commandedThrottleActuatorAlgorithmv+0x17e>
 8003818:	4b21      	ldr	r3, [pc, #132]	; (80038a0 <_Z34commandedThrottleActuatorAlgorithmv+0x1c8>)
 800381a:	edd3 7a00 	vldr	s15, [r3]
 800381e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003822:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800382a:	dd14      	ble.n	8003856 <_Z34commandedThrottleActuatorAlgorithmv+0x17e>
  {
    counter_Throttle--;
 800382c:	4b1d      	ldr	r3, [pc, #116]	; (80038a4 <_Z34commandedThrottleActuatorAlgorithmv+0x1cc>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3b01      	subs	r3, #1
 8003832:	4a1c      	ldr	r2, [pc, #112]	; (80038a4 <_Z34commandedThrottleActuatorAlgorithmv+0x1cc>)
 8003834:	6013      	str	r3, [r2, #0]
    if (counter_Throttle <= 0 )
 8003836:	4b1b      	ldr	r3, [pc, #108]	; (80038a4 <_Z34commandedThrottleActuatorAlgorithmv+0x1cc>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10b      	bne.n	8003856 <_Z34commandedThrottleActuatorAlgorithmv+0x17e>
    {
      counter_Throttle = 0;
 800383e:	4b19      	ldr	r3, [pc, #100]	; (80038a4 <_Z34commandedThrottleActuatorAlgorithmv+0x1cc>)
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
    printf("counter_Throttle : ");
 8003844:	4818      	ldr	r0, [pc, #96]	; (80038a8 <_Z34commandedThrottleActuatorAlgorithmv+0x1d0>)
 8003846:	f00a ff63 	bl	800e710 <iprintf>
    printf("%lu\r\n", counter_Throttle);
 800384a:	4b16      	ldr	r3, [pc, #88]	; (80038a4 <_Z34commandedThrottleActuatorAlgorithmv+0x1cc>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4619      	mov	r1, r3
 8003850:	4816      	ldr	r0, [pc, #88]	; (80038ac <_Z34commandedThrottleActuatorAlgorithmv+0x1d4>)
 8003852:	f00a ff5d 	bl	800e710 <iprintf>
//    counter_Throttle = 0;
//    printf("counter_Throttle Zeroed ");
//    printf("%lu\r\n", counter_Throttle);
//}

if (counter_Idle >= 30)
 8003856:	4b18      	ldr	r3, [pc, #96]	; (80038b8 <_Z34commandedThrottleActuatorAlgorithmv+0x1e0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b1d      	cmp	r3, #29
 800385c:	dd10      	ble.n	8003880 <_Z34commandedThrottleActuatorAlgorithmv+0x1a8>
{
  counter_Throttle++;
 800385e:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <_Z34commandedThrottleActuatorAlgorithmv+0x1cc>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	3301      	adds	r3, #1
 8003864:	4a0f      	ldr	r2, [pc, #60]	; (80038a4 <_Z34commandedThrottleActuatorAlgorithmv+0x1cc>)
 8003866:	6013      	str	r3, [r2, #0]
  counter_Idle = 0;
 8003868:	4b13      	ldr	r3, [pc, #76]	; (80038b8 <_Z34commandedThrottleActuatorAlgorithmv+0x1e0>)
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
  printf("Idle counter_Throttle+ : ");
 800386e:	4813      	ldr	r0, [pc, #76]	; (80038bc <_Z34commandedThrottleActuatorAlgorithmv+0x1e4>)
 8003870:	f00a ff4e 	bl	800e710 <iprintf>
  printf("%lu\r\n", counter_Throttle);
 8003874:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <_Z34commandedThrottleActuatorAlgorithmv+0x1cc>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4619      	mov	r1, r3
 800387a:	480c      	ldr	r0, [pc, #48]	; (80038ac <_Z34commandedThrottleActuatorAlgorithmv+0x1d4>)
 800387c:	f00a ff48 	bl	800e710 <iprintf>
}
counter_N2++;
 8003880:	4b04      	ldr	r3, [pc, #16]	; (8003894 <_Z34commandedThrottleActuatorAlgorithmv+0x1bc>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	3301      	adds	r3, #1
 8003886:	4a03      	ldr	r2, [pc, #12]	; (8003894 <_Z34commandedThrottleActuatorAlgorithmv+0x1bc>)
 8003888:	6013      	str	r3, [r2, #0]
}
 800388a:	bf00      	nop
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	2000001c 	.word	0x2000001c
 8003898:	20000030 	.word	0x20000030
 800389c:	20000eb8 	.word	0x20000eb8
 80038a0:	20000f08 	.word	0x20000f08
 80038a4:	20000ee4 	.word	0x20000ee4
 80038a8:	08012d14 	.word	0x08012d14
 80038ac:	08012cfc 	.word	0x08012cfc
 80038b0:	42820000 	.word	0x42820000
 80038b4:	08012d28 	.word	0x08012d28
 80038b8:	20000eec 	.word	0x20000eec
 80038bc:	08012d40 	.word	0x08012d40

080038c0 <_Z12rpmAlgorithmv>:

void rpmAlgorithm() //enginespeed algorithm
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b082      	sub	sp, #8
 80038c4:	af00      	add	r7, sp, #0
  const int limitRpm = 2100;
 80038c6:	f640 0334 	movw	r3, #2100	; 0x834
 80038ca:	607b      	str	r3, [r7, #4]
  const int limitRpm_max = 4000;
 80038cc:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 80038d0:	603b      	str	r3, [r7, #0]
  //static uint32_t pre_rpm = 0.0;
  //static int counter_Rpm = 0;

  if ( (rpm >= limitRpm) && (pre_rpm < limitRpm) )
 80038d2:	4b20      	ldr	r3, [pc, #128]	; (8003954 <_Z12rpmAlgorithmv+0x94>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f640 0233 	movw	r2, #2099	; 0x833
 80038da:	4293      	cmp	r3, r2
 80038dc:	d913      	bls.n	8003906 <_Z12rpmAlgorithmv+0x46>
 80038de:	4b1e      	ldr	r3, [pc, #120]	; (8003958 <_Z12rpmAlgorithmv+0x98>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f640 0233 	movw	r2, #2099	; 0x833
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d80d      	bhi.n	8003906 <_Z12rpmAlgorithmv+0x46>
  {
    counter_Rpm++;
 80038ea:	4b1c      	ldr	r3, [pc, #112]	; (800395c <_Z12rpmAlgorithmv+0x9c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	3301      	adds	r3, #1
 80038f0:	4a1a      	ldr	r2, [pc, #104]	; (800395c <_Z12rpmAlgorithmv+0x9c>)
 80038f2:	6013      	str	r3, [r2, #0]
    printf("counter_Rpm : ");
 80038f4:	481a      	ldr	r0, [pc, #104]	; (8003960 <_Z12rpmAlgorithmv+0xa0>)
 80038f6:	f00a ff0b 	bl	800e710 <iprintf>
    printf("%lu\r\n", counter_Rpm);
 80038fa:	4b18      	ldr	r3, [pc, #96]	; (800395c <_Z12rpmAlgorithmv+0x9c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4619      	mov	r1, r3
 8003900:	4818      	ldr	r0, [pc, #96]	; (8003964 <_Z12rpmAlgorithmv+0xa4>)
 8003902:	f00a ff05 	bl	800e710 <iprintf>
  }

  if ( ( (rpm >= limitRpm_max) && (pre_rpm >= limitRpm_max) ) || ( (rpm >= limitRpm_max) && (pre_rpm < limitRpm_max) ) )
 8003906:	4b13      	ldr	r3, [pc, #76]	; (8003954 <_Z12rpmAlgorithmv+0x94>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800390e:	d304      	bcc.n	800391a <_Z12rpmAlgorithmv+0x5a>
 8003910:	4b11      	ldr	r3, [pc, #68]	; (8003958 <_Z12rpmAlgorithmv+0x98>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003918:	d209      	bcs.n	800392e <_Z12rpmAlgorithmv+0x6e>
 800391a:	4b0e      	ldr	r3, [pc, #56]	; (8003954 <_Z12rpmAlgorithmv+0x94>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8003922:	d312      	bcc.n	800394a <_Z12rpmAlgorithmv+0x8a>
 8003924:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <_Z12rpmAlgorithmv+0x98>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800392c:	d20d      	bcs.n	800394a <_Z12rpmAlgorithmv+0x8a>
  {
    counter_Rpm++;
 800392e:	4b0b      	ldr	r3, [pc, #44]	; (800395c <_Z12rpmAlgorithmv+0x9c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	3301      	adds	r3, #1
 8003934:	4a09      	ldr	r2, [pc, #36]	; (800395c <_Z12rpmAlgorithmv+0x9c>)
 8003936:	6013      	str	r3, [r2, #0]
    printf("counter_Rpm+ : ");
 8003938:	480b      	ldr	r0, [pc, #44]	; (8003968 <_Z12rpmAlgorithmv+0xa8>)
 800393a:	f00a fee9 	bl	800e710 <iprintf>
    printf("%lu\r\n", counter_Rpm);
 800393e:	4b07      	ldr	r3, [pc, #28]	; (800395c <_Z12rpmAlgorithmv+0x9c>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4619      	mov	r1, r3
 8003944:	4807      	ldr	r0, [pc, #28]	; (8003964 <_Z12rpmAlgorithmv+0xa4>)
 8003946:	f00a fee3 	bl	800e710 <iprintf>
  }
}
 800394a:	bf00      	nop
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20000e74 	.word	0x20000e74
 8003958:	20000efc 	.word	0x20000efc
 800395c:	20000ec8 	.word	0x20000ec8
 8003960:	08012d5c 	.word	0x08012d5c
 8003964:	08012cfc 	.word	0x08012cfc
 8003968:	08012d6c 	.word	0x08012d6c

0800396c <_Z24efficiencyScoreAlgorithmv>:

void efficiencyScoreAlgorithm() //algorithm with fuel limit condition efficiency formulas
{
 800396c:	b5b0      	push	{r4, r5, r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
  //static float efficiencyScore = 0.0;
  const int limitFuel_max = 12;
 8003972:	230c      	movs	r3, #12
 8003974:	607b      	str	r3, [r7, #4]

  if (averageFuelConsume < limitFuel_max)
 8003976:	4b85      	ldr	r3, [pc, #532]	; (8003b8c <_Z24efficiencyScoreAlgorithmv+0x220>)
 8003978:	edd3 7a00 	vldr	s15, [r3]
 800397c:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8003980:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003988:	d556      	bpl.n	8003a38 <_Z24efficiencyScoreAlgorithmv+0xcc>
  {
    efficiencyScore = (float)(5.0-(40*((float)counter_AccelYp)/runTime)-(30*((float)counter_Rpm)/runTime));
 800398a:	4b81      	ldr	r3, [pc, #516]	; (8003b90 <_Z24efficiencyScoreAlgorithmv+0x224>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	ee07 3a90 	vmov	s15, r3
 8003992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003996:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8003b94 <_Z24efficiencyScoreAlgorithmv+0x228>
 800399a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800399e:	4b7e      	ldr	r3, [pc, #504]	; (8003b98 <_Z24efficiencyScoreAlgorithmv+0x22c>)
 80039a0:	881b      	ldrh	r3, [r3, #0]
 80039a2:	ee07 3a90 	vmov	s15, r3
 80039a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039aa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80039ae:	ee16 0a90 	vmov	r0, s13
 80039b2:	f7fc fdd1 	bl	8000558 <__aeabi_f2d>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	f04f 0000 	mov.w	r0, #0
 80039be:	4977      	ldr	r1, [pc, #476]	; (8003b9c <_Z24efficiencyScoreAlgorithmv+0x230>)
 80039c0:	f7fc fc6a 	bl	8000298 <__aeabi_dsub>
 80039c4:	4602      	mov	r2, r0
 80039c6:	460b      	mov	r3, r1
 80039c8:	4614      	mov	r4, r2
 80039ca:	461d      	mov	r5, r3
 80039cc:	4b74      	ldr	r3, [pc, #464]	; (8003ba0 <_Z24efficiencyScoreAlgorithmv+0x234>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	ee07 3a90 	vmov	s15, r3
 80039d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039d8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80039dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80039e0:	4b6d      	ldr	r3, [pc, #436]	; (8003b98 <_Z24efficiencyScoreAlgorithmv+0x22c>)
 80039e2:	881b      	ldrh	r3, [r3, #0]
 80039e4:	ee07 3a90 	vmov	s15, r3
 80039e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039ec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80039f0:	ee16 0a90 	vmov	r0, s13
 80039f4:	f7fc fdb0 	bl	8000558 <__aeabi_f2d>
 80039f8:	4602      	mov	r2, r0
 80039fa:	460b      	mov	r3, r1
 80039fc:	4620      	mov	r0, r4
 80039fe:	4629      	mov	r1, r5
 8003a00:	f7fc fc4a 	bl	8000298 <__aeabi_dsub>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4610      	mov	r0, r2
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	f7fd f8f4 	bl	8000bf8 <__aeabi_d2f>
 8003a10:	4603      	mov	r3, r0
 8003a12:	4a64      	ldr	r2, [pc, #400]	; (8003ba4 <_Z24efficiencyScoreAlgorithmv+0x238>)
 8003a14:	6013      	str	r3, [r2, #0]
    printf("efficiencyScore : ");
 8003a16:	4864      	ldr	r0, [pc, #400]	; (8003ba8 <_Z24efficiencyScoreAlgorithmv+0x23c>)
 8003a18:	f00a fe7a 	bl	800e710 <iprintf>
    printf("%f", efficiencyScore);
 8003a1c:	4b61      	ldr	r3, [pc, #388]	; (8003ba4 <_Z24efficiencyScoreAlgorithmv+0x238>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4618      	mov	r0, r3
 8003a22:	f7fc fd99 	bl	8000558 <__aeabi_f2d>
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	4860      	ldr	r0, [pc, #384]	; (8003bac <_Z24efficiencyScoreAlgorithmv+0x240>)
 8003a2c:	f00a fe70 	bl	800e710 <iprintf>
    printf(" / 10\r\n");
 8003a30:	485f      	ldr	r0, [pc, #380]	; (8003bb0 <_Z24efficiencyScoreAlgorithmv+0x244>)
 8003a32:	f00a fef3 	bl	800e81c <puts>
 8003a36:	e07f      	b.n	8003b38 <_Z24efficiencyScoreAlgorithmv+0x1cc>
  }
  else if (averageFuelConsume >= limitFuel_max)
 8003a38:	4b54      	ldr	r3, [pc, #336]	; (8003b8c <_Z24efficiencyScoreAlgorithmv+0x220>)
 8003a3a:	edd3 7a00 	vldr	s15, [r3]
 8003a3e:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8003a42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a4a:	db75      	blt.n	8003b38 <_Z24efficiencyScoreAlgorithmv+0x1cc>
  {
    efficiencyScore = (float)(10.0-(40*((float)counter_AccelYp)/runTime)-(180*((float)counter_Fuel)/runTime)-(30*((float)counter_Rpm)/runTime));
 8003a4c:	4b50      	ldr	r3, [pc, #320]	; (8003b90 <_Z24efficiencyScoreAlgorithmv+0x224>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	ee07 3a90 	vmov	s15, r3
 8003a54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a58:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8003b94 <_Z24efficiencyScoreAlgorithmv+0x228>
 8003a5c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a60:	4b4d      	ldr	r3, [pc, #308]	; (8003b98 <_Z24efficiencyScoreAlgorithmv+0x22c>)
 8003a62:	881b      	ldrh	r3, [r3, #0]
 8003a64:	ee07 3a90 	vmov	s15, r3
 8003a68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a6c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003a70:	ee16 0a90 	vmov	r0, s13
 8003a74:	f7fc fd70 	bl	8000558 <__aeabi_f2d>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	f04f 0000 	mov.w	r0, #0
 8003a80:	494c      	ldr	r1, [pc, #304]	; (8003bb4 <_Z24efficiencyScoreAlgorithmv+0x248>)
 8003a82:	f7fc fc09 	bl	8000298 <__aeabi_dsub>
 8003a86:	4602      	mov	r2, r0
 8003a88:	460b      	mov	r3, r1
 8003a8a:	4614      	mov	r4, r2
 8003a8c:	461d      	mov	r5, r3
 8003a8e:	4b4a      	ldr	r3, [pc, #296]	; (8003bb8 <_Z24efficiencyScoreAlgorithmv+0x24c>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	ee07 3a90 	vmov	s15, r3
 8003a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a9a:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8003bbc <_Z24efficiencyScoreAlgorithmv+0x250>
 8003a9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003aa2:	4b3d      	ldr	r3, [pc, #244]	; (8003b98 <_Z24efficiencyScoreAlgorithmv+0x22c>)
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	ee07 3a90 	vmov	s15, r3
 8003aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003ab2:	ee16 0a90 	vmov	r0, s13
 8003ab6:	f7fc fd4f 	bl	8000558 <__aeabi_f2d>
 8003aba:	4602      	mov	r2, r0
 8003abc:	460b      	mov	r3, r1
 8003abe:	4620      	mov	r0, r4
 8003ac0:	4629      	mov	r1, r5
 8003ac2:	f7fc fbe9 	bl	8000298 <__aeabi_dsub>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	4614      	mov	r4, r2
 8003acc:	461d      	mov	r5, r3
 8003ace:	4b34      	ldr	r3, [pc, #208]	; (8003ba0 <_Z24efficiencyScoreAlgorithmv+0x234>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	ee07 3a90 	vmov	s15, r3
 8003ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ada:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003ade:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ae2:	4b2d      	ldr	r3, [pc, #180]	; (8003b98 <_Z24efficiencyScoreAlgorithmv+0x22c>)
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	ee07 3a90 	vmov	s15, r3
 8003aea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003af2:	ee16 0a90 	vmov	r0, s13
 8003af6:	f7fc fd2f 	bl	8000558 <__aeabi_f2d>
 8003afa:	4602      	mov	r2, r0
 8003afc:	460b      	mov	r3, r1
 8003afe:	4620      	mov	r0, r4
 8003b00:	4629      	mov	r1, r5
 8003b02:	f7fc fbc9 	bl	8000298 <__aeabi_dsub>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	f7fd f873 	bl	8000bf8 <__aeabi_d2f>
 8003b12:	4603      	mov	r3, r0
 8003b14:	4a23      	ldr	r2, [pc, #140]	; (8003ba4 <_Z24efficiencyScoreAlgorithmv+0x238>)
 8003b16:	6013      	str	r3, [r2, #0]
    printf("efficiencyScore : ");
 8003b18:	4823      	ldr	r0, [pc, #140]	; (8003ba8 <_Z24efficiencyScoreAlgorithmv+0x23c>)
 8003b1a:	f00a fdf9 	bl	800e710 <iprintf>
    printf("%f", efficiencyScore);
 8003b1e:	4b21      	ldr	r3, [pc, #132]	; (8003ba4 <_Z24efficiencyScoreAlgorithmv+0x238>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fc fd18 	bl	8000558 <__aeabi_f2d>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	481f      	ldr	r0, [pc, #124]	; (8003bac <_Z24efficiencyScoreAlgorithmv+0x240>)
 8003b2e:	f00a fdef 	bl	800e710 <iprintf>
    printf(" / 10\r\n");
 8003b32:	481f      	ldr	r0, [pc, #124]	; (8003bb0 <_Z24efficiencyScoreAlgorithmv+0x244>)
 8003b34:	f00a fe72 	bl	800e81c <puts>
  }
  if (efficiencyScore <= 0)
 8003b38:	4b1a      	ldr	r3, [pc, #104]	; (8003ba4 <_Z24efficiencyScoreAlgorithmv+0x238>)
 8003b3a:	edd3 7a00 	vldr	s15, [r3]
 8003b3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b46:	d803      	bhi.n	8003b50 <_Z24efficiencyScoreAlgorithmv+0x1e4>
  efficiencyScore = 0.0;
 8003b48:	4b16      	ldr	r3, [pc, #88]	; (8003ba4 <_Z24efficiencyScoreAlgorithmv+0x238>)
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	601a      	str	r2, [r3, #0]
  if (isnan(efficiencyScore))
 8003b50:	4b14      	ldr	r3, [pc, #80]	; (8003ba4 <_Z24efficiencyScoreAlgorithmv+0x238>)
 8003b52:	edd3 7a00 	vldr	s15, [r3]
 8003b56:	eeb0 0a67 	vmov.f32	s0, s15
 8003b5a:	f7fd fecf 	bl	80018fc <_ZSt5isnanf>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d002      	beq.n	8003b6a <_Z24efficiencyScoreAlgorithmv+0x1fe>
  efficiencyScore = 5.0;
 8003b64:	4b0f      	ldr	r3, [pc, #60]	; (8003ba4 <_Z24efficiencyScoreAlgorithmv+0x238>)
 8003b66:	4a16      	ldr	r2, [pc, #88]	; (8003bc0 <_Z24efficiencyScoreAlgorithmv+0x254>)
 8003b68:	601a      	str	r2, [r3, #0]

  printf("averageFuelConsume : ");
 8003b6a:	4816      	ldr	r0, [pc, #88]	; (8003bc4 <_Z24efficiencyScoreAlgorithmv+0x258>)
 8003b6c:	f00a fdd0 	bl	800e710 <iprintf>
  printf("%f\r\n", averageFuelConsume);
 8003b70:	4b06      	ldr	r3, [pc, #24]	; (8003b8c <_Z24efficiencyScoreAlgorithmv+0x220>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f7fc fcef 	bl	8000558 <__aeabi_f2d>
 8003b7a:	4602      	mov	r2, r0
 8003b7c:	460b      	mov	r3, r1
 8003b7e:	4812      	ldr	r0, [pc, #72]	; (8003bc8 <_Z24efficiencyScoreAlgorithmv+0x25c>)
 8003b80:	f00a fdc6 	bl	800e710 <iprintf>
}
 8003b84:	bf00      	nop
 8003b86:	3708      	adds	r7, #8
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bdb0      	pop	{r4, r5, r7, pc}
 8003b8c:	2000002c 	.word	0x2000002c
 8003b90:	20000ec0 	.word	0x20000ec0
 8003b94:	42200000 	.word	0x42200000
 8003b98:	20000e80 	.word	0x20000e80
 8003b9c:	40140000 	.word	0x40140000
 8003ba0:	20000ec8 	.word	0x20000ec8
 8003ba4:	20000ecc 	.word	0x20000ecc
 8003ba8:	08012d7c 	.word	0x08012d7c
 8003bac:	08012b20 	.word	0x08012b20
 8003bb0:	08012d90 	.word	0x08012d90
 8003bb4:	40240000 	.word	0x40240000
 8003bb8:	20000ec4 	.word	0x20000ec4
 8003bbc:	43340000 	.word	0x43340000
 8003bc0:	40a00000 	.word	0x40a00000
 8003bc4:	08012d98 	.word	0x08012d98
 8003bc8:	08012a14 	.word	0x08012a14

08003bcc <_Z25efficiencyScoreAlgorithm2v>:

void efficiencyScoreAlgorithm2() //algorithm with fuel limit condition efficiency formulas
{
 8003bcc:	b5b0      	push	{r4, r5, r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
  //static float efficiencyScore = 0.0;
  const int limit_Throttle_min = 10;
 8003bd2:	230a      	movs	r3, #10
 8003bd4:	607b      	str	r3, [r7, #4]

  if (averagecommandedThrottleActuator >= limit_Throttle_min)
 8003bd6:	4b85      	ldr	r3, [pc, #532]	; (8003dec <_Z25efficiencyScoreAlgorithm2v+0x220>)
 8003bd8:	edd3 7a00 	vldr	s15, [r3]
 8003bdc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003be0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be8:	db56      	blt.n	8003c98 <_Z25efficiencyScoreAlgorithm2v+0xcc>
  {
    efficiencyScore = (float)(5.0-(40*((float)counter_AccelYp)/runTime)-(30*((float)counter_Rpm)/runTime));
 8003bea:	4b81      	ldr	r3, [pc, #516]	; (8003df0 <_Z25efficiencyScoreAlgorithm2v+0x224>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	ee07 3a90 	vmov	s15, r3
 8003bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bf6:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8003df4 <_Z25efficiencyScoreAlgorithm2v+0x228>
 8003bfa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003bfe:	4b7e      	ldr	r3, [pc, #504]	; (8003df8 <_Z25efficiencyScoreAlgorithm2v+0x22c>)
 8003c00:	881b      	ldrh	r3, [r3, #0]
 8003c02:	ee07 3a90 	vmov	s15, r3
 8003c06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c0a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003c0e:	ee16 0a90 	vmov	r0, s13
 8003c12:	f7fc fca1 	bl	8000558 <__aeabi_f2d>
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	f04f 0000 	mov.w	r0, #0
 8003c1e:	4977      	ldr	r1, [pc, #476]	; (8003dfc <_Z25efficiencyScoreAlgorithm2v+0x230>)
 8003c20:	f7fc fb3a 	bl	8000298 <__aeabi_dsub>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	4614      	mov	r4, r2
 8003c2a:	461d      	mov	r5, r3
 8003c2c:	4b74      	ldr	r3, [pc, #464]	; (8003e00 <_Z25efficiencyScoreAlgorithm2v+0x234>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	ee07 3a90 	vmov	s15, r3
 8003c34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c38:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003c3c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003c40:	4b6d      	ldr	r3, [pc, #436]	; (8003df8 <_Z25efficiencyScoreAlgorithm2v+0x22c>)
 8003c42:	881b      	ldrh	r3, [r3, #0]
 8003c44:	ee07 3a90 	vmov	s15, r3
 8003c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c4c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003c50:	ee16 0a90 	vmov	r0, s13
 8003c54:	f7fc fc80 	bl	8000558 <__aeabi_f2d>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4620      	mov	r0, r4
 8003c5e:	4629      	mov	r1, r5
 8003c60:	f7fc fb1a 	bl	8000298 <__aeabi_dsub>
 8003c64:	4602      	mov	r2, r0
 8003c66:	460b      	mov	r3, r1
 8003c68:	4610      	mov	r0, r2
 8003c6a:	4619      	mov	r1, r3
 8003c6c:	f7fc ffc4 	bl	8000bf8 <__aeabi_d2f>
 8003c70:	4603      	mov	r3, r0
 8003c72:	4a64      	ldr	r2, [pc, #400]	; (8003e04 <_Z25efficiencyScoreAlgorithm2v+0x238>)
 8003c74:	6013      	str	r3, [r2, #0]
    printf("efficiencyScore : ");
 8003c76:	4864      	ldr	r0, [pc, #400]	; (8003e08 <_Z25efficiencyScoreAlgorithm2v+0x23c>)
 8003c78:	f00a fd4a 	bl	800e710 <iprintf>
    printf("%f", efficiencyScore);
 8003c7c:	4b61      	ldr	r3, [pc, #388]	; (8003e04 <_Z25efficiencyScoreAlgorithm2v+0x238>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f7fc fc69 	bl	8000558 <__aeabi_f2d>
 8003c86:	4602      	mov	r2, r0
 8003c88:	460b      	mov	r3, r1
 8003c8a:	4860      	ldr	r0, [pc, #384]	; (8003e0c <_Z25efficiencyScoreAlgorithm2v+0x240>)
 8003c8c:	f00a fd40 	bl	800e710 <iprintf>
    printf(" / 10\r\n");
 8003c90:	485f      	ldr	r0, [pc, #380]	; (8003e10 <_Z25efficiencyScoreAlgorithm2v+0x244>)
 8003c92:	f00a fdc3 	bl	800e81c <puts>
 8003c96:	e07f      	b.n	8003d98 <_Z25efficiencyScoreAlgorithm2v+0x1cc>
  }
  else if (averagecommandedThrottleActuator < limit_Throttle_min)
 8003c98:	4b54      	ldr	r3, [pc, #336]	; (8003dec <_Z25efficiencyScoreAlgorithm2v+0x220>)
 8003c9a:	edd3 7a00 	vldr	s15, [r3]
 8003c9e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003ca2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003caa:	d575      	bpl.n	8003d98 <_Z25efficiencyScoreAlgorithm2v+0x1cc>
  {
    efficiencyScore = (float)(10.0-(50*((float)counter_AccelYp)/runTime)-(180*((float)counter_Throttle)/runTime)-(30*((float)counter_Rpm)/runTime));
 8003cac:	4b50      	ldr	r3, [pc, #320]	; (8003df0 <_Z25efficiencyScoreAlgorithm2v+0x224>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	ee07 3a90 	vmov	s15, r3
 8003cb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cb8:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8003e14 <_Z25efficiencyScoreAlgorithm2v+0x248>
 8003cbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003cc0:	4b4d      	ldr	r3, [pc, #308]	; (8003df8 <_Z25efficiencyScoreAlgorithm2v+0x22c>)
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	ee07 3a90 	vmov	s15, r3
 8003cc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ccc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003cd0:	ee16 0a90 	vmov	r0, s13
 8003cd4:	f7fc fc40 	bl	8000558 <__aeabi_f2d>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	f04f 0000 	mov.w	r0, #0
 8003ce0:	494d      	ldr	r1, [pc, #308]	; (8003e18 <_Z25efficiencyScoreAlgorithm2v+0x24c>)
 8003ce2:	f7fc fad9 	bl	8000298 <__aeabi_dsub>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4614      	mov	r4, r2
 8003cec:	461d      	mov	r5, r3
 8003cee:	4b4b      	ldr	r3, [pc, #300]	; (8003e1c <_Z25efficiencyScoreAlgorithm2v+0x250>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	ee07 3a90 	vmov	s15, r3
 8003cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cfa:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8003e20 <_Z25efficiencyScoreAlgorithm2v+0x254>
 8003cfe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d02:	4b3d      	ldr	r3, [pc, #244]	; (8003df8 <_Z25efficiencyScoreAlgorithm2v+0x22c>)
 8003d04:	881b      	ldrh	r3, [r3, #0]
 8003d06:	ee07 3a90 	vmov	s15, r3
 8003d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d0e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003d12:	ee16 0a90 	vmov	r0, s13
 8003d16:	f7fc fc1f 	bl	8000558 <__aeabi_f2d>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4620      	mov	r0, r4
 8003d20:	4629      	mov	r1, r5
 8003d22:	f7fc fab9 	bl	8000298 <__aeabi_dsub>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4614      	mov	r4, r2
 8003d2c:	461d      	mov	r5, r3
 8003d2e:	4b34      	ldr	r3, [pc, #208]	; (8003e00 <_Z25efficiencyScoreAlgorithm2v+0x234>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	ee07 3a90 	vmov	s15, r3
 8003d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d3a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003d3e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d42:	4b2d      	ldr	r3, [pc, #180]	; (8003df8 <_Z25efficiencyScoreAlgorithm2v+0x22c>)
 8003d44:	881b      	ldrh	r3, [r3, #0]
 8003d46:	ee07 3a90 	vmov	s15, r3
 8003d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d4e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003d52:	ee16 0a90 	vmov	r0, s13
 8003d56:	f7fc fbff 	bl	8000558 <__aeabi_f2d>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	4620      	mov	r0, r4
 8003d60:	4629      	mov	r1, r5
 8003d62:	f7fc fa99 	bl	8000298 <__aeabi_dsub>
 8003d66:	4602      	mov	r2, r0
 8003d68:	460b      	mov	r3, r1
 8003d6a:	4610      	mov	r0, r2
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	f7fc ff43 	bl	8000bf8 <__aeabi_d2f>
 8003d72:	4603      	mov	r3, r0
 8003d74:	4a23      	ldr	r2, [pc, #140]	; (8003e04 <_Z25efficiencyScoreAlgorithm2v+0x238>)
 8003d76:	6013      	str	r3, [r2, #0]
    printf("efficiencyScore : ");
 8003d78:	4823      	ldr	r0, [pc, #140]	; (8003e08 <_Z25efficiencyScoreAlgorithm2v+0x23c>)
 8003d7a:	f00a fcc9 	bl	800e710 <iprintf>
    printf("%f", efficiencyScore);
 8003d7e:	4b21      	ldr	r3, [pc, #132]	; (8003e04 <_Z25efficiencyScoreAlgorithm2v+0x238>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fc fbe8 	bl	8000558 <__aeabi_f2d>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	481f      	ldr	r0, [pc, #124]	; (8003e0c <_Z25efficiencyScoreAlgorithm2v+0x240>)
 8003d8e:	f00a fcbf 	bl	800e710 <iprintf>
    printf(" / 10\r\n");
 8003d92:	481f      	ldr	r0, [pc, #124]	; (8003e10 <_Z25efficiencyScoreAlgorithm2v+0x244>)
 8003d94:	f00a fd42 	bl	800e81c <puts>
  }
  if (efficiencyScore <= 0)
 8003d98:	4b1a      	ldr	r3, [pc, #104]	; (8003e04 <_Z25efficiencyScoreAlgorithm2v+0x238>)
 8003d9a:	edd3 7a00 	vldr	s15, [r3]
 8003d9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da6:	d803      	bhi.n	8003db0 <_Z25efficiencyScoreAlgorithm2v+0x1e4>
  efficiencyScore = 0.0;
 8003da8:	4b16      	ldr	r3, [pc, #88]	; (8003e04 <_Z25efficiencyScoreAlgorithm2v+0x238>)
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	601a      	str	r2, [r3, #0]
  if (isnan(efficiencyScore))
 8003db0:	4b14      	ldr	r3, [pc, #80]	; (8003e04 <_Z25efficiencyScoreAlgorithm2v+0x238>)
 8003db2:	edd3 7a00 	vldr	s15, [r3]
 8003db6:	eeb0 0a67 	vmov.f32	s0, s15
 8003dba:	f7fd fd9f 	bl	80018fc <_ZSt5isnanf>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d002      	beq.n	8003dca <_Z25efficiencyScoreAlgorithm2v+0x1fe>
  efficiencyScore = 5.0;
 8003dc4:	4b0f      	ldr	r3, [pc, #60]	; (8003e04 <_Z25efficiencyScoreAlgorithm2v+0x238>)
 8003dc6:	4a17      	ldr	r2, [pc, #92]	; (8003e24 <_Z25efficiencyScoreAlgorithm2v+0x258>)
 8003dc8:	601a      	str	r2, [r3, #0]

  printf("averagecommandedThrottleActuator : ");
 8003dca:	4817      	ldr	r0, [pc, #92]	; (8003e28 <_Z25efficiencyScoreAlgorithm2v+0x25c>)
 8003dcc:	f00a fca0 	bl	800e710 <iprintf>
  printf("%f\r\n", averagecommandedThrottleActuator);
 8003dd0:	4b06      	ldr	r3, [pc, #24]	; (8003dec <_Z25efficiencyScoreAlgorithm2v+0x220>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7fc fbbf 	bl	8000558 <__aeabi_f2d>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	4813      	ldr	r0, [pc, #76]	; (8003e2c <_Z25efficiencyScoreAlgorithm2v+0x260>)
 8003de0:	f00a fc96 	bl	800e710 <iprintf>
}
 8003de4:	bf00      	nop
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bdb0      	pop	{r4, r5, r7, pc}
 8003dec:	20000030 	.word	0x20000030
 8003df0:	20000ec0 	.word	0x20000ec0
 8003df4:	42200000 	.word	0x42200000
 8003df8:	20000e80 	.word	0x20000e80
 8003dfc:	40140000 	.word	0x40140000
 8003e00:	20000ec8 	.word	0x20000ec8
 8003e04:	20000ecc 	.word	0x20000ecc
 8003e08:	08012d7c 	.word	0x08012d7c
 8003e0c:	08012b20 	.word	0x08012b20
 8003e10:	08012d90 	.word	0x08012d90
 8003e14:	42480000 	.word	0x42480000
 8003e18:	40240000 	.word	0x40240000
 8003e1c:	20000ee4 	.word	0x20000ee4
 8003e20:	43340000 	.word	0x43340000
 8003e24:	40a00000 	.word	0x40a00000
 8003e28:	08012db0 	.word	0x08012db0
 8003e2c:	08012a14 	.word	0x08012a14

08003e30 <_Z15accelXAlgorithmv>:

//safety algorithm//

void accelXAlgorithm() //lateral acceleration algorithm
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
  const float limitAccelXp = 0.4;
 8003e36:	4b27      	ldr	r3, [pc, #156]	; (8003ed4 <_Z15accelXAlgorithmv+0xa4>)
 8003e38:	607b      	str	r3, [r7, #4]
  const float limitAccelXm = -0.4;
 8003e3a:	4b27      	ldr	r3, [pc, #156]	; (8003ed8 <_Z15accelXAlgorithmv+0xa8>)
 8003e3c:	603b      	str	r3, [r7, #0]
  //static float pre_f_accelX = 0.0;
  //static int counter_AccelX = 0;

  if ( (f_accelX >= limitAccelXp) && (pre_f_accelX < limitAccelXp))
 8003e3e:	4b27      	ldr	r3, [pc, #156]	; (8003edc <_Z15accelXAlgorithmv+0xac>)
 8003e40:	edd3 7a00 	vldr	s15, [r3]
 8003e44:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8003ee0 <_Z15accelXAlgorithmv+0xb0>
 8003e48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e50:	db18      	blt.n	8003e84 <_Z15accelXAlgorithmv+0x54>
 8003e52:	4b24      	ldr	r3, [pc, #144]	; (8003ee4 <_Z15accelXAlgorithmv+0xb4>)
 8003e54:	edd3 7a00 	vldr	s15, [r3]
 8003e58:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8003ee0 <_Z15accelXAlgorithmv+0xb0>
 8003e5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e64:	d50e      	bpl.n	8003e84 <_Z15accelXAlgorithmv+0x54>
  {
    counter_AccelX++;
 8003e66:	4b20      	ldr	r3, [pc, #128]	; (8003ee8 <_Z15accelXAlgorithmv+0xb8>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	4a1e      	ldr	r2, [pc, #120]	; (8003ee8 <_Z15accelXAlgorithmv+0xb8>)
 8003e6e:	6013      	str	r3, [r2, #0]
    printf("counter_AccelX : ");
 8003e70:	481e      	ldr	r0, [pc, #120]	; (8003eec <_Z15accelXAlgorithmv+0xbc>)
 8003e72:	f00a fc4d 	bl	800e710 <iprintf>
    printf("%lu\r\n", counter_AccelX);
 8003e76:	4b1c      	ldr	r3, [pc, #112]	; (8003ee8 <_Z15accelXAlgorithmv+0xb8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	481c      	ldr	r0, [pc, #112]	; (8003ef0 <_Z15accelXAlgorithmv+0xc0>)
 8003e7e:	f00a fc47 	bl	800e710 <iprintf>
    counter_AccelX++;
    printf("counter_AccelX : ");
    printf("%lu\r\n", counter_AccelX);
  }

}
 8003e82:	e023      	b.n	8003ecc <_Z15accelXAlgorithmv+0x9c>
  else if ( (f_accelX <= limitAccelXm) && (pre_f_accelX > limitAccelXm))
 8003e84:	4b15      	ldr	r3, [pc, #84]	; (8003edc <_Z15accelXAlgorithmv+0xac>)
 8003e86:	edd3 7a00 	vldr	s15, [r3]
 8003e8a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8003ef4 <_Z15accelXAlgorithmv+0xc4>
 8003e8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e96:	d900      	bls.n	8003e9a <_Z15accelXAlgorithmv+0x6a>
}
 8003e98:	e018      	b.n	8003ecc <_Z15accelXAlgorithmv+0x9c>
  else if ( (f_accelX <= limitAccelXm) && (pre_f_accelX > limitAccelXm))
 8003e9a:	4b12      	ldr	r3, [pc, #72]	; (8003ee4 <_Z15accelXAlgorithmv+0xb4>)
 8003e9c:	edd3 7a00 	vldr	s15, [r3]
 8003ea0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003ef4 <_Z15accelXAlgorithmv+0xc4>
 8003ea4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ea8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eac:	dc00      	bgt.n	8003eb0 <_Z15accelXAlgorithmv+0x80>
}
 8003eae:	e00d      	b.n	8003ecc <_Z15accelXAlgorithmv+0x9c>
    counter_AccelX++;
 8003eb0:	4b0d      	ldr	r3, [pc, #52]	; (8003ee8 <_Z15accelXAlgorithmv+0xb8>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	4a0c      	ldr	r2, [pc, #48]	; (8003ee8 <_Z15accelXAlgorithmv+0xb8>)
 8003eb8:	6013      	str	r3, [r2, #0]
    printf("counter_AccelX : ");
 8003eba:	480c      	ldr	r0, [pc, #48]	; (8003eec <_Z15accelXAlgorithmv+0xbc>)
 8003ebc:	f00a fc28 	bl	800e710 <iprintf>
    printf("%lu\r\n", counter_AccelX);
 8003ec0:	4b09      	ldr	r3, [pc, #36]	; (8003ee8 <_Z15accelXAlgorithmv+0xb8>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	480a      	ldr	r0, [pc, #40]	; (8003ef0 <_Z15accelXAlgorithmv+0xc0>)
 8003ec8:	f00a fc22 	bl	800e710 <iprintf>
}
 8003ecc:	bf00      	nop
 8003ece:	3708      	adds	r7, #8
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	3ecccccd 	.word	0x3ecccccd
 8003ed8:	becccccd 	.word	0xbecccccd
 8003edc:	20000e5c 	.word	0x20000e5c
 8003ee0:	3ecccccd 	.word	0x3ecccccd
 8003ee4:	20000ef0 	.word	0x20000ef0
 8003ee8:	20000ed0 	.word	0x20000ed0
 8003eec:	08012dd4 	.word	0x08012dd4
 8003ef0:	08012cfc 	.word	0x08012cfc
 8003ef4:	becccccd 	.word	0xbecccccd

08003ef8 <_Z16accelYmAlgorithmv>:

void accelYmAlgorithm() //dangerous acceleration algorithm
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b082      	sub	sp, #8
 8003efc:	af00      	add	r7, sp, #0
  const float limitAccelYm = -0.4;
 8003efe:	4b15      	ldr	r3, [pc, #84]	; (8003f54 <_Z16accelYmAlgorithmv+0x5c>)
 8003f00:	607b      	str	r3, [r7, #4]
  //static float pre_f_accelY = 0;
  //static int counter_AccelYm = 0;

if ( (f_accelY <= limitAccelYm) && (pre_f_accelY > limitAccelYm) )
 8003f02:	4b15      	ldr	r3, [pc, #84]	; (8003f58 <_Z16accelYmAlgorithmv+0x60>)
 8003f04:	edd3 7a00 	vldr	s15, [r3]
 8003f08:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003f5c <_Z16accelYmAlgorithmv+0x64>
 8003f0c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f14:	d900      	bls.n	8003f18 <_Z16accelYmAlgorithmv+0x20>
{
    counter_AccelYm++;
    printf("counter_AccelYm : ");
    printf("%lu\r\n", counter_AccelYm);
}
}
 8003f16:	e018      	b.n	8003f4a <_Z16accelYmAlgorithmv+0x52>
if ( (f_accelY <= limitAccelYm) && (pre_f_accelY > limitAccelYm) )
 8003f18:	4b11      	ldr	r3, [pc, #68]	; (8003f60 <_Z16accelYmAlgorithmv+0x68>)
 8003f1a:	edd3 7a00 	vldr	s15, [r3]
 8003f1e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003f5c <_Z16accelYmAlgorithmv+0x64>
 8003f22:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f2a:	dc00      	bgt.n	8003f2e <_Z16accelYmAlgorithmv+0x36>
}
 8003f2c:	e00d      	b.n	8003f4a <_Z16accelYmAlgorithmv+0x52>
    counter_AccelYm++;
 8003f2e:	4b0d      	ldr	r3, [pc, #52]	; (8003f64 <_Z16accelYmAlgorithmv+0x6c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3301      	adds	r3, #1
 8003f34:	4a0b      	ldr	r2, [pc, #44]	; (8003f64 <_Z16accelYmAlgorithmv+0x6c>)
 8003f36:	6013      	str	r3, [r2, #0]
    printf("counter_AccelYm : ");
 8003f38:	480b      	ldr	r0, [pc, #44]	; (8003f68 <_Z16accelYmAlgorithmv+0x70>)
 8003f3a:	f00a fbe9 	bl	800e710 <iprintf>
    printf("%lu\r\n", counter_AccelYm);
 8003f3e:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <_Z16accelYmAlgorithmv+0x6c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4619      	mov	r1, r3
 8003f44:	4809      	ldr	r0, [pc, #36]	; (8003f6c <_Z16accelYmAlgorithmv+0x74>)
 8003f46:	f00a fbe3 	bl	800e710 <iprintf>
}
 8003f4a:	bf00      	nop
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	becccccd 	.word	0xbecccccd
 8003f58:	20000e60 	.word	0x20000e60
 8003f5c:	becccccd 	.word	0xbecccccd
 8003f60:	20000ef4 	.word	0x20000ef4
 8003f64:	20000ed4 	.word	0x20000ed4
 8003f68:	08012de8 	.word	0x08012de8
 8003f6c:	08012cfc 	.word	0x08012cfc

08003f70 <_Z17accelYmAlgorithm2v>:

void accelYmAlgorithm2() // negative forward acceleration algorithm
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
  const float limitAccelYm = -0.3;
 8003f76:	4b15      	ldr	r3, [pc, #84]	; (8003fcc <_Z17accelYmAlgorithm2v+0x5c>)
 8003f78:	607b      	str	r3, [r7, #4]
  //static float pre_f_accelY = 0.0;
  //static int counter_AccelYm2 = 0;

  if ( (f_accelY <= limitAccelYm) && (pre_f_accelY > limitAccelYm) )
 8003f7a:	4b15      	ldr	r3, [pc, #84]	; (8003fd0 <_Z17accelYmAlgorithm2v+0x60>)
 8003f7c:	edd3 7a00 	vldr	s15, [r3]
 8003f80:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8003fd4 <_Z17accelYmAlgorithm2v+0x64>
 8003f84:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f8c:	d900      	bls.n	8003f90 <_Z17accelYmAlgorithm2v+0x20>
  {
    counter_AccelYm2++;
    printf("counter_AccelYm2 : ");
    printf("%lu\r\n", counter_AccelYm2);
  }
}
 8003f8e:	e018      	b.n	8003fc2 <_Z17accelYmAlgorithm2v+0x52>
  if ( (f_accelY <= limitAccelYm) && (pre_f_accelY > limitAccelYm) )
 8003f90:	4b11      	ldr	r3, [pc, #68]	; (8003fd8 <_Z17accelYmAlgorithm2v+0x68>)
 8003f92:	edd3 7a00 	vldr	s15, [r3]
 8003f96:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8003fd4 <_Z17accelYmAlgorithm2v+0x64>
 8003f9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fa2:	dc00      	bgt.n	8003fa6 <_Z17accelYmAlgorithm2v+0x36>
}
 8003fa4:	e00d      	b.n	8003fc2 <_Z17accelYmAlgorithm2v+0x52>
    counter_AccelYm2++;
 8003fa6:	4b0d      	ldr	r3, [pc, #52]	; (8003fdc <_Z17accelYmAlgorithm2v+0x6c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	3301      	adds	r3, #1
 8003fac:	4a0b      	ldr	r2, [pc, #44]	; (8003fdc <_Z17accelYmAlgorithm2v+0x6c>)
 8003fae:	6013      	str	r3, [r2, #0]
    printf("counter_AccelYm2 : ");
 8003fb0:	480b      	ldr	r0, [pc, #44]	; (8003fe0 <_Z17accelYmAlgorithm2v+0x70>)
 8003fb2:	f00a fbad 	bl	800e710 <iprintf>
    printf("%lu\r\n", counter_AccelYm2);
 8003fb6:	4b09      	ldr	r3, [pc, #36]	; (8003fdc <_Z17accelYmAlgorithm2v+0x6c>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	4619      	mov	r1, r3
 8003fbc:	4809      	ldr	r0, [pc, #36]	; (8003fe4 <_Z17accelYmAlgorithm2v+0x74>)
 8003fbe:	f00a fba7 	bl	800e710 <iprintf>
}
 8003fc2:	bf00      	nop
 8003fc4:	3708      	adds	r7, #8
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
 8003fca:	bf00      	nop
 8003fcc:	be99999a 	.word	0xbe99999a
 8003fd0:	20000e60 	.word	0x20000e60
 8003fd4:	be99999a 	.word	0xbe99999a
 8003fd8:	20000ef4 	.word	0x20000ef4
 8003fdc:	20000ed8 	.word	0x20000ed8
 8003fe0:	08012dfc 	.word	0x08012dfc
 8003fe4:	08012cfc 	.word	0x08012cfc

08003fe8 <_Z13timeAlgorithmv>:

void timeAlgorithm() //time algorithm
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
  const int limitTime = 7200; //2hr (7200sec)
 8003fee:	f44f 53e1 	mov.w	r3, #7200	; 0x1c20
 8003ff2:	607b      	str	r3, [r7, #4]
  //static uint16_t pre_runTime = 0;
  //static int counter_Time = 0;

  if ( (runTime >= limitTime) && (pre_runTime < limitTime) )
 8003ff4:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <_Z13timeAlgorithmv+0x40>)
 8003ff6:	881b      	ldrh	r3, [r3, #0]
 8003ff8:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8003ffc:	d310      	bcc.n	8004020 <_Z13timeAlgorithmv+0x38>
 8003ffe:	4b0b      	ldr	r3, [pc, #44]	; (800402c <_Z13timeAlgorithmv+0x44>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f5b3 5fe1 	cmp.w	r3, #7200	; 0x1c20
 8004006:	d20b      	bcs.n	8004020 <_Z13timeAlgorithmv+0x38>
  {
    counter_Time = 1;
 8004008:	4b09      	ldr	r3, [pc, #36]	; (8004030 <_Z13timeAlgorithmv+0x48>)
 800400a:	2201      	movs	r2, #1
 800400c:	601a      	str	r2, [r3, #0]
    printf("counter_Time : ");
 800400e:	4809      	ldr	r0, [pc, #36]	; (8004034 <_Z13timeAlgorithmv+0x4c>)
 8004010:	f00a fb7e 	bl	800e710 <iprintf>
    printf("%lu\r\n", counter_Time);
 8004014:	4b06      	ldr	r3, [pc, #24]	; (8004030 <_Z13timeAlgorithmv+0x48>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4619      	mov	r1, r3
 800401a:	4807      	ldr	r0, [pc, #28]	; (8004038 <_Z13timeAlgorithmv+0x50>)
 800401c:	f00a fb78 	bl	800e710 <iprintf>
  }
}
 8004020:	bf00      	nop
 8004022:	3708      	adds	r7, #8
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	20000e80 	.word	0x20000e80
 800402c:	20000f00 	.word	0x20000f00
 8004030:	20000edc 	.word	0x20000edc
 8004034:	08012e10 	.word	0x08012e10
 8004038:	08012cfc 	.word	0x08012cfc

0800403c <_Z15kphrpmAlgorithmv>:

void kphrpmAlgorithm() //vehicle Speed & Rpm algorithm
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
  const int limitKph = 51;
 8004042:	2333      	movs	r3, #51	; 0x33
 8004044:	60fb      	str	r3, [r7, #12]
  const int limitKph_max = 135;
 8004046:	2387      	movs	r3, #135	; 0x87
 8004048:	60bb      	str	r3, [r7, #8]
  //const int limitRpm = 2700;
  const int limitRpm_max = 4000;
 800404a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800404e:	607b      	str	r3, [r7, #4]
  const int limitRpm_max2 = 5500;
 8004050:	f241 537c 	movw	r3, #5500	; 0x157c
 8004054:	603b      	str	r3, [r7, #0]

  //static int32_t pre_kph = 0;
  //static int counter_KphRpm = 0;

  if ( ( (kph >= limitKph) && (pre_kph < limitKph) ) || /*( (kph >= limitKph_max) && (pre_kph >= limitKph_max) ) ||*/ ( (kph >= limitKph_max) && (pre_kph < limitKph_max) ) )
 8004056:	4b23      	ldr	r3, [pc, #140]	; (80040e4 <_Z15kphrpmAlgorithmv+0xa8>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b32      	cmp	r3, #50	; 0x32
 800405c:	d903      	bls.n	8004066 <_Z15kphrpmAlgorithmv+0x2a>
 800405e:	4b22      	ldr	r3, [pc, #136]	; (80040e8 <_Z15kphrpmAlgorithmv+0xac>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	2b32      	cmp	r3, #50	; 0x32
 8004064:	dd07      	ble.n	8004076 <_Z15kphrpmAlgorithmv+0x3a>
 8004066:	4b1f      	ldr	r3, [pc, #124]	; (80040e4 <_Z15kphrpmAlgorithmv+0xa8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	2b86      	cmp	r3, #134	; 0x86
 800406c:	d911      	bls.n	8004092 <_Z15kphrpmAlgorithmv+0x56>
 800406e:	4b1e      	ldr	r3, [pc, #120]	; (80040e8 <_Z15kphrpmAlgorithmv+0xac>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b86      	cmp	r3, #134	; 0x86
 8004074:	dc0d      	bgt.n	8004092 <_Z15kphrpmAlgorithmv+0x56>
  {
    counter_KphRpm++;
 8004076:	4b1d      	ldr	r3, [pc, #116]	; (80040ec <_Z15kphrpmAlgorithmv+0xb0>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3301      	adds	r3, #1
 800407c:	4a1b      	ldr	r2, [pc, #108]	; (80040ec <_Z15kphrpmAlgorithmv+0xb0>)
 800407e:	6013      	str	r3, [r2, #0]
    printf("counter_KphRpm : ");
 8004080:	481b      	ldr	r0, [pc, #108]	; (80040f0 <_Z15kphrpmAlgorithmv+0xb4>)
 8004082:	f00a fb45 	bl	800e710 <iprintf>
    printf("%lu\r\n", counter_KphRpm);
 8004086:	4b19      	ldr	r3, [pc, #100]	; (80040ec <_Z15kphrpmAlgorithmv+0xb0>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4619      	mov	r1, r3
 800408c:	4819      	ldr	r0, [pc, #100]	; (80040f4 <_Z15kphrpmAlgorithmv+0xb8>)
 800408e:	f00a fb3f 	bl	800e710 <iprintf>
  }

  if ( ( (rpm >= limitRpm_max2) && (pre_rpm < limitRpm_max2) ) || ( (rpm >= limitRpm_max) && (pre_rpm < limitRpm_max) ) /*|| ( (rpm >= limitRpm) && (pre_rpm < limitRpm) )*/ )
 8004092:	4b19      	ldr	r3, [pc, #100]	; (80040f8 <_Z15kphrpmAlgorithmv+0xbc>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f241 527b 	movw	r2, #5499	; 0x157b
 800409a:	4293      	cmp	r3, r2
 800409c:	d905      	bls.n	80040aa <_Z15kphrpmAlgorithmv+0x6e>
 800409e:	4b17      	ldr	r3, [pc, #92]	; (80040fc <_Z15kphrpmAlgorithmv+0xc0>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f241 527b 	movw	r2, #5499	; 0x157b
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d909      	bls.n	80040be <_Z15kphrpmAlgorithmv+0x82>
 80040aa:	4b13      	ldr	r3, [pc, #76]	; (80040f8 <_Z15kphrpmAlgorithmv+0xbc>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80040b2:	d312      	bcc.n	80040da <_Z15kphrpmAlgorithmv+0x9e>
 80040b4:	4b11      	ldr	r3, [pc, #68]	; (80040fc <_Z15kphrpmAlgorithmv+0xc0>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80040bc:	d20d      	bcs.n	80040da <_Z15kphrpmAlgorithmv+0x9e>
  {
      counter_KphRpm++;
 80040be:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <_Z15kphrpmAlgorithmv+0xb0>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	3301      	adds	r3, #1
 80040c4:	4a09      	ldr	r2, [pc, #36]	; (80040ec <_Z15kphrpmAlgorithmv+0xb0>)
 80040c6:	6013      	str	r3, [r2, #0]
      printf("counter_KphRpm+ : ");
 80040c8:	480d      	ldr	r0, [pc, #52]	; (8004100 <_Z15kphrpmAlgorithmv+0xc4>)
 80040ca:	f00a fb21 	bl	800e710 <iprintf>
      printf("%lu\r\n", counter_KphRpm);
 80040ce:	4b07      	ldr	r3, [pc, #28]	; (80040ec <_Z15kphrpmAlgorithmv+0xb0>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4619      	mov	r1, r3
 80040d4:	4807      	ldr	r0, [pc, #28]	; (80040f4 <_Z15kphrpmAlgorithmv+0xb8>)
 80040d6:	f00a fb1b 	bl	800e710 <iprintf>
  }
}
 80040da:	bf00      	nop
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20000e78 	.word	0x20000e78
 80040e8:	20000f04 	.word	0x20000f04
 80040ec:	20000ee0 	.word	0x20000ee0
 80040f0:	08012e20 	.word	0x08012e20
 80040f4:	08012cfc 	.word	0x08012cfc
 80040f8:	20000e74 	.word	0x20000e74
 80040fc:	20000efc 	.word	0x20000efc
 8004100:	08012e34 	.word	0x08012e34

08004104 <_Z20safetyScoreAlgorithmv>:

void safetyScoreAlgorithm() //algorithm with time condition formulas
{
 8004104:	b5b0      	push	{r4, r5, r7, lr}
 8004106:	af00      	add	r7, sp, #0
  //static float safetyScore = 0.0;

  if (counter_Time == 0)
 8004108:	4bad      	ldr	r3, [pc, #692]	; (80043c0 <_Z20safetyScoreAlgorithmv+0x2bc>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	f040 8097 	bne.w	8004240 <_Z20safetyScoreAlgorithmv+0x13c>
  {
    safetyScore = (float)(10.0-(200*((float)counter_AccelYm)/runTime)-(80*((float)counter_KphRpm)/runTime)-(50*((float)counter_AccelYm2)/runTime)-(30*((float)counter_AccelX)/runTime));
 8004112:	4bac      	ldr	r3, [pc, #688]	; (80043c4 <_Z20safetyScoreAlgorithmv+0x2c0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	ee07 3a90 	vmov	s15, r3
 800411a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800411e:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 80043c8 <_Z20safetyScoreAlgorithmv+0x2c4>
 8004122:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004126:	4ba9      	ldr	r3, [pc, #676]	; (80043cc <_Z20safetyScoreAlgorithmv+0x2c8>)
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	ee07 3a90 	vmov	s15, r3
 800412e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004132:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004136:	ee16 0a90 	vmov	r0, s13
 800413a:	f7fc fa0d 	bl	8000558 <__aeabi_f2d>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	f04f 0000 	mov.w	r0, #0
 8004146:	49a2      	ldr	r1, [pc, #648]	; (80043d0 <_Z20safetyScoreAlgorithmv+0x2cc>)
 8004148:	f7fc f8a6 	bl	8000298 <__aeabi_dsub>
 800414c:	4602      	mov	r2, r0
 800414e:	460b      	mov	r3, r1
 8004150:	4614      	mov	r4, r2
 8004152:	461d      	mov	r5, r3
 8004154:	4b9f      	ldr	r3, [pc, #636]	; (80043d4 <_Z20safetyScoreAlgorithmv+0x2d0>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	ee07 3a90 	vmov	s15, r3
 800415c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004160:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 80043d8 <_Z20safetyScoreAlgorithmv+0x2d4>
 8004164:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004168:	4b98      	ldr	r3, [pc, #608]	; (80043cc <_Z20safetyScoreAlgorithmv+0x2c8>)
 800416a:	881b      	ldrh	r3, [r3, #0]
 800416c:	ee07 3a90 	vmov	s15, r3
 8004170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004174:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004178:	ee16 0a90 	vmov	r0, s13
 800417c:	f7fc f9ec 	bl	8000558 <__aeabi_f2d>
 8004180:	4602      	mov	r2, r0
 8004182:	460b      	mov	r3, r1
 8004184:	4620      	mov	r0, r4
 8004186:	4629      	mov	r1, r5
 8004188:	f7fc f886 	bl	8000298 <__aeabi_dsub>
 800418c:	4602      	mov	r2, r0
 800418e:	460b      	mov	r3, r1
 8004190:	4614      	mov	r4, r2
 8004192:	461d      	mov	r5, r3
 8004194:	4b91      	ldr	r3, [pc, #580]	; (80043dc <_Z20safetyScoreAlgorithmv+0x2d8>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	ee07 3a90 	vmov	s15, r3
 800419c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041a0:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 80043e0 <_Z20safetyScoreAlgorithmv+0x2dc>
 80041a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80041a8:	4b88      	ldr	r3, [pc, #544]	; (80043cc <_Z20safetyScoreAlgorithmv+0x2c8>)
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	ee07 3a90 	vmov	s15, r3
 80041b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80041b8:	ee16 0a90 	vmov	r0, s13
 80041bc:	f7fc f9cc 	bl	8000558 <__aeabi_f2d>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4620      	mov	r0, r4
 80041c6:	4629      	mov	r1, r5
 80041c8:	f7fc f866 	bl	8000298 <__aeabi_dsub>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	4614      	mov	r4, r2
 80041d2:	461d      	mov	r5, r3
 80041d4:	4b83      	ldr	r3, [pc, #524]	; (80043e4 <_Z20safetyScoreAlgorithmv+0x2e0>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	ee07 3a90 	vmov	s15, r3
 80041dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041e0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80041e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80041e8:	4b78      	ldr	r3, [pc, #480]	; (80043cc <_Z20safetyScoreAlgorithmv+0x2c8>)
 80041ea:	881b      	ldrh	r3, [r3, #0]
 80041ec:	ee07 3a90 	vmov	s15, r3
 80041f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80041f4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80041f8:	ee16 0a90 	vmov	r0, s13
 80041fc:	f7fc f9ac 	bl	8000558 <__aeabi_f2d>
 8004200:	4602      	mov	r2, r0
 8004202:	460b      	mov	r3, r1
 8004204:	4620      	mov	r0, r4
 8004206:	4629      	mov	r1, r5
 8004208:	f7fc f846 	bl	8000298 <__aeabi_dsub>
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	4610      	mov	r0, r2
 8004212:	4619      	mov	r1, r3
 8004214:	f7fc fcf0 	bl	8000bf8 <__aeabi_d2f>
 8004218:	4603      	mov	r3, r0
 800421a:	4a73      	ldr	r2, [pc, #460]	; (80043e8 <_Z20safetyScoreAlgorithmv+0x2e4>)
 800421c:	6013      	str	r3, [r2, #0]
    printf("safetyScore : ");
 800421e:	4873      	ldr	r0, [pc, #460]	; (80043ec <_Z20safetyScoreAlgorithmv+0x2e8>)
 8004220:	f00a fa76 	bl	800e710 <iprintf>
    printf("%f", safetyScore);
 8004224:	4b70      	ldr	r3, [pc, #448]	; (80043e8 <_Z20safetyScoreAlgorithmv+0x2e4>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4618      	mov	r0, r3
 800422a:	f7fc f995 	bl	8000558 <__aeabi_f2d>
 800422e:	4602      	mov	r2, r0
 8004230:	460b      	mov	r3, r1
 8004232:	486f      	ldr	r0, [pc, #444]	; (80043f0 <_Z20safetyScoreAlgorithmv+0x2ec>)
 8004234:	f00a fa6c 	bl	800e710 <iprintf>
    printf(" / 10\r\n");
 8004238:	486e      	ldr	r0, [pc, #440]	; (80043f4 <_Z20safetyScoreAlgorithmv+0x2f0>)
 800423a:	f00a faef 	bl	800e81c <puts>
 800423e:	e09a      	b.n	8004376 <_Z20safetyScoreAlgorithmv+0x272>
  }
  else if (counter_Time > 0)
 8004240:	4b5f      	ldr	r3, [pc, #380]	; (80043c0 <_Z20safetyScoreAlgorithmv+0x2bc>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	f000 8096 	beq.w	8004376 <_Z20safetyScoreAlgorithmv+0x272>
  {
    safetyScore = (float)(9.0-(200*((float)counter_AccelYm)/runTime)-(80*((float)counter_KphRpm)/runTime)-(50*((float)counter_AccelYm2)/runTime)-(30*((float)counter_AccelX)/runTime));
 800424a:	4b5e      	ldr	r3, [pc, #376]	; (80043c4 <_Z20safetyScoreAlgorithmv+0x2c0>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	ee07 3a90 	vmov	s15, r3
 8004252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004256:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80043c8 <_Z20safetyScoreAlgorithmv+0x2c4>
 800425a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800425e:	4b5b      	ldr	r3, [pc, #364]	; (80043cc <_Z20safetyScoreAlgorithmv+0x2c8>)
 8004260:	881b      	ldrh	r3, [r3, #0]
 8004262:	ee07 3a90 	vmov	s15, r3
 8004266:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800426a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800426e:	ee16 0a90 	vmov	r0, s13
 8004272:	f7fc f971 	bl	8000558 <__aeabi_f2d>
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	f04f 0000 	mov.w	r0, #0
 800427e:	495e      	ldr	r1, [pc, #376]	; (80043f8 <_Z20safetyScoreAlgorithmv+0x2f4>)
 8004280:	f7fc f80a 	bl	8000298 <__aeabi_dsub>
 8004284:	4602      	mov	r2, r0
 8004286:	460b      	mov	r3, r1
 8004288:	4614      	mov	r4, r2
 800428a:	461d      	mov	r5, r3
 800428c:	4b51      	ldr	r3, [pc, #324]	; (80043d4 <_Z20safetyScoreAlgorithmv+0x2d0>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	ee07 3a90 	vmov	s15, r3
 8004294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004298:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 80043d8 <_Z20safetyScoreAlgorithmv+0x2d4>
 800429c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80042a0:	4b4a      	ldr	r3, [pc, #296]	; (80043cc <_Z20safetyScoreAlgorithmv+0x2c8>)
 80042a2:	881b      	ldrh	r3, [r3, #0]
 80042a4:	ee07 3a90 	vmov	s15, r3
 80042a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042ac:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80042b0:	ee16 0a90 	vmov	r0, s13
 80042b4:	f7fc f950 	bl	8000558 <__aeabi_f2d>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	4620      	mov	r0, r4
 80042be:	4629      	mov	r1, r5
 80042c0:	f7fb ffea 	bl	8000298 <__aeabi_dsub>
 80042c4:	4602      	mov	r2, r0
 80042c6:	460b      	mov	r3, r1
 80042c8:	4614      	mov	r4, r2
 80042ca:	461d      	mov	r5, r3
 80042cc:	4b43      	ldr	r3, [pc, #268]	; (80043dc <_Z20safetyScoreAlgorithmv+0x2d8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	ee07 3a90 	vmov	s15, r3
 80042d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042d8:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80043e0 <_Z20safetyScoreAlgorithmv+0x2dc>
 80042dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80042e0:	4b3a      	ldr	r3, [pc, #232]	; (80043cc <_Z20safetyScoreAlgorithmv+0x2c8>)
 80042e2:	881b      	ldrh	r3, [r3, #0]
 80042e4:	ee07 3a90 	vmov	s15, r3
 80042e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042ec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80042f0:	ee16 0a90 	vmov	r0, s13
 80042f4:	f7fc f930 	bl	8000558 <__aeabi_f2d>
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	4620      	mov	r0, r4
 80042fe:	4629      	mov	r1, r5
 8004300:	f7fb ffca 	bl	8000298 <__aeabi_dsub>
 8004304:	4602      	mov	r2, r0
 8004306:	460b      	mov	r3, r1
 8004308:	4614      	mov	r4, r2
 800430a:	461d      	mov	r5, r3
 800430c:	4b35      	ldr	r3, [pc, #212]	; (80043e4 <_Z20safetyScoreAlgorithmv+0x2e0>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	ee07 3a90 	vmov	s15, r3
 8004314:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004318:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800431c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004320:	4b2a      	ldr	r3, [pc, #168]	; (80043cc <_Z20safetyScoreAlgorithmv+0x2c8>)
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	ee07 3a90 	vmov	s15, r3
 8004328:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800432c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004330:	ee16 0a90 	vmov	r0, s13
 8004334:	f7fc f910 	bl	8000558 <__aeabi_f2d>
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	4620      	mov	r0, r4
 800433e:	4629      	mov	r1, r5
 8004340:	f7fb ffaa 	bl	8000298 <__aeabi_dsub>
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4610      	mov	r0, r2
 800434a:	4619      	mov	r1, r3
 800434c:	f7fc fc54 	bl	8000bf8 <__aeabi_d2f>
 8004350:	4603      	mov	r3, r0
 8004352:	4a25      	ldr	r2, [pc, #148]	; (80043e8 <_Z20safetyScoreAlgorithmv+0x2e4>)
 8004354:	6013      	str	r3, [r2, #0]
    printf("safetyScore : ");
 8004356:	4825      	ldr	r0, [pc, #148]	; (80043ec <_Z20safetyScoreAlgorithmv+0x2e8>)
 8004358:	f00a f9da 	bl	800e710 <iprintf>
    printf("%f", safetyScore);
 800435c:	4b22      	ldr	r3, [pc, #136]	; (80043e8 <_Z20safetyScoreAlgorithmv+0x2e4>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4618      	mov	r0, r3
 8004362:	f7fc f8f9 	bl	8000558 <__aeabi_f2d>
 8004366:	4602      	mov	r2, r0
 8004368:	460b      	mov	r3, r1
 800436a:	4821      	ldr	r0, [pc, #132]	; (80043f0 <_Z20safetyScoreAlgorithmv+0x2ec>)
 800436c:	f00a f9d0 	bl	800e710 <iprintf>
    printf(" / 10\r\n");
 8004370:	4820      	ldr	r0, [pc, #128]	; (80043f4 <_Z20safetyScoreAlgorithmv+0x2f0>)
 8004372:	f00a fa53 	bl	800e81c <puts>
  }

  if (safetyScore <= 0)
 8004376:	4b1c      	ldr	r3, [pc, #112]	; (80043e8 <_Z20safetyScoreAlgorithmv+0x2e4>)
 8004378:	edd3 7a00 	vldr	s15, [r3]
 800437c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004384:	d803      	bhi.n	800438e <_Z20safetyScoreAlgorithmv+0x28a>
  safetyScore = 0.0;
 8004386:	4b18      	ldr	r3, [pc, #96]	; (80043e8 <_Z20safetyScoreAlgorithmv+0x2e4>)
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	601a      	str	r2, [r3, #0]
  if (isnan(safetyScore))
 800438e:	4b16      	ldr	r3, [pc, #88]	; (80043e8 <_Z20safetyScoreAlgorithmv+0x2e4>)
 8004390:	edd3 7a00 	vldr	s15, [r3]
 8004394:	eeb0 0a67 	vmov.f32	s0, s15
 8004398:	f7fd fab0 	bl	80018fc <_ZSt5isnanf>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <_Z20safetyScoreAlgorithmv+0x2a6>
  safetyScore = 8.0;
 80043a2:	4b11      	ldr	r3, [pc, #68]	; (80043e8 <_Z20safetyScoreAlgorithmv+0x2e4>)
 80043a4:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 80043a8:	601a      	str	r2, [r3, #0]

  printf("Counter_Time : ");
 80043aa:	4814      	ldr	r0, [pc, #80]	; (80043fc <_Z20safetyScoreAlgorithmv+0x2f8>)
 80043ac:	f00a f9b0 	bl	800e710 <iprintf>
  printf("%lu\r\n", counter_Time);
 80043b0:	4b03      	ldr	r3, [pc, #12]	; (80043c0 <_Z20safetyScoreAlgorithmv+0x2bc>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4619      	mov	r1, r3
 80043b6:	4812      	ldr	r0, [pc, #72]	; (8004400 <_Z20safetyScoreAlgorithmv+0x2fc>)
 80043b8:	f00a f9aa 	bl	800e710 <iprintf>
}
 80043bc:	bf00      	nop
 80043be:	bdb0      	pop	{r4, r5, r7, pc}
 80043c0:	20000edc 	.word	0x20000edc
 80043c4:	20000ed4 	.word	0x20000ed4
 80043c8:	43480000 	.word	0x43480000
 80043cc:	20000e80 	.word	0x20000e80
 80043d0:	40240000 	.word	0x40240000
 80043d4:	20000ee0 	.word	0x20000ee0
 80043d8:	42a00000 	.word	0x42a00000
 80043dc:	20000ed8 	.word	0x20000ed8
 80043e0:	42480000 	.word	0x42480000
 80043e4:	20000ed0 	.word	0x20000ed0
 80043e8:	20000ee8 	.word	0x20000ee8
 80043ec:	08012e48 	.word	0x08012e48
 80043f0:	08012b20 	.word	0x08012b20
 80043f4:	08012d90 	.word	0x08012d90
 80043f8:	40220000 	.word	0x40220000
 80043fc:	08012e58 	.word	0x08012e58
 8004400:	08012cfc 	.word	0x08012cfc

08004404 <_Z21drivingScoreAlgorithmv>:

void drivingScoreAlgorithm() //global algorithm
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b088      	sub	sp, #32
 8004408:	af00      	add	r7, sp, #0
  //static float drivingScore = 10.0;

  drivingScore = ((safetyScore+efficiencyScore) / 2.0);
 800440a:	4b85      	ldr	r3, [pc, #532]	; (8004620 <_Z21drivingScoreAlgorithmv+0x21c>)
 800440c:	ed93 7a00 	vldr	s14, [r3]
 8004410:	4b84      	ldr	r3, [pc, #528]	; (8004624 <_Z21drivingScoreAlgorithmv+0x220>)
 8004412:	edd3 7a00 	vldr	s15, [r3]
 8004416:	ee37 7a27 	vadd.f32	s14, s14, s15
 800441a:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800441e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004422:	4b81      	ldr	r3, [pc, #516]	; (8004628 <_Z21drivingScoreAlgorithmv+0x224>)
 8004424:	edc3 7a00 	vstr	s15, [r3]
  char safetyScoreBuf[30] = "";
 8004428:	2300      	movs	r3, #0
 800442a:	603b      	str	r3, [r7, #0]
 800442c:	1d3b      	adds	r3, r7, #4
 800442e:	2200      	movs	r2, #0
 8004430:	601a      	str	r2, [r3, #0]
 8004432:	605a      	str	r2, [r3, #4]
 8004434:	609a      	str	r2, [r3, #8]
 8004436:	60da      	str	r2, [r3, #12]
 8004438:	611a      	str	r2, [r3, #16]
 800443a:	615a      	str	r2, [r3, #20]
 800443c:	831a      	strh	r2, [r3, #24]

  if (drivingScore <= 2)
 800443e:	4b7a      	ldr	r3, [pc, #488]	; (8004628 <_Z21drivingScoreAlgorithmv+0x224>)
 8004440:	edd3 7a00 	vldr	s15, [r3]
 8004444:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004448:	eef4 7ac7 	vcmpe.f32	s15, s14
 800444c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004450:	d81e      	bhi.n	8004490 <_Z21drivingScoreAlgorithmv+0x8c>
  {
    strcpy(safetyScoreBuf, "verybad");
 8004452:	463b      	mov	r3, r7
 8004454:	4a75      	ldr	r2, [pc, #468]	; (800462c <_Z21drivingScoreAlgorithmv+0x228>)
 8004456:	e892 0003 	ldmia.w	r2, {r0, r1}
 800445a:	e883 0003 	stmia.w	r3, {r0, r1}
    printf("safetyScoreBuf : ");
 800445e:	4874      	ldr	r0, [pc, #464]	; (8004630 <_Z21drivingScoreAlgorithmv+0x22c>)
 8004460:	f00a f956 	bl	800e710 <iprintf>
    printf("%s\r\n", safetyScoreBuf);
 8004464:	463b      	mov	r3, r7
 8004466:	4619      	mov	r1, r3
 8004468:	4872      	ldr	r0, [pc, #456]	; (8004634 <_Z21drivingScoreAlgorithmv+0x230>)
 800446a:	f00a f951 	bl	800e710 <iprintf>
    printf("drivingScore : ");
 800446e:	4872      	ldr	r0, [pc, #456]	; (8004638 <_Z21drivingScoreAlgorithmv+0x234>)
 8004470:	f00a f94e 	bl	800e710 <iprintf>
    printf("%f", drivingScore);
 8004474:	4b6c      	ldr	r3, [pc, #432]	; (8004628 <_Z21drivingScoreAlgorithmv+0x224>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4618      	mov	r0, r3
 800447a:	f7fc f86d 	bl	8000558 <__aeabi_f2d>
 800447e:	4602      	mov	r2, r0
 8004480:	460b      	mov	r3, r1
 8004482:	486e      	ldr	r0, [pc, #440]	; (800463c <_Z21drivingScoreAlgorithmv+0x238>)
 8004484:	f00a f944 	bl	800e710 <iprintf>
    printf(" / 10\r\n");
 8004488:	486d      	ldr	r0, [pc, #436]	; (8004640 <_Z21drivingScoreAlgorithmv+0x23c>)
 800448a:	f00a f9c7 	bl	800e81c <puts>
    printf("drivingScore : ");
    printf("%f", drivingScore);
    printf(" / 10\r\n");
  }

}
 800448e:	e0c3      	b.n	8004618 <_Z21drivingScoreAlgorithmv+0x214>
  else if ( (drivingScore <= 4) && (drivingScore > 2) )
 8004490:	4b65      	ldr	r3, [pc, #404]	; (8004628 <_Z21drivingScoreAlgorithmv+0x224>)
 8004492:	edd3 7a00 	vldr	s15, [r3]
 8004496:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800449a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800449e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a2:	d825      	bhi.n	80044f0 <_Z21drivingScoreAlgorithmv+0xec>
 80044a4:	4b60      	ldr	r3, [pc, #384]	; (8004628 <_Z21drivingScoreAlgorithmv+0x224>)
 80044a6:	edd3 7a00 	vldr	s15, [r3]
 80044aa:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80044ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b6:	dd1b      	ble.n	80044f0 <_Z21drivingScoreAlgorithmv+0xec>
    strcpy(safetyScoreBuf, "bad");
 80044b8:	463b      	mov	r3, r7
 80044ba:	4a62      	ldr	r2, [pc, #392]	; (8004644 <_Z21drivingScoreAlgorithmv+0x240>)
 80044bc:	601a      	str	r2, [r3, #0]
    printf("safetyScoreBuf : ");
 80044be:	485c      	ldr	r0, [pc, #368]	; (8004630 <_Z21drivingScoreAlgorithmv+0x22c>)
 80044c0:	f00a f926 	bl	800e710 <iprintf>
    printf("%s\r\n", safetyScoreBuf);
 80044c4:	463b      	mov	r3, r7
 80044c6:	4619      	mov	r1, r3
 80044c8:	485a      	ldr	r0, [pc, #360]	; (8004634 <_Z21drivingScoreAlgorithmv+0x230>)
 80044ca:	f00a f921 	bl	800e710 <iprintf>
    printf("drivingScore : ");
 80044ce:	485a      	ldr	r0, [pc, #360]	; (8004638 <_Z21drivingScoreAlgorithmv+0x234>)
 80044d0:	f00a f91e 	bl	800e710 <iprintf>
    printf("%f", drivingScore);
 80044d4:	4b54      	ldr	r3, [pc, #336]	; (8004628 <_Z21drivingScoreAlgorithmv+0x224>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4618      	mov	r0, r3
 80044da:	f7fc f83d 	bl	8000558 <__aeabi_f2d>
 80044de:	4602      	mov	r2, r0
 80044e0:	460b      	mov	r3, r1
 80044e2:	4856      	ldr	r0, [pc, #344]	; (800463c <_Z21drivingScoreAlgorithmv+0x238>)
 80044e4:	f00a f914 	bl	800e710 <iprintf>
    printf(" / 10\r\n");
 80044e8:	4855      	ldr	r0, [pc, #340]	; (8004640 <_Z21drivingScoreAlgorithmv+0x23c>)
 80044ea:	f00a f997 	bl	800e81c <puts>
 80044ee:	e093      	b.n	8004618 <_Z21drivingScoreAlgorithmv+0x214>
  else if ( (drivingScore <= 6) && (drivingScore > 4) )
 80044f0:	4b4d      	ldr	r3, [pc, #308]	; (8004628 <_Z21drivingScoreAlgorithmv+0x224>)
 80044f2:	edd3 7a00 	vldr	s15, [r3]
 80044f6:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80044fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004502:	d82c      	bhi.n	800455e <_Z21drivingScoreAlgorithmv+0x15a>
 8004504:	4b48      	ldr	r3, [pc, #288]	; (8004628 <_Z21drivingScoreAlgorithmv+0x224>)
 8004506:	edd3 7a00 	vldr	s15, [r3]
 800450a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800450e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004516:	dd22      	ble.n	800455e <_Z21drivingScoreAlgorithmv+0x15a>
    strcpy(safetyScoreBuf, "normal");
 8004518:	463b      	mov	r3, r7
 800451a:	4a4b      	ldr	r2, [pc, #300]	; (8004648 <_Z21drivingScoreAlgorithmv+0x244>)
 800451c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004520:	6018      	str	r0, [r3, #0]
 8004522:	3304      	adds	r3, #4
 8004524:	8019      	strh	r1, [r3, #0]
 8004526:	3302      	adds	r3, #2
 8004528:	0c0a      	lsrs	r2, r1, #16
 800452a:	701a      	strb	r2, [r3, #0]
    printf("safetyScoreBuf : ");
 800452c:	4840      	ldr	r0, [pc, #256]	; (8004630 <_Z21drivingScoreAlgorithmv+0x22c>)
 800452e:	f00a f8ef 	bl	800e710 <iprintf>
    printf("%s\r\n", safetyScoreBuf);
 8004532:	463b      	mov	r3, r7
 8004534:	4619      	mov	r1, r3
 8004536:	483f      	ldr	r0, [pc, #252]	; (8004634 <_Z21drivingScoreAlgorithmv+0x230>)
 8004538:	f00a f8ea 	bl	800e710 <iprintf>
    printf("drivingScore : ");
 800453c:	483e      	ldr	r0, [pc, #248]	; (8004638 <_Z21drivingScoreAlgorithmv+0x234>)
 800453e:	f00a f8e7 	bl	800e710 <iprintf>
    printf("%f", drivingScore);
 8004542:	4b39      	ldr	r3, [pc, #228]	; (8004628 <_Z21drivingScoreAlgorithmv+0x224>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4618      	mov	r0, r3
 8004548:	f7fc f806 	bl	8000558 <__aeabi_f2d>
 800454c:	4602      	mov	r2, r0
 800454e:	460b      	mov	r3, r1
 8004550:	483a      	ldr	r0, [pc, #232]	; (800463c <_Z21drivingScoreAlgorithmv+0x238>)
 8004552:	f00a f8dd 	bl	800e710 <iprintf>
    printf(" / 10\r\n");
 8004556:	483a      	ldr	r0, [pc, #232]	; (8004640 <_Z21drivingScoreAlgorithmv+0x23c>)
 8004558:	f00a f960 	bl	800e81c <puts>
 800455c:	e05c      	b.n	8004618 <_Z21drivingScoreAlgorithmv+0x214>
  else if ( (drivingScore <= 8) && (drivingScore > 6) )
 800455e:	4b32      	ldr	r3, [pc, #200]	; (8004628 <_Z21drivingScoreAlgorithmv+0x224>)
 8004560:	edd3 7a00 	vldr	s15, [r3]
 8004564:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8004568:	eef4 7ac7 	vcmpe.f32	s15, s14
 800456c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004570:	d829      	bhi.n	80045c6 <_Z21drivingScoreAlgorithmv+0x1c2>
 8004572:	4b2d      	ldr	r3, [pc, #180]	; (8004628 <_Z21drivingScoreAlgorithmv+0x224>)
 8004574:	edd3 7a00 	vldr	s15, [r3]
 8004578:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 800457c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004584:	dd1f      	ble.n	80045c6 <_Z21drivingScoreAlgorithmv+0x1c2>
    strcpy(safetyScoreBuf, "good");
 8004586:	463b      	mov	r3, r7
 8004588:	4a30      	ldr	r2, [pc, #192]	; (800464c <_Z21drivingScoreAlgorithmv+0x248>)
 800458a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800458e:	6018      	str	r0, [r3, #0]
 8004590:	3304      	adds	r3, #4
 8004592:	7019      	strb	r1, [r3, #0]
    printf("safetyScoreBuf : ");
 8004594:	4826      	ldr	r0, [pc, #152]	; (8004630 <_Z21drivingScoreAlgorithmv+0x22c>)
 8004596:	f00a f8bb 	bl	800e710 <iprintf>
    printf("%s\r\n", safetyScoreBuf);
 800459a:	463b      	mov	r3, r7
 800459c:	4619      	mov	r1, r3
 800459e:	4825      	ldr	r0, [pc, #148]	; (8004634 <_Z21drivingScoreAlgorithmv+0x230>)
 80045a0:	f00a f8b6 	bl	800e710 <iprintf>
    printf("drivingScore : ");
 80045a4:	4824      	ldr	r0, [pc, #144]	; (8004638 <_Z21drivingScoreAlgorithmv+0x234>)
 80045a6:	f00a f8b3 	bl	800e710 <iprintf>
    printf("%f", drivingScore);
 80045aa:	4b1f      	ldr	r3, [pc, #124]	; (8004628 <_Z21drivingScoreAlgorithmv+0x224>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7fb ffd2 	bl	8000558 <__aeabi_f2d>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	4820      	ldr	r0, [pc, #128]	; (800463c <_Z21drivingScoreAlgorithmv+0x238>)
 80045ba:	f00a f8a9 	bl	800e710 <iprintf>
    printf(" / 10\r\n");
 80045be:	4820      	ldr	r0, [pc, #128]	; (8004640 <_Z21drivingScoreAlgorithmv+0x23c>)
 80045c0:	f00a f92c 	bl	800e81c <puts>
 80045c4:	e028      	b.n	8004618 <_Z21drivingScoreAlgorithmv+0x214>
  else if (drivingScore > 8)
 80045c6:	4b18      	ldr	r3, [pc, #96]	; (8004628 <_Z21drivingScoreAlgorithmv+0x224>)
 80045c8:	edd3 7a00 	vldr	s15, [r3]
 80045cc:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80045d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045d8:	dc00      	bgt.n	80045dc <_Z21drivingScoreAlgorithmv+0x1d8>
}
 80045da:	e01d      	b.n	8004618 <_Z21drivingScoreAlgorithmv+0x214>
    strcpy(safetyScoreBuf, "verygood");
 80045dc:	463b      	mov	r3, r7
 80045de:	4a1c      	ldr	r2, [pc, #112]	; (8004650 <_Z21drivingScoreAlgorithmv+0x24c>)
 80045e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80045e2:	c303      	stmia	r3!, {r0, r1}
 80045e4:	701a      	strb	r2, [r3, #0]
    printf("safetyScoreBuf : ");
 80045e6:	4812      	ldr	r0, [pc, #72]	; (8004630 <_Z21drivingScoreAlgorithmv+0x22c>)
 80045e8:	f00a f892 	bl	800e710 <iprintf>
    printf("%s\r\n", safetyScoreBuf);
 80045ec:	463b      	mov	r3, r7
 80045ee:	4619      	mov	r1, r3
 80045f0:	4810      	ldr	r0, [pc, #64]	; (8004634 <_Z21drivingScoreAlgorithmv+0x230>)
 80045f2:	f00a f88d 	bl	800e710 <iprintf>
    printf("drivingScore : ");
 80045f6:	4810      	ldr	r0, [pc, #64]	; (8004638 <_Z21drivingScoreAlgorithmv+0x234>)
 80045f8:	f00a f88a 	bl	800e710 <iprintf>
    printf("%f", drivingScore);
 80045fc:	4b0a      	ldr	r3, [pc, #40]	; (8004628 <_Z21drivingScoreAlgorithmv+0x224>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4618      	mov	r0, r3
 8004602:	f7fb ffa9 	bl	8000558 <__aeabi_f2d>
 8004606:	4602      	mov	r2, r0
 8004608:	460b      	mov	r3, r1
 800460a:	480c      	ldr	r0, [pc, #48]	; (800463c <_Z21drivingScoreAlgorithmv+0x238>)
 800460c:	f00a f880 	bl	800e710 <iprintf>
    printf(" / 10\r\n");
 8004610:	480b      	ldr	r0, [pc, #44]	; (8004640 <_Z21drivingScoreAlgorithmv+0x23c>)
 8004612:	f00a f903 	bl	800e81c <puts>
}
 8004616:	e7ff      	b.n	8004618 <_Z21drivingScoreAlgorithmv+0x214>
 8004618:	bf00      	nop
 800461a:	3720      	adds	r7, #32
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}
 8004620:	20000ee8 	.word	0x20000ee8
 8004624:	20000ecc 	.word	0x20000ecc
 8004628:	20000010 	.word	0x20000010
 800462c:	08012e68 	.word	0x08012e68
 8004630:	08012e70 	.word	0x08012e70
 8004634:	080127a4 	.word	0x080127a4
 8004638:	08012e84 	.word	0x08012e84
 800463c:	08012b20 	.word	0x08012b20
 8004640:	08012d90 	.word	0x08012d90
 8004644:	00646162 	.word	0x00646162
 8004648:	08012e94 	.word	0x08012e94
 800464c:	08012e9c 	.word	0x08012e9c
 8004650:	08012ea4 	.word	0x08012ea4

08004654 <_Z28averagedrivingScoreAlgorithmv>:

void averagedrivingScoreAlgorithm()
{
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
  //static float averagedrivingScore = 10.0;
  //if (drivingScore >= 0)

  averagedrivingScore = (float)((averagedrivingScore*(counter_N3-1)+drivingScore)/counter_N3);
 8004658:	4b1f      	ldr	r3, [pc, #124]	; (80046d8 <_Z28averagedrivingScoreAlgorithmv+0x84>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	3b01      	subs	r3, #1
 800465e:	ee07 3a90 	vmov	s15, r3
 8004662:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004666:	4b1d      	ldr	r3, [pc, #116]	; (80046dc <_Z28averagedrivingScoreAlgorithmv+0x88>)
 8004668:	edd3 7a00 	vldr	s15, [r3]
 800466c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004670:	4b1b      	ldr	r3, [pc, #108]	; (80046e0 <_Z28averagedrivingScoreAlgorithmv+0x8c>)
 8004672:	edd3 7a00 	vldr	s15, [r3]
 8004676:	ee77 6a27 	vadd.f32	s13, s14, s15
 800467a:	4b17      	ldr	r3, [pc, #92]	; (80046d8 <_Z28averagedrivingScoreAlgorithmv+0x84>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	ee07 3a90 	vmov	s15, r3
 8004682:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800468a:	4b14      	ldr	r3, [pc, #80]	; (80046dc <_Z28averagedrivingScoreAlgorithmv+0x88>)
 800468c:	edc3 7a00 	vstr	s15, [r3]
  if (isnan(averagedrivingScore))
 8004690:	4b12      	ldr	r3, [pc, #72]	; (80046dc <_Z28averagedrivingScoreAlgorithmv+0x88>)
 8004692:	edd3 7a00 	vldr	s15, [r3]
 8004696:	eeb0 0a67 	vmov.f32	s0, s15
 800469a:	f7fd f92f 	bl	80018fc <_ZSt5isnanf>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d002      	beq.n	80046aa <_Z28averagedrivingScoreAlgorithmv+0x56>
  {averagedrivingScore = 7.5;}
 80046a4:	4b0d      	ldr	r3, [pc, #52]	; (80046dc <_Z28averagedrivingScoreAlgorithmv+0x88>)
 80046a6:	4a0f      	ldr	r2, [pc, #60]	; (80046e4 <_Z28averagedrivingScoreAlgorithmv+0x90>)
 80046a8:	601a      	str	r2, [r3, #0]

  printf("averagedrivingScore : ");
 80046aa:	480f      	ldr	r0, [pc, #60]	; (80046e8 <_Z28averagedrivingScoreAlgorithmv+0x94>)
 80046ac:	f00a f830 	bl	800e710 <iprintf>
  printf("%f", averagedrivingScore);
 80046b0:	4b0a      	ldr	r3, [pc, #40]	; (80046dc <_Z28averagedrivingScoreAlgorithmv+0x88>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f7fb ff4f 	bl	8000558 <__aeabi_f2d>
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	480b      	ldr	r0, [pc, #44]	; (80046ec <_Z28averagedrivingScoreAlgorithmv+0x98>)
 80046c0:	f00a f826 	bl	800e710 <iprintf>
  printf(" / 10\r\n");
 80046c4:	480a      	ldr	r0, [pc, #40]	; (80046f0 <_Z28averagedrivingScoreAlgorithmv+0x9c>)
 80046c6:	f00a f8a9 	bl	800e81c <puts>

  counter_N3++;
 80046ca:	4b03      	ldr	r3, [pc, #12]	; (80046d8 <_Z28averagedrivingScoreAlgorithmv+0x84>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3301      	adds	r3, #1
 80046d0:	4a01      	ldr	r2, [pc, #4]	; (80046d8 <_Z28averagedrivingScoreAlgorithmv+0x84>)
 80046d2:	6013      	str	r3, [r2, #0]
}
 80046d4:	bf00      	nop
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	20000020 	.word	0x20000020
 80046dc:	20000014 	.word	0x20000014
 80046e0:	20000010 	.word	0x20000010
 80046e4:	40f00000 	.word	0x40f00000
 80046e8:	08012eb0 	.word	0x08012eb0
 80046ec:	08012b20 	.word	0x08012b20
 80046f0:	08012d90 	.word	0x08012d90

080046f4 <_Z14pre_DataUpdatev>:

void pre_DataUpdate()
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
    pre_f_accelX = f_accelX;
 80046f8:	4b3d      	ldr	r3, [pc, #244]	; (80047f0 <_Z14pre_DataUpdatev+0xfc>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a3d      	ldr	r2, [pc, #244]	; (80047f4 <_Z14pre_DataUpdatev+0x100>)
 80046fe:	6013      	str	r3, [r2, #0]
    pre_f_accelY = f_accelY;
 8004700:	4b3d      	ldr	r3, [pc, #244]	; (80047f8 <_Z14pre_DataUpdatev+0x104>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a3d      	ldr	r2, [pc, #244]	; (80047fc <_Z14pre_DataUpdatev+0x108>)
 8004706:	6013      	str	r3, [r2, #0]
    pre_rpm = rpm;
 8004708:	4b3d      	ldr	r3, [pc, #244]	; (8004800 <_Z14pre_DataUpdatev+0x10c>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a3d      	ldr	r2, [pc, #244]	; (8004804 <_Z14pre_DataUpdatev+0x110>)
 800470e:	6013      	str	r3, [r2, #0]
    pre_runTime = runTime;
 8004710:	4b3d      	ldr	r3, [pc, #244]	; (8004808 <_Z14pre_DataUpdatev+0x114>)
 8004712:	881b      	ldrh	r3, [r3, #0]
 8004714:	461a      	mov	r2, r3
 8004716:	4b3d      	ldr	r3, [pc, #244]	; (800480c <_Z14pre_DataUpdatev+0x118>)
 8004718:	601a      	str	r2, [r3, #0]
    pre_kph = kph;
 800471a:	4b3d      	ldr	r3, [pc, #244]	; (8004810 <_Z14pre_DataUpdatev+0x11c>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	461a      	mov	r2, r3
 8004720:	4b3c      	ldr	r3, [pc, #240]	; (8004814 <_Z14pre_DataUpdatev+0x120>)
 8004722:	601a      	str	r2, [r3, #0]
    if (mafRatecheck == true)
 8004724:	4b3c      	ldr	r3, [pc, #240]	; (8004818 <_Z14pre_DataUpdatev+0x124>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	2b01      	cmp	r3, #1
 800472a:	d111      	bne.n	8004750 <_Z14pre_DataUpdatev+0x5c>
    {
      pre_instantFuelConsume = instantFuelConsume;
 800472c:	4b3b      	ldr	r3, [pc, #236]	; (800481c <_Z14pre_DataUpdatev+0x128>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a3b      	ldr	r2, [pc, #236]	; (8004820 <_Z14pre_DataUpdatev+0x12c>)
 8004732:	6013      	str	r3, [r2, #0]
      printf("pre_instantFuelConsume = ");
 8004734:	483b      	ldr	r0, [pc, #236]	; (8004824 <_Z14pre_DataUpdatev+0x130>)
 8004736:	f009 ffeb 	bl	800e710 <iprintf>
      printf("%f\r\n", pre_instantFuelConsume);
 800473a:	4b39      	ldr	r3, [pc, #228]	; (8004820 <_Z14pre_DataUpdatev+0x12c>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	f7fb ff0a 	bl	8000558 <__aeabi_f2d>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	4837      	ldr	r0, [pc, #220]	; (8004828 <_Z14pre_DataUpdatev+0x134>)
 800474a:	f009 ffe1 	bl	800e710 <iprintf>
 800474e:	e014      	b.n	800477a <_Z14pre_DataUpdatev+0x86>
      }
    else if (mafRatecheck == false)
 8004750:	4b31      	ldr	r3, [pc, #196]	; (8004818 <_Z14pre_DataUpdatev+0x124>)
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d110      	bne.n	800477a <_Z14pre_DataUpdatev+0x86>
    {
      pre_commandedThrottleActuator = commandedThrottleActuator;
 8004758:	4b34      	ldr	r3, [pc, #208]	; (800482c <_Z14pre_DataUpdatev+0x138>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a34      	ldr	r2, [pc, #208]	; (8004830 <_Z14pre_DataUpdatev+0x13c>)
 800475e:	6013      	str	r3, [r2, #0]
      printf("pre_commandedThrottleActuator : ");
 8004760:	4834      	ldr	r0, [pc, #208]	; (8004834 <_Z14pre_DataUpdatev+0x140>)
 8004762:	f009 ffd5 	bl	800e710 <iprintf>
      printf("%f\r\n", pre_commandedThrottleActuator);
 8004766:	4b32      	ldr	r3, [pc, #200]	; (8004830 <_Z14pre_DataUpdatev+0x13c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f7fb fef4 	bl	8000558 <__aeabi_f2d>
 8004770:	4602      	mov	r2, r0
 8004772:	460b      	mov	r3, r1
 8004774:	482c      	ldr	r0, [pc, #176]	; (8004828 <_Z14pre_DataUpdatev+0x134>)
 8004776:	f009 ffcb 	bl	800e710 <iprintf>
    }

    printf("pre_f_accelX = ");
 800477a:	482f      	ldr	r0, [pc, #188]	; (8004838 <_Z14pre_DataUpdatev+0x144>)
 800477c:	f009 ffc8 	bl	800e710 <iprintf>
    printf("%f\r\n", pre_f_accelX);
 8004780:	4b1c      	ldr	r3, [pc, #112]	; (80047f4 <_Z14pre_DataUpdatev+0x100>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4618      	mov	r0, r3
 8004786:	f7fb fee7 	bl	8000558 <__aeabi_f2d>
 800478a:	4602      	mov	r2, r0
 800478c:	460b      	mov	r3, r1
 800478e:	4826      	ldr	r0, [pc, #152]	; (8004828 <_Z14pre_DataUpdatev+0x134>)
 8004790:	f009 ffbe 	bl	800e710 <iprintf>
    printf("pre_f_accelY = ");
 8004794:	4829      	ldr	r0, [pc, #164]	; (800483c <_Z14pre_DataUpdatev+0x148>)
 8004796:	f009 ffbb 	bl	800e710 <iprintf>
    printf("%f\r\n", pre_f_accelY);
 800479a:	4b18      	ldr	r3, [pc, #96]	; (80047fc <_Z14pre_DataUpdatev+0x108>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fb feda 	bl	8000558 <__aeabi_f2d>
 80047a4:	4602      	mov	r2, r0
 80047a6:	460b      	mov	r3, r1
 80047a8:	481f      	ldr	r0, [pc, #124]	; (8004828 <_Z14pre_DataUpdatev+0x134>)
 80047aa:	f009 ffb1 	bl	800e710 <iprintf>
    printf("pre_rpm = ");
 80047ae:	4824      	ldr	r0, [pc, #144]	; (8004840 <_Z14pre_DataUpdatev+0x14c>)
 80047b0:	f009 ffae 	bl	800e710 <iprintf>
    printf("%lu\r\n", pre_rpm);
 80047b4:	4b13      	ldr	r3, [pc, #76]	; (8004804 <_Z14pre_DataUpdatev+0x110>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4619      	mov	r1, r3
 80047ba:	4822      	ldr	r0, [pc, #136]	; (8004844 <_Z14pre_DataUpdatev+0x150>)
 80047bc:	f009 ffa8 	bl	800e710 <iprintf>
    printf("pre_runTime = ");
 80047c0:	4821      	ldr	r0, [pc, #132]	; (8004848 <_Z14pre_DataUpdatev+0x154>)
 80047c2:	f009 ffa5 	bl	800e710 <iprintf>
    printf("%lu\r\n", pre_runTime);
 80047c6:	4b11      	ldr	r3, [pc, #68]	; (800480c <_Z14pre_DataUpdatev+0x118>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4619      	mov	r1, r3
 80047cc:	481d      	ldr	r0, [pc, #116]	; (8004844 <_Z14pre_DataUpdatev+0x150>)
 80047ce:	f009 ff9f 	bl	800e710 <iprintf>
    printf("pre_kph = ");
 80047d2:	481e      	ldr	r0, [pc, #120]	; (800484c <_Z14pre_DataUpdatev+0x158>)
 80047d4:	f009 ff9c 	bl	800e710 <iprintf>
    printf("%ld\r\n", pre_kph);
 80047d8:	4b0e      	ldr	r3, [pc, #56]	; (8004814 <_Z14pre_DataUpdatev+0x120>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4619      	mov	r1, r3
 80047de:	481c      	ldr	r0, [pc, #112]	; (8004850 <_Z14pre_DataUpdatev+0x15c>)
 80047e0:	f009 ff96 	bl	800e710 <iprintf>


    printf("pre_Data Updated\r\n");
 80047e4:	481b      	ldr	r0, [pc, #108]	; (8004854 <_Z14pre_DataUpdatev+0x160>)
 80047e6:	f00a f819 	bl	800e81c <puts>
}
 80047ea:	bf00      	nop
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	20000e5c 	.word	0x20000e5c
 80047f4:	20000ef0 	.word	0x20000ef0
 80047f8:	20000e60 	.word	0x20000e60
 80047fc:	20000ef4 	.word	0x20000ef4
 8004800:	20000e74 	.word	0x20000e74
 8004804:	20000efc 	.word	0x20000efc
 8004808:	20000e80 	.word	0x20000e80
 800480c:	20000f00 	.word	0x20000f00
 8004810:	20000e78 	.word	0x20000e78
 8004814:	20000f04 	.word	0x20000f04
 8004818:	20000f2a 	.word	0x20000f2a
 800481c:	20000028 	.word	0x20000028
 8004820:	20000ef8 	.word	0x20000ef8
 8004824:	08012ec8 	.word	0x08012ec8
 8004828:	08012a14 	.word	0x08012a14
 800482c:	20000eb8 	.word	0x20000eb8
 8004830:	20000f08 	.word	0x20000f08
 8004834:	08012ee4 	.word	0x08012ee4
 8004838:	08012f08 	.word	0x08012f08
 800483c:	08012f18 	.word	0x08012f18
 8004840:	08012f28 	.word	0x08012f28
 8004844:	08012cfc 	.word	0x08012cfc
 8004848:	08012f34 	.word	0x08012f34
 800484c:	08012f44 	.word	0x08012f44
 8004850:	08012f50 	.word	0x08012f50
 8004854:	08012f58 	.word	0x08012f58

08004858 <_Z12counterResetv>:

void counterReset()
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  counter_AccelYp = 0;
 800485c:	4b1f      	ldr	r3, [pc, #124]	; (80048dc <_Z12counterResetv+0x84>)
 800485e:	2200      	movs	r2, #0
 8004860:	601a      	str	r2, [r3, #0]
  counter_Fuel = 0;
 8004862:	4b1f      	ldr	r3, [pc, #124]	; (80048e0 <_Z12counterResetv+0x88>)
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]
  counter_Throttle = 0;
 8004868:	4b1e      	ldr	r3, [pc, #120]	; (80048e4 <_Z12counterResetv+0x8c>)
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]
  counter_Rpm = 0;
 800486e:	4b1e      	ldr	r3, [pc, #120]	; (80048e8 <_Z12counterResetv+0x90>)
 8004870:	2200      	movs	r2, #0
 8004872:	601a      	str	r2, [r3, #0]
  efficiencyScore = 0.0;
 8004874:	4b1d      	ldr	r3, [pc, #116]	; (80048ec <_Z12counterResetv+0x94>)
 8004876:	f04f 0200 	mov.w	r2, #0
 800487a:	601a      	str	r2, [r3, #0]
  counter_AccelX = 0;
 800487c:	4b1c      	ldr	r3, [pc, #112]	; (80048f0 <_Z12counterResetv+0x98>)
 800487e:	2200      	movs	r2, #0
 8004880:	601a      	str	r2, [r3, #0]
  counter_AccelYm = 0;
 8004882:	4b1c      	ldr	r3, [pc, #112]	; (80048f4 <_Z12counterResetv+0x9c>)
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]
  counter_AccelYm2 = 0;
 8004888:	4b1b      	ldr	r3, [pc, #108]	; (80048f8 <_Z12counterResetv+0xa0>)
 800488a:	2200      	movs	r2, #0
 800488c:	601a      	str	r2, [r3, #0]
  counter_Time = 0;
 800488e:	4b1b      	ldr	r3, [pc, #108]	; (80048fc <_Z12counterResetv+0xa4>)
 8004890:	2200      	movs	r2, #0
 8004892:	601a      	str	r2, [r3, #0]
  counter_KphRpm = 0;
 8004894:	4b1a      	ldr	r3, [pc, #104]	; (8004900 <_Z12counterResetv+0xa8>)
 8004896:	2200      	movs	r2, #0
 8004898:	601a      	str	r2, [r3, #0]
  safetyScore = 0.0;
 800489a:	4b1a      	ldr	r3, [pc, #104]	; (8004904 <_Z12counterResetv+0xac>)
 800489c:	f04f 0200 	mov.w	r2, #0
 80048a0:	601a      	str	r2, [r3, #0]
  drivingScore = 7.5;
 80048a2:	4b19      	ldr	r3, [pc, #100]	; (8004908 <_Z12counterResetv+0xb0>)
 80048a4:	4a19      	ldr	r2, [pc, #100]	; (800490c <_Z12counterResetv+0xb4>)
 80048a6:	601a      	str	r2, [r3, #0]
  averagedrivingScore = 10.0;
 80048a8:	4b19      	ldr	r3, [pc, #100]	; (8004910 <_Z12counterResetv+0xb8>)
 80048aa:	4a1a      	ldr	r2, [pc, #104]	; (8004914 <_Z12counterResetv+0xbc>)
 80048ac:	601a      	str	r2, [r3, #0]
  counter_N1 = 1;
 80048ae:	4b1a      	ldr	r3, [pc, #104]	; (8004918 <_Z12counterResetv+0xc0>)
 80048b0:	2201      	movs	r2, #1
 80048b2:	601a      	str	r2, [r3, #0]
  counter_N2 = 1;
 80048b4:	4b19      	ldr	r3, [pc, #100]	; (800491c <_Z12counterResetv+0xc4>)
 80048b6:	2201      	movs	r2, #1
 80048b8:	601a      	str	r2, [r3, #0]
  counter_N3 = 1;
 80048ba:	4b19      	ldr	r3, [pc, #100]	; (8004920 <_Z12counterResetv+0xc8>)
 80048bc:	2201      	movs	r2, #1
 80048be:	601a      	str	r2, [r3, #0]

  averageFuelConsume= 0.0;
 80048c0:	4b18      	ldr	r3, [pc, #96]	; (8004924 <_Z12counterResetv+0xcc>)
 80048c2:	f04f 0200 	mov.w	r2, #0
 80048c6:	601a      	str	r2, [r3, #0]
  averagecommandedThrottleActuator = 0.0;
 80048c8:	4b17      	ldr	r3, [pc, #92]	; (8004928 <_Z12counterResetv+0xd0>)
 80048ca:	f04f 0200 	mov.w	r2, #0
 80048ce:	601a      	str	r2, [r3, #0]

  printf("Counter Reset\r\n");
 80048d0:	4816      	ldr	r0, [pc, #88]	; (800492c <_Z12counterResetv+0xd4>)
 80048d2:	f009 ffa3 	bl	800e81c <puts>
}
 80048d6:	bf00      	nop
 80048d8:	bd80      	pop	{r7, pc}
 80048da:	bf00      	nop
 80048dc:	20000ec0 	.word	0x20000ec0
 80048e0:	20000ec4 	.word	0x20000ec4
 80048e4:	20000ee4 	.word	0x20000ee4
 80048e8:	20000ec8 	.word	0x20000ec8
 80048ec:	20000ecc 	.word	0x20000ecc
 80048f0:	20000ed0 	.word	0x20000ed0
 80048f4:	20000ed4 	.word	0x20000ed4
 80048f8:	20000ed8 	.word	0x20000ed8
 80048fc:	20000edc 	.word	0x20000edc
 8004900:	20000ee0 	.word	0x20000ee0
 8004904:	20000ee8 	.word	0x20000ee8
 8004908:	20000010 	.word	0x20000010
 800490c:	40f00000 	.word	0x40f00000
 8004910:	20000014 	.word	0x20000014
 8004914:	41200000 	.word	0x41200000
 8004918:	20000018 	.word	0x20000018
 800491c:	2000001c 	.word	0x2000001c
 8004920:	20000020 	.word	0x20000020
 8004924:	2000002c 	.word	0x2000002c
 8004928:	20000030 	.word	0x20000030
 800492c:	08012f6c 	.word	0x08012f6c

08004930 <_Z15errorValueResetv>:

bool errorValueReset()
{
 8004930:	b480      	push	{r7}
 8004932:	af00      	add	r7, sp, #0
  errorvaluecheck = false;
 8004934:	4b2a      	ldr	r3, [pc, #168]	; (80049e0 <_Z15errorValueResetv+0xb0>)
 8004936:	2200      	movs	r2, #0
 8004938:	701a      	strb	r2, [r3, #0]
   if ( (rpm == -1) || (engineLoad == -1) || (kph == -1) || (runTime == 65535) )
 800493a:	4b2a      	ldr	r3, [pc, #168]	; (80049e4 <_Z15errorValueResetv+0xb4>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004942:	d00f      	beq.n	8004964 <_Z15errorValueResetv+0x34>
 8004944:	4b28      	ldr	r3, [pc, #160]	; (80049e8 <_Z15errorValueResetv+0xb8>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800494c:	d00a      	beq.n	8004964 <_Z15errorValueResetv+0x34>
 800494e:	4b27      	ldr	r3, [pc, #156]	; (80049ec <_Z15errorValueResetv+0xbc>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004956:	d005      	beq.n	8004964 <_Z15errorValueResetv+0x34>
 8004958:	4b25      	ldr	r3, [pc, #148]	; (80049f0 <_Z15errorValueResetv+0xc0>)
 800495a:	881b      	ldrh	r3, [r3, #0]
 800495c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004960:	4293      	cmp	r3, r2
 8004962:	d135      	bne.n	80049d0 <_Z15errorValueResetv+0xa0>
   {
    runTime = pre_runTime;
 8004964:	4b23      	ldr	r3, [pc, #140]	; (80049f4 <_Z15errorValueResetv+0xc4>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	b29a      	uxth	r2, r3
 800496a:	4b21      	ldr	r3, [pc, #132]	; (80049f0 <_Z15errorValueResetv+0xc0>)
 800496c:	801a      	strh	r2, [r3, #0]
    rpm = 700;
 800496e:	4b1d      	ldr	r3, [pc, #116]	; (80049e4 <_Z15errorValueResetv+0xb4>)
 8004970:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8004974:	601a      	str	r2, [r3, #0]
    kph = 1;
 8004976:	4b1d      	ldr	r3, [pc, #116]	; (80049ec <_Z15errorValueResetv+0xbc>)
 8004978:	2201      	movs	r2, #1
 800497a:	601a      	str	r2, [r3, #0]
    engineLoad = 19;
 800497c:	4b1a      	ldr	r3, [pc, #104]	; (80049e8 <_Z15errorValueResetv+0xb8>)
 800497e:	2213      	movs	r2, #19
 8004980:	601a      	str	r2, [r3, #0]
    oilTemp = 85;
 8004982:	4b1d      	ldr	r3, [pc, #116]	; (80049f8 <_Z15errorValueResetv+0xc8>)
 8004984:	2255      	movs	r2, #85	; 0x55
 8004986:	601a      	str	r2, [r3, #0]
    engineCoolantTemp = 85;
 8004988:	4b1c      	ldr	r3, [pc, #112]	; (80049fc <_Z15errorValueResetv+0xcc>)
 800498a:	2255      	movs	r2, #85	; 0x55
 800498c:	601a      	str	r2, [r3, #0]
    relativePedalPos = 10;
 800498e:	4b1c      	ldr	r3, [pc, #112]	; (8004a00 <_Z15errorValueResetv+0xd0>)
 8004990:	220a      	movs	r2, #10
 8004992:	601a      	str	r2, [r3, #0]
    throttle = 13;
 8004994:	4b1b      	ldr	r3, [pc, #108]	; (8004a04 <_Z15errorValueResetv+0xd4>)
 8004996:	220d      	movs	r2, #13
 8004998:	601a      	str	r2, [r3, #0]
    relativeThrottle = 3;
 800499a:	4b1b      	ldr	r3, [pc, #108]	; (8004a08 <_Z15errorValueResetv+0xd8>)
 800499c:	2203      	movs	r2, #3
 800499e:	601a      	str	r2, [r3, #0]
    commandedThrottleActuator = 5.0;
 80049a0:	4b1a      	ldr	r3, [pc, #104]	; (8004a0c <_Z15errorValueResetv+0xdc>)
 80049a2:	4a1b      	ldr	r2, [pc, #108]	; (8004a10 <_Z15errorValueResetv+0xe0>)
 80049a4:	601a      	str	r2, [r3, #0]
    intakeAirTemp = 15;
 80049a6:	4b1b      	ldr	r3, [pc, #108]	; (8004a14 <_Z15errorValueResetv+0xe4>)
 80049a8:	220f      	movs	r2, #15
 80049aa:	601a      	str	r2, [r3, #0]
    manifoldPressure = 32;
 80049ac:	4b1a      	ldr	r3, [pc, #104]	; (8004a18 <_Z15errorValueResetv+0xe8>)
 80049ae:	2220      	movs	r2, #32
 80049b0:	601a      	str	r2, [r3, #0]
    mafRate = 2.01;
 80049b2:	4b1a      	ldr	r3, [pc, #104]	; (8004a1c <_Z15errorValueResetv+0xec>)
 80049b4:	4a1a      	ldr	r2, [pc, #104]	; (8004a20 <_Z15errorValueResetv+0xf0>)
 80049b6:	601a      	str	r2, [r3, #0]
    //fuelLevel = 50;
    ctrlModVoltage = 14;
 80049b8:	4b1a      	ldr	r3, [pc, #104]	; (8004a24 <_Z15errorValueResetv+0xf4>)
 80049ba:	220e      	movs	r2, #14
 80049bc:	601a      	str	r2, [r3, #0]
    distTravelWithMIL = 0;
 80049be:	4b1a      	ldr	r3, [pc, #104]	; (8004a28 <_Z15errorValueResetv+0xf8>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	801a      	strh	r2, [r3, #0]
    ambientAirTemp = 15;
 80049c4:	4b19      	ldr	r3, [pc, #100]	; (8004a2c <_Z15errorValueResetv+0xfc>)
 80049c6:	220f      	movs	r2, #15
 80049c8:	801a      	strh	r2, [r3, #0]

    errorvaluecheck = true;
 80049ca:	4b05      	ldr	r3, [pc, #20]	; (80049e0 <_Z15errorValueResetv+0xb0>)
 80049cc:	2201      	movs	r2, #1
 80049ce:	701a      	strb	r2, [r3, #0]
   }
   return errorvaluecheck;
 80049d0:	4b03      	ldr	r3, [pc, #12]	; (80049e0 <_Z15errorValueResetv+0xb0>)
 80049d2:	781b      	ldrb	r3, [r3, #0]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	20000034 	.word	0x20000034
 80049e4:	20000e74 	.word	0x20000e74
 80049e8:	20000e7c 	.word	0x20000e7c
 80049ec:	20000e78 	.word	0x20000e78
 80049f0:	20000e80 	.word	0x20000e80
 80049f4:	20000f00 	.word	0x20000f00
 80049f8:	20000e84 	.word	0x20000e84
 80049fc:	20000eb4 	.word	0x20000eb4
 8004a00:	20000e88 	.word	0x20000e88
 8004a04:	20000e8c 	.word	0x20000e8c
 8004a08:	20000e90 	.word	0x20000e90
 8004a0c:	20000eb8 	.word	0x20000eb8
 8004a10:	40a00000 	.word	0x40a00000
 8004a14:	20000e94 	.word	0x20000e94
 8004a18:	20000eb0 	.word	0x20000eb0
 8004a1c:	20000e9c 	.word	0x20000e9c
 8004a20:	4000a3d7 	.word	0x4000a3d7
 8004a24:	20000ea8 	.word	0x20000ea8
 8004a28:	20000ea2 	.word	0x20000ea2
 8004a2c:	20000eac 	.word	0x20000eac

08004a30 <_Z12mafRateCheckf>:

bool mafRateCheck(float mafRate_value)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	ed87 0a01 	vstr	s0, [r7, #4]

  if (mafRate_value <= 0)
 8004a3a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a46:	d803      	bhi.n	8004a50 <_Z12mafRateCheckf+0x20>
	  mafRatecheck = false;
 8004a48:	4b0a      	ldr	r3, [pc, #40]	; (8004a74 <_Z12mafRateCheckf+0x44>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	701a      	strb	r2, [r3, #0]
 8004a4e:	e009      	b.n	8004a64 <_Z12mafRateCheckf+0x34>

  else if (mafRate_value > 0)
 8004a50:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a5c:	dd02      	ble.n	8004a64 <_Z12mafRateCheckf+0x34>
	  mafRatecheck = true;
 8004a5e:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <_Z12mafRateCheckf+0x44>)
 8004a60:	2201      	movs	r2, #1
 8004a62:	701a      	strb	r2, [r3, #0]

  return mafRatecheck;
 8004a64:	4b03      	ldr	r3, [pc, #12]	; (8004a74 <_Z12mafRateCheckf+0x44>)
 8004a66:	781b      	ldrb	r3, [r3, #0]
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr
 8004a74:	20000f2a 	.word	0x20000f2a

08004a78 <_Z13Uart6_timeoutv>:

bool Uart6_timeout()
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	af00      	add	r7, sp, #0
	Uart6_currentTime = millis();
 8004a7c:	f001 fede 	bl	800683c <HAL_GetTick>
 8004a80:	4603      	mov	r3, r0
 8004a82:	4a07      	ldr	r2, [pc, #28]	; (8004aa0 <_Z13Uart6_timeoutv+0x28>)
 8004a84:	6013      	str	r3, [r2, #0]
	if ((Uart6_currentTime - Uart6_previousTime) >= Uart6_timeout_ms)
 8004a86:	4b06      	ldr	r3, [pc, #24]	; (8004aa0 <_Z13Uart6_timeoutv+0x28>)
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	4b06      	ldr	r3, [pc, #24]	; (8004aa4 <_Z13Uart6_timeoutv+0x2c>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a94:	d301      	bcc.n	8004a9a <_Z13Uart6_timeoutv+0x22>
		return true;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e000      	b.n	8004a9c <_Z13Uart6_timeoutv+0x24>
	return false;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	20000e6c 	.word	0x20000e6c
 8004aa4:	20000e70 	.word	0x20000e70

08004aa8 <_Z14flushInputBuffv>:

void flushInputBuff()
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b082      	sub	sp, #8
 8004aac:	af00      	add	r7, sp, #0
    unsigned char ch;

    while (IsDataAvailable())
 8004aae:	f7fc fc79 	bl	80013a4 <IsDataAvailable>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	bf14      	ite	ne
 8004ab8:	2301      	movne	r3, #1
 8004aba:	2300      	moveq	r3, #0
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d004      	beq.n	8004acc <_Z14flushInputBuffv+0x24>
    {
        ch = Uart_read();
 8004ac2:	f7fc fc07 	bl	80012d4 <Uart_read>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	71fb      	strb	r3, [r7, #7]
    while (IsDataAvailable())
 8004aca:	e7f0      	b.n	8004aae <_Z14flushInputBuffv+0x6>
    }
    // sekim 20200514 Remove Warning
}
 8004acc:	bf00      	nop
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8004ad8:	b672      	cpsid	i
}
 8004ada:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004adc:	e7fe      	b.n	8004adc <Error_Handler+0x8>
	...

08004ae0 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d107      	bne.n	8004b00 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d102      	bne.n	8004b00 <_Z41__static_initialization_and_destruction_0ii+0x20>
STN1110 stn;
 8004afa:	4803      	ldr	r0, [pc, #12]	; (8004b08 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8004afc:	f7fc ff1a 	bl	8001934 <_ZN7STN1110C1Ev>
}
 8004b00:	bf00      	nop
 8004b02:	3708      	adds	r7, #8
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}
 8004b08:	20000f50 	.word	0x20000f50

08004b0c <_GLOBAL__sub_I_f_pitch>:
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004b14:	2001      	movs	r0, #1
 8004b16:	f7ff ffe3 	bl	8004ae0 <_Z41__static_initialization_and_destruction_0ii>
 8004b1a:	bd80      	pop	{r7, pc}

08004b1c <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8004b20:	4b0c      	ldr	r3, [pc, #48]	; (8004b54 <MX_SDIO_SD_Init+0x38>)
 8004b22:	4a0d      	ldr	r2, [pc, #52]	; (8004b58 <MX_SDIO_SD_Init+0x3c>)
 8004b24:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8004b26:	4b0b      	ldr	r3, [pc, #44]	; (8004b54 <MX_SDIO_SD_Init+0x38>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8004b2c:	4b09      	ldr	r3, [pc, #36]	; (8004b54 <MX_SDIO_SD_Init+0x38>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004b32:	4b08      	ldr	r3, [pc, #32]	; (8004b54 <MX_SDIO_SD_Init+0x38>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8004b38:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <MX_SDIO_SD_Init+0x38>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004b3e:	4b05      	ldr	r3, [pc, #20]	; (8004b54 <MX_SDIO_SD_Init+0x38>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8004b44:	4b03      	ldr	r3, [pc, #12]	; (8004b54 <MX_SDIO_SD_Init+0x38>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8004b4a:	bf00      	nop
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr
 8004b54:	200015ac 	.word	0x200015ac
 8004b58:	40012c00 	.word	0x40012c00

08004b5c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b08c      	sub	sp, #48	; 0x30
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b64:	f107 031c 	add.w	r3, r7, #28
 8004b68:	2200      	movs	r2, #0
 8004b6a:	601a      	str	r2, [r3, #0]
 8004b6c:	605a      	str	r2, [r3, #4]
 8004b6e:	609a      	str	r2, [r3, #8]
 8004b70:	60da      	str	r2, [r3, #12]
 8004b72:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a78      	ldr	r2, [pc, #480]	; (8004d5c <HAL_SD_MspInit+0x200>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	f040 80e9 	bne.w	8004d52 <HAL_SD_MspInit+0x1f6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8004b80:	2300      	movs	r3, #0
 8004b82:	61bb      	str	r3, [r7, #24]
 8004b84:	4b76      	ldr	r3, [pc, #472]	; (8004d60 <HAL_SD_MspInit+0x204>)
 8004b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b88:	4a75      	ldr	r2, [pc, #468]	; (8004d60 <HAL_SD_MspInit+0x204>)
 8004b8a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004b8e:	6453      	str	r3, [r2, #68]	; 0x44
 8004b90:	4b73      	ldr	r3, [pc, #460]	; (8004d60 <HAL_SD_MspInit+0x204>)
 8004b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b98:	61bb      	str	r3, [r7, #24]
 8004b9a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	617b      	str	r3, [r7, #20]
 8004ba0:	4b6f      	ldr	r3, [pc, #444]	; (8004d60 <HAL_SD_MspInit+0x204>)
 8004ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba4:	4a6e      	ldr	r2, [pc, #440]	; (8004d60 <HAL_SD_MspInit+0x204>)
 8004ba6:	f043 0301 	orr.w	r3, r3, #1
 8004baa:	6313      	str	r3, [r2, #48]	; 0x30
 8004bac:	4b6c      	ldr	r3, [pc, #432]	; (8004d60 <HAL_SD_MspInit+0x204>)
 8004bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	617b      	str	r3, [r7, #20]
 8004bb6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bb8:	2300      	movs	r3, #0
 8004bba:	613b      	str	r3, [r7, #16]
 8004bbc:	4b68      	ldr	r3, [pc, #416]	; (8004d60 <HAL_SD_MspInit+0x204>)
 8004bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc0:	4a67      	ldr	r2, [pc, #412]	; (8004d60 <HAL_SD_MspInit+0x204>)
 8004bc2:	f043 0302 	orr.w	r3, r3, #2
 8004bc6:	6313      	str	r3, [r2, #48]	; 0x30
 8004bc8:	4b65      	ldr	r3, [pc, #404]	; (8004d60 <HAL_SD_MspInit+0x204>)
 8004bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bcc:	f003 0302 	and.w	r3, r3, #2
 8004bd0:	613b      	str	r3, [r7, #16]
 8004bd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	4b61      	ldr	r3, [pc, #388]	; (8004d60 <HAL_SD_MspInit+0x204>)
 8004bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bdc:	4a60      	ldr	r2, [pc, #384]	; (8004d60 <HAL_SD_MspInit+0x204>)
 8004bde:	f043 0304 	orr.w	r3, r3, #4
 8004be2:	6313      	str	r3, [r2, #48]	; 0x30
 8004be4:	4b5e      	ldr	r3, [pc, #376]	; (8004d60 <HAL_SD_MspInit+0x204>)
 8004be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be8:	f003 0304 	and.w	r3, r3, #4
 8004bec:	60fb      	str	r3, [r7, #12]
 8004bee:	68fb      	ldr	r3, [r7, #12]
    PC8     ------> SDIO_D0
    PC9     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PC11     ------> SDIO_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8004bf0:	f44f 7310 	mov.w	r3, #576	; 0x240
 8004bf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bfe:	2303      	movs	r3, #3
 8004c00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004c02:	230c      	movs	r3, #12
 8004c04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c06:	f107 031c 	add.w	r3, r7, #28
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	4855      	ldr	r0, [pc, #340]	; (8004d64 <HAL_SD_MspInit+0x208>)
 8004c0e:	f002 faf5 	bl	80071fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c18:	2302      	movs	r3, #2
 8004c1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c20:	2303      	movs	r3, #3
 8004c22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004c24:	230c      	movs	r3, #12
 8004c26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c28:	f107 031c 	add.w	r3, r7, #28
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	484e      	ldr	r0, [pc, #312]	; (8004d68 <HAL_SD_MspInit+0x20c>)
 8004c30:	f002 fae4 	bl	80071fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 8004c34:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 8004c38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c3a:	2302      	movs	r3, #2
 8004c3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c42:	2303      	movs	r3, #3
 8004c44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8004c46:	230c      	movs	r3, #12
 8004c48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c4a:	f107 031c 	add.w	r3, r7, #28
 8004c4e:	4619      	mov	r1, r3
 8004c50:	4846      	ldr	r0, [pc, #280]	; (8004d6c <HAL_SD_MspInit+0x210>)
 8004c52:	f002 fad3 	bl	80071fc <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8004c56:	4b46      	ldr	r3, [pc, #280]	; (8004d70 <HAL_SD_MspInit+0x214>)
 8004c58:	4a46      	ldr	r2, [pc, #280]	; (8004d74 <HAL_SD_MspInit+0x218>)
 8004c5a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8004c5c:	4b44      	ldr	r3, [pc, #272]	; (8004d70 <HAL_SD_MspInit+0x214>)
 8004c5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c62:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c64:	4b42      	ldr	r3, [pc, #264]	; (8004d70 <HAL_SD_MspInit+0x214>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c6a:	4b41      	ldr	r3, [pc, #260]	; (8004d70 <HAL_SD_MspInit+0x214>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004c70:	4b3f      	ldr	r3, [pc, #252]	; (8004d70 <HAL_SD_MspInit+0x214>)
 8004c72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c76:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004c78:	4b3d      	ldr	r3, [pc, #244]	; (8004d70 <HAL_SD_MspInit+0x214>)
 8004c7a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c7e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004c80:	4b3b      	ldr	r3, [pc, #236]	; (8004d70 <HAL_SD_MspInit+0x214>)
 8004c82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c86:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8004c88:	4b39      	ldr	r3, [pc, #228]	; (8004d70 <HAL_SD_MspInit+0x214>)
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004c8e:	4b38      	ldr	r3, [pc, #224]	; (8004d70 <HAL_SD_MspInit+0x214>)
 8004c90:	2200      	movs	r2, #0
 8004c92:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004c94:	4b36      	ldr	r3, [pc, #216]	; (8004d70 <HAL_SD_MspInit+0x214>)
 8004c96:	2204      	movs	r2, #4
 8004c98:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004c9a:	4b35      	ldr	r3, [pc, #212]	; (8004d70 <HAL_SD_MspInit+0x214>)
 8004c9c:	2203      	movs	r2, #3
 8004c9e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8004ca0:	4b33      	ldr	r3, [pc, #204]	; (8004d70 <HAL_SD_MspInit+0x214>)
 8004ca2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004ca6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004ca8:	4b31      	ldr	r3, [pc, #196]	; (8004d70 <HAL_SD_MspInit+0x214>)
 8004caa:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004cae:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8004cb0:	482f      	ldr	r0, [pc, #188]	; (8004d70 <HAL_SD_MspInit+0x214>)
 8004cb2:	f001 ff05 	bl	8006ac0 <HAL_DMA_Init>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <HAL_SD_MspInit+0x164>
    {
      Error_Handler();
 8004cbc:	f7ff ff0a 	bl	8004ad4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a2b      	ldr	r2, [pc, #172]	; (8004d70 <HAL_SD_MspInit+0x214>)
 8004cc4:	641a      	str	r2, [r3, #64]	; 0x40
 8004cc6:	4a2a      	ldr	r2, [pc, #168]	; (8004d70 <HAL_SD_MspInit+0x214>)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8004ccc:	4b2a      	ldr	r3, [pc, #168]	; (8004d78 <HAL_SD_MspInit+0x21c>)
 8004cce:	4a2b      	ldr	r2, [pc, #172]	; (8004d7c <HAL_SD_MspInit+0x220>)
 8004cd0:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8004cd2:	4b29      	ldr	r3, [pc, #164]	; (8004d78 <HAL_SD_MspInit+0x21c>)
 8004cd4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004cd8:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004cda:	4b27      	ldr	r3, [pc, #156]	; (8004d78 <HAL_SD_MspInit+0x21c>)
 8004cdc:	2240      	movs	r2, #64	; 0x40
 8004cde:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ce0:	4b25      	ldr	r3, [pc, #148]	; (8004d78 <HAL_SD_MspInit+0x21c>)
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004ce6:	4b24      	ldr	r3, [pc, #144]	; (8004d78 <HAL_SD_MspInit+0x21c>)
 8004ce8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cec:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004cee:	4b22      	ldr	r3, [pc, #136]	; (8004d78 <HAL_SD_MspInit+0x21c>)
 8004cf0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004cf4:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004cf6:	4b20      	ldr	r3, [pc, #128]	; (8004d78 <HAL_SD_MspInit+0x21c>)
 8004cf8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004cfc:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8004cfe:	4b1e      	ldr	r3, [pc, #120]	; (8004d78 <HAL_SD_MspInit+0x21c>)
 8004d00:	2220      	movs	r2, #32
 8004d02:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004d04:	4b1c      	ldr	r3, [pc, #112]	; (8004d78 <HAL_SD_MspInit+0x21c>)
 8004d06:	2200      	movs	r2, #0
 8004d08:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004d0a:	4b1b      	ldr	r3, [pc, #108]	; (8004d78 <HAL_SD_MspInit+0x21c>)
 8004d0c:	2204      	movs	r2, #4
 8004d0e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004d10:	4b19      	ldr	r3, [pc, #100]	; (8004d78 <HAL_SD_MspInit+0x21c>)
 8004d12:	2203      	movs	r2, #3
 8004d14:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8004d16:	4b18      	ldr	r3, [pc, #96]	; (8004d78 <HAL_SD_MspInit+0x21c>)
 8004d18:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004d1c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8004d1e:	4b16      	ldr	r3, [pc, #88]	; (8004d78 <HAL_SD_MspInit+0x21c>)
 8004d20:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004d24:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8004d26:	4814      	ldr	r0, [pc, #80]	; (8004d78 <HAL_SD_MspInit+0x21c>)
 8004d28:	f001 feca 	bl	8006ac0 <HAL_DMA_Init>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <HAL_SD_MspInit+0x1da>
    {
      Error_Handler();
 8004d32:	f7ff fecf 	bl	8004ad4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a0f      	ldr	r2, [pc, #60]	; (8004d78 <HAL_SD_MspInit+0x21c>)
 8004d3a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004d3c:	4a0e      	ldr	r2, [pc, #56]	; (8004d78 <HAL_SD_MspInit+0x21c>)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8004d42:	2200      	movs	r2, #0
 8004d44:	2100      	movs	r1, #0
 8004d46:	2031      	movs	r0, #49	; 0x31
 8004d48:	f001 fe83 	bl	8006a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8004d4c:	2031      	movs	r0, #49	; 0x31
 8004d4e:	f001 fe9c 	bl	8006a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8004d52:	bf00      	nop
 8004d54:	3730      	adds	r7, #48	; 0x30
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	40012c00 	.word	0x40012c00
 8004d60:	40023800 	.word	0x40023800
 8004d64:	40020000 	.word	0x40020000
 8004d68:	40020400 	.word	0x40020400
 8004d6c:	40020800 	.word	0x40020800
 8004d70:	200014ec 	.word	0x200014ec
 8004d74:	40026458 	.word	0x40026458
 8004d78:	2000154c 	.word	0x2000154c
 8004d7c:	400264a0 	.word	0x400264a0

08004d80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d86:	2300      	movs	r3, #0
 8004d88:	607b      	str	r3, [r7, #4]
 8004d8a:	4b10      	ldr	r3, [pc, #64]	; (8004dcc <HAL_MspInit+0x4c>)
 8004d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8e:	4a0f      	ldr	r2, [pc, #60]	; (8004dcc <HAL_MspInit+0x4c>)
 8004d90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d94:	6453      	str	r3, [r2, #68]	; 0x44
 8004d96:	4b0d      	ldr	r3, [pc, #52]	; (8004dcc <HAL_MspInit+0x4c>)
 8004d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d9e:	607b      	str	r3, [r7, #4]
 8004da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004da2:	2300      	movs	r3, #0
 8004da4:	603b      	str	r3, [r7, #0]
 8004da6:	4b09      	ldr	r3, [pc, #36]	; (8004dcc <HAL_MspInit+0x4c>)
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	4a08      	ldr	r2, [pc, #32]	; (8004dcc <HAL_MspInit+0x4c>)
 8004dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004db0:	6413      	str	r3, [r2, #64]	; 0x40
 8004db2:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <HAL_MspInit+0x4c>)
 8004db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dba:	603b      	str	r3, [r7, #0]
 8004dbc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004dbe:	2007      	movs	r0, #7
 8004dc0:	f001 fe3c 	bl	8006a3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004dc4:	bf00      	nop
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	40023800 	.word	0x40023800

08004dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004dd4:	e7fe      	b.n	8004dd4 <NMI_Handler+0x4>

08004dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004dd6:	b480      	push	{r7}
 8004dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004dda:	e7fe      	b.n	8004dda <HardFault_Handler+0x4>

08004ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004de0:	e7fe      	b.n	8004de0 <MemManage_Handler+0x4>

08004de2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004de2:	b480      	push	{r7}
 8004de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004de6:	e7fe      	b.n	8004de6 <BusFault_Handler+0x4>

08004de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004de8:	b480      	push	{r7}
 8004dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004dec:	e7fe      	b.n	8004dec <UsageFault_Handler+0x4>

08004dee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004dee:	b480      	push	{r7}
 8004df0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004df2:	bf00      	nop
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e00:	bf00      	nop
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e0e:	bf00      	nop
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e1c:	f001 fcfa 	bl	8006814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e20:	bf00      	nop
 8004e22:	bd80      	pop	{r7, pc}

08004e24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr (&huart1);
 8004e28:	4802      	ldr	r0, [pc, #8]	; (8004e34 <USART1_IRQHandler+0x10>)
 8004e2a:	f7fc fb03 	bl	8001434 <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
  //HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004e2e:	bf00      	nop
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20001454 	.word	0x20001454

08004e38 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8004e3c:	4802      	ldr	r0, [pc, #8]	; (8004e48 <SDIO_IRQHandler+0x10>)
 8004e3e:	f003 fa65 	bl	800830c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8004e42:	bf00      	nop
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	200015ac 	.word	0x200015ac

08004e4c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8004e50:	4802      	ldr	r0, [pc, #8]	; (8004e5c <DMA2_Stream3_IRQHandler+0x10>)
 8004e52:	f001 ff5d 	bl	8006d10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004e56:	bf00      	nop
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	200014ec 	.word	0x200014ec

08004e60 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8004e64:	4802      	ldr	r0, [pc, #8]	; (8004e70 <DMA2_Stream6_IRQHandler+0x10>)
 8004e66:	f001 ff53 	bl	8006d10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004e6a:	bf00      	nop
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	2000154c 	.word	0x2000154c

08004e74 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
	Uart_isr2 (&huart6);
 8004e78:	4802      	ldr	r0, [pc, #8]	; (8004e84 <USART6_IRQHandler+0x10>)
 8004e7a:	f7fc fc35 	bl	80016e8 <Uart_isr2>
  /* USER CODE END USART6_IRQn 0 */
  //HAL_UART_IRQHandler(&huart6);
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8004e7e:	bf00      	nop
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	200014a4 	.word	0x200014a4

08004e88 <_ZN7STN11105beginEP20__UART_HandleTypeDefRKbRKtRKcS5_RKa>:
 -------
  * bool - Whether or not the ELM327 was propperly
  initialized
*/
bool STN1110::begin(UART_HandleTypeDef *STN_PORT, const bool& debug, const uint16_t& timeout, const char& protocol, const uint16_t& payloadLen, const byte& dataTimeout)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	60f8      	str	r0, [r7, #12]
 8004e90:	60b9      	str	r1, [r7, #8]
 8004e92:	607a      	str	r2, [r7, #4]
 8004e94:	603b      	str	r3, [r7, #0]
	stn_port	= STN_PORT;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	68ba      	ldr	r2, [r7, #8]
 8004e9a:	601a      	str	r2, [r3, #0]
	PAYLOAD_LEN = payloadLen;
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	881a      	ldrh	r2, [r3, #0]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	819a      	strh	r2, [r3, #12]
	debugMode   = debug;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	781a      	ldrb	r2, [r3, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	715a      	strb	r2, [r3, #5]
	timeout_ms  = timeout;
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	881a      	ldrh	r2, [r3, #0]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	839a      	strh	r2, [r3, #28]

	payload = (char*)malloc(PAYLOAD_LEN + 1); // allow for terminating '\0'
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	899b      	ldrh	r3, [r3, #12]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f008 fcf4 	bl	800d8a8 <malloc>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	609a      	str	r2, [r3, #8]

	// test if serial port is connected
	if (HAL_UART_Init(stn_port) != HAL_OK)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f004 fad6 	bl	800947e <HAL_UART_Init>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	bf14      	ite	ne
 8004ed8:	2301      	movne	r3, #1
 8004eda:	2300      	moveq	r3, #0
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d004      	beq.n	8004eec <_ZN7STN11105beginEP20__UART_HandleTypeDefRKbRKtRKcS5_RKa+0x64>
		{
		printf("Failed to initiate stn_port\r\n");
 8004ee2:	480d      	ldr	r0, [pc, #52]	; (8004f18 <_ZN7STN11105beginEP20__UART_HandleTypeDefRKbRKtRKcS5_RKa+0x90>)
 8004ee4:	f009 fc9a 	bl	800e81c <puts>
		return false;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	e010      	b.n	8004f0e <_ZN7STN11105beginEP20__UART_HandleTypeDefRKbRKtRKcS5_RKa+0x86>
		}

	// try to connect
	if (!initializeELM(protocol, dataTimeout))
 8004eec:	6a3a      	ldr	r2, [r7, #32]
 8004eee:	69b9      	ldr	r1, [r7, #24]
 8004ef0:	68f8      	ldr	r0, [r7, #12]
 8004ef2:	f000 f815 	bl	8004f20 <_ZN7STN111013initializeELMERKcRKa>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	f083 0301 	eor.w	r3, r3, #1
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d004      	beq.n	8004f0c <_ZN7STN11105beginEP20__UART_HandleTypeDefRKbRKtRKcS5_RKa+0x84>
	{
		printf("Failed to initiate\r\n");
 8004f02:	4806      	ldr	r0, [pc, #24]	; (8004f1c <_ZN7STN11105beginEP20__UART_HandleTypeDefRKbRKtRKcS5_RKa+0x94>)
 8004f04:	f009 fc8a 	bl	800e81c <puts>
		return false;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	e000      	b.n	8004f0e <_ZN7STN11105beginEP20__UART_HandleTypeDefRKbRKtRKcS5_RKa+0x86>
	}

	return true;
 8004f0c:	2301      	movs	r3, #1
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	08013370 	.word	0x08013370
 8004f1c:	08013390 	.word	0x08013390

08004f20 <_ZN7STN111013initializeELMERKcRKa>:
  * C        - User2 CAN (11* bit ID, 50* kbaud)

  * --> *user adjustable
*/
bool STN1110::initializeELM(const char& protocol, const byte& dataTimeout)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b088      	sub	sp, #32
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]


	char command[10] = { '\0' };
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	617b      	str	r3, [r7, #20]
 8004f30:	f107 0318 	add.w	r3, r7, #24
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	809a      	strh	r2, [r3, #4]
	connected = false;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	711a      	strb	r2, [r3, #4]

	sendCommand(SET_ALL_TO_DEFAULTS);
 8004f40:	4915      	ldr	r1, [pc, #84]	; (8004f98 <_ZN7STN111013initializeELMERKcRKa+0x78>)
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 fe4c 	bl	8005be0 <_ZN7STN111011sendCommandEPKc>
	delay(100);
 8004f48:	2064      	movs	r0, #100	; 0x64
 8004f4a:	f001 fc83 	bl	8006854 <HAL_Delay>

	sendCommand(RESET_ALL);
 8004f4e:	4913      	ldr	r1, [pc, #76]	; (8004f9c <_ZN7STN111013initializeELMERKcRKa+0x7c>)
 8004f50:	68f8      	ldr	r0, [r7, #12]
 8004f52:	f000 fe45 	bl	8005be0 <_ZN7STN111011sendCommandEPKc>
	delay(200);
 8004f56:	20c8      	movs	r0, #200	; 0xc8
 8004f58:	f001 fc7c 	bl	8006854 <HAL_Delay>

	sendCommand(ECHO_OFF);
 8004f5c:	4910      	ldr	r1, [pc, #64]	; (8004fa0 <_ZN7STN111013initializeELMERKcRKa+0x80>)
 8004f5e:	68f8      	ldr	r0, [r7, #12]
 8004f60:	f000 fe3e 	bl	8005be0 <_ZN7STN111011sendCommandEPKc>
	delay(100);
 8004f64:	2064      	movs	r0, #100	; 0x64
 8004f66:	f001 fc75 	bl	8006854 <HAL_Delay>

	sendCommand(PRINTING_SPACES_OFF);
 8004f6a:	490e      	ldr	r1, [pc, #56]	; (8004fa4 <_ZN7STN111013initializeELMERKcRKa+0x84>)
 8004f6c:	68f8      	ldr	r0, [r7, #12]
 8004f6e:	f000 fe37 	bl	8005be0 <_ZN7STN111011sendCommandEPKc>
	delay(100);
 8004f72:	2064      	movs	r0, #100	; 0x64
 8004f74:	f001 fc6e 	bl	8006854 <HAL_Delay>

	sendCommand(ALLOW_LONG_MESSAGES);
 8004f78:	490b      	ldr	r1, [pc, #44]	; (8004fa8 <_ZN7STN111013initializeELMERKcRKa+0x88>)
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f000 fe30 	bl	8005be0 <_ZN7STN111011sendCommandEPKc>
	delay(100);
 8004f80:	2064      	movs	r0, #100	; 0x64
 8004f82:	f001 fc67 	bl	8006854 <HAL_Delay>
//		printf("Setting protocol via ");
//		printf("%s", SET_PROTOCOL_TO_H_SAVE);
//		printf(" did not work\r\n");
//	} // 지움

	connected = true;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	711a      	strb	r2, [r3, #4]
	return connected;
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	791b      	ldrb	r3, [r3, #4]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3720      	adds	r7, #32
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	08013078 	.word	0x08013078
 8004f9c:	08013368 	.word	0x08013368
 8004fa0:	080130a8 	.word	0x080130a8
 8004fa4:	080132a8 	.word	0x080132a8
 8004fa8:	08012fa0 	.word	0x08012fa0

08004fac <_ZN7STN111016formatQueryArrayEht>:
 Return:
 -------
  * void
*/
void STN1110::formatQueryArray(uint8_t service, uint16_t pid)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b082      	sub	sp, #8
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	70fb      	strb	r3, [r7, #3]
 8004fb8:	4613      	mov	r3, r2
 8004fba:	803b      	strh	r3, [r7, #0]
	if (debugMode)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	795b      	ldrb	r3, [r3, #5]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00f      	beq.n	8004fe4 <_ZN7STN111016formatQueryArrayEht+0x38>
	{
		printf("Service: ");
 8004fc4:	4850      	ldr	r0, [pc, #320]	; (8005108 <_ZN7STN111016formatQueryArrayEht+0x15c>)
 8004fc6:	f009 fba3 	bl	800e710 <iprintf>
		printf("%u\r\n", service);
 8004fca:	78fb      	ldrb	r3, [r7, #3]
 8004fcc:	4619      	mov	r1, r3
 8004fce:	484f      	ldr	r0, [pc, #316]	; (800510c <_ZN7STN111016formatQueryArrayEht+0x160>)
 8004fd0:	f009 fb9e 	bl	800e710 <iprintf>
		printf("PID: ");
 8004fd4:	484e      	ldr	r0, [pc, #312]	; (8005110 <_ZN7STN111016formatQueryArrayEht+0x164>)
 8004fd6:	f009 fb9b 	bl	800e710 <iprintf>
		printf("%u\r\n", pid);
 8004fda:	883b      	ldrh	r3, [r7, #0]
 8004fdc:	4619      	mov	r1, r3
 8004fde:	484b      	ldr	r0, [pc, #300]	; (800510c <_ZN7STN111016formatQueryArrayEht+0x160>)
 8004fe0:	f009 fb96 	bl	800e710 <iprintf>
	}

	query[0] = ((service >> 4) & 0xF) + '0';
 8004fe4:	78fb      	ldrb	r3, [r7, #3]
 8004fe6:	091b      	lsrs	r3, r3, #4
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	3330      	adds	r3, #48	; 0x30
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
	query[1] = (service & 0xF) + '0';
 8004ff4:	78fb      	ldrb	r3, [r7, #3]
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	3330      	adds	r3, #48	; 0x30
 8004ffe:	b2da      	uxtb	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

	// determine PID length (standard queries have 16-bit PIDs,
	// but some custom queries have PIDs with 32-bit values)
	if (pid & 0xFF00)
 8005006:	883b      	ldrh	r3, [r7, #0]
 8005008:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800500c:	2b00      	cmp	r3, #0
 800500e:	d03b      	beq.n	8005088 <_ZN7STN111016formatQueryArrayEht+0xdc>
	{
		if (debugMode)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	795b      	ldrb	r3, [r3, #5]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <_ZN7STN111016formatQueryArrayEht+0x72>
			printf("Long query detected\r\n");
 8005018:	483e      	ldr	r0, [pc, #248]	; (8005114 <_ZN7STN111016formatQueryArrayEht+0x168>)
 800501a:	f009 fbff 	bl	800e81c <puts>

		longQuery = true;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

		query[2] = ((pid >> 12) & 0xF) + '0';
 8005026:	883b      	ldrh	r3, [r7, #0]
 8005028:	0b1b      	lsrs	r3, r3, #12
 800502a:	b29b      	uxth	r3, r3
 800502c:	b2db      	uxtb	r3, r3
 800502e:	3330      	adds	r3, #48	; 0x30
 8005030:	b2da      	uxtb	r2, r3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		query[3] = ((pid >> 8) & 0xF) + '0';
 8005038:	883b      	ldrh	r3, [r7, #0]
 800503a:	121b      	asrs	r3, r3, #8
 800503c:	b2db      	uxtb	r3, r3
 800503e:	f003 030f 	and.w	r3, r3, #15
 8005042:	b2db      	uxtb	r3, r3
 8005044:	3330      	adds	r3, #48	; 0x30
 8005046:	b2da      	uxtb	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		query[4] = ((pid >> 4) & 0xF) + '0';
 800504e:	883b      	ldrh	r3, [r7, #0]
 8005050:	111b      	asrs	r3, r3, #4
 8005052:	b2db      	uxtb	r3, r3
 8005054:	f003 030f 	and.w	r3, r3, #15
 8005058:	b2db      	uxtb	r3, r3
 800505a:	3330      	adds	r3, #48	; 0x30
 800505c:	b2da      	uxtb	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		query[5] = (pid & 0xF) + '0';
 8005064:	883b      	ldrh	r3, [r7, #0]
 8005066:	b2db      	uxtb	r3, r3
 8005068:	f003 030f 	and.w	r3, r3, #15
 800506c:	b2db      	uxtb	r3, r3
 800506e:	3330      	adds	r3, #48	; 0x30
 8005070:	b2da      	uxtb	r2, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

		upper(query, 6);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3326      	adds	r3, #38	; 0x26
 800507c:	2206      	movs	r2, #6
 800507e:	4619      	mov	r1, r3
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 f84f 	bl	8005124 <_ZN7STN11105upperEPch>
 8005086:	e02e      	b.n	80050e6 <_ZN7STN111016formatQueryArrayEht+0x13a>
	}
	else
	{
		if (debugMode)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	795b      	ldrb	r3, [r3, #5]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d002      	beq.n	8005096 <_ZN7STN111016formatQueryArrayEht+0xea>
			printf("Normal length query detected\r\n");
 8005090:	4821      	ldr	r0, [pc, #132]	; (8005118 <_ZN7STN111016formatQueryArrayEht+0x16c>)
 8005092:	f009 fbc3 	bl	800e81c <puts>

		longQuery = false;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2200      	movs	r2, #0
 800509a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

		query[2] = ((pid >> 4) & 0xF) + '0';
 800509e:	883b      	ldrh	r3, [r7, #0]
 80050a0:	111b      	asrs	r3, r3, #4
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	f003 030f 	and.w	r3, r3, #15
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	3330      	adds	r3, #48	; 0x30
 80050ac:	b2da      	uxtb	r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		query[3] = (pid & 0xF) + '0';
 80050b4:	883b      	ldrh	r3, [r7, #0]
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	f003 030f 	and.w	r3, r3, #15
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	3330      	adds	r3, #48	; 0x30
 80050c0:	b2da      	uxtb	r2, r3
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
		query[4] = '\0';
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
		query[5] = '\0';
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

		upper(query, 4);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	3326      	adds	r3, #38	; 0x26
 80050dc:	2204      	movs	r2, #4
 80050de:	4619      	mov	r1, r3
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 f81f 	bl	8005124 <_ZN7STN11105upperEPch>
	}

	if (debugMode)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	795b      	ldrb	r3, [r3, #5]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d008      	beq.n	8005100 <_ZN7STN111016formatQueryArrayEht+0x154>
	{
		printf("Query string: ");
 80050ee:	480b      	ldr	r0, [pc, #44]	; (800511c <_ZN7STN111016formatQueryArrayEht+0x170>)
 80050f0:	f009 fb0e 	bl	800e710 <iprintf>
		printf("%s\r\n", query);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3326      	adds	r3, #38	; 0x26
 80050f8:	4619      	mov	r1, r3
 80050fa:	4809      	ldr	r0, [pc, #36]	; (8005120 <_ZN7STN111016formatQueryArrayEht+0x174>)
 80050fc:	f009 fb08 	bl	800e710 <iprintf>
	}
}
 8005100:	bf00      	nop
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	080133a4 	.word	0x080133a4
 800510c:	080133b0 	.word	0x080133b0
 8005110:	080133b8 	.word	0x080133b8
 8005114:	080133c0 	.word	0x080133c0
 8005118:	080133d8 	.word	0x080133d8
 800511c:	080133f8 	.word	0x080133f8
 8005120:	08013408 	.word	0x08013408

08005124 <_ZN7STN11105upperEPch>:
 Return:
 -------
  * void
*/
void STN1110::upper(char string[], uint8_t buflen)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	4613      	mov	r3, r2
 8005130:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < buflen; i++)
 8005132:	2300      	movs	r3, #0
 8005134:	75fb      	strb	r3, [r7, #23]
 8005136:	7dfa      	ldrb	r2, [r7, #23]
 8005138:	79fb      	ldrb	r3, [r7, #7]
 800513a:	429a      	cmp	r2, r3
 800513c:	d22a      	bcs.n	8005194 <_ZN7STN11105upperEPch+0x70>
	{
		if (string[i] > 'Z')
 800513e:	7dfb      	ldrb	r3, [r7, #23]
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	4413      	add	r3, r2
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	2b5a      	cmp	r3, #90	; 0x5a
 8005148:	d90a      	bls.n	8005160 <_ZN7STN11105upperEPch+0x3c>
			string[i] -= 32;
 800514a:	7dfb      	ldrb	r3, [r7, #23]
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	4413      	add	r3, r2
 8005150:	781a      	ldrb	r2, [r3, #0]
 8005152:	7dfb      	ldrb	r3, [r7, #23]
 8005154:	68b9      	ldr	r1, [r7, #8]
 8005156:	440b      	add	r3, r1
 8005158:	3a20      	subs	r2, #32
 800515a:	b2d2      	uxtb	r2, r2
 800515c:	701a      	strb	r2, [r3, #0]
 800515e:	e015      	b.n	800518c <_ZN7STN11105upperEPch+0x68>
		else if ((string[i] > '9') && (string[i] < 'A'))
 8005160:	7dfb      	ldrb	r3, [r7, #23]
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	4413      	add	r3, r2
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	2b39      	cmp	r3, #57	; 0x39
 800516a:	d90f      	bls.n	800518c <_ZN7STN11105upperEPch+0x68>
 800516c:	7dfb      	ldrb	r3, [r7, #23]
 800516e:	68ba      	ldr	r2, [r7, #8]
 8005170:	4413      	add	r3, r2
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	2b40      	cmp	r3, #64	; 0x40
 8005176:	d809      	bhi.n	800518c <_ZN7STN11105upperEPch+0x68>
			string[i] += 7;
 8005178:	7dfb      	ldrb	r3, [r7, #23]
 800517a:	68ba      	ldr	r2, [r7, #8]
 800517c:	4413      	add	r3, r2
 800517e:	781a      	ldrb	r2, [r3, #0]
 8005180:	7dfb      	ldrb	r3, [r7, #23]
 8005182:	68b9      	ldr	r1, [r7, #8]
 8005184:	440b      	add	r3, r1
 8005186:	3207      	adds	r2, #7
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < buflen; i++)
 800518c:	7dfb      	ldrb	r3, [r7, #23]
 800518e:	3301      	adds	r3, #1
 8005190:	75fb      	strb	r3, [r7, #23]
 8005192:	e7d0      	b.n	8005136 <_ZN7STN11105upperEPch+0x12>
	}
}
 8005194:	bf00      	nop
 8005196:	371c      	adds	r7, #28
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <_ZN7STN11107timeoutEv>:
 Return:
 -------
  * bool - whether or not a time-out has occurred
*/
bool STN1110::timeout()
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
	currentTime = millis();
 80051a8:	f001 fb48 	bl	800683c <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	631a      	str	r2, [r3, #48]	; 0x30
	if ((currentTime - previousTime) >= timeout_ms)
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	687a      	ldr	r2, [r7, #4]
 80051be:	8b92      	ldrh	r2, [r2, #28]
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d301      	bcc.n	80051c8 <_ZN7STN11107timeoutEv+0x28>
		return true;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e000      	b.n	80051ca <_ZN7STN11107timeoutEv+0x2a>
	return false;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <_ZN7STN11104ctoiEh>:
 Return:
 -------
  * uint8_t - int value of parameter "value"
*/
uint8_t STN1110::ctoi(uint8_t value)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b083      	sub	sp, #12
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
 80051da:	460b      	mov	r3, r1
 80051dc:	70fb      	strb	r3, [r7, #3]
	if (value >= 'A')
 80051de:	78fb      	ldrb	r3, [r7, #3]
 80051e0:	2b40      	cmp	r3, #64	; 0x40
 80051e2:	d903      	bls.n	80051ec <_ZN7STN11104ctoiEh+0x1a>
		return value - 'A' + 10;
 80051e4:	78fb      	ldrb	r3, [r7, #3]
 80051e6:	3b37      	subs	r3, #55	; 0x37
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	e002      	b.n	80051f2 <_ZN7STN11104ctoiEh+0x20>
	else
		return value - '0';
 80051ec:	78fb      	ldrb	r3, [r7, #3]
 80051ee:	3b30      	subs	r3, #48	; 0x30
 80051f0:	b2db      	uxtb	r3, r3
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <_ZN7STN11109nextIndexEPKcS1_h>:
  numOccur'th instance of target in str
*/
int8_t STN1110::nextIndex(char const *str,
                         char const *target,
                         uint8_t numOccur=1)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b088      	sub	sp, #32
 8005202:	af00      	add	r7, sp, #0
 8005204:	60f8      	str	r0, [r7, #12]
 8005206:	60b9      	str	r1, [r7, #8]
 8005208:	607a      	str	r2, [r7, #4]
 800520a:	70fb      	strb	r3, [r7, #3]
	char const *p = str;
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	61fb      	str	r3, [r7, #28]
	char const *r = str;
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	617b      	str	r3, [r7, #20]
	uint8_t count;

	for (count = 0; ; ++count)
 8005214:	2300      	movs	r3, #0
 8005216:	76fb      	strb	r3, [r7, #27]
	{
		p = strstr(p, target);
 8005218:	6879      	ldr	r1, [r7, #4]
 800521a:	69f8      	ldr	r0, [r7, #28]
 800521c:	f009 fb3c 	bl	800e898 <strstr>
 8005220:	61f8      	str	r0, [r7, #28]

		if (count == (numOccur - 1))
 8005222:	7efa      	ldrb	r2, [r7, #27]
 8005224:	78fb      	ldrb	r3, [r7, #3]
 8005226:	3b01      	subs	r3, #1
 8005228:	429a      	cmp	r2, r3
 800522a:	d009      	beq.n	8005240 <_ZN7STN11109nextIndexEPKcS1_h+0x42>
			break;

		if (!p)
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d008      	beq.n	8005244 <_ZN7STN11109nextIndexEPKcS1_h+0x46>
			break;

		p++;
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	3301      	adds	r3, #1
 8005236:	61fb      	str	r3, [r7, #28]
	for (count = 0; ; ++count)
 8005238:	7efb      	ldrb	r3, [r7, #27]
 800523a:	3301      	adds	r3, #1
 800523c:	76fb      	strb	r3, [r7, #27]
		p = strstr(p, target);
 800523e:	e7eb      	b.n	8005218 <_ZN7STN11109nextIndexEPKcS1_h+0x1a>
			break;
 8005240:	bf00      	nop
 8005242:	e000      	b.n	8005246 <_ZN7STN11109nextIndexEPKcS1_h+0x48>
			break;
 8005244:	bf00      	nop
	}

	if (!p)
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d102      	bne.n	8005252 <_ZN7STN11109nextIndexEPKcS1_h+0x54>
		return -1;
 800524c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005250:	e003      	b.n	800525a <_ZN7STN11109nextIndexEPKcS1_h+0x5c>

	return p - r;
 8005252:	69fa      	ldr	r2, [r7, #28]
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	b25b      	sxtb	r3, r3
}
 800525a:	4618      	mov	r0, r3
 800525c:	3720      	adds	r7, #32
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}

08005262 <_ZN7STN111017conditionResponseERKyRKhRKfS5_>:




float STN1110::conditionResponse(const uint64_t& response, const uint8_t& numExpectedBytes, const float& scaleFactor, const float& bias)
{
 8005262:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005264:	b085      	sub	sp, #20
 8005266:	af00      	add	r7, sp, #0
 8005268:	60f8      	str	r0, [r7, #12]
 800526a:	60b9      	str	r1, [r7, #8]
 800526c:	607a      	str	r2, [r7, #4]
 800526e:	603b      	str	r3, [r7, #0]
	return ((response >> (((numPayChars / 2) - numExpectedBytes) * 8)) * scaleFactor) + bias;
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005276:	68f9      	ldr	r1, [r7, #12]
 8005278:	7e89      	ldrb	r1, [r1, #26]
 800527a:	0849      	lsrs	r1, r1, #1
 800527c:	b2c9      	uxtb	r1, r1
 800527e:	4608      	mov	r0, r1
 8005280:	6879      	ldr	r1, [r7, #4]
 8005282:	7809      	ldrb	r1, [r1, #0]
 8005284:	1a41      	subs	r1, r0, r1
 8005286:	00c9      	lsls	r1, r1, #3
 8005288:	f1c1 0620 	rsb	r6, r1, #32
 800528c:	f1a1 0020 	sub.w	r0, r1, #32
 8005290:	fa22 f401 	lsr.w	r4, r2, r1
 8005294:	fa03 f606 	lsl.w	r6, r3, r6
 8005298:	4334      	orrs	r4, r6
 800529a:	fa23 f000 	lsr.w	r0, r3, r0
 800529e:	4304      	orrs	r4, r0
 80052a0:	fa23 f501 	lsr.w	r5, r3, r1
 80052a4:	4620      	mov	r0, r4
 80052a6:	4629      	mov	r1, r5
 80052a8:	f7fb fdbe 	bl	8000e28 <__aeabi_ul2f>
 80052ac:	ee07 0a10 	vmov	s14, r0
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	edd3 7a00 	vldr	s15, [r3]
 80052b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80052ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052bc:	edd3 7a00 	vldr	s15, [r3]
 80052c0:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80052c4:	eeb0 0a67 	vmov.f32	s0, s15
 80052c8:	3714      	adds	r7, #20
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080052d0 <_ZN7STN111014flushInputBuffEv>:
 Return:
 -------
  * void
*/
void STN1110::flushInputBuff()
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
    unsigned char ch;
	if (debugMode)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	795b      	ldrb	r3, [r3, #5]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d002      	beq.n	80052e6 <_ZN7STN111014flushInputBuffEv+0x16>
		printf("Clearing input serial Ring buffer\r\n");
 80052e0:	480a      	ldr	r0, [pc, #40]	; (800530c <_ZN7STN111014flushInputBuffEv+0x3c>)
 80052e2:	f009 fa9b 	bl	800e81c <puts>

    while (IsDataAvailable2())
 80052e6:	f7fc f9b7 	bl	8001658 <IsDataAvailable2>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	bf14      	ite	ne
 80052f0:	2301      	movne	r3, #1
 80052f2:	2300      	moveq	r3, #0
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d004      	beq.n	8005304 <_ZN7STN111014flushInputBuffEv+0x34>
    {
        ch = Uart_read2();
 80052fa:	f7fc f945 	bl	8001588 <Uart_read2>
 80052fe:	4603      	mov	r3, r0
 8005300:	73fb      	strb	r3, [r7, #15]
    while (IsDataAvailable2())
 8005302:	e7f0      	b.n	80052e6 <_ZN7STN111014flushInputBuffEv+0x16>
    }
    // sekim 20200514 Remove Warning
}
 8005304:	bf00      	nop
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	08013410 	.word	0x08013410

08005310 <_ZN7STN11108queryPIDEht>:
 -------
  * bool - Whether or not the query was submitted successfully
*/
bool STN1110::queryPID(uint8_t service,
                      uint16_t pid)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	460b      	mov	r3, r1
 800531a:	70fb      	strb	r3, [r7, #3]
 800531c:	4613      	mov	r3, r2
 800531e:	803b      	strh	r3, [r7, #0]
	formatQueryArray(service, pid);
 8005320:	883a      	ldrh	r2, [r7, #0]
 8005322:	78fb      	ldrb	r3, [r7, #3]
 8005324:	4619      	mov	r1, r3
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7ff fe40 	bl	8004fac <_ZN7STN111016formatQueryArrayEht>
	sendCommand(query);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	3326      	adds	r3, #38	; 0x26
 8005330:	4619      	mov	r1, r3
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fc54 	bl	8005be0 <_ZN7STN111011sendCommandEPKc>
	
	return connected;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	791b      	ldrb	r3, [r3, #4]
}
 800533c:	4618      	mov	r0, r3
 800533e:	3708      	adds	r7, #8
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <_ZN7STN111010engineLoadEv>:
 Return:
 -------
  * float - Engine load %
*/
float STN1110::engineLoad()
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b08a      	sub	sp, #40	; 0x28
 8005348:	af02      	add	r7, sp, #8
 800534a:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, ENGINE_LOAD))
 800534c:	2204      	movs	r2, #4
 800534e:	2101      	movs	r1, #1
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f7ff ffdd 	bl	8005310 <_ZN7STN11108queryPIDEht>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d01d      	beq.n	8005398 <_ZN7STN111010engineLoadEv+0x54>
		return conditionResponse(findResponse(), 1, 100.0 / 255.0);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 fe05 	bl	8005f6c <_ZN7STN111012findResponseEv>
 8005362:	4602      	mov	r2, r0
 8005364:	460b      	mov	r3, r1
 8005366:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800536a:	2301      	movs	r3, #1
 800536c:	75fb      	strb	r3, [r7, #23]
 800536e:	4b0e      	ldr	r3, [pc, #56]	; (80053a8 <_ZN7STN111010engineLoadEv+0x64>)
 8005370:	61bb      	str	r3, [r7, #24]
 8005372:	f04f 0300 	mov.w	r3, #0
 8005376:	61fb      	str	r3, [r7, #28]
 8005378:	f107 0018 	add.w	r0, r7, #24
 800537c:	f107 0217 	add.w	r2, r7, #23
 8005380:	f107 0108 	add.w	r1, r7, #8
 8005384:	f107 031c 	add.w	r3, r7, #28
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	4603      	mov	r3, r0
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f7ff ff68 	bl	8005262 <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 8005392:	eef0 7a40 	vmov.f32	s15, s0
 8005396:	e001      	b.n	800539c <_ZN7STN111010engineLoadEv+0x58>

	return ELM_GENERAL_ERROR;
 8005398:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 800539c:	eeb0 0a67 	vmov.f32	s0, s15
 80053a0:	3720      	adds	r7, #32
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	3ec8c8c9 	.word	0x3ec8c8c9

080053ac <_ZN7STN111017engineCoolantTempEv>:
 Return:
 -------
  * float - Engine load %
*/
float STN1110::engineCoolantTemp()
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b08a      	sub	sp, #40	; 0x28
 80053b0:	af02      	add	r7, sp, #8
 80053b2:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, ENGINE_COOLANT_TEMP))
 80053b4:	2205      	movs	r2, #5
 80053b6:	2101      	movs	r1, #1
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7ff ffa9 	bl	8005310 <_ZN7STN11108queryPIDEht>
 80053be:	4603      	mov	r3, r0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d01d      	beq.n	8005400 <_ZN7STN111017engineCoolantTempEv+0x54>
		return conditionResponse(findResponse(), 1, 1, -40.0);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 fdd1 	bl	8005f6c <_ZN7STN111012findResponseEv>
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80053d2:	2301      	movs	r3, #1
 80053d4:	75fb      	strb	r3, [r7, #23]
 80053d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80053da:	61bb      	str	r3, [r7, #24]
 80053dc:	4b0c      	ldr	r3, [pc, #48]	; (8005410 <_ZN7STN111017engineCoolantTempEv+0x64>)
 80053de:	61fb      	str	r3, [r7, #28]
 80053e0:	f107 0018 	add.w	r0, r7, #24
 80053e4:	f107 0217 	add.w	r2, r7, #23
 80053e8:	f107 0108 	add.w	r1, r7, #8
 80053ec:	f107 031c 	add.w	r3, r7, #28
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	4603      	mov	r3, r0
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f7ff ff34 	bl	8005262 <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 80053fa:	eef0 7a40 	vmov.f32	s15, s0
 80053fe:	e001      	b.n	8005404 <_ZN7STN111017engineCoolantTempEv+0x58>

	return ELM_GENERAL_ERROR;
 8005400:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 8005404:	eeb0 0a67 	vmov.f32	s0, s15
 8005408:	3720      	adds	r7, #32
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	c2200000 	.word	0xc2200000

08005414 <_ZN7STN111016manifoldPressureEv>:
 Return:
 -------
  * uint8_t - Intake manifold absolute pressure in kPa
*/
uint8_t STN1110::manifoldPressure()
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b08a      	sub	sp, #40	; 0x28
 8005418:	af02      	add	r7, sp, #8
 800541a:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, INTAKE_MANIFOLD_ABS_PRESSURE))
 800541c:	220b      	movs	r2, #11
 800541e:	2101      	movs	r1, #1
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f7ff ff75 	bl	8005310 <_ZN7STN11108queryPIDEht>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d024      	beq.n	8005476 <_ZN7STN111016manifoldPressureEv+0x62>
		return conditionResponse(findResponse(), 1);
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	f000 fd9d 	bl	8005f6c <_ZN7STN111012findResponseEv>
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800543a:	2301      	movs	r3, #1
 800543c:	75fb      	strb	r3, [r7, #23]
 800543e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005442:	61bb      	str	r3, [r7, #24]
 8005444:	f04f 0300 	mov.w	r3, #0
 8005448:	61fb      	str	r3, [r7, #28]
 800544a:	f107 0018 	add.w	r0, r7, #24
 800544e:	f107 0217 	add.w	r2, r7, #23
 8005452:	f107 0108 	add.w	r1, r7, #8
 8005456:	f107 031c 	add.w	r3, r7, #28
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	4603      	mov	r3, r0
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7ff feff 	bl	8005262 <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 8005464:	eef0 7a40 	vmov.f32	s15, s0
 8005468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800546c:	edc7 7a00 	vstr	s15, [r7]
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	b2db      	uxtb	r3, r3
 8005474:	e000      	b.n	8005478 <_ZN7STN111016manifoldPressureEv+0x64>

	return ELM_GENERAL_ERROR;
 8005476:	23ff      	movs	r3, #255	; 0xff
}
 8005478:	4618      	mov	r0, r3
 800547a:	3720      	adds	r7, #32
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <_ZN7STN11103rpmEv>:
 Return:
 -------
  * float - Vehicle RPM
*/
float STN1110::rpm()
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b08a      	sub	sp, #40	; 0x28
 8005484:	af02      	add	r7, sp, #8
 8005486:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, ENGINE_RPM))
 8005488:	220c      	movs	r2, #12
 800548a:	2101      	movs	r1, #1
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f7ff ff3f 	bl	8005310 <_ZN7STN11108queryPIDEht>
 8005492:	4603      	mov	r3, r0
 8005494:	2b00      	cmp	r3, #0
 8005496:	d01e      	beq.n	80054d6 <_ZN7STN11103rpmEv+0x56>
		return conditionResponse(findResponse(), 2, 1.0 / 4.0);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 fd67 	bl	8005f6c <_ZN7STN111012findResponseEv>
 800549e:	4602      	mov	r2, r0
 80054a0:	460b      	mov	r3, r1
 80054a2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80054a6:	2302      	movs	r3, #2
 80054a8:	75fb      	strb	r3, [r7, #23]
 80054aa:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 80054ae:	61bb      	str	r3, [r7, #24]
 80054b0:	f04f 0300 	mov.w	r3, #0
 80054b4:	61fb      	str	r3, [r7, #28]
 80054b6:	f107 0018 	add.w	r0, r7, #24
 80054ba:	f107 0217 	add.w	r2, r7, #23
 80054be:	f107 0108 	add.w	r1, r7, #8
 80054c2:	f107 031c 	add.w	r3, r7, #28
 80054c6:	9300      	str	r3, [sp, #0]
 80054c8:	4603      	mov	r3, r0
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7ff fec9 	bl	8005262 <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 80054d0:	eef0 7a40 	vmov.f32	s15, s0
 80054d4:	e001      	b.n	80054da <_ZN7STN11103rpmEv+0x5a>

	return ELM_GENERAL_ERROR;
 80054d6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 80054da:	eeb0 0a67 	vmov.f32	s0, s15
 80054de:	3720      	adds	r7, #32
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <_ZN7STN11103kphEv>:
 Return:
 -------
  * int32_t - Vehicle speed in kph
*/
int32_t STN1110::kph()
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b08a      	sub	sp, #40	; 0x28
 80054e8:	af02      	add	r7, sp, #8
 80054ea:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, VEHICLE_SPEED))
 80054ec:	220d      	movs	r2, #13
 80054ee:	2101      	movs	r1, #1
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f7ff ff0d 	bl	8005310 <_ZN7STN11108queryPIDEht>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d022      	beq.n	8005542 <_ZN7STN11103kphEv+0x5e>
		return conditionResponse(findResponse(), 1);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 fd35 	bl	8005f6c <_ZN7STN111012findResponseEv>
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800550a:	2301      	movs	r3, #1
 800550c:	75fb      	strb	r3, [r7, #23]
 800550e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005512:	61bb      	str	r3, [r7, #24]
 8005514:	f04f 0300 	mov.w	r3, #0
 8005518:	61fb      	str	r3, [r7, #28]
 800551a:	f107 0018 	add.w	r0, r7, #24
 800551e:	f107 0217 	add.w	r2, r7, #23
 8005522:	f107 0108 	add.w	r1, r7, #8
 8005526:	f107 031c 	add.w	r3, r7, #28
 800552a:	9300      	str	r3, [sp, #0]
 800552c:	4603      	mov	r3, r0
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7ff fe97 	bl	8005262 <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 8005534:	eef0 7a40 	vmov.f32	s15, s0
 8005538:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800553c:	ee17 3a90 	vmov	r3, s15
 8005540:	e001      	b.n	8005546 <_ZN7STN11103kphEv+0x62>

	return ELM_GENERAL_ERROR;
 8005542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005546:	4618      	mov	r0, r3
 8005548:	3720      	adds	r7, #32
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
	...

08005550 <_ZN7STN111013intakeAirTempEv>:
 Return:
 -------
  * float - Intake air temperature in C
*/
float STN1110::intakeAirTemp()
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b08a      	sub	sp, #40	; 0x28
 8005554:	af02      	add	r7, sp, #8
 8005556:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, INTAKE_AIR_TEMP))
 8005558:	220f      	movs	r2, #15
 800555a:	2101      	movs	r1, #1
 800555c:	6878      	ldr	r0, [r7, #4]
 800555e:	f7ff fed7 	bl	8005310 <_ZN7STN11108queryPIDEht>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d01d      	beq.n	80055a4 <_ZN7STN111013intakeAirTempEv+0x54>
		return conditionResponse(findResponse(), 1, 1, -40.0);
 8005568:	6878      	ldr	r0, [r7, #4]
 800556a:	f000 fcff 	bl	8005f6c <_ZN7STN111012findResponseEv>
 800556e:	4602      	mov	r2, r0
 8005570:	460b      	mov	r3, r1
 8005572:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8005576:	2301      	movs	r3, #1
 8005578:	75fb      	strb	r3, [r7, #23]
 800557a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800557e:	61bb      	str	r3, [r7, #24]
 8005580:	4b0c      	ldr	r3, [pc, #48]	; (80055b4 <_ZN7STN111013intakeAirTempEv+0x64>)
 8005582:	61fb      	str	r3, [r7, #28]
 8005584:	f107 0018 	add.w	r0, r7, #24
 8005588:	f107 0217 	add.w	r2, r7, #23
 800558c:	f107 0108 	add.w	r1, r7, #8
 8005590:	f107 031c 	add.w	r3, r7, #28
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	4603      	mov	r3, r0
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f7ff fe62 	bl	8005262 <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 800559e:	eef0 7a40 	vmov.f32	s15, s0
 80055a2:	e001      	b.n	80055a8 <_ZN7STN111013intakeAirTempEv+0x58>

	return ELM_GENERAL_ERROR;
 80055a4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 80055a8:	eeb0 0a67 	vmov.f32	s0, s15
 80055ac:	3720      	adds	r7, #32
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	c2200000 	.word	0xc2200000

080055b8 <_ZN7STN11107mafRateEv>:
 Return:
 -------
  * float - Mass air flow sensor (MAF) air flow rate rate in g/s
*/
float STN1110::mafRate()
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08a      	sub	sp, #40	; 0x28
 80055bc:	af02      	add	r7, sp, #8
 80055be:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, MAF_FLOW_RATE))
 80055c0:	2210      	movs	r2, #16
 80055c2:	2101      	movs	r1, #1
 80055c4:	6878      	ldr	r0, [r7, #4]
 80055c6:	f7ff fea3 	bl	8005310 <_ZN7STN11108queryPIDEht>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d01d      	beq.n	800560c <_ZN7STN11107mafRateEv+0x54>
		return conditionResponse(findResponse(), 2, 1.0 / 100.0);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 fccb 	bl	8005f6c <_ZN7STN111012findResponseEv>
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80055de:	2302      	movs	r3, #2
 80055e0:	75fb      	strb	r3, [r7, #23]
 80055e2:	4b0e      	ldr	r3, [pc, #56]	; (800561c <_ZN7STN11107mafRateEv+0x64>)
 80055e4:	61bb      	str	r3, [r7, #24]
 80055e6:	f04f 0300 	mov.w	r3, #0
 80055ea:	61fb      	str	r3, [r7, #28]
 80055ec:	f107 0018 	add.w	r0, r7, #24
 80055f0:	f107 0217 	add.w	r2, r7, #23
 80055f4:	f107 0108 	add.w	r1, r7, #8
 80055f8:	f107 031c 	add.w	r3, r7, #28
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	4603      	mov	r3, r0
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7ff fe2e 	bl	8005262 <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 8005606:	eef0 7a40 	vmov.f32	s15, s0
 800560a:	e001      	b.n	8005610 <_ZN7STN11107mafRateEv+0x58>

	return ELM_GENERAL_ERROR;
 800560c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 8005610:	eeb0 0a67 	vmov.f32	s0, s15
 8005614:	3720      	adds	r7, #32
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	3c23d70a 	.word	0x3c23d70a

08005620 <_ZN7STN11108throttleEv>:
 Return:
 -------
  * float - Throttle position in %
*/
float STN1110::throttle()
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b08a      	sub	sp, #40	; 0x28
 8005624:	af02      	add	r7, sp, #8
 8005626:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, THROTTLE_POSITION))
 8005628:	2211      	movs	r2, #17
 800562a:	2101      	movs	r1, #1
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f7ff fe6f 	bl	8005310 <_ZN7STN11108queryPIDEht>
 8005632:	4603      	mov	r3, r0
 8005634:	2b00      	cmp	r3, #0
 8005636:	d01d      	beq.n	8005674 <_ZN7STN11108throttleEv+0x54>
		return conditionResponse(findResponse(), 1, 100.0 / 255.0);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 fc97 	bl	8005f6c <_ZN7STN111012findResponseEv>
 800563e:	4602      	mov	r2, r0
 8005640:	460b      	mov	r3, r1
 8005642:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8005646:	2301      	movs	r3, #1
 8005648:	75fb      	strb	r3, [r7, #23]
 800564a:	4b0e      	ldr	r3, [pc, #56]	; (8005684 <_ZN7STN11108throttleEv+0x64>)
 800564c:	61bb      	str	r3, [r7, #24]
 800564e:	f04f 0300 	mov.w	r3, #0
 8005652:	61fb      	str	r3, [r7, #28]
 8005654:	f107 0018 	add.w	r0, r7, #24
 8005658:	f107 0217 	add.w	r2, r7, #23
 800565c:	f107 0108 	add.w	r1, r7, #8
 8005660:	f107 031c 	add.w	r3, r7, #28
 8005664:	9300      	str	r3, [sp, #0]
 8005666:	4603      	mov	r3, r0
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f7ff fdfa 	bl	8005262 <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 800566e:	eef0 7a40 	vmov.f32	s15, s0
 8005672:	e001      	b.n	8005678 <_ZN7STN11108throttleEv+0x58>

	return ELM_GENERAL_ERROR;
 8005674:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 8005678:	eeb0 0a67 	vmov.f32	s0, s15
 800567c:	3720      	adds	r7, #32
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}
 8005682:	bf00      	nop
 8005684:	3ec8c8c9 	.word	0x3ec8c8c9

08005688 <_ZN7STN111012obdStandardsEv>:
 Return:
 -------
  * uint8_t - Bit encoded (https://en.wikipedia.org/wiki/OBD-II_PIDs#Service_01_PID_1C)
*/
uint8_t STN1110::obdStandards()
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b08a      	sub	sp, #40	; 0x28
 800568c:	af02      	add	r7, sp, #8
 800568e:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, OBD_STANDARDS))
 8005690:	221c      	movs	r2, #28
 8005692:	2101      	movs	r1, #1
 8005694:	6878      	ldr	r0, [r7, #4]
 8005696:	f7ff fe3b 	bl	8005310 <_ZN7STN11108queryPIDEht>
 800569a:	4603      	mov	r3, r0
 800569c:	2b00      	cmp	r3, #0
 800569e:	d024      	beq.n	80056ea <_ZN7STN111012obdStandardsEv+0x62>
		return conditionResponse(findResponse(), 1);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f000 fc63 	bl	8005f6c <_ZN7STN111012findResponseEv>
 80056a6:	4602      	mov	r2, r0
 80056a8:	460b      	mov	r3, r1
 80056aa:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80056ae:	2301      	movs	r3, #1
 80056b0:	75fb      	strb	r3, [r7, #23]
 80056b2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80056b6:	61bb      	str	r3, [r7, #24]
 80056b8:	f04f 0300 	mov.w	r3, #0
 80056bc:	61fb      	str	r3, [r7, #28]
 80056be:	f107 0018 	add.w	r0, r7, #24
 80056c2:	f107 0217 	add.w	r2, r7, #23
 80056c6:	f107 0108 	add.w	r1, r7, #8
 80056ca:	f107 031c 	add.w	r3, r7, #28
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	4603      	mov	r3, r0
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7ff fdc5 	bl	8005262 <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 80056d8:	eef0 7a40 	vmov.f32	s15, s0
 80056dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056e0:	edc7 7a00 	vstr	s15, [r7]
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	e000      	b.n	80056ec <_ZN7STN111012obdStandardsEv+0x64>

	return ELM_GENERAL_ERROR;
 80056ea:	23ff      	movs	r3, #255	; 0xff
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3720      	adds	r7, #32
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <_ZN7STN11107runTimeEv>:
 Return:
 -------
  * uint16_t - Run time since engine start in s
*/
uint16_t STN1110::runTime()
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b08a      	sub	sp, #40	; 0x28
 80056f8:	af02      	add	r7, sp, #8
 80056fa:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, RUN_TIME_SINCE_ENGINE_START))
 80056fc:	221f      	movs	r2, #31
 80056fe:	2101      	movs	r1, #1
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f7ff fe05 	bl	8005310 <_ZN7STN11108queryPIDEht>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d023      	beq.n	8005754 <_ZN7STN11107runTimeEv+0x60>
		return conditionResponse(findResponse(), 2);
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	f000 fc2d 	bl	8005f6c <_ZN7STN111012findResponseEv>
 8005712:	4602      	mov	r2, r0
 8005714:	460b      	mov	r3, r1
 8005716:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800571a:	2302      	movs	r3, #2
 800571c:	75fb      	strb	r3, [r7, #23]
 800571e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005722:	61bb      	str	r3, [r7, #24]
 8005724:	f04f 0300 	mov.w	r3, #0
 8005728:	61fb      	str	r3, [r7, #28]
 800572a:	f107 0018 	add.w	r0, r7, #24
 800572e:	f107 0217 	add.w	r2, r7, #23
 8005732:	f107 0108 	add.w	r1, r7, #8
 8005736:	f107 031c 	add.w	r3, r7, #28
 800573a:	9300      	str	r3, [sp, #0]
 800573c:	4603      	mov	r3, r0
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7ff fd8f 	bl	8005262 <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 8005744:	eef0 7a40 	vmov.f32	s15, s0
 8005748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800574c:	ee17 3a90 	vmov	r3, s15
 8005750:	b29b      	uxth	r3, r3
 8005752:	e001      	b.n	8005758 <_ZN7STN11107runTimeEv+0x64>

	return ELM_GENERAL_ERROR;
 8005754:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8005758:	4618      	mov	r0, r3
 800575a:	3720      	adds	r7, #32
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <_ZN7STN111017distTravelWithMILEv>:
 Return:
 -------
  * uint16_t - Distance traveled with malfunction indicator lamp (MIL) on in km
*/
uint16_t STN1110::distTravelWithMIL()
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b08a      	sub	sp, #40	; 0x28
 8005764:	af02      	add	r7, sp, #8
 8005766:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, DISTANCE_TRAVELED_WITH_MIL_ON))
 8005768:	2221      	movs	r2, #33	; 0x21
 800576a:	2101      	movs	r1, #1
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7ff fdcf 	bl	8005310 <_ZN7STN11108queryPIDEht>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d023      	beq.n	80057c0 <_ZN7STN111017distTravelWithMILEv+0x60>
		return conditionResponse(findResponse(), 2);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 fbf7 	bl	8005f6c <_ZN7STN111012findResponseEv>
 800577e:	4602      	mov	r2, r0
 8005780:	460b      	mov	r3, r1
 8005782:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8005786:	2302      	movs	r3, #2
 8005788:	75fb      	strb	r3, [r7, #23]
 800578a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800578e:	61bb      	str	r3, [r7, #24]
 8005790:	f04f 0300 	mov.w	r3, #0
 8005794:	61fb      	str	r3, [r7, #28]
 8005796:	f107 0018 	add.w	r0, r7, #24
 800579a:	f107 0217 	add.w	r2, r7, #23
 800579e:	f107 0108 	add.w	r1, r7, #8
 80057a2:	f107 031c 	add.w	r3, r7, #28
 80057a6:	9300      	str	r3, [sp, #0]
 80057a8:	4603      	mov	r3, r0
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7ff fd59 	bl	8005262 <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 80057b0:	eef0 7a40 	vmov.f32	s15, s0
 80057b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057b8:	ee17 3a90 	vmov	r3, s15
 80057bc:	b29b      	uxth	r3, r3
 80057be:	e001      	b.n	80057c4 <_ZN7STN111017distTravelWithMILEv+0x64>

	return ELM_GENERAL_ERROR;
 80057c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	3720      	adds	r7, #32
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}

080057cc <_ZN7STN11109fuelLevelEv>:
 Return:
 -------
  * float - Fuel tank level input in %
*/
float STN1110::fuelLevel()
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b08a      	sub	sp, #40	; 0x28
 80057d0:	af02      	add	r7, sp, #8
 80057d2:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, FUEL_TANK_LEVEL_INPUT))
 80057d4:	222f      	movs	r2, #47	; 0x2f
 80057d6:	2101      	movs	r1, #1
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f7ff fd99 	bl	8005310 <_ZN7STN11108queryPIDEht>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d01d      	beq.n	8005820 <_ZN7STN11109fuelLevelEv+0x54>
		return conditionResponse(findResponse(), 1, 100.0 / 255.0);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fbc1 	bl	8005f6c <_ZN7STN111012findResponseEv>
 80057ea:	4602      	mov	r2, r0
 80057ec:	460b      	mov	r3, r1
 80057ee:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80057f2:	2301      	movs	r3, #1
 80057f4:	75fb      	strb	r3, [r7, #23]
 80057f6:	4b0e      	ldr	r3, [pc, #56]	; (8005830 <_ZN7STN11109fuelLevelEv+0x64>)
 80057f8:	61bb      	str	r3, [r7, #24]
 80057fa:	f04f 0300 	mov.w	r3, #0
 80057fe:	61fb      	str	r3, [r7, #28]
 8005800:	f107 0018 	add.w	r0, r7, #24
 8005804:	f107 0217 	add.w	r2, r7, #23
 8005808:	f107 0108 	add.w	r1, r7, #8
 800580c:	f107 031c 	add.w	r3, r7, #28
 8005810:	9300      	str	r3, [sp, #0]
 8005812:	4603      	mov	r3, r0
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f7ff fd24 	bl	8005262 <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 800581a:	eef0 7a40 	vmov.f32	s15, s0
 800581e:	e001      	b.n	8005824 <_ZN7STN11109fuelLevelEv+0x58>

	return ELM_GENERAL_ERROR;
 8005820:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 8005824:	eeb0 0a67 	vmov.f32	s0, s15
 8005828:	3720      	adds	r7, #32
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	3ec8c8c9 	.word	0x3ec8c8c9

08005834 <_ZN7STN111021distSinceCodesClearedEv>:
 Return:
 -------
  * uint16_t - Distance traveled since codes cleared in km
*/
uint16_t STN1110::distSinceCodesCleared()
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b08a      	sub	sp, #40	; 0x28
 8005838:	af02      	add	r7, sp, #8
 800583a:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, DIST_TRAV_SINCE_CODES_CLEARED))
 800583c:	2231      	movs	r2, #49	; 0x31
 800583e:	2101      	movs	r1, #1
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7ff fd65 	bl	8005310 <_ZN7STN11108queryPIDEht>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d023      	beq.n	8005894 <_ZN7STN111021distSinceCodesClearedEv+0x60>
		return conditionResponse(findResponse(), 2);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 fb8d 	bl	8005f6c <_ZN7STN111012findResponseEv>
 8005852:	4602      	mov	r2, r0
 8005854:	460b      	mov	r3, r1
 8005856:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800585a:	2302      	movs	r3, #2
 800585c:	75fb      	strb	r3, [r7, #23]
 800585e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005862:	61bb      	str	r3, [r7, #24]
 8005864:	f04f 0300 	mov.w	r3, #0
 8005868:	61fb      	str	r3, [r7, #28]
 800586a:	f107 0018 	add.w	r0, r7, #24
 800586e:	f107 0217 	add.w	r2, r7, #23
 8005872:	f107 0108 	add.w	r1, r7, #8
 8005876:	f107 031c 	add.w	r3, r7, #28
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	4603      	mov	r3, r0
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7ff fcef 	bl	8005262 <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 8005884:	eef0 7a40 	vmov.f32	s15, s0
 8005888:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800588c:	ee17 3a90 	vmov	r3, s15
 8005890:	b29b      	uxth	r3, r3
 8005892:	e001      	b.n	8005898 <_ZN7STN111021distSinceCodesClearedEv+0x64>

	return ELM_GENERAL_ERROR;
 8005894:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8005898:	4618      	mov	r0, r3
 800589a:	3720      	adds	r7, #32
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <_ZN7STN111014ctrlModVoltageEv>:
 Return:
 -------
  * float - Control module voltage in V
*/
float STN1110::ctrlModVoltage()
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b08a      	sub	sp, #40	; 0x28
 80058a4:	af02      	add	r7, sp, #8
 80058a6:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, CONTROL_MODULE_VOLTAGE))
 80058a8:	2242      	movs	r2, #66	; 0x42
 80058aa:	2101      	movs	r1, #1
 80058ac:	6878      	ldr	r0, [r7, #4]
 80058ae:	f7ff fd2f 	bl	8005310 <_ZN7STN11108queryPIDEht>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d01d      	beq.n	80058f4 <_ZN7STN111014ctrlModVoltageEv+0x54>
		return conditionResponse(findResponse(), 2, 1.0 / 1000.0);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 fb57 	bl	8005f6c <_ZN7STN111012findResponseEv>
 80058be:	4602      	mov	r2, r0
 80058c0:	460b      	mov	r3, r1
 80058c2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80058c6:	2302      	movs	r3, #2
 80058c8:	75fb      	strb	r3, [r7, #23]
 80058ca:	4b0e      	ldr	r3, [pc, #56]	; (8005904 <_ZN7STN111014ctrlModVoltageEv+0x64>)
 80058cc:	61bb      	str	r3, [r7, #24]
 80058ce:	f04f 0300 	mov.w	r3, #0
 80058d2:	61fb      	str	r3, [r7, #28]
 80058d4:	f107 0018 	add.w	r0, r7, #24
 80058d8:	f107 0217 	add.w	r2, r7, #23
 80058dc:	f107 0108 	add.w	r1, r7, #8
 80058e0:	f107 031c 	add.w	r3, r7, #28
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	4603      	mov	r3, r0
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f7ff fcba 	bl	8005262 <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 80058ee:	eef0 7a40 	vmov.f32	s15, s0
 80058f2:	e001      	b.n	80058f8 <_ZN7STN111014ctrlModVoltageEv+0x58>

	return ELM_GENERAL_ERROR;
 80058f4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 80058f8:	eeb0 0a67 	vmov.f32	s0, s15
 80058fc:	3720      	adds	r7, #32
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}
 8005902:	bf00      	nop
 8005904:	3a83126f 	.word	0x3a83126f

08005908 <_ZN7STN111021commandedAirFuelRatioEv>:
 Return:
 -------
  * float - Commanded air-fuel equivalence ratio
*/
float STN1110::commandedAirFuelRatio()
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b08a      	sub	sp, #40	; 0x28
 800590c:	af02      	add	r7, sp, #8
 800590e:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, FUEL_AIR_COMMANDED_EQUIV_RATIO))
 8005910:	2244      	movs	r2, #68	; 0x44
 8005912:	2101      	movs	r1, #1
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f7ff fcfb 	bl	8005310 <_ZN7STN11108queryPIDEht>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d01e      	beq.n	800595e <_ZN7STN111021commandedAirFuelRatioEv+0x56>
		return conditionResponse(findResponse(), 2, 2.0 / 65536.0);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 fb23 	bl	8005f6c <_ZN7STN111012findResponseEv>
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800592e:	2302      	movs	r3, #2
 8005930:	75fb      	strb	r3, [r7, #23]
 8005932:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8005936:	61bb      	str	r3, [r7, #24]
 8005938:	f04f 0300 	mov.w	r3, #0
 800593c:	61fb      	str	r3, [r7, #28]
 800593e:	f107 0018 	add.w	r0, r7, #24
 8005942:	f107 0217 	add.w	r2, r7, #23
 8005946:	f107 0108 	add.w	r1, r7, #8
 800594a:	f107 031c 	add.w	r3, r7, #28
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	4603      	mov	r3, r0
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7ff fc85 	bl	8005262 <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 8005958:	eef0 7a40 	vmov.f32	s15, s0
 800595c:	e001      	b.n	8005962 <_ZN7STN111021commandedAirFuelRatioEv+0x5a>

	return ELM_GENERAL_ERROR;
 800595e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 8005962:	eeb0 0a67 	vmov.f32	s0, s15
 8005966:	3720      	adds	r7, #32
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <_ZN7STN111016relativeThrottleEv>:
 Return:
 -------
  * float - Relative throttle position in %
*/
float STN1110::relativeThrottle()
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b08a      	sub	sp, #40	; 0x28
 8005970:	af02      	add	r7, sp, #8
 8005972:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, RELATIVE_THROTTLE_POSITION))
 8005974:	2245      	movs	r2, #69	; 0x45
 8005976:	2101      	movs	r1, #1
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f7ff fcc9 	bl	8005310 <_ZN7STN11108queryPIDEht>
 800597e:	4603      	mov	r3, r0
 8005980:	2b00      	cmp	r3, #0
 8005982:	d01d      	beq.n	80059c0 <_ZN7STN111016relativeThrottleEv+0x54>
		return conditionResponse(findResponse(), 1, 100.0 / 255.0);
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 faf1 	bl	8005f6c <_ZN7STN111012findResponseEv>
 800598a:	4602      	mov	r2, r0
 800598c:	460b      	mov	r3, r1
 800598e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8005992:	2301      	movs	r3, #1
 8005994:	75fb      	strb	r3, [r7, #23]
 8005996:	4b0e      	ldr	r3, [pc, #56]	; (80059d0 <_ZN7STN111016relativeThrottleEv+0x64>)
 8005998:	61bb      	str	r3, [r7, #24]
 800599a:	f04f 0300 	mov.w	r3, #0
 800599e:	61fb      	str	r3, [r7, #28]
 80059a0:	f107 0018 	add.w	r0, r7, #24
 80059a4:	f107 0217 	add.w	r2, r7, #23
 80059a8:	f107 0108 	add.w	r1, r7, #8
 80059ac:	f107 031c 	add.w	r3, r7, #28
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	4603      	mov	r3, r0
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f7ff fc54 	bl	8005262 <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 80059ba:	eef0 7a40 	vmov.f32	s15, s0
 80059be:	e001      	b.n	80059c4 <_ZN7STN111016relativeThrottleEv+0x58>

	return ELM_GENERAL_ERROR;
 80059c0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 80059c4:	eeb0 0a67 	vmov.f32	s0, s15
 80059c8:	3720      	adds	r7, #32
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	3ec8c8c9 	.word	0x3ec8c8c9

080059d4 <_ZN7STN111014ambientAirTempEv>:
 Return:
 -------
  * float - Ambient air temperature in C
*/
float STN1110::ambientAirTemp()
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b08a      	sub	sp, #40	; 0x28
 80059d8:	af02      	add	r7, sp, #8
 80059da:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, AMBIENT_AIR_TEMP))
 80059dc:	2246      	movs	r2, #70	; 0x46
 80059de:	2101      	movs	r1, #1
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f7ff fc95 	bl	8005310 <_ZN7STN11108queryPIDEht>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d01d      	beq.n	8005a28 <_ZN7STN111014ambientAirTempEv+0x54>
		return conditionResponse(findResponse(), 1, 1, -40);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 fabd 	bl	8005f6c <_ZN7STN111012findResponseEv>
 80059f2:	4602      	mov	r2, r0
 80059f4:	460b      	mov	r3, r1
 80059f6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 80059fa:	2301      	movs	r3, #1
 80059fc:	75fb      	strb	r3, [r7, #23]
 80059fe:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005a02:	61bb      	str	r3, [r7, #24]
 8005a04:	4b0c      	ldr	r3, [pc, #48]	; (8005a38 <_ZN7STN111014ambientAirTempEv+0x64>)
 8005a06:	61fb      	str	r3, [r7, #28]
 8005a08:	f107 0018 	add.w	r0, r7, #24
 8005a0c:	f107 0217 	add.w	r2, r7, #23
 8005a10:	f107 0108 	add.w	r1, r7, #8
 8005a14:	f107 031c 	add.w	r3, r7, #28
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7ff fc20 	bl	8005262 <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 8005a22:	eef0 7a40 	vmov.f32	s15, s0
 8005a26:	e001      	b.n	8005a2c <_ZN7STN111014ambientAirTempEv+0x58>

	return ELM_GENERAL_ERROR;
 8005a28:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 8005a2c:	eeb0 0a67 	vmov.f32	s0, s15
 8005a30:	3720      	adds	r7, #32
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	c2200000 	.word	0xc2200000

08005a3c <_ZN7STN111025commandedThrottleActuatorEv>:
 Return:
 -------
  * float - Commanded throttle actuator in %
*/
float STN1110::commandedThrottleActuator()
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b08a      	sub	sp, #40	; 0x28
 8005a40:	af02      	add	r7, sp, #8
 8005a42:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, COMMANDED_THROTTLE_ACTUATOR))
 8005a44:	224c      	movs	r2, #76	; 0x4c
 8005a46:	2101      	movs	r1, #1
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f7ff fc61 	bl	8005310 <_ZN7STN11108queryPIDEht>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d01d      	beq.n	8005a90 <_ZN7STN111025commandedThrottleActuatorEv+0x54>
		return conditionResponse(findResponse(), 1, 100.0 / 255.0);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 fa89 	bl	8005f6c <_ZN7STN111012findResponseEv>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8005a62:	2301      	movs	r3, #1
 8005a64:	75fb      	strb	r3, [r7, #23]
 8005a66:	4b0e      	ldr	r3, [pc, #56]	; (8005aa0 <_ZN7STN111025commandedThrottleActuatorEv+0x64>)
 8005a68:	61bb      	str	r3, [r7, #24]
 8005a6a:	f04f 0300 	mov.w	r3, #0
 8005a6e:	61fb      	str	r3, [r7, #28]
 8005a70:	f107 0018 	add.w	r0, r7, #24
 8005a74:	f107 0217 	add.w	r2, r7, #23
 8005a78:	f107 0108 	add.w	r1, r7, #8
 8005a7c:	f107 031c 	add.w	r3, r7, #28
 8005a80:	9300      	str	r3, [sp, #0]
 8005a82:	4603      	mov	r3, r0
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f7ff fbec 	bl	8005262 <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 8005a8a:	eef0 7a40 	vmov.f32	s15, s0
 8005a8e:	e001      	b.n	8005a94 <_ZN7STN111025commandedThrottleActuatorEv+0x58>

	return ELM_GENERAL_ERROR;
 8005a90:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 8005a94:	eeb0 0a67 	vmov.f32	s0, s15
 8005a98:	3720      	adds	r7, #32
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	3ec8c8c9 	.word	0x3ec8c8c9

08005aa4 <_ZN7STN11108fuelTypeEv>:
 Return:
 -------
  * uint8_t - Bit encoded (https://en.wikipedia.org/wiki/OBD-II_PIDs#Fuel_Type_Coding)
*/
uint8_t STN1110::fuelType()
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b08a      	sub	sp, #40	; 0x28
 8005aa8:	af02      	add	r7, sp, #8
 8005aaa:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, FUEL_TYPE))
 8005aac:	2251      	movs	r2, #81	; 0x51
 8005aae:	2101      	movs	r1, #1
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f7ff fc2d 	bl	8005310 <_ZN7STN11108queryPIDEht>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d024      	beq.n	8005b06 <_ZN7STN11108fuelTypeEv+0x62>
		return conditionResponse(findResponse(), 1);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 fa55 	bl	8005f6c <_ZN7STN111012findResponseEv>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8005aca:	2301      	movs	r3, #1
 8005acc:	75fb      	strb	r3, [r7, #23]
 8005ace:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005ad2:	61bb      	str	r3, [r7, #24]
 8005ad4:	f04f 0300 	mov.w	r3, #0
 8005ad8:	61fb      	str	r3, [r7, #28]
 8005ada:	f107 0018 	add.w	r0, r7, #24
 8005ade:	f107 0217 	add.w	r2, r7, #23
 8005ae2:	f107 0108 	add.w	r1, r7, #8
 8005ae6:	f107 031c 	add.w	r3, r7, #28
 8005aea:	9300      	str	r3, [sp, #0]
 8005aec:	4603      	mov	r3, r0
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f7ff fbb7 	bl	8005262 <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 8005af4:	eef0 7a40 	vmov.f32	s15, s0
 8005af8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005afc:	edc7 7a00 	vstr	s15, [r7]
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	e000      	b.n	8005b08 <_ZN7STN11108fuelTypeEv+0x64>

	return ELM_GENERAL_ERROR;
 8005b06:	23ff      	movs	r3, #255	; 0xff
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3720      	adds	r7, #32
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <_ZN7STN111016relativePedalPosEv>:
 Return:
 -------
  * float - Relative accelerator pedal position in %
*/
float STN1110::relativePedalPos()
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b08a      	sub	sp, #40	; 0x28
 8005b14:	af02      	add	r7, sp, #8
 8005b16:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, RELATIVE_ACCELERATOR_PEDAL_POS))
 8005b18:	225a      	movs	r2, #90	; 0x5a
 8005b1a:	2101      	movs	r1, #1
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7ff fbf7 	bl	8005310 <_ZN7STN11108queryPIDEht>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d01d      	beq.n	8005b64 <_ZN7STN111016relativePedalPosEv+0x54>
		return conditionResponse(findResponse(), 1, 100.0 / 255.0);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 fa1f 	bl	8005f6c <_ZN7STN111012findResponseEv>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
 8005b32:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8005b36:	2301      	movs	r3, #1
 8005b38:	75fb      	strb	r3, [r7, #23]
 8005b3a:	4b0e      	ldr	r3, [pc, #56]	; (8005b74 <_ZN7STN111016relativePedalPosEv+0x64>)
 8005b3c:	61bb      	str	r3, [r7, #24]
 8005b3e:	f04f 0300 	mov.w	r3, #0
 8005b42:	61fb      	str	r3, [r7, #28]
 8005b44:	f107 0018 	add.w	r0, r7, #24
 8005b48:	f107 0217 	add.w	r2, r7, #23
 8005b4c:	f107 0108 	add.w	r1, r7, #8
 8005b50:	f107 031c 	add.w	r3, r7, #28
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	4603      	mov	r3, r0
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f7ff fb82 	bl	8005262 <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 8005b5e:	eef0 7a40 	vmov.f32	s15, s0
 8005b62:	e001      	b.n	8005b68 <_ZN7STN111016relativePedalPosEv+0x58>

	return ELM_GENERAL_ERROR;
 8005b64:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 8005b68:	eeb0 0a67 	vmov.f32	s0, s15
 8005b6c:	3720      	adds	r7, #32
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	3ec8c8c9 	.word	0x3ec8c8c9

08005b78 <_ZN7STN11107oilTempEv>:
 Return:
 -------
  * float - Engine oil temperature in C
*/
float STN1110::oilTemp()
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b08a      	sub	sp, #40	; 0x28
 8005b7c:	af02      	add	r7, sp, #8
 8005b7e:	6078      	str	r0, [r7, #4]
	if (queryPID(SERVICE_01, ENGINE_OIL_TEMP))
 8005b80:	225c      	movs	r2, #92	; 0x5c
 8005b82:	2101      	movs	r1, #1
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f7ff fbc3 	bl	8005310 <_ZN7STN11108queryPIDEht>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d01d      	beq.n	8005bcc <_ZN7STN11107oilTempEv+0x54>
		return conditionResponse(findResponse(), 1, 1, -40.0);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f000 f9eb 	bl	8005f6c <_ZN7STN111012findResponseEv>
 8005b96:	4602      	mov	r2, r0
 8005b98:	460b      	mov	r3, r1
 8005b9a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	75fb      	strb	r3, [r7, #23]
 8005ba2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005ba6:	61bb      	str	r3, [r7, #24]
 8005ba8:	4b0c      	ldr	r3, [pc, #48]	; (8005bdc <_ZN7STN11107oilTempEv+0x64>)
 8005baa:	61fb      	str	r3, [r7, #28]
 8005bac:	f107 0018 	add.w	r0, r7, #24
 8005bb0:	f107 0217 	add.w	r2, r7, #23
 8005bb4:	f107 0108 	add.w	r1, r7, #8
 8005bb8:	f107 031c 	add.w	r3, r7, #28
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f7ff fb4e 	bl	8005262 <_ZN7STN111017conditionResponseERKyRKhRKfS5_>
 8005bc6:	eef0 7a40 	vmov.f32	s15, s0
 8005bca:	e001      	b.n	8005bd0 <_ZN7STN11107oilTempEv+0x58>

	return ELM_GENERAL_ERROR;
 8005bcc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
 8005bd0:	eeb0 0a67 	vmov.f32	s0, s15
 8005bd4:	3720      	adds	r7, #32
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	c2200000 	.word	0xc2200000

08005be0 <_ZN7STN111011sendCommandEPKc>:
 Return:
 -------
  * int8_t - Response status
*/
int8_t STN1110::sendCommand(const char *cmd)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]

	uint8_t counter = 0;
 8005bea:	2300      	movs	r3, #0
 8005bec:	73fb      	strb	r3, [r7, #15]
	connected = false;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	711a      	strb	r2, [r3, #4]
//	memset(txBuf, '\0', 128);
//	snprintf(txBuf, 128, "%s\r", cmd);


	// clear payload buffer
	memset(payload, '\0', PAYLOAD_LEN + 1);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6898      	ldr	r0, [r3, #8]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	899b      	ldrh	r3, [r3, #12]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	461a      	mov	r2, r3
 8005c00:	2100      	movs	r1, #0
 8005c02:	f007 fe59 	bl	800d8b8 <memset>

	// reset input serial buffer and number of received bytes
	recBytes = 0;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	831a      	strh	r2, [r3, #24]
	flushInputBuff();
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f7ff fb5f 	bl	80052d0 <_ZN7STN111014flushInputBuffEv>
	Uart_flush2();
 8005c12:	f7fb fd51 	bl	80016b8 <Uart_flush2>

	if (debugMode)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	795b      	ldrb	r3, [r3, #5]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d006      	beq.n	8005c2c <_ZN7STN111011sendCommandEPKc+0x4c>
	{
		printf("Sending the following command/query: ");
 8005c1e:	48a3      	ldr	r0, [pc, #652]	; (8005eac <_ZN7STN111011sendCommandEPKc+0x2cc>)
 8005c20:	f008 fd76 	bl	800e710 <iprintf>
		printf("%s\r\n", cmd);
 8005c24:	6839      	ldr	r1, [r7, #0]
 8005c26:	48a2      	ldr	r0, [pc, #648]	; (8005eb0 <_ZN7STN111011sendCommandEPKc+0x2d0>)
 8005c28:	f008 fd72 	bl	800e710 <iprintf>
	}

//	HAL_NVIC_DisableIRQ(USART6_IRQn); //Rx Callback 함수 Disable
//	Uart_sendstring2(txBuf);
	Uart_sendstring2(cmd);
 8005c2c:	6838      	ldr	r0, [r7, #0]
 8005c2e:	f7fb fd2d 	bl	800168c <Uart_sendstring2>
	Uart_sendstring2("\r");
 8005c32:	48a0      	ldr	r0, [pc, #640]	; (8005eb4 <_ZN7STN111011sendCommandEPKc+0x2d4>)
 8005c34:	f7fb fd2a 	bl	800168c <Uart_sendstring2>
	//HAL_Delay(1);
	//delay(1);


	// prime the timeout timer
	previousTime = millis();
 8005c38:	f000 fe00 	bl	800683c <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	635a      	str	r2, [r3, #52]	; 0x34
	currentTime  = previousTime;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	631a      	str	r2, [r3, #48]	; 0x30
	// end marker is read or a timeout has occurred
    // last valid idx is PAYLOAD_LEN but want to keep on free for terminating '\0'
    // so limit counter to < PAYLOAD_LEN


	while ((counter < PAYLOAD_LEN) && !timeout())
 8005c4a:	7bfb      	ldrb	r3, [r7, #15]
 8005c4c:	687a      	ldr	r2, [r7, #4]
 8005c4e:	8992      	ldrh	r2, [r2, #12]
 8005c50:	4293      	cmp	r3, r2
 8005c52:	da0a      	bge.n	8005c6a <_ZN7STN111011sendCommandEPKc+0x8a>
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f7ff faa3 	bl	80051a0 <_ZN7STN11107timeoutEv>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	f083 0301 	eor.w	r3, r3, #1
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d001      	beq.n	8005c6a <_ZN7STN111011sendCommandEPKc+0x8a>
 8005c66:	2301      	movs	r3, #1
 8005c68:	e000      	b.n	8005c6c <_ZN7STN111011sendCommandEPKc+0x8c>
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d05e      	beq.n	8005d2e <_ZN7STN111011sendCommandEPKc+0x14e>
	{
//		printf("this is sendcommand while loop");

		if (IsDataAvailable2())
 8005c70:	f7fb fcf2 	bl	8001658 <IsDataAvailable2>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	bf14      	ite	ne
 8005c7a:	2301      	movne	r3, #1
 8005c7c:	2300      	moveq	r3, #0
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d0e2      	beq.n	8005c4a <_ZN7STN111011sendCommandEPKc+0x6a>
		{

			char recChar = Uart_read2();
 8005c84:	f7fb fc80 	bl	8001588 <Uart_read2>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	73bb      	strb	r3, [r7, #14]

			if (debugMode)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	795b      	ldrb	r3, [r3, #5]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d02a      	beq.n	8005cea <_ZN7STN111011sendCommandEPKc+0x10a>
			{
				printf("\tReceived char: ");
 8005c94:	4888      	ldr	r0, [pc, #544]	; (8005eb8 <_ZN7STN111011sendCommandEPKc+0x2d8>)
 8005c96:	f008 fd3b 	bl	800e710 <iprintf>

				if (recChar == '\f')
 8005c9a:	7bbb      	ldrb	r3, [r7, #14]
 8005c9c:	2b0c      	cmp	r3, #12
 8005c9e:	d103      	bne.n	8005ca8 <_ZN7STN111011sendCommandEPKc+0xc8>
					printf("\\f\r\n");
 8005ca0:	4886      	ldr	r0, [pc, #536]	; (8005ebc <_ZN7STN111011sendCommandEPKc+0x2dc>)
 8005ca2:	f008 fdbb 	bl	800e81c <puts>
 8005ca6:	e020      	b.n	8005cea <_ZN7STN111011sendCommandEPKc+0x10a>
				else if (recChar == '\n')
 8005ca8:	7bbb      	ldrb	r3, [r7, #14]
 8005caa:	2b0a      	cmp	r3, #10
 8005cac:	d103      	bne.n	8005cb6 <_ZN7STN111011sendCommandEPKc+0xd6>
					printf("\\n\r\n");
 8005cae:	4884      	ldr	r0, [pc, #528]	; (8005ec0 <_ZN7STN111011sendCommandEPKc+0x2e0>)
 8005cb0:	f008 fdb4 	bl	800e81c <puts>
 8005cb4:	e019      	b.n	8005cea <_ZN7STN111011sendCommandEPKc+0x10a>
				else if (recChar == '\r')
 8005cb6:	7bbb      	ldrb	r3, [r7, #14]
 8005cb8:	2b0d      	cmp	r3, #13
 8005cba:	d103      	bne.n	8005cc4 <_ZN7STN111011sendCommandEPKc+0xe4>
					printf("\\r\r\n");
 8005cbc:	4881      	ldr	r0, [pc, #516]	; (8005ec4 <_ZN7STN111011sendCommandEPKc+0x2e4>)
 8005cbe:	f008 fdad 	bl	800e81c <puts>
 8005cc2:	e012      	b.n	8005cea <_ZN7STN111011sendCommandEPKc+0x10a>
				else if (recChar == '\t')
 8005cc4:	7bbb      	ldrb	r3, [r7, #14]
 8005cc6:	2b09      	cmp	r3, #9
 8005cc8:	d103      	bne.n	8005cd2 <_ZN7STN111011sendCommandEPKc+0xf2>
					printf("\\t\r\n");
 8005cca:	487f      	ldr	r0, [pc, #508]	; (8005ec8 <_ZN7STN111011sendCommandEPKc+0x2e8>)
 8005ccc:	f008 fda6 	bl	800e81c <puts>
 8005cd0:	e00b      	b.n	8005cea <_ZN7STN111011sendCommandEPKc+0x10a>
				else if (recChar == '\v')
 8005cd2:	7bbb      	ldrb	r3, [r7, #14]
 8005cd4:	2b0b      	cmp	r3, #11
 8005cd6:	d103      	bne.n	8005ce0 <_ZN7STN111011sendCommandEPKc+0x100>
					printf("\\v\r\n");
 8005cd8:	487c      	ldr	r0, [pc, #496]	; (8005ecc <_ZN7STN111011sendCommandEPKc+0x2ec>)
 8005cda:	f008 fd9f 	bl	800e81c <puts>
 8005cde:	e004      	b.n	8005cea <_ZN7STN111011sendCommandEPKc+0x10a>
				else
					printf("%c\r\n", recChar);
 8005ce0:	7bbb      	ldrb	r3, [r7, #14]
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	487a      	ldr	r0, [pc, #488]	; (8005ed0 <_ZN7STN111011sendCommandEPKc+0x2f0>)
 8005ce6:	f008 fd13 	bl	800e710 <iprintf>
			}

			if (recChar == '>')
 8005cea:	7bbb      	ldrb	r3, [r7, #14]
 8005cec:	2b3e      	cmp	r3, #62	; 0x3e
 8005cee:	d107      	bne.n	8005d00 <_ZN7STN111011sendCommandEPKc+0x120>
			{
				if (debugMode)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	795b      	ldrb	r3, [r3, #5]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d019      	beq.n	8005d2c <_ZN7STN111011sendCommandEPKc+0x14c>
					printf("Delimiter found\r\n");
 8005cf8:	4876      	ldr	r0, [pc, #472]	; (8005ed4 <_ZN7STN111011sendCommandEPKc+0x2f4>)
 8005cfa:	f008 fd8f 	bl	800e81c <puts>

				break;
 8005cfe:	e015      	b.n	8005d2c <_ZN7STN111011sendCommandEPKc+0x14c>
			}
			else if (!isalnum(recChar) && (recChar != ':'))
 8005d00:	7bbb      	ldrb	r3, [r7, #14]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f007 fdc8 	bl	800d898 <isalnum>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d102      	bne.n	8005d14 <_ZN7STN111011sendCommandEPKc+0x134>
 8005d0e:	7bbb      	ldrb	r3, [r7, #14]
 8005d10:	2b3a      	cmp	r3, #58	; 0x3a
 8005d12:	d109      	bne.n	8005d28 <_ZN7STN111011sendCommandEPKc+0x148>
				continue;
			
			payload[counter] = recChar;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	689a      	ldr	r2, [r3, #8]
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	7bba      	ldrb	r2, [r7, #14]
 8005d1e:	701a      	strb	r2, [r3, #0]
			counter++;
 8005d20:	7bfb      	ldrb	r3, [r7, #15]
 8005d22:	3301      	adds	r3, #1
 8005d24:	73fb      	strb	r3, [r7, #15]
 8005d26:	e790      	b.n	8005c4a <_ZN7STN111011sendCommandEPKc+0x6a>
				continue;
 8005d28:	bf00      	nop
	while ((counter < PAYLOAD_LEN) && !timeout())
 8005d2a:	e78e      	b.n	8005c4a <_ZN7STN111011sendCommandEPKc+0x6a>
				break;
 8005d2c:	bf00      	nop

		}
	}

	if (debugMode)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	795b      	ldrb	r3, [r3, #5]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d008      	beq.n	8005d48 <_ZN7STN111011sendCommandEPKc+0x168>
	{
		printf("All chars received: ");
 8005d36:	4868      	ldr	r0, [pc, #416]	; (8005ed8 <_ZN7STN111011sendCommandEPKc+0x2f8>)
 8005d38:	f008 fcea 	bl	800e710 <iprintf>
		printf("%s\r\n", payload);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	4619      	mov	r1, r3
 8005d42:	485b      	ldr	r0, [pc, #364]	; (8005eb0 <_ZN7STN111011sendCommandEPKc+0x2d0>)
 8005d44:	f008 fce4 	bl	800e710 <iprintf>
	}

	if (timeout())
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f7ff fa29 	bl	80051a0 <_ZN7STN11107timeoutEv>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d01c      	beq.n	8005d8e <_ZN7STN111011sendCommandEPKc+0x1ae>
	{
		if (debugMode)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	795b      	ldrb	r3, [r3, #5]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d011      	beq.n	8005d80 <_ZN7STN111011sendCommandEPKc+0x1a0>
		{
			printf("Timeout detected with overflow of ");
 8005d5c:	485f      	ldr	r0, [pc, #380]	; (8005edc <_ZN7STN111011sendCommandEPKc+0x2fc>)
 8005d5e:	f008 fcd7 	bl	800e710 <iprintf>
			printf("%lu", ((currentTime - previousTime) - timeout_ms));
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d6a:	1ad3      	subs	r3, r2, r3
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	8b92      	ldrh	r2, [r2, #28]
 8005d70:	1a9b      	subs	r3, r3, r2
 8005d72:	4619      	mov	r1, r3
 8005d74:	485a      	ldr	r0, [pc, #360]	; (8005ee0 <_ZN7STN111011sendCommandEPKc+0x300>)
 8005d76:	f008 fccb 	bl	800e710 <iprintf>
			printf("ms\r\n");
 8005d7a:	485a      	ldr	r0, [pc, #360]	; (8005ee4 <_ZN7STN111011sendCommandEPKc+0x304>)
 8005d7c:	f008 fd4e 	bl	800e81c <puts>


		}

		status = ELM_TIMEOUT;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2207      	movs	r2, #7
 8005d84:	739a      	strb	r2, [r3, #14]
		return status;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8005d8c:	e0e6      	b.n	8005f5c <_ZN7STN111011sendCommandEPKc+0x37c>
	}
	
	if (nextIndex(payload, "UNABLETOCONNECT") >= 0)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6899      	ldr	r1, [r3, #8]
 8005d92:	2301      	movs	r3, #1
 8005d94:	4a54      	ldr	r2, [pc, #336]	; (8005ee8 <_ZN7STN111011sendCommandEPKc+0x308>)
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7ff fa31 	bl	80051fe <_ZN7STN11109nextIndexEPKcS1_h>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	43db      	mvns	r3, r3
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	09db      	lsrs	r3, r3, #7
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00d      	beq.n	8005dc6 <_ZN7STN111011sendCommandEPKc+0x1e6>
	{
		if (debugMode)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	795b      	ldrb	r3, [r3, #5]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d002      	beq.n	8005db8 <_ZN7STN111011sendCommandEPKc+0x1d8>
			printf("ELM responded with errror \"UNABLE TO CONNECT\"\r\n");
 8005db2:	484e      	ldr	r0, [pc, #312]	; (8005eec <_ZN7STN111011sendCommandEPKc+0x30c>)
 8005db4:	f008 fd32 	bl	800e81c <puts>

		status = ELM_UNABLE_TO_CONNECT;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2204      	movs	r2, #4
 8005dbc:	739a      	strb	r2, [r3, #14]
		return status;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8005dc4:	e0ca      	b.n	8005f5c <_ZN7STN111011sendCommandEPKc+0x37c>
	}

	connected = true;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	711a      	strb	r2, [r3, #4]

	if (nextIndex(payload, "NODATA") >= 0)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6899      	ldr	r1, [r3, #8]
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	4a47      	ldr	r2, [pc, #284]	; (8005ef0 <_ZN7STN111011sendCommandEPKc+0x310>)
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f7ff fa12 	bl	80051fe <_ZN7STN11109nextIndexEPKcS1_h>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	43db      	mvns	r3, r3
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	09db      	lsrs	r3, r3, #7
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00d      	beq.n	8005e04 <_ZN7STN111011sendCommandEPKc+0x224>
	{
		if (debugMode)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	795b      	ldrb	r3, [r3, #5]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d002      	beq.n	8005df6 <_ZN7STN111011sendCommandEPKc+0x216>
			printf("ELM responded with errror \"NO DATA\"\r\n");
 8005df0:	4840      	ldr	r0, [pc, #256]	; (8005ef4 <_ZN7STN111011sendCommandEPKc+0x314>)
 8005df2:	f008 fd13 	bl	800e81c <puts>

		status = ELM_NO_DATA;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2205      	movs	r2, #5
 8005dfa:	739a      	strb	r2, [r3, #14]
		return status;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8005e02:	e0ab      	b.n	8005f5c <_ZN7STN111011sendCommandEPKc+0x37c>
	}

	if (nextIndex(payload, "STOPPED") >= 0)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6899      	ldr	r1, [r3, #8]
 8005e08:	2301      	movs	r3, #1
 8005e0a:	4a3b      	ldr	r2, [pc, #236]	; (8005ef8 <_ZN7STN111011sendCommandEPKc+0x318>)
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f7ff f9f6 	bl	80051fe <_ZN7STN11109nextIndexEPKcS1_h>
 8005e12:	4603      	mov	r3, r0
 8005e14:	43db      	mvns	r3, r3
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	09db      	lsrs	r3, r3, #7
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00d      	beq.n	8005e3c <_ZN7STN111011sendCommandEPKc+0x25c>
	{
		if (debugMode)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	795b      	ldrb	r3, [r3, #5]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d002      	beq.n	8005e2e <_ZN7STN111011sendCommandEPKc+0x24e>
			printf("ELM responded with errror \"STOPPED\"\r\n");
 8005e28:	4834      	ldr	r0, [pc, #208]	; (8005efc <_ZN7STN111011sendCommandEPKc+0x31c>)
 8005e2a:	f008 fcf7 	bl	800e81c <puts>

		status = ELM_CANERROR;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2208      	movs	r2, #8
 8005e32:	739a      	strb	r2, [r3, #14]
		return status;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8005e3a:	e08f      	b.n	8005f5c <_ZN7STN111011sendCommandEPKc+0x37c>
	}

	if (nextIndex(payload, "CANERROR") >= 0)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6899      	ldr	r1, [r3, #8]
 8005e40:	2301      	movs	r3, #1
 8005e42:	4a2f      	ldr	r2, [pc, #188]	; (8005f00 <_ZN7STN111011sendCommandEPKc+0x320>)
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f7ff f9da 	bl	80051fe <_ZN7STN11109nextIndexEPKcS1_h>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	43db      	mvns	r3, r3
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	09db      	lsrs	r3, r3, #7
 8005e52:	b2db      	uxtb	r3, r3
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d00d      	beq.n	8005e74 <_ZN7STN111011sendCommandEPKc+0x294>
	{
		if (debugMode)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	795b      	ldrb	r3, [r3, #5]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d002      	beq.n	8005e66 <_ZN7STN111011sendCommandEPKc+0x286>
			printf("ELM responded with errror \"CAN ERROR\"\r\n");
 8005e60:	4828      	ldr	r0, [pc, #160]	; (8005f04 <_ZN7STN111011sendCommandEPKc+0x324>)
 8005e62:	f008 fcdb 	bl	800e81c <puts>

		status = ELM_CANERROR;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2208      	movs	r2, #8
 8005e6a:	739a      	strb	r2, [r3, #14]
		return status;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8005e72:	e073      	b.n	8005f5c <_ZN7STN111011sendCommandEPKc+0x37c>
	}


	if (nextIndex(payload, "OUTOFMEMORY") >= 0)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6899      	ldr	r1, [r3, #8]
 8005e78:	2301      	movs	r3, #1
 8005e7a:	4a23      	ldr	r2, [pc, #140]	; (8005f08 <_ZN7STN111011sendCommandEPKc+0x328>)
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f7ff f9be 	bl	80051fe <_ZN7STN11109nextIndexEPKcS1_h>
 8005e82:	4603      	mov	r3, r0
 8005e84:	43db      	mvns	r3, r3
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	09db      	lsrs	r3, r3, #7
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d03f      	beq.n	8005f10 <_ZN7STN111011sendCommandEPKc+0x330>
	{
		if (debugMode)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	795b      	ldrb	r3, [r3, #5]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d002      	beq.n	8005e9e <_ZN7STN111011sendCommandEPKc+0x2be>
			printf("ELM responded with errror \"OUT OF MEMORY\"\r\n");
 8005e98:	481c      	ldr	r0, [pc, #112]	; (8005f0c <_ZN7STN111011sendCommandEPKc+0x32c>)
 8005e9a:	f008 fcbf 	bl	800e81c <puts>

		status = ELM_OUTOFMEM;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2209      	movs	r2, #9
 8005ea2:	739a      	strb	r2, [r3, #14]
		return status;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8005eaa:	e057      	b.n	8005f5c <_ZN7STN111011sendCommandEPKc+0x37c>
 8005eac:	08013434 	.word	0x08013434
 8005eb0:	08013408 	.word	0x08013408
 8005eb4:	0801345c 	.word	0x0801345c
 8005eb8:	08013460 	.word	0x08013460
 8005ebc:	08013474 	.word	0x08013474
 8005ec0:	08013478 	.word	0x08013478
 8005ec4:	0801347c 	.word	0x0801347c
 8005ec8:	08013480 	.word	0x08013480
 8005ecc:	08013484 	.word	0x08013484
 8005ed0:	08013488 	.word	0x08013488
 8005ed4:	08013490 	.word	0x08013490
 8005ed8:	080134a4 	.word	0x080134a4
 8005edc:	080134bc 	.word	0x080134bc
 8005ee0:	080134e0 	.word	0x080134e0
 8005ee4:	080134e4 	.word	0x080134e4
 8005ee8:	080134e8 	.word	0x080134e8
 8005eec:	080134f8 	.word	0x080134f8
 8005ef0:	08013528 	.word	0x08013528
 8005ef4:	08013530 	.word	0x08013530
 8005ef8:	08013558 	.word	0x08013558
 8005efc:	08013560 	.word	0x08013560
 8005f00:	08013588 	.word	0x08013588
 8005f04:	08013594 	.word	0x08013594
 8005f08:	080135bc 	.word	0x080135bc
 8005f0c:	080135c8 	.word	0x080135c8
	}

	if (nextIndex(payload, "ERROR") >= 0)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6899      	ldr	r1, [r3, #8]
 8005f14:	2301      	movs	r3, #1
 8005f16:	4a13      	ldr	r2, [pc, #76]	; (8005f64 <_ZN7STN111011sendCommandEPKc+0x384>)
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f7ff f970 	bl	80051fe <_ZN7STN11109nextIndexEPKcS1_h>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	43db      	mvns	r3, r3
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	09db      	lsrs	r3, r3, #7
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d00d      	beq.n	8005f48 <_ZN7STN111011sendCommandEPKc+0x368>
	{
		if (debugMode)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	795b      	ldrb	r3, [r3, #5]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d002      	beq.n	8005f3a <_ZN7STN111011sendCommandEPKc+0x35a>
			printf("ELM responded with \"ERROR\"\r\n");
 8005f34:	480c      	ldr	r0, [pc, #48]	; (8005f68 <_ZN7STN111011sendCommandEPKc+0x388>)
 8005f36:	f008 fc71 	bl	800e81c <puts>

		status = ELM_GENERAL_ERROR;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	22ff      	movs	r2, #255	; 0xff
 8005f3e:	739a      	strb	r2, [r3, #14]
		return status;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8005f46:	e009      	b.n	8005f5c <_ZN7STN111011sendCommandEPKc+0x37c>
	}

	// keep track of how many bytes were received in
	// the ELM327's response (not counting the
	// end-marker '>') if a valid response is found
	recBytes = counter;
 8005f48:	7bfb      	ldrb	r3, [r7, #15]
 8005f4a:	b29a      	uxth	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	831a      	strh	r2, [r3, #24]

	status = ELM_SUCCESS;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	739a      	strb	r2, [r3, #14]
	return status;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f993 300e 	ldrsb.w	r3, [r3, #14]

}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	080135f4 	.word	0x080135f4
 8005f68:	080135fc 	.word	0x080135fc

08005f6c <_ZN7STN111012findResponseEv>:
 Return:
 -------
  * uint64_t - Query response value
*/
uint64_t STN1110::findResponse()
{
 8005f6c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005f70:	b086      	sub	sp, #24
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
	uint8_t firstDatum = 0;
 8005f76:	2300      	movs	r3, #0
 8005f78:	75fb      	strb	r3, [r7, #23]
	char header[7]     = { '\0' };
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	60bb      	str	r3, [r7, #8]
 8005f7e:	f107 030c 	add.w	r3, r7, #12
 8005f82:	2100      	movs	r1, #0
 8005f84:	460a      	mov	r2, r1
 8005f86:	801a      	strh	r2, [r3, #0]
 8005f88:	460a      	mov	r2, r1
 8005f8a:	709a      	strb	r2, [r3, #2]

	if (longQuery)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d01a      	beq.n	8005fcc <_ZN7STN111012findResponseEv+0x60>
	{
		header[0] = query[0] + 4;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005f9c:	3304      	adds	r3, #4
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	723b      	strb	r3, [r7, #8]
		header[1] = query[1];
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005fa8:	727b      	strb	r3, [r7, #9]
		header[2] = query[2];
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fb0:	72bb      	strb	r3, [r7, #10]
		header[3] = query[3];
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005fb8:	72fb      	strb	r3, [r7, #11]
		header[4] = query[4];
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8005fc0:	733b      	strb	r3, [r7, #12]
		header[5] = query[5];
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8005fc8:	737b      	strb	r3, [r7, #13]
 8005fca:	e011      	b.n	8005ff0 <_ZN7STN111012findResponseEv+0x84>
	}
	else
	{
		header[0] = query[0] + 4;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005fd2:	3304      	adds	r3, #4
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	723b      	strb	r3, [r7, #8]
		header[1] = query[1];
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005fde:	727b      	strb	r3, [r7, #9]
		header[2] = query[2];
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005fe6:	72bb      	strb	r3, [r7, #10]
		header[3] = query[3];
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8005fee:	72fb      	strb	r3, [r7, #11]
	}

	if (debugMode)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	795b      	ldrb	r3, [r3, #5]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d008      	beq.n	800600a <_ZN7STN111012findResponseEv+0x9e>
	{
		printf("Expected response header: ");
 8005ff8:	48ad      	ldr	r0, [pc, #692]	; (80062b0 <_ZN7STN111012findResponseEv+0x344>)
 8005ffa:	f008 fb89 	bl	800e710 <iprintf>
		printf("%s\r\n", header);
 8005ffe:	f107 0308 	add.w	r3, r7, #8
 8006002:	4619      	mov	r1, r3
 8006004:	48ab      	ldr	r0, [pc, #684]	; (80062b4 <_ZN7STN111012findResponseEv+0x348>)
 8006006:	f008 fb83 	bl	800e710 <iprintf>
	}

	int8_t firstHeadIndex  = nextIndex(payload, header);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6899      	ldr	r1, [r3, #8]
 800600e:	f107 0208 	add.w	r2, r7, #8
 8006012:	2301      	movs	r3, #1
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f7ff f8f2 	bl	80051fe <_ZN7STN11109nextIndexEPKcS1_h>
 800601a:	4603      	mov	r3, r0
 800601c:	757b      	strb	r3, [r7, #21]
	int8_t secondHeadIndex = nextIndex(payload, header, 2);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6899      	ldr	r1, [r3, #8]
 8006022:	f107 0208 	add.w	r2, r7, #8
 8006026:	2302      	movs	r3, #2
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f7ff f8e8 	bl	80051fe <_ZN7STN11109nextIndexEPKcS1_h>
 800602e:	4603      	mov	r3, r0
 8006030:	753b      	strb	r3, [r7, #20]

	if (firstHeadIndex >= 0)
 8006032:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8006036:	2b00      	cmp	r3, #0
 8006038:	f2c0 8128 	blt.w	800628c <_ZN7STN111012findResponseEv+0x320>
	{
		if (longQuery)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006042:	2b00      	cmp	r3, #0
 8006044:	d003      	beq.n	800604e <_ZN7STN111012findResponseEv+0xe2>
			firstDatum = firstHeadIndex + 6;
 8006046:	7d7b      	ldrb	r3, [r7, #21]
 8006048:	3306      	adds	r3, #6
 800604a:	75fb      	strb	r3, [r7, #23]
 800604c:	e002      	b.n	8006054 <_ZN7STN111012findResponseEv+0xe8>
		else
			firstDatum = firstHeadIndex + 4;
 800604e:	7d7b      	ldrb	r3, [r7, #21]
 8006050:	3304      	adds	r3, #4
 8006052:	75fb      	strb	r3, [r7, #23]

		// Some ELM327s (such as my own) respond with two
		// "responses" per query. "numPayChars" represents the
		// correct number of bytes returned by the ELM327
		// regardless of how many "responses" were returned
		if (secondHeadIndex >= 0)
 8006054:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8006058:	2b00      	cmp	r3, #0
 800605a:	db0d      	blt.n	8006078 <_ZN7STN111012findResponseEv+0x10c>
		{
			if (debugMode)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	795b      	ldrb	r3, [r3, #5]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d002      	beq.n	800606a <_ZN7STN111012findResponseEv+0xfe>
				printf("Double response detected\r\n");
 8006064:	4894      	ldr	r0, [pc, #592]	; (80062b8 <_ZN7STN111012findResponseEv+0x34c>)
 8006066:	f008 fbd9 	bl	800e81c <puts>

			numPayChars = secondHeadIndex - firstDatum;
 800606a:	7d3a      	ldrb	r2, [r7, #20]
 800606c:	7dfb      	ldrb	r3, [r7, #23]
 800606e:	1ad3      	subs	r3, r2, r3
 8006070:	b2da      	uxtb	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	769a      	strb	r2, [r3, #26]
 8006076:	e00e      	b.n	8006096 <_ZN7STN111012findResponseEv+0x12a>
		}
		else
		{
			if (debugMode)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	795b      	ldrb	r3, [r3, #5]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d002      	beq.n	8006086 <_ZN7STN111012findResponseEv+0x11a>
				printf("Single response detected\r\n");
 8006080:	488e      	ldr	r0, [pc, #568]	; (80062bc <_ZN7STN111012findResponseEv+0x350>)
 8006082:	f008 fbcb 	bl	800e81c <puts>

			numPayChars = recBytes - firstDatum;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	8b1b      	ldrh	r3, [r3, #24]
 800608a:	b2da      	uxtb	r2, r3
 800608c:	7dfb      	ldrb	r3, [r7, #23]
 800608e:	1ad3      	subs	r3, r2, r3
 8006090:	b2da      	uxtb	r2, r3
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	769a      	strb	r2, [r3, #26]
		}

		response = 0;
 8006096:	6879      	ldr	r1, [r7, #4]
 8006098:	f04f 0200 	mov.w	r2, #0
 800609c:	f04f 0300 	mov.w	r3, #0
 80060a0:	e9c1 2304 	strd	r2, r3, [r1, #16]
		for(uint8_t i = 0; i < numPayChars; i++)
 80060a4:	2300      	movs	r3, #0
 80060a6:	75bb      	strb	r3, [r7, #22]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	7e9b      	ldrb	r3, [r3, #26]
 80060ac:	7dba      	ldrb	r2, [r7, #22]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d22b      	bcs.n	800610a <_ZN7STN111012findResponseEv+0x19e>
		{
			uint8_t payloadIndex = firstDatum + i;
 80060b2:	7dfa      	ldrb	r2, [r7, #23]
 80060b4:	7dbb      	ldrb	r3, [r7, #22]
 80060b6:	4413      	add	r3, r2
 80060b8:	74fb      	strb	r3, [r7, #19]
			uint8_t bitsOffset = 4 * (numPayChars - i - 1);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	7e9b      	ldrb	r3, [r3, #26]
 80060be:	461a      	mov	r2, r3
 80060c0:	7dbb      	ldrb	r3, [r7, #22]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	3b01      	subs	r3, #1
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	74bb      	strb	r3, [r7, #18]
			response = response | (ctoi(payload[payloadIndex]) << bitsOffset);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	689a      	ldr	r2, [r3, #8]
 80060d6:	7cfb      	ldrb	r3, [r7, #19]
 80060d8:	4413      	add	r3, r2
 80060da:	781b      	ldrb	r3, [r3, #0]
 80060dc:	4619      	mov	r1, r3
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f7ff f877 	bl	80051d2 <_ZN7STN11104ctoiEh>
 80060e4:	4603      	mov	r3, r0
 80060e6:	461a      	mov	r2, r3
 80060e8:	7cbb      	ldrb	r3, [r7, #18]
 80060ea:	fa02 f303 	lsl.w	r3, r2, r3
 80060ee:	461a      	mov	r2, r3
 80060f0:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80060f4:	ea48 0402 	orr.w	r4, r8, r2
 80060f8:	ea49 0503 	orr.w	r5, r9, r3
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	e9c3 4504 	strd	r4, r5, [r3, #16]
		for(uint8_t i = 0; i < numPayChars; i++)
 8006102:	7dbb      	ldrb	r3, [r7, #22]
 8006104:	3301      	adds	r3, #1
 8006106:	75bb      	strb	r3, [r7, #22]
 8006108:	e7ce      	b.n	80060a8 <_ZN7STN111012findResponseEv+0x13c>

		// It is usefull to have the response bytes
		// broken-out because some PID algorithms (standard
		// and custom) require special operations for each
		// byte returned
		responseByte_0 = response & 0xFF;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006110:	b252      	sxtb	r2, r2
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	779a      	strb	r2, [r3, #30]
		responseByte_1 = (response >> 8) & 0xFF;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800611c:	f04f 0200 	mov.w	r2, #0
 8006120:	f04f 0300 	mov.w	r3, #0
 8006124:	0a02      	lsrs	r2, r0, #8
 8006126:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800612a:	0a0b      	lsrs	r3, r1, #8
 800612c:	b252      	sxtb	r2, r2
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	77da      	strb	r2, [r3, #31]
		responseByte_2 = (response >> 16) & 0xFF;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006138:	f04f 0200 	mov.w	r2, #0
 800613c:	f04f 0300 	mov.w	r3, #0
 8006140:	0c02      	lsrs	r2, r0, #16
 8006142:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006146:	0c0b      	lsrs	r3, r1, #16
 8006148:	b252      	sxtb	r2, r2
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f883 2020 	strb.w	r2, [r3, #32]
		responseByte_3 = (response >> 24) & 0xFF;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006156:	f04f 0200 	mov.w	r2, #0
 800615a:	f04f 0300 	mov.w	r3, #0
 800615e:	0e02      	lsrs	r2, r0, #24
 8006160:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8006164:	0e0b      	lsrs	r3, r1, #24
 8006166:	b252      	sxtb	r2, r2
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
		responseByte_4 = (response >> 32) & 0xFF;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006174:	f04f 0200 	mov.w	r2, #0
 8006178:	f04f 0300 	mov.w	r3, #0
 800617c:	000a      	movs	r2, r1
 800617e:	2300      	movs	r3, #0
 8006180:	b252      	sxtb	r2, r2
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
		responseByte_5 = (response >> 40) & 0xFF;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800618e:	f04f 0200 	mov.w	r2, #0
 8006192:	f04f 0300 	mov.w	r3, #0
 8006196:	0a0a      	lsrs	r2, r1, #8
 8006198:	2300      	movs	r3, #0
 800619a:	b252      	sxtb	r2, r2
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
		responseByte_6 = (response >> 48) & 0xFF;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80061a8:	f04f 0200 	mov.w	r2, #0
 80061ac:	f04f 0300 	mov.w	r3, #0
 80061b0:	0c0a      	lsrs	r2, r1, #16
 80061b2:	2300      	movs	r3, #0
 80061b4:	b252      	sxtb	r2, r2
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		responseByte_7 = (response >> 56) & 0xFF;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80061c2:	f04f 0200 	mov.w	r2, #0
 80061c6:	f04f 0300 	mov.w	r3, #0
 80061ca:	0e0a      	lsrs	r2, r1, #24
 80061cc:	2300      	movs	r3, #0
 80061ce:	b252      	sxtb	r2, r2
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		if (debugMode)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	795b      	ldrb	r3, [r3, #5]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d052      	beq.n	8006284 <_ZN7STN111012findResponseEv+0x318>
		{
			printf("64-bit response: \r\n");
 80061de:	4838      	ldr	r0, [pc, #224]	; (80062c0 <_ZN7STN111012findResponseEv+0x354>)
 80061e0:	f008 fb1c 	bl	800e81c <puts>
			printf("\tresponseByte_0: ");
 80061e4:	4837      	ldr	r0, [pc, #220]	; (80062c4 <_ZN7STN111012findResponseEv+0x358>)
 80061e6:	f008 fa93 	bl	800e710 <iprintf>
			printf("%d\r\n", responseByte_0);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f993 301e 	ldrsb.w	r3, [r3, #30]
 80061f0:	4619      	mov	r1, r3
 80061f2:	4835      	ldr	r0, [pc, #212]	; (80062c8 <_ZN7STN111012findResponseEv+0x35c>)
 80061f4:	f008 fa8c 	bl	800e710 <iprintf>
			printf("\tresponseByte_1: ");
 80061f8:	4834      	ldr	r0, [pc, #208]	; (80062cc <_ZN7STN111012findResponseEv+0x360>)
 80061fa:	f008 fa89 	bl	800e710 <iprintf>
			printf("%d\r\n",responseByte_1);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f993 301f 	ldrsb.w	r3, [r3, #31]
 8006204:	4619      	mov	r1, r3
 8006206:	4830      	ldr	r0, [pc, #192]	; (80062c8 <_ZN7STN111012findResponseEv+0x35c>)
 8006208:	f008 fa82 	bl	800e710 <iprintf>
			printf("\tresponseByte_2: ");
 800620c:	4830      	ldr	r0, [pc, #192]	; (80062d0 <_ZN7STN111012findResponseEv+0x364>)
 800620e:	f008 fa7f 	bl	800e710 <iprintf>
			printf("%d\r\n",responseByte_2);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f993 3020 	ldrsb.w	r3, [r3, #32]
 8006218:	4619      	mov	r1, r3
 800621a:	482b      	ldr	r0, [pc, #172]	; (80062c8 <_ZN7STN111012findResponseEv+0x35c>)
 800621c:	f008 fa78 	bl	800e710 <iprintf>
			printf("\tresponseByte_3: ");
 8006220:	482c      	ldr	r0, [pc, #176]	; (80062d4 <_ZN7STN111012findResponseEv+0x368>)
 8006222:	f008 fa75 	bl	800e710 <iprintf>
			printf("%d\r\n",responseByte_3);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f993 3021 	ldrsb.w	r3, [r3, #33]	; 0x21
 800622c:	4619      	mov	r1, r3
 800622e:	4826      	ldr	r0, [pc, #152]	; (80062c8 <_ZN7STN111012findResponseEv+0x35c>)
 8006230:	f008 fa6e 	bl	800e710 <iprintf>
			printf("\tresponseByte_4: ");
 8006234:	4828      	ldr	r0, [pc, #160]	; (80062d8 <_ZN7STN111012findResponseEv+0x36c>)
 8006236:	f008 fa6b 	bl	800e710 <iprintf>
			printf("%d\r\n",responseByte_4);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8006240:	4619      	mov	r1, r3
 8006242:	4821      	ldr	r0, [pc, #132]	; (80062c8 <_ZN7STN111012findResponseEv+0x35c>)
 8006244:	f008 fa64 	bl	800e710 <iprintf>
			printf("\tresponseByte_5: ");
 8006248:	4824      	ldr	r0, [pc, #144]	; (80062dc <_ZN7STN111012findResponseEv+0x370>)
 800624a:	f008 fa61 	bl	800e710 <iprintf>
			printf("%d\r\n",responseByte_5);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f993 3023 	ldrsb.w	r3, [r3, #35]	; 0x23
 8006254:	4619      	mov	r1, r3
 8006256:	481c      	ldr	r0, [pc, #112]	; (80062c8 <_ZN7STN111012findResponseEv+0x35c>)
 8006258:	f008 fa5a 	bl	800e710 <iprintf>
			printf("\tresponseByte_6: ");
 800625c:	4820      	ldr	r0, [pc, #128]	; (80062e0 <_ZN7STN111012findResponseEv+0x374>)
 800625e:	f008 fa57 	bl	800e710 <iprintf>
			printf("%d\r\n",responseByte_6);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f993 3024 	ldrsb.w	r3, [r3, #36]	; 0x24
 8006268:	4619      	mov	r1, r3
 800626a:	4817      	ldr	r0, [pc, #92]	; (80062c8 <_ZN7STN111012findResponseEv+0x35c>)
 800626c:	f008 fa50 	bl	800e710 <iprintf>
			printf("\tresponseByte_7: ");
 8006270:	481c      	ldr	r0, [pc, #112]	; (80062e4 <_ZN7STN111012findResponseEv+0x378>)
 8006272:	f008 fa4d 	bl	800e710 <iprintf>
			printf("%d\r\n",responseByte_7);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f993 3025 	ldrsb.w	r3, [r3, #37]	; 0x25
 800627c:	4619      	mov	r1, r3
 800627e:	4812      	ldr	r0, [pc, #72]	; (80062c8 <_ZN7STN111012findResponseEv+0x35c>)
 8006280:	f008 fa46 	bl	800e710 <iprintf>
		}
		
		return response;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800628a:	e00a      	b.n	80062a2 <_ZN7STN111012findResponseEv+0x336>
	}

	if (debugMode)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	795b      	ldrb	r3, [r3, #5]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d002      	beq.n	800629a <_ZN7STN111012findResponseEv+0x32e>
		printf("Response not detected\r\n");
 8006294:	4814      	ldr	r0, [pc, #80]	; (80062e8 <_ZN7STN111012findResponseEv+0x37c>)
 8006296:	f008 fac1 	bl	800e81c <puts>

	return 0;
 800629a:	f04f 0200 	mov.w	r2, #0
 800629e:	f04f 0300 	mov.w	r3, #0
}
 80062a2:	4610      	mov	r0, r2
 80062a4:	4619      	mov	r1, r3
 80062a6:	3718      	adds	r7, #24
 80062a8:	46bd      	mov	sp, r7
 80062aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80062ae:	bf00      	nop
 80062b0:	08013618 	.word	0x08013618
 80062b4:	08013408 	.word	0x08013408
 80062b8:	08013634 	.word	0x08013634
 80062bc:	08013650 	.word	0x08013650
 80062c0:	0801366c 	.word	0x0801366c
 80062c4:	08013680 	.word	0x08013680
 80062c8:	08013694 	.word	0x08013694
 80062cc:	0801369c 	.word	0x0801369c
 80062d0:	080136b0 	.word	0x080136b0
 80062d4:	080136c4 	.word	0x080136c4
 80062d8:	080136d8 	.word	0x080136d8
 80062dc:	080136ec 	.word	0x080136ec
 80062e0:	08013700 	.word	0x08013700
 80062e4:	08013714 	.word	0x08013714
 80062e8:	08013728 	.word	0x08013728

080062ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80062ec:	b480      	push	{r7}
 80062ee:	af00      	add	r7, sp, #0
	return 1;
 80062f0:	2301      	movs	r3, #1
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <_kill>:

int _kill(int pid, int sig)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
 8006304:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006306:	f007 fa9d 	bl	800d844 <__errno>
 800630a:	4603      	mov	r3, r0
 800630c:	2216      	movs	r2, #22
 800630e:	601a      	str	r2, [r3, #0]
	return -1;
 8006310:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006314:	4618      	mov	r0, r3
 8006316:	3708      	adds	r7, #8
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <_exit>:

void _exit (int status)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006324:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f7ff ffe7 	bl	80062fc <_kill>
	while (1) {}		/* Make sure we hang here */
 800632e:	e7fe      	b.n	800632e <_exit+0x12>

08006330 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b086      	sub	sp, #24
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800633c:	2300      	movs	r3, #0
 800633e:	617b      	str	r3, [r7, #20]
 8006340:	e00a      	b.n	8006358 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006342:	f3af 8000 	nop.w
 8006346:	4601      	mov	r1, r0
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	1c5a      	adds	r2, r3, #1
 800634c:	60ba      	str	r2, [r7, #8]
 800634e:	b2ca      	uxtb	r2, r1
 8006350:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	3301      	adds	r3, #1
 8006356:	617b      	str	r3, [r7, #20]
 8006358:	697a      	ldr	r2, [r7, #20]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	429a      	cmp	r2, r3
 800635e:	dbf0      	blt.n	8006342 <_read+0x12>
	}

return len;
 8006360:	687b      	ldr	r3, [r7, #4]
}
 8006362:	4618      	mov	r0, r3
 8006364:	3718      	adds	r7, #24
 8006366:	46bd      	mov	sp, r7
 8006368:	bd80      	pop	{r7, pc}

0800636a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800636a:	b580      	push	{r7, lr}
 800636c:	b086      	sub	sp, #24
 800636e:	af00      	add	r7, sp, #0
 8006370:	60f8      	str	r0, [r7, #12]
 8006372:	60b9      	str	r1, [r7, #8]
 8006374:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006376:	2300      	movs	r3, #0
 8006378:	617b      	str	r3, [r7, #20]
 800637a:	e009      	b.n	8006390 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	1c5a      	adds	r2, r3, #1
 8006380:	60ba      	str	r2, [r7, #8]
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	4618      	mov	r0, r3
 8006386:	f7fa ff47 	bl	8001218 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	3301      	adds	r3, #1
 800638e:	617b      	str	r3, [r7, #20]
 8006390:	697a      	ldr	r2, [r7, #20]
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	429a      	cmp	r2, r3
 8006396:	dbf1      	blt.n	800637c <_write+0x12>
	}
	return len;
 8006398:	687b      	ldr	r3, [r7, #4]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3718      	adds	r7, #24
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}

080063a2 <_close>:

int _close(int file)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b083      	sub	sp, #12
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]
	return -1;
 80063aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80063ae:	4618      	mov	r0, r3
 80063b0:	370c      	adds	r7, #12
 80063b2:	46bd      	mov	sp, r7
 80063b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b8:	4770      	bx	lr

080063ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80063ba:	b480      	push	{r7}
 80063bc:	b083      	sub	sp, #12
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80063ca:	605a      	str	r2, [r3, #4]
	return 0;
 80063cc:	2300      	movs	r3, #0
}
 80063ce:	4618      	mov	r0, r3
 80063d0:	370c      	adds	r7, #12
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr

080063da <_isatty>:

int _isatty(int file)
{
 80063da:	b480      	push	{r7}
 80063dc:	b083      	sub	sp, #12
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
	return 1;
 80063e2:	2301      	movs	r3, #1
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	370c      	adds	r7, #12
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
	return 0;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3714      	adds	r7, #20
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
	...

0800640c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b086      	sub	sp, #24
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006414:	4a14      	ldr	r2, [pc, #80]	; (8006468 <_sbrk+0x5c>)
 8006416:	4b15      	ldr	r3, [pc, #84]	; (800646c <_sbrk+0x60>)
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006420:	4b13      	ldr	r3, [pc, #76]	; (8006470 <_sbrk+0x64>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d102      	bne.n	800642e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006428:	4b11      	ldr	r3, [pc, #68]	; (8006470 <_sbrk+0x64>)
 800642a:	4a12      	ldr	r2, [pc, #72]	; (8006474 <_sbrk+0x68>)
 800642c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800642e:	4b10      	ldr	r3, [pc, #64]	; (8006470 <_sbrk+0x64>)
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4413      	add	r3, r2
 8006436:	693a      	ldr	r2, [r7, #16]
 8006438:	429a      	cmp	r2, r3
 800643a:	d207      	bcs.n	800644c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800643c:	f007 fa02 	bl	800d844 <__errno>
 8006440:	4603      	mov	r3, r0
 8006442:	220c      	movs	r2, #12
 8006444:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800644a:	e009      	b.n	8006460 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800644c:	4b08      	ldr	r3, [pc, #32]	; (8006470 <_sbrk+0x64>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006452:	4b07      	ldr	r3, [pc, #28]	; (8006470 <_sbrk+0x64>)
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4413      	add	r3, r2
 800645a:	4a05      	ldr	r2, [pc, #20]	; (8006470 <_sbrk+0x64>)
 800645c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800645e:	68fb      	ldr	r3, [r7, #12]
}
 8006460:	4618      	mov	r0, r3
 8006462:	3718      	adds	r7, #24
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	20020000 	.word	0x20020000
 800646c:	00000400 	.word	0x00000400
 8006470:	20001404 	.word	0x20001404
 8006474:	20001af0 	.word	0x20001af0

08006478 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006478:	b480      	push	{r7}
 800647a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800647c:	4b06      	ldr	r3, [pc, #24]	; (8006498 <SystemInit+0x20>)
 800647e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006482:	4a05      	ldr	r2, [pc, #20]	; (8006498 <SystemInit+0x20>)
 8006484:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006488:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800648c:	bf00      	nop
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	e000ed00 	.word	0xe000ed00

0800649c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80064a0:	4b11      	ldr	r3, [pc, #68]	; (80064e8 <MX_USART1_UART_Init+0x4c>)
 80064a2:	4a12      	ldr	r2, [pc, #72]	; (80064ec <MX_USART1_UART_Init+0x50>)
 80064a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80064a6:	4b10      	ldr	r3, [pc, #64]	; (80064e8 <MX_USART1_UART_Init+0x4c>)
 80064a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80064ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80064ae:	4b0e      	ldr	r3, [pc, #56]	; (80064e8 <MX_USART1_UART_Init+0x4c>)
 80064b0:	2200      	movs	r2, #0
 80064b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80064b4:	4b0c      	ldr	r3, [pc, #48]	; (80064e8 <MX_USART1_UART_Init+0x4c>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80064ba:	4b0b      	ldr	r3, [pc, #44]	; (80064e8 <MX_USART1_UART_Init+0x4c>)
 80064bc:	2200      	movs	r2, #0
 80064be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80064c0:	4b09      	ldr	r3, [pc, #36]	; (80064e8 <MX_USART1_UART_Init+0x4c>)
 80064c2:	220c      	movs	r2, #12
 80064c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80064c6:	4b08      	ldr	r3, [pc, #32]	; (80064e8 <MX_USART1_UART_Init+0x4c>)
 80064c8:	2200      	movs	r2, #0
 80064ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80064cc:	4b06      	ldr	r3, [pc, #24]	; (80064e8 <MX_USART1_UART_Init+0x4c>)
 80064ce:	2200      	movs	r2, #0
 80064d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80064d2:	4805      	ldr	r0, [pc, #20]	; (80064e8 <MX_USART1_UART_Init+0x4c>)
 80064d4:	f002 ffd3 	bl	800947e <HAL_UART_Init>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80064de:	f7fe faf9 	bl	8004ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80064e2:	bf00      	nop
 80064e4:	bd80      	pop	{r7, pc}
 80064e6:	bf00      	nop
 80064e8:	20001454 	.word	0x20001454
 80064ec:	40011000 	.word	0x40011000

080064f0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80064f4:	4b11      	ldr	r3, [pc, #68]	; (800653c <MX_USART2_UART_Init+0x4c>)
 80064f6:	4a12      	ldr	r2, [pc, #72]	; (8006540 <MX_USART2_UART_Init+0x50>)
 80064f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80064fa:	4b10      	ldr	r3, [pc, #64]	; (800653c <MX_USART2_UART_Init+0x4c>)
 80064fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006500:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006502:	4b0e      	ldr	r3, [pc, #56]	; (800653c <MX_USART2_UART_Init+0x4c>)
 8006504:	2200      	movs	r2, #0
 8006506:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006508:	4b0c      	ldr	r3, [pc, #48]	; (800653c <MX_USART2_UART_Init+0x4c>)
 800650a:	2200      	movs	r2, #0
 800650c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800650e:	4b0b      	ldr	r3, [pc, #44]	; (800653c <MX_USART2_UART_Init+0x4c>)
 8006510:	2200      	movs	r2, #0
 8006512:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006514:	4b09      	ldr	r3, [pc, #36]	; (800653c <MX_USART2_UART_Init+0x4c>)
 8006516:	220c      	movs	r2, #12
 8006518:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800651a:	4b08      	ldr	r3, [pc, #32]	; (800653c <MX_USART2_UART_Init+0x4c>)
 800651c:	2200      	movs	r2, #0
 800651e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006520:	4b06      	ldr	r3, [pc, #24]	; (800653c <MX_USART2_UART_Init+0x4c>)
 8006522:	2200      	movs	r2, #0
 8006524:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006526:	4805      	ldr	r0, [pc, #20]	; (800653c <MX_USART2_UART_Init+0x4c>)
 8006528:	f002 ffa9 	bl	800947e <HAL_UART_Init>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d001      	beq.n	8006536 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8006532:	f7fe facf 	bl	8004ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006536:	bf00      	nop
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	20001630 	.word	0x20001630
 8006540:	40004400 	.word	0x40004400

08006544 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8006548:	4b11      	ldr	r3, [pc, #68]	; (8006590 <MX_USART6_UART_Init+0x4c>)
 800654a:	4a12      	ldr	r2, [pc, #72]	; (8006594 <MX_USART6_UART_Init+0x50>)
 800654c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 800654e:	4b10      	ldr	r3, [pc, #64]	; (8006590 <MX_USART6_UART_Init+0x4c>)
 8006550:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8006554:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8006556:	4b0e      	ldr	r3, [pc, #56]	; (8006590 <MX_USART6_UART_Init+0x4c>)
 8006558:	2200      	movs	r2, #0
 800655a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800655c:	4b0c      	ldr	r3, [pc, #48]	; (8006590 <MX_USART6_UART_Init+0x4c>)
 800655e:	2200      	movs	r2, #0
 8006560:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8006562:	4b0b      	ldr	r3, [pc, #44]	; (8006590 <MX_USART6_UART_Init+0x4c>)
 8006564:	2200      	movs	r2, #0
 8006566:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8006568:	4b09      	ldr	r3, [pc, #36]	; (8006590 <MX_USART6_UART_Init+0x4c>)
 800656a:	220c      	movs	r2, #12
 800656c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800656e:	4b08      	ldr	r3, [pc, #32]	; (8006590 <MX_USART6_UART_Init+0x4c>)
 8006570:	2200      	movs	r2, #0
 8006572:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8006574:	4b06      	ldr	r3, [pc, #24]	; (8006590 <MX_USART6_UART_Init+0x4c>)
 8006576:	2200      	movs	r2, #0
 8006578:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800657a:	4805      	ldr	r0, [pc, #20]	; (8006590 <MX_USART6_UART_Init+0x4c>)
 800657c:	f002 ff7f 	bl	800947e <HAL_UART_Init>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d001      	beq.n	800658a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8006586:	f7fe faa5 	bl	8004ad4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800658a:	bf00      	nop
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	200014a4 	.word	0x200014a4
 8006594:	40011400 	.word	0x40011400

08006598 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b08e      	sub	sp, #56	; 0x38
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80065a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065a4:	2200      	movs	r2, #0
 80065a6:	601a      	str	r2, [r3, #0]
 80065a8:	605a      	str	r2, [r3, #4]
 80065aa:	609a      	str	r2, [r3, #8]
 80065ac:	60da      	str	r2, [r3, #12]
 80065ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a53      	ldr	r2, [pc, #332]	; (8006704 <HAL_UART_MspInit+0x16c>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d135      	bne.n	8006626 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80065ba:	2300      	movs	r3, #0
 80065bc:	623b      	str	r3, [r7, #32]
 80065be:	4b52      	ldr	r3, [pc, #328]	; (8006708 <HAL_UART_MspInit+0x170>)
 80065c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065c2:	4a51      	ldr	r2, [pc, #324]	; (8006708 <HAL_UART_MspInit+0x170>)
 80065c4:	f043 0310 	orr.w	r3, r3, #16
 80065c8:	6453      	str	r3, [r2, #68]	; 0x44
 80065ca:	4b4f      	ldr	r3, [pc, #316]	; (8006708 <HAL_UART_MspInit+0x170>)
 80065cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ce:	f003 0310 	and.w	r3, r3, #16
 80065d2:	623b      	str	r3, [r7, #32]
 80065d4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80065d6:	2300      	movs	r3, #0
 80065d8:	61fb      	str	r3, [r7, #28]
 80065da:	4b4b      	ldr	r3, [pc, #300]	; (8006708 <HAL_UART_MspInit+0x170>)
 80065dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065de:	4a4a      	ldr	r2, [pc, #296]	; (8006708 <HAL_UART_MspInit+0x170>)
 80065e0:	f043 0301 	orr.w	r3, r3, #1
 80065e4:	6313      	str	r3, [r2, #48]	; 0x30
 80065e6:	4b48      	ldr	r3, [pc, #288]	; (8006708 <HAL_UART_MspInit+0x170>)
 80065e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065ea:	f003 0301 	and.w	r3, r3, #1
 80065ee:	61fb      	str	r3, [r7, #28]
 80065f0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80065f2:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80065f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065f8:	2302      	movs	r3, #2
 80065fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065fc:	2300      	movs	r3, #0
 80065fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006600:	2303      	movs	r3, #3
 8006602:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006604:	2307      	movs	r3, #7
 8006606:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800660c:	4619      	mov	r1, r3
 800660e:	483f      	ldr	r0, [pc, #252]	; (800670c <HAL_UART_MspInit+0x174>)
 8006610:	f000 fdf4 	bl	80071fc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8006614:	2200      	movs	r2, #0
 8006616:	2100      	movs	r1, #0
 8006618:	2025      	movs	r0, #37	; 0x25
 800661a:	f000 fa1a 	bl	8006a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800661e:	2025      	movs	r0, #37	; 0x25
 8006620:	f000 fa33 	bl	8006a8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8006624:	e06a      	b.n	80066fc <HAL_UART_MspInit+0x164>
  else if(uartHandle->Instance==USART2)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4a39      	ldr	r2, [pc, #228]	; (8006710 <HAL_UART_MspInit+0x178>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d12c      	bne.n	800668a <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006630:	2300      	movs	r3, #0
 8006632:	61bb      	str	r3, [r7, #24]
 8006634:	4b34      	ldr	r3, [pc, #208]	; (8006708 <HAL_UART_MspInit+0x170>)
 8006636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006638:	4a33      	ldr	r2, [pc, #204]	; (8006708 <HAL_UART_MspInit+0x170>)
 800663a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800663e:	6413      	str	r3, [r2, #64]	; 0x40
 8006640:	4b31      	ldr	r3, [pc, #196]	; (8006708 <HAL_UART_MspInit+0x170>)
 8006642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006648:	61bb      	str	r3, [r7, #24]
 800664a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800664c:	2300      	movs	r3, #0
 800664e:	617b      	str	r3, [r7, #20]
 8006650:	4b2d      	ldr	r3, [pc, #180]	; (8006708 <HAL_UART_MspInit+0x170>)
 8006652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006654:	4a2c      	ldr	r2, [pc, #176]	; (8006708 <HAL_UART_MspInit+0x170>)
 8006656:	f043 0301 	orr.w	r3, r3, #1
 800665a:	6313      	str	r3, [r2, #48]	; 0x30
 800665c:	4b2a      	ldr	r3, [pc, #168]	; (8006708 <HAL_UART_MspInit+0x170>)
 800665e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006660:	f003 0301 	and.w	r3, r3, #1
 8006664:	617b      	str	r3, [r7, #20]
 8006666:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8006668:	230c      	movs	r3, #12
 800666a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800666c:	2302      	movs	r3, #2
 800666e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006670:	2300      	movs	r3, #0
 8006672:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006674:	2303      	movs	r3, #3
 8006676:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006678:	2307      	movs	r3, #7
 800667a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800667c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006680:	4619      	mov	r1, r3
 8006682:	4822      	ldr	r0, [pc, #136]	; (800670c <HAL_UART_MspInit+0x174>)
 8006684:	f000 fdba 	bl	80071fc <HAL_GPIO_Init>
}
 8006688:	e038      	b.n	80066fc <HAL_UART_MspInit+0x164>
  else if(uartHandle->Instance==USART6)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a21      	ldr	r2, [pc, #132]	; (8006714 <HAL_UART_MspInit+0x17c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d133      	bne.n	80066fc <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006694:	2300      	movs	r3, #0
 8006696:	613b      	str	r3, [r7, #16]
 8006698:	4b1b      	ldr	r3, [pc, #108]	; (8006708 <HAL_UART_MspInit+0x170>)
 800669a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669c:	4a1a      	ldr	r2, [pc, #104]	; (8006708 <HAL_UART_MspInit+0x170>)
 800669e:	f043 0320 	orr.w	r3, r3, #32
 80066a2:	6453      	str	r3, [r2, #68]	; 0x44
 80066a4:	4b18      	ldr	r3, [pc, #96]	; (8006708 <HAL_UART_MspInit+0x170>)
 80066a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a8:	f003 0320 	and.w	r3, r3, #32
 80066ac:	613b      	str	r3, [r7, #16]
 80066ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80066b0:	2300      	movs	r3, #0
 80066b2:	60fb      	str	r3, [r7, #12]
 80066b4:	4b14      	ldr	r3, [pc, #80]	; (8006708 <HAL_UART_MspInit+0x170>)
 80066b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b8:	4a13      	ldr	r2, [pc, #76]	; (8006708 <HAL_UART_MspInit+0x170>)
 80066ba:	f043 0304 	orr.w	r3, r3, #4
 80066be:	6313      	str	r3, [r2, #48]	; 0x30
 80066c0:	4b11      	ldr	r3, [pc, #68]	; (8006708 <HAL_UART_MspInit+0x170>)
 80066c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c4:	f003 0304 	and.w	r3, r3, #4
 80066c8:	60fb      	str	r3, [r7, #12]
 80066ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80066cc:	23c0      	movs	r3, #192	; 0xc0
 80066ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066d0:	2302      	movs	r3, #2
 80066d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066d4:	2300      	movs	r3, #0
 80066d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066d8:	2303      	movs	r3, #3
 80066da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80066dc:	2308      	movs	r3, #8
 80066de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066e4:	4619      	mov	r1, r3
 80066e6:	480c      	ldr	r0, [pc, #48]	; (8006718 <HAL_UART_MspInit+0x180>)
 80066e8:	f000 fd88 	bl	80071fc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80066ec:	2200      	movs	r2, #0
 80066ee:	2100      	movs	r1, #0
 80066f0:	2047      	movs	r0, #71	; 0x47
 80066f2:	f000 f9ae 	bl	8006a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80066f6:	2047      	movs	r0, #71	; 0x47
 80066f8:	f000 f9c7 	bl	8006a8a <HAL_NVIC_EnableIRQ>
}
 80066fc:	bf00      	nop
 80066fe:	3738      	adds	r7, #56	; 0x38
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	40011000 	.word	0x40011000
 8006708:	40023800 	.word	0x40023800
 800670c:	40020000 	.word	0x40020000
 8006710:	40004400 	.word	0x40004400
 8006714:	40011400 	.word	0x40011400
 8006718:	40020800 	.word	0x40020800

0800671c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800671c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006754 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006720:	480d      	ldr	r0, [pc, #52]	; (8006758 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006722:	490e      	ldr	r1, [pc, #56]	; (800675c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006724:	4a0e      	ldr	r2, [pc, #56]	; (8006760 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006728:	e002      	b.n	8006730 <LoopCopyDataInit>

0800672a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800672a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800672c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800672e:	3304      	adds	r3, #4

08006730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006734:	d3f9      	bcc.n	800672a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006736:	4a0b      	ldr	r2, [pc, #44]	; (8006764 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006738:	4c0b      	ldr	r4, [pc, #44]	; (8006768 <LoopFillZerobss+0x26>)
  movs r3, #0
 800673a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800673c:	e001      	b.n	8006742 <LoopFillZerobss>

0800673e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800673e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006740:	3204      	adds	r2, #4

08006742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006744:	d3fb      	bcc.n	800673e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006746:	f7ff fe97 	bl	8006478 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800674a:	f007 f881 	bl	800d850 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800674e:	f7fb f90d 	bl	800196c <main>
  bx  lr    
 8006752:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8006754:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800675c:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8006760:	08013e44 	.word	0x08013e44
  ldr r2, =_sbss
 8006764:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8006768:	20001af0 	.word	0x20001af0

0800676c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800676c:	e7fe      	b.n	800676c <ADC_IRQHandler>
	...

08006770 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006774:	4b0e      	ldr	r3, [pc, #56]	; (80067b0 <HAL_Init+0x40>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a0d      	ldr	r2, [pc, #52]	; (80067b0 <HAL_Init+0x40>)
 800677a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800677e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006780:	4b0b      	ldr	r3, [pc, #44]	; (80067b0 <HAL_Init+0x40>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a0a      	ldr	r2, [pc, #40]	; (80067b0 <HAL_Init+0x40>)
 8006786:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800678a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800678c:	4b08      	ldr	r3, [pc, #32]	; (80067b0 <HAL_Init+0x40>)
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a07      	ldr	r2, [pc, #28]	; (80067b0 <HAL_Init+0x40>)
 8006792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006796:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006798:	2003      	movs	r0, #3
 800679a:	f000 f94f 	bl	8006a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800679e:	2000      	movs	r0, #0
 80067a0:	f000 f808 	bl	80067b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80067a4:	f7fe faec 	bl	8004d80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	40023c00 	.word	0x40023c00

080067b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80067bc:	4b12      	ldr	r3, [pc, #72]	; (8006808 <HAL_InitTick+0x54>)
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	4b12      	ldr	r3, [pc, #72]	; (800680c <HAL_InitTick+0x58>)
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	4619      	mov	r1, r3
 80067c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80067ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80067ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80067d2:	4618      	mov	r0, r3
 80067d4:	f000 f967 	bl	8006aa6 <HAL_SYSTICK_Config>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e00e      	b.n	8006800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b0f      	cmp	r3, #15
 80067e6:	d80a      	bhi.n	80067fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80067e8:	2200      	movs	r2, #0
 80067ea:	6879      	ldr	r1, [r7, #4]
 80067ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067f0:	f000 f92f 	bl	8006a52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80067f4:	4a06      	ldr	r2, [pc, #24]	; (8006810 <HAL_InitTick+0x5c>)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	e000      	b.n	8006800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
}
 8006800:	4618      	mov	r0, r3
 8006802:	3708      	adds	r7, #8
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	20000038 	.word	0x20000038
 800680c:	20000040 	.word	0x20000040
 8006810:	2000003c 	.word	0x2000003c

08006814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006814:	b480      	push	{r7}
 8006816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006818:	4b06      	ldr	r3, [pc, #24]	; (8006834 <HAL_IncTick+0x20>)
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	461a      	mov	r2, r3
 800681e:	4b06      	ldr	r3, [pc, #24]	; (8006838 <HAL_IncTick+0x24>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4413      	add	r3, r2
 8006824:	4a04      	ldr	r2, [pc, #16]	; (8006838 <HAL_IncTick+0x24>)
 8006826:	6013      	str	r3, [r2, #0]
}
 8006828:	bf00      	nop
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	20000040 	.word	0x20000040
 8006838:	20001674 	.word	0x20001674

0800683c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800683c:	b480      	push	{r7}
 800683e:	af00      	add	r7, sp, #0
  return uwTick;
 8006840:	4b03      	ldr	r3, [pc, #12]	; (8006850 <HAL_GetTick+0x14>)
 8006842:	681b      	ldr	r3, [r3, #0]
}
 8006844:	4618      	mov	r0, r3
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr
 800684e:	bf00      	nop
 8006850:	20001674 	.word	0x20001674

08006854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800685c:	f7ff ffee 	bl	800683c <HAL_GetTick>
 8006860:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800686c:	d005      	beq.n	800687a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800686e:	4b0a      	ldr	r3, [pc, #40]	; (8006898 <HAL_Delay+0x44>)
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	461a      	mov	r2, r3
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	4413      	add	r3, r2
 8006878:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800687a:	bf00      	nop
 800687c:	f7ff ffde 	bl	800683c <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	68bb      	ldr	r3, [r7, #8]
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	429a      	cmp	r2, r3
 800688a:	d8f7      	bhi.n	800687c <HAL_Delay+0x28>
  {
  }
}
 800688c:	bf00      	nop
 800688e:	bf00      	nop
 8006890:	3710      	adds	r7, #16
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}
 8006896:	bf00      	nop
 8006898:	20000040 	.word	0x20000040

0800689c <__NVIC_SetPriorityGrouping>:
{
 800689c:	b480      	push	{r7}
 800689e:	b085      	sub	sp, #20
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f003 0307 	and.w	r3, r3, #7
 80068aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80068ac:	4b0c      	ldr	r3, [pc, #48]	; (80068e0 <__NVIC_SetPriorityGrouping+0x44>)
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80068b2:	68ba      	ldr	r2, [r7, #8]
 80068b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80068b8:	4013      	ands	r3, r2
 80068ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80068c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80068c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80068ce:	4a04      	ldr	r2, [pc, #16]	; (80068e0 <__NVIC_SetPriorityGrouping+0x44>)
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	60d3      	str	r3, [r2, #12]
}
 80068d4:	bf00      	nop
 80068d6:	3714      	adds	r7, #20
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr
 80068e0:	e000ed00 	.word	0xe000ed00

080068e4 <__NVIC_GetPriorityGrouping>:
{
 80068e4:	b480      	push	{r7}
 80068e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80068e8:	4b04      	ldr	r3, [pc, #16]	; (80068fc <__NVIC_GetPriorityGrouping+0x18>)
 80068ea:	68db      	ldr	r3, [r3, #12]
 80068ec:	0a1b      	lsrs	r3, r3, #8
 80068ee:	f003 0307 	and.w	r3, r3, #7
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	e000ed00 	.word	0xe000ed00

08006900 <__NVIC_EnableIRQ>:
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	4603      	mov	r3, r0
 8006908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800690a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800690e:	2b00      	cmp	r3, #0
 8006910:	db0b      	blt.n	800692a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006912:	79fb      	ldrb	r3, [r7, #7]
 8006914:	f003 021f 	and.w	r2, r3, #31
 8006918:	4907      	ldr	r1, [pc, #28]	; (8006938 <__NVIC_EnableIRQ+0x38>)
 800691a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800691e:	095b      	lsrs	r3, r3, #5
 8006920:	2001      	movs	r0, #1
 8006922:	fa00 f202 	lsl.w	r2, r0, r2
 8006926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800692a:	bf00      	nop
 800692c:	370c      	adds	r7, #12
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	e000e100 	.word	0xe000e100

0800693c <__NVIC_SetPriority>:
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	4603      	mov	r3, r0
 8006944:	6039      	str	r1, [r7, #0]
 8006946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800694c:	2b00      	cmp	r3, #0
 800694e:	db0a      	blt.n	8006966 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	b2da      	uxtb	r2, r3
 8006954:	490c      	ldr	r1, [pc, #48]	; (8006988 <__NVIC_SetPriority+0x4c>)
 8006956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800695a:	0112      	lsls	r2, r2, #4
 800695c:	b2d2      	uxtb	r2, r2
 800695e:	440b      	add	r3, r1
 8006960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006964:	e00a      	b.n	800697c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	b2da      	uxtb	r2, r3
 800696a:	4908      	ldr	r1, [pc, #32]	; (800698c <__NVIC_SetPriority+0x50>)
 800696c:	79fb      	ldrb	r3, [r7, #7]
 800696e:	f003 030f 	and.w	r3, r3, #15
 8006972:	3b04      	subs	r3, #4
 8006974:	0112      	lsls	r2, r2, #4
 8006976:	b2d2      	uxtb	r2, r2
 8006978:	440b      	add	r3, r1
 800697a:	761a      	strb	r2, [r3, #24]
}
 800697c:	bf00      	nop
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr
 8006988:	e000e100 	.word	0xe000e100
 800698c:	e000ed00 	.word	0xe000ed00

08006990 <NVIC_EncodePriority>:
{
 8006990:	b480      	push	{r7}
 8006992:	b089      	sub	sp, #36	; 0x24
 8006994:	af00      	add	r7, sp, #0
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f003 0307 	and.w	r3, r3, #7
 80069a2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	f1c3 0307 	rsb	r3, r3, #7
 80069aa:	2b04      	cmp	r3, #4
 80069ac:	bf28      	it	cs
 80069ae:	2304      	movcs	r3, #4
 80069b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80069b2:	69fb      	ldr	r3, [r7, #28]
 80069b4:	3304      	adds	r3, #4
 80069b6:	2b06      	cmp	r3, #6
 80069b8:	d902      	bls.n	80069c0 <NVIC_EncodePriority+0x30>
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	3b03      	subs	r3, #3
 80069be:	e000      	b.n	80069c2 <NVIC_EncodePriority+0x32>
 80069c0:	2300      	movs	r3, #0
 80069c2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069c8:	69bb      	ldr	r3, [r7, #24]
 80069ca:	fa02 f303 	lsl.w	r3, r2, r3
 80069ce:	43da      	mvns	r2, r3
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	401a      	ands	r2, r3
 80069d4:	697b      	ldr	r3, [r7, #20]
 80069d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80069d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	fa01 f303 	lsl.w	r3, r1, r3
 80069e2:	43d9      	mvns	r1, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80069e8:	4313      	orrs	r3, r2
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3724      	adds	r7, #36	; 0x24
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
	...

080069f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b082      	sub	sp, #8
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	3b01      	subs	r3, #1
 8006a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006a08:	d301      	bcc.n	8006a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	e00f      	b.n	8006a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006a0e:	4a0a      	ldr	r2, [pc, #40]	; (8006a38 <SysTick_Config+0x40>)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006a16:	210f      	movs	r1, #15
 8006a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a1c:	f7ff ff8e 	bl	800693c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006a20:	4b05      	ldr	r3, [pc, #20]	; (8006a38 <SysTick_Config+0x40>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006a26:	4b04      	ldr	r3, [pc, #16]	; (8006a38 <SysTick_Config+0x40>)
 8006a28:	2207      	movs	r2, #7
 8006a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}
 8006a36:	bf00      	nop
 8006a38:	e000e010 	.word	0xe000e010

08006a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b082      	sub	sp, #8
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f7ff ff29 	bl	800689c <__NVIC_SetPriorityGrouping>
}
 8006a4a:	bf00      	nop
 8006a4c:	3708      	adds	r7, #8
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}

08006a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006a52:	b580      	push	{r7, lr}
 8006a54:	b086      	sub	sp, #24
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	4603      	mov	r3, r0
 8006a5a:	60b9      	str	r1, [r7, #8]
 8006a5c:	607a      	str	r2, [r7, #4]
 8006a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006a60:	2300      	movs	r3, #0
 8006a62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006a64:	f7ff ff3e 	bl	80068e4 <__NVIC_GetPriorityGrouping>
 8006a68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	68b9      	ldr	r1, [r7, #8]
 8006a6e:	6978      	ldr	r0, [r7, #20]
 8006a70:	f7ff ff8e 	bl	8006990 <NVIC_EncodePriority>
 8006a74:	4602      	mov	r2, r0
 8006a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a7a:	4611      	mov	r1, r2
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7ff ff5d 	bl	800693c <__NVIC_SetPriority>
}
 8006a82:	bf00      	nop
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}

08006a8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a8a:	b580      	push	{r7, lr}
 8006a8c:	b082      	sub	sp, #8
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	4603      	mov	r3, r0
 8006a92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7ff ff31 	bl	8006900 <__NVIC_EnableIRQ>
}
 8006a9e:	bf00      	nop
 8006aa0:	3708      	adds	r7, #8
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b082      	sub	sp, #8
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7ff ffa2 	bl	80069f8 <SysTick_Config>
 8006ab4:	4603      	mov	r3, r0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3708      	adds	r7, #8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
	...

08006ac0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b086      	sub	sp, #24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006acc:	f7ff feb6 	bl	800683c <HAL_GetTick>
 8006ad0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d101      	bne.n	8006adc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e099      	b.n	8006c10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2202      	movs	r2, #2
 8006ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681a      	ldr	r2, [r3, #0]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f022 0201 	bic.w	r2, r2, #1
 8006afa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006afc:	e00f      	b.n	8006b1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006afe:	f7ff fe9d 	bl	800683c <HAL_GetTick>
 8006b02:	4602      	mov	r2, r0
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	1ad3      	subs	r3, r2, r3
 8006b08:	2b05      	cmp	r3, #5
 8006b0a:	d908      	bls.n	8006b1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2220      	movs	r2, #32
 8006b10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2203      	movs	r2, #3
 8006b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006b1a:	2303      	movs	r3, #3
 8006b1c:	e078      	b.n	8006c10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1e8      	bne.n	8006afe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006b34:	697a      	ldr	r2, [r7, #20]
 8006b36:	4b38      	ldr	r3, [pc, #224]	; (8006c18 <HAL_DMA_Init+0x158>)
 8006b38:	4013      	ands	r3, r2
 8006b3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	685a      	ldr	r2, [r3, #4]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	691b      	ldr	r3, [r3, #16]
 8006b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006b56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	699b      	ldr	r3, [r3, #24]
 8006b5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006b62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a1b      	ldr	r3, [r3, #32]
 8006b68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	4313      	orrs	r3, r2
 8006b6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b74:	2b04      	cmp	r3, #4
 8006b76:	d107      	bne.n	8006b88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b80:	4313      	orrs	r3, r2
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	4313      	orrs	r3, r2
 8006b86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f023 0307 	bic.w	r3, r3, #7
 8006b9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba4:	697a      	ldr	r2, [r7, #20]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bae:	2b04      	cmp	r3, #4
 8006bb0:	d117      	bne.n	8006be2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb6:	697a      	ldr	r2, [r7, #20]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d00e      	beq.n	8006be2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 fa9d 	bl	8007104 <DMA_CheckFifoParam>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d008      	beq.n	8006be2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2240      	movs	r2, #64	; 0x40
 8006bd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006bde:	2301      	movs	r3, #1
 8006be0:	e016      	b.n	8006c10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	697a      	ldr	r2, [r7, #20]
 8006be8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fa54 	bl	8007098 <DMA_CalcBaseAndBitshift>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bf8:	223f      	movs	r2, #63	; 0x3f
 8006bfa:	409a      	lsls	r2, r3
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2201      	movs	r2, #1
 8006c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3718      	adds	r7, #24
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	f010803f 	.word	0xf010803f

08006c1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b086      	sub	sp, #24
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	60f8      	str	r0, [r7, #12]
 8006c24:	60b9      	str	r1, [r7, #8]
 8006c26:	607a      	str	r2, [r7, #4]
 8006c28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d101      	bne.n	8006c42 <HAL_DMA_Start_IT+0x26>
 8006c3e:	2302      	movs	r3, #2
 8006c40:	e040      	b.n	8006cc4 <HAL_DMA_Start_IT+0xa8>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2201      	movs	r2, #1
 8006c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b01      	cmp	r3, #1
 8006c54:	d12f      	bne.n	8006cb6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2202      	movs	r2, #2
 8006c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2200      	movs	r2, #0
 8006c62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	68b9      	ldr	r1, [r7, #8]
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	f000 f9e6 	bl	800703c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c74:	223f      	movs	r2, #63	; 0x3f
 8006c76:	409a      	lsls	r2, r3
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f042 0216 	orr.w	r2, r2, #22
 8006c8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d007      	beq.n	8006ca4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f042 0208 	orr.w	r2, r2, #8
 8006ca2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	681a      	ldr	r2, [r3, #0]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f042 0201 	orr.w	r2, r2, #1
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	e005      	b.n	8006cc2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3718      	adds	r7, #24
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	2b02      	cmp	r3, #2
 8006cde:	d004      	beq.n	8006cea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2280      	movs	r2, #128	; 0x80
 8006ce4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e00c      	b.n	8006d04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2205      	movs	r2, #5
 8006cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f022 0201 	bic.w	r2, r2, #1
 8006d00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	370c      	adds	r7, #12
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b086      	sub	sp, #24
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006d1c:	4b92      	ldr	r3, [pc, #584]	; (8006f68 <HAL_DMA_IRQHandler+0x258>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a92      	ldr	r2, [pc, #584]	; (8006f6c <HAL_DMA_IRQHandler+0x25c>)
 8006d22:	fba2 2303 	umull	r2, r3, r2, r3
 8006d26:	0a9b      	lsrs	r3, r3, #10
 8006d28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d3a:	2208      	movs	r2, #8
 8006d3c:	409a      	lsls	r2, r3
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	4013      	ands	r3, r2
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d01a      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0304 	and.w	r3, r3, #4
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d013      	beq.n	8006d7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f022 0204 	bic.w	r2, r2, #4
 8006d62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d68:	2208      	movs	r2, #8
 8006d6a:	409a      	lsls	r2, r3
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d74:	f043 0201 	orr.w	r2, r3, #1
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d80:	2201      	movs	r2, #1
 8006d82:	409a      	lsls	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	4013      	ands	r3, r2
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d012      	beq.n	8006db2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	695b      	ldr	r3, [r3, #20]
 8006d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00b      	beq.n	8006db2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d9e:	2201      	movs	r2, #1
 8006da0:	409a      	lsls	r2, r3
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006daa:	f043 0202 	orr.w	r2, r3, #2
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006db6:	2204      	movs	r2, #4
 8006db8:	409a      	lsls	r2, r3
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d012      	beq.n	8006de8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0302 	and.w	r3, r3, #2
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00b      	beq.n	8006de8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dd4:	2204      	movs	r2, #4
 8006dd6:	409a      	lsls	r2, r3
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006de0:	f043 0204 	orr.w	r2, r3, #4
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dec:	2210      	movs	r2, #16
 8006dee:	409a      	lsls	r2, r3
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4013      	ands	r3, r2
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d043      	beq.n	8006e80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 0308 	and.w	r3, r3, #8
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d03c      	beq.n	8006e80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e0a:	2210      	movs	r2, #16
 8006e0c:	409a      	lsls	r2, r3
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d018      	beq.n	8006e52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d108      	bne.n	8006e40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d024      	beq.n	8006e80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	4798      	blx	r3
 8006e3e:	e01f      	b.n	8006e80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d01b      	beq.n	8006e80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	4798      	blx	r3
 8006e50:	e016      	b.n	8006e80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d107      	bne.n	8006e70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 0208 	bic.w	r2, r2, #8
 8006e6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d003      	beq.n	8006e80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e84:	2220      	movs	r2, #32
 8006e86:	409a      	lsls	r2, r3
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4013      	ands	r3, r2
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	f000 808e 	beq.w	8006fae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f003 0310 	and.w	r3, r3, #16
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 8086 	beq.w	8006fae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ea6:	2220      	movs	r2, #32
 8006ea8:	409a      	lsls	r2, r3
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b05      	cmp	r3, #5
 8006eb8:	d136      	bne.n	8006f28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f022 0216 	bic.w	r2, r2, #22
 8006ec8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	695a      	ldr	r2, [r3, #20]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ed8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d103      	bne.n	8006eea <HAL_DMA_IRQHandler+0x1da>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d007      	beq.n	8006efa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681a      	ldr	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f022 0208 	bic.w	r2, r2, #8
 8006ef8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006efe:	223f      	movs	r2, #63	; 0x3f
 8006f00:	409a      	lsls	r2, r3
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d07d      	beq.n	800701a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	4798      	blx	r3
        }
        return;
 8006f26:	e078      	b.n	800701a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d01c      	beq.n	8006f70 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d108      	bne.n	8006f56 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d030      	beq.n	8006fae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	4798      	blx	r3
 8006f54:	e02b      	b.n	8006fae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d027      	beq.n	8006fae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	4798      	blx	r3
 8006f66:	e022      	b.n	8006fae <HAL_DMA_IRQHandler+0x29e>
 8006f68:	20000038 	.word	0x20000038
 8006f6c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d10f      	bne.n	8006f9e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f022 0210 	bic.w	r2, r2, #16
 8006f8c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2201      	movs	r2, #1
 8006f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d032      	beq.n	800701c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fba:	f003 0301 	and.w	r3, r3, #1
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d022      	beq.n	8007008 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2205      	movs	r2, #5
 8006fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f022 0201 	bic.w	r2, r2, #1
 8006fd8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	60bb      	str	r3, [r7, #8]
 8006fe0:	697a      	ldr	r2, [r7, #20]
 8006fe2:	429a      	cmp	r2, r3
 8006fe4:	d307      	bcc.n	8006ff6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d1f2      	bne.n	8006fda <HAL_DMA_IRQHandler+0x2ca>
 8006ff4:	e000      	b.n	8006ff8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006ff6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800700c:	2b00      	cmp	r3, #0
 800700e:	d005      	beq.n	800701c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	4798      	blx	r3
 8007018:	e000      	b.n	800701c <HAL_DMA_IRQHandler+0x30c>
        return;
 800701a:	bf00      	nop
    }
  }
}
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop

08007024 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8007024:	b480      	push	{r7}
 8007026:	b083      	sub	sp, #12
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8007030:	4618      	mov	r0, r3
 8007032:	370c      	adds	r7, #12
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	60f8      	str	r0, [r7, #12]
 8007044:	60b9      	str	r1, [r7, #8]
 8007046:	607a      	str	r2, [r7, #4]
 8007048:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007058:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	683a      	ldr	r2, [r7, #0]
 8007060:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	2b40      	cmp	r3, #64	; 0x40
 8007068:	d108      	bne.n	800707c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68ba      	ldr	r2, [r7, #8]
 8007078:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800707a:	e007      	b.n	800708c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68ba      	ldr	r2, [r7, #8]
 8007082:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	60da      	str	r2, [r3, #12]
}
 800708c:	bf00      	nop
 800708e:	3714      	adds	r7, #20
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	b2db      	uxtb	r3, r3
 80070a6:	3b10      	subs	r3, #16
 80070a8:	4a14      	ldr	r2, [pc, #80]	; (80070fc <DMA_CalcBaseAndBitshift+0x64>)
 80070aa:	fba2 2303 	umull	r2, r3, r2, r3
 80070ae:	091b      	lsrs	r3, r3, #4
 80070b0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80070b2:	4a13      	ldr	r2, [pc, #76]	; (8007100 <DMA_CalcBaseAndBitshift+0x68>)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	4413      	add	r3, r2
 80070b8:	781b      	ldrb	r3, [r3, #0]
 80070ba:	461a      	mov	r2, r3
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2b03      	cmp	r3, #3
 80070c4:	d909      	bls.n	80070da <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80070ce:	f023 0303 	bic.w	r3, r3, #3
 80070d2:	1d1a      	adds	r2, r3, #4
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	659a      	str	r2, [r3, #88]	; 0x58
 80070d8:	e007      	b.n	80070ea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80070e2:	f023 0303 	bic.w	r3, r3, #3
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	aaaaaaab 	.word	0xaaaaaaab
 8007100:	08013878 	.word	0x08013878

08007104 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800710c:	2300      	movs	r3, #0
 800710e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007114:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d11f      	bne.n	800715e <DMA_CheckFifoParam+0x5a>
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	2b03      	cmp	r3, #3
 8007122:	d856      	bhi.n	80071d2 <DMA_CheckFifoParam+0xce>
 8007124:	a201      	add	r2, pc, #4	; (adr r2, 800712c <DMA_CheckFifoParam+0x28>)
 8007126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712a:	bf00      	nop
 800712c:	0800713d 	.word	0x0800713d
 8007130:	0800714f 	.word	0x0800714f
 8007134:	0800713d 	.word	0x0800713d
 8007138:	080071d3 	.word	0x080071d3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007140:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007144:	2b00      	cmp	r3, #0
 8007146:	d046      	beq.n	80071d6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007148:	2301      	movs	r3, #1
 800714a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800714c:	e043      	b.n	80071d6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007152:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007156:	d140      	bne.n	80071da <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007158:	2301      	movs	r3, #1
 800715a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800715c:	e03d      	b.n	80071da <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	699b      	ldr	r3, [r3, #24]
 8007162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007166:	d121      	bne.n	80071ac <DMA_CheckFifoParam+0xa8>
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	2b03      	cmp	r3, #3
 800716c:	d837      	bhi.n	80071de <DMA_CheckFifoParam+0xda>
 800716e:	a201      	add	r2, pc, #4	; (adr r2, 8007174 <DMA_CheckFifoParam+0x70>)
 8007170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007174:	08007185 	.word	0x08007185
 8007178:	0800718b 	.word	0x0800718b
 800717c:	08007185 	.word	0x08007185
 8007180:	0800719d 	.word	0x0800719d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	73fb      	strb	r3, [r7, #15]
      break;
 8007188:	e030      	b.n	80071ec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007192:	2b00      	cmp	r3, #0
 8007194:	d025      	beq.n	80071e2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800719a:	e022      	b.n	80071e2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80071a4:	d11f      	bne.n	80071e6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80071aa:	e01c      	b.n	80071e6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d903      	bls.n	80071ba <DMA_CheckFifoParam+0xb6>
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	2b03      	cmp	r3, #3
 80071b6:	d003      	beq.n	80071c0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80071b8:	e018      	b.n	80071ec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	73fb      	strb	r3, [r7, #15]
      break;
 80071be:	e015      	b.n	80071ec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d00e      	beq.n	80071ea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	73fb      	strb	r3, [r7, #15]
      break;
 80071d0:	e00b      	b.n	80071ea <DMA_CheckFifoParam+0xe6>
      break;
 80071d2:	bf00      	nop
 80071d4:	e00a      	b.n	80071ec <DMA_CheckFifoParam+0xe8>
      break;
 80071d6:	bf00      	nop
 80071d8:	e008      	b.n	80071ec <DMA_CheckFifoParam+0xe8>
      break;
 80071da:	bf00      	nop
 80071dc:	e006      	b.n	80071ec <DMA_CheckFifoParam+0xe8>
      break;
 80071de:	bf00      	nop
 80071e0:	e004      	b.n	80071ec <DMA_CheckFifoParam+0xe8>
      break;
 80071e2:	bf00      	nop
 80071e4:	e002      	b.n	80071ec <DMA_CheckFifoParam+0xe8>
      break;   
 80071e6:	bf00      	nop
 80071e8:	e000      	b.n	80071ec <DMA_CheckFifoParam+0xe8>
      break;
 80071ea:	bf00      	nop
    }
  } 
  
  return status; 
 80071ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3714      	adds	r7, #20
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop

080071fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b089      	sub	sp, #36	; 0x24
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
 8007204:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007206:	2300      	movs	r3, #0
 8007208:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800720a:	2300      	movs	r3, #0
 800720c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800720e:	2300      	movs	r3, #0
 8007210:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007212:	2300      	movs	r3, #0
 8007214:	61fb      	str	r3, [r7, #28]
 8007216:	e159      	b.n	80074cc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007218:	2201      	movs	r2, #1
 800721a:	69fb      	ldr	r3, [r7, #28]
 800721c:	fa02 f303 	lsl.w	r3, r2, r3
 8007220:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	4013      	ands	r3, r2
 800722a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800722c:	693a      	ldr	r2, [r7, #16]
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	429a      	cmp	r2, r3
 8007232:	f040 8148 	bne.w	80074c6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	685b      	ldr	r3, [r3, #4]
 800723a:	f003 0303 	and.w	r3, r3, #3
 800723e:	2b01      	cmp	r3, #1
 8007240:	d005      	beq.n	800724e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800724a:	2b02      	cmp	r3, #2
 800724c:	d130      	bne.n	80072b0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	005b      	lsls	r3, r3, #1
 8007258:	2203      	movs	r2, #3
 800725a:	fa02 f303 	lsl.w	r3, r2, r3
 800725e:	43db      	mvns	r3, r3
 8007260:	69ba      	ldr	r2, [r7, #24]
 8007262:	4013      	ands	r3, r2
 8007264:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	68da      	ldr	r2, [r3, #12]
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	005b      	lsls	r3, r3, #1
 800726e:	fa02 f303 	lsl.w	r3, r2, r3
 8007272:	69ba      	ldr	r2, [r7, #24]
 8007274:	4313      	orrs	r3, r2
 8007276:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	69ba      	ldr	r2, [r7, #24]
 800727c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007284:	2201      	movs	r2, #1
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	fa02 f303 	lsl.w	r3, r2, r3
 800728c:	43db      	mvns	r3, r3
 800728e:	69ba      	ldr	r2, [r7, #24]
 8007290:	4013      	ands	r3, r2
 8007292:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	091b      	lsrs	r3, r3, #4
 800729a:	f003 0201 	and.w	r2, r3, #1
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	fa02 f303 	lsl.w	r3, r2, r3
 80072a4:	69ba      	ldr	r2, [r7, #24]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	69ba      	ldr	r2, [r7, #24]
 80072ae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	f003 0303 	and.w	r3, r3, #3
 80072b8:	2b03      	cmp	r3, #3
 80072ba:	d017      	beq.n	80072ec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	005b      	lsls	r3, r3, #1
 80072c6:	2203      	movs	r2, #3
 80072c8:	fa02 f303 	lsl.w	r3, r2, r3
 80072cc:	43db      	mvns	r3, r3
 80072ce:	69ba      	ldr	r2, [r7, #24]
 80072d0:	4013      	ands	r3, r2
 80072d2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	689a      	ldr	r2, [r3, #8]
 80072d8:	69fb      	ldr	r3, [r7, #28]
 80072da:	005b      	lsls	r3, r3, #1
 80072dc:	fa02 f303 	lsl.w	r3, r2, r3
 80072e0:	69ba      	ldr	r2, [r7, #24]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	69ba      	ldr	r2, [r7, #24]
 80072ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	685b      	ldr	r3, [r3, #4]
 80072f0:	f003 0303 	and.w	r3, r3, #3
 80072f4:	2b02      	cmp	r3, #2
 80072f6:	d123      	bne.n	8007340 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	08da      	lsrs	r2, r3, #3
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	3208      	adds	r2, #8
 8007300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007304:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	f003 0307 	and.w	r3, r3, #7
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	220f      	movs	r2, #15
 8007310:	fa02 f303 	lsl.w	r3, r2, r3
 8007314:	43db      	mvns	r3, r3
 8007316:	69ba      	ldr	r2, [r7, #24]
 8007318:	4013      	ands	r3, r2
 800731a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	691a      	ldr	r2, [r3, #16]
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	f003 0307 	and.w	r3, r3, #7
 8007326:	009b      	lsls	r3, r3, #2
 8007328:	fa02 f303 	lsl.w	r3, r2, r3
 800732c:	69ba      	ldr	r2, [r7, #24]
 800732e:	4313      	orrs	r3, r2
 8007330:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	08da      	lsrs	r2, r3, #3
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	3208      	adds	r2, #8
 800733a:	69b9      	ldr	r1, [r7, #24]
 800733c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	005b      	lsls	r3, r3, #1
 800734a:	2203      	movs	r2, #3
 800734c:	fa02 f303 	lsl.w	r3, r2, r3
 8007350:	43db      	mvns	r3, r3
 8007352:	69ba      	ldr	r2, [r7, #24]
 8007354:	4013      	ands	r3, r2
 8007356:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f003 0203 	and.w	r2, r3, #3
 8007360:	69fb      	ldr	r3, [r7, #28]
 8007362:	005b      	lsls	r3, r3, #1
 8007364:	fa02 f303 	lsl.w	r3, r2, r3
 8007368:	69ba      	ldr	r2, [r7, #24]
 800736a:	4313      	orrs	r3, r2
 800736c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	69ba      	ldr	r2, [r7, #24]
 8007372:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	685b      	ldr	r3, [r3, #4]
 8007378:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800737c:	2b00      	cmp	r3, #0
 800737e:	f000 80a2 	beq.w	80074c6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007382:	2300      	movs	r3, #0
 8007384:	60fb      	str	r3, [r7, #12]
 8007386:	4b57      	ldr	r3, [pc, #348]	; (80074e4 <HAL_GPIO_Init+0x2e8>)
 8007388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800738a:	4a56      	ldr	r2, [pc, #344]	; (80074e4 <HAL_GPIO_Init+0x2e8>)
 800738c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007390:	6453      	str	r3, [r2, #68]	; 0x44
 8007392:	4b54      	ldr	r3, [pc, #336]	; (80074e4 <HAL_GPIO_Init+0x2e8>)
 8007394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007396:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800739a:	60fb      	str	r3, [r7, #12]
 800739c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800739e:	4a52      	ldr	r2, [pc, #328]	; (80074e8 <HAL_GPIO_Init+0x2ec>)
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	089b      	lsrs	r3, r3, #2
 80073a4:	3302      	adds	r3, #2
 80073a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	f003 0303 	and.w	r3, r3, #3
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	220f      	movs	r2, #15
 80073b6:	fa02 f303 	lsl.w	r3, r2, r3
 80073ba:	43db      	mvns	r3, r3
 80073bc:	69ba      	ldr	r2, [r7, #24]
 80073be:	4013      	ands	r3, r2
 80073c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a49      	ldr	r2, [pc, #292]	; (80074ec <HAL_GPIO_Init+0x2f0>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d019      	beq.n	80073fe <HAL_GPIO_Init+0x202>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a48      	ldr	r2, [pc, #288]	; (80074f0 <HAL_GPIO_Init+0x2f4>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d013      	beq.n	80073fa <HAL_GPIO_Init+0x1fe>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	4a47      	ldr	r2, [pc, #284]	; (80074f4 <HAL_GPIO_Init+0x2f8>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d00d      	beq.n	80073f6 <HAL_GPIO_Init+0x1fa>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	4a46      	ldr	r2, [pc, #280]	; (80074f8 <HAL_GPIO_Init+0x2fc>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d007      	beq.n	80073f2 <HAL_GPIO_Init+0x1f6>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	4a45      	ldr	r2, [pc, #276]	; (80074fc <HAL_GPIO_Init+0x300>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d101      	bne.n	80073ee <HAL_GPIO_Init+0x1f2>
 80073ea:	2304      	movs	r3, #4
 80073ec:	e008      	b.n	8007400 <HAL_GPIO_Init+0x204>
 80073ee:	2307      	movs	r3, #7
 80073f0:	e006      	b.n	8007400 <HAL_GPIO_Init+0x204>
 80073f2:	2303      	movs	r3, #3
 80073f4:	e004      	b.n	8007400 <HAL_GPIO_Init+0x204>
 80073f6:	2302      	movs	r3, #2
 80073f8:	e002      	b.n	8007400 <HAL_GPIO_Init+0x204>
 80073fa:	2301      	movs	r3, #1
 80073fc:	e000      	b.n	8007400 <HAL_GPIO_Init+0x204>
 80073fe:	2300      	movs	r3, #0
 8007400:	69fa      	ldr	r2, [r7, #28]
 8007402:	f002 0203 	and.w	r2, r2, #3
 8007406:	0092      	lsls	r2, r2, #2
 8007408:	4093      	lsls	r3, r2
 800740a:	69ba      	ldr	r2, [r7, #24]
 800740c:	4313      	orrs	r3, r2
 800740e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007410:	4935      	ldr	r1, [pc, #212]	; (80074e8 <HAL_GPIO_Init+0x2ec>)
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	089b      	lsrs	r3, r3, #2
 8007416:	3302      	adds	r3, #2
 8007418:	69ba      	ldr	r2, [r7, #24]
 800741a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800741e:	4b38      	ldr	r3, [pc, #224]	; (8007500 <HAL_GPIO_Init+0x304>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	43db      	mvns	r3, r3
 8007428:	69ba      	ldr	r2, [r7, #24]
 800742a:	4013      	ands	r3, r2
 800742c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d003      	beq.n	8007442 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800743a:	69ba      	ldr	r2, [r7, #24]
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	4313      	orrs	r3, r2
 8007440:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007442:	4a2f      	ldr	r2, [pc, #188]	; (8007500 <HAL_GPIO_Init+0x304>)
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007448:	4b2d      	ldr	r3, [pc, #180]	; (8007500 <HAL_GPIO_Init+0x304>)
 800744a:	685b      	ldr	r3, [r3, #4]
 800744c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	43db      	mvns	r3, r3
 8007452:	69ba      	ldr	r2, [r7, #24]
 8007454:	4013      	ands	r3, r2
 8007456:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	685b      	ldr	r3, [r3, #4]
 800745c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007460:	2b00      	cmp	r3, #0
 8007462:	d003      	beq.n	800746c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8007464:	69ba      	ldr	r2, [r7, #24]
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	4313      	orrs	r3, r2
 800746a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800746c:	4a24      	ldr	r2, [pc, #144]	; (8007500 <HAL_GPIO_Init+0x304>)
 800746e:	69bb      	ldr	r3, [r7, #24]
 8007470:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007472:	4b23      	ldr	r3, [pc, #140]	; (8007500 <HAL_GPIO_Init+0x304>)
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	43db      	mvns	r3, r3
 800747c:	69ba      	ldr	r2, [r7, #24]
 800747e:	4013      	ands	r3, r2
 8007480:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d003      	beq.n	8007496 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800748e:	69ba      	ldr	r2, [r7, #24]
 8007490:	693b      	ldr	r3, [r7, #16]
 8007492:	4313      	orrs	r3, r2
 8007494:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007496:	4a1a      	ldr	r2, [pc, #104]	; (8007500 <HAL_GPIO_Init+0x304>)
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800749c:	4b18      	ldr	r3, [pc, #96]	; (8007500 <HAL_GPIO_Init+0x304>)
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	43db      	mvns	r3, r3
 80074a6:	69ba      	ldr	r2, [r7, #24]
 80074a8:	4013      	ands	r3, r2
 80074aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d003      	beq.n	80074c0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80074b8:	69ba      	ldr	r2, [r7, #24]
 80074ba:	693b      	ldr	r3, [r7, #16]
 80074bc:	4313      	orrs	r3, r2
 80074be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80074c0:	4a0f      	ldr	r2, [pc, #60]	; (8007500 <HAL_GPIO_Init+0x304>)
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	3301      	adds	r3, #1
 80074ca:	61fb      	str	r3, [r7, #28]
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	2b0f      	cmp	r3, #15
 80074d0:	f67f aea2 	bls.w	8007218 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80074d4:	bf00      	nop
 80074d6:	bf00      	nop
 80074d8:	3724      	adds	r7, #36	; 0x24
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	40023800 	.word	0x40023800
 80074e8:	40013800 	.word	0x40013800
 80074ec:	40020000 	.word	0x40020000
 80074f0:	40020400 	.word	0x40020400
 80074f4:	40020800 	.word	0x40020800
 80074f8:	40020c00 	.word	0x40020c00
 80074fc:	40021000 	.word	0x40021000
 8007500:	40013c00 	.word	0x40013c00

08007504 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	460b      	mov	r3, r1
 800750e:	807b      	strh	r3, [r7, #2]
 8007510:	4613      	mov	r3, r2
 8007512:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007514:	787b      	ldrb	r3, [r7, #1]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d003      	beq.n	8007522 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800751a:	887a      	ldrh	r2, [r7, #2]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007520:	e003      	b.n	800752a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007522:	887b      	ldrh	r3, [r7, #2]
 8007524:	041a      	lsls	r2, r3, #16
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	619a      	str	r2, [r3, #24]
}
 800752a:	bf00      	nop
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
	...

08007538 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b086      	sub	sp, #24
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d101      	bne.n	800754a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	e264      	b.n	8007a14 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f003 0301 	and.w	r3, r3, #1
 8007552:	2b00      	cmp	r3, #0
 8007554:	d075      	beq.n	8007642 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007556:	4ba3      	ldr	r3, [pc, #652]	; (80077e4 <HAL_RCC_OscConfig+0x2ac>)
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f003 030c 	and.w	r3, r3, #12
 800755e:	2b04      	cmp	r3, #4
 8007560:	d00c      	beq.n	800757c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007562:	4ba0      	ldr	r3, [pc, #640]	; (80077e4 <HAL_RCC_OscConfig+0x2ac>)
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800756a:	2b08      	cmp	r3, #8
 800756c:	d112      	bne.n	8007594 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800756e:	4b9d      	ldr	r3, [pc, #628]	; (80077e4 <HAL_RCC_OscConfig+0x2ac>)
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007576:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800757a:	d10b      	bne.n	8007594 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800757c:	4b99      	ldr	r3, [pc, #612]	; (80077e4 <HAL_RCC_OscConfig+0x2ac>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d05b      	beq.n	8007640 <HAL_RCC_OscConfig+0x108>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d157      	bne.n	8007640 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e23f      	b.n	8007a14 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800759c:	d106      	bne.n	80075ac <HAL_RCC_OscConfig+0x74>
 800759e:	4b91      	ldr	r3, [pc, #580]	; (80077e4 <HAL_RCC_OscConfig+0x2ac>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a90      	ldr	r2, [pc, #576]	; (80077e4 <HAL_RCC_OscConfig+0x2ac>)
 80075a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075a8:	6013      	str	r3, [r2, #0]
 80075aa:	e01d      	b.n	80075e8 <HAL_RCC_OscConfig+0xb0>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075b4:	d10c      	bne.n	80075d0 <HAL_RCC_OscConfig+0x98>
 80075b6:	4b8b      	ldr	r3, [pc, #556]	; (80077e4 <HAL_RCC_OscConfig+0x2ac>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	4a8a      	ldr	r2, [pc, #552]	; (80077e4 <HAL_RCC_OscConfig+0x2ac>)
 80075bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075c0:	6013      	str	r3, [r2, #0]
 80075c2:	4b88      	ldr	r3, [pc, #544]	; (80077e4 <HAL_RCC_OscConfig+0x2ac>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a87      	ldr	r2, [pc, #540]	; (80077e4 <HAL_RCC_OscConfig+0x2ac>)
 80075c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075cc:	6013      	str	r3, [r2, #0]
 80075ce:	e00b      	b.n	80075e8 <HAL_RCC_OscConfig+0xb0>
 80075d0:	4b84      	ldr	r3, [pc, #528]	; (80077e4 <HAL_RCC_OscConfig+0x2ac>)
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a83      	ldr	r2, [pc, #524]	; (80077e4 <HAL_RCC_OscConfig+0x2ac>)
 80075d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075da:	6013      	str	r3, [r2, #0]
 80075dc:	4b81      	ldr	r3, [pc, #516]	; (80077e4 <HAL_RCC_OscConfig+0x2ac>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a80      	ldr	r2, [pc, #512]	; (80077e4 <HAL_RCC_OscConfig+0x2ac>)
 80075e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d013      	beq.n	8007618 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075f0:	f7ff f924 	bl	800683c <HAL_GetTick>
 80075f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075f6:	e008      	b.n	800760a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80075f8:	f7ff f920 	bl	800683c <HAL_GetTick>
 80075fc:	4602      	mov	r2, r0
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	2b64      	cmp	r3, #100	; 0x64
 8007604:	d901      	bls.n	800760a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	e204      	b.n	8007a14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800760a:	4b76      	ldr	r3, [pc, #472]	; (80077e4 <HAL_RCC_OscConfig+0x2ac>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007612:	2b00      	cmp	r3, #0
 8007614:	d0f0      	beq.n	80075f8 <HAL_RCC_OscConfig+0xc0>
 8007616:	e014      	b.n	8007642 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007618:	f7ff f910 	bl	800683c <HAL_GetTick>
 800761c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800761e:	e008      	b.n	8007632 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007620:	f7ff f90c 	bl	800683c <HAL_GetTick>
 8007624:	4602      	mov	r2, r0
 8007626:	693b      	ldr	r3, [r7, #16]
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	2b64      	cmp	r3, #100	; 0x64
 800762c:	d901      	bls.n	8007632 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800762e:	2303      	movs	r3, #3
 8007630:	e1f0      	b.n	8007a14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007632:	4b6c      	ldr	r3, [pc, #432]	; (80077e4 <HAL_RCC_OscConfig+0x2ac>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1f0      	bne.n	8007620 <HAL_RCC_OscConfig+0xe8>
 800763e:	e000      	b.n	8007642 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0302 	and.w	r3, r3, #2
 800764a:	2b00      	cmp	r3, #0
 800764c:	d063      	beq.n	8007716 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800764e:	4b65      	ldr	r3, [pc, #404]	; (80077e4 <HAL_RCC_OscConfig+0x2ac>)
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f003 030c 	and.w	r3, r3, #12
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00b      	beq.n	8007672 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800765a:	4b62      	ldr	r3, [pc, #392]	; (80077e4 <HAL_RCC_OscConfig+0x2ac>)
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007662:	2b08      	cmp	r3, #8
 8007664:	d11c      	bne.n	80076a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007666:	4b5f      	ldr	r3, [pc, #380]	; (80077e4 <HAL_RCC_OscConfig+0x2ac>)
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800766e:	2b00      	cmp	r3, #0
 8007670:	d116      	bne.n	80076a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007672:	4b5c      	ldr	r3, [pc, #368]	; (80077e4 <HAL_RCC_OscConfig+0x2ac>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f003 0302 	and.w	r3, r3, #2
 800767a:	2b00      	cmp	r3, #0
 800767c:	d005      	beq.n	800768a <HAL_RCC_OscConfig+0x152>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	2b01      	cmp	r3, #1
 8007684:	d001      	beq.n	800768a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007686:	2301      	movs	r3, #1
 8007688:	e1c4      	b.n	8007a14 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800768a:	4b56      	ldr	r3, [pc, #344]	; (80077e4 <HAL_RCC_OscConfig+0x2ac>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	00db      	lsls	r3, r3, #3
 8007698:	4952      	ldr	r1, [pc, #328]	; (80077e4 <HAL_RCC_OscConfig+0x2ac>)
 800769a:	4313      	orrs	r3, r2
 800769c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800769e:	e03a      	b.n	8007716 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	68db      	ldr	r3, [r3, #12]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d020      	beq.n	80076ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076a8:	4b4f      	ldr	r3, [pc, #316]	; (80077e8 <HAL_RCC_OscConfig+0x2b0>)
 80076aa:	2201      	movs	r2, #1
 80076ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076ae:	f7ff f8c5 	bl	800683c <HAL_GetTick>
 80076b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076b4:	e008      	b.n	80076c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076b6:	f7ff f8c1 	bl	800683c <HAL_GetTick>
 80076ba:	4602      	mov	r2, r0
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	1ad3      	subs	r3, r2, r3
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d901      	bls.n	80076c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	e1a5      	b.n	8007a14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076c8:	4b46      	ldr	r3, [pc, #280]	; (80077e4 <HAL_RCC_OscConfig+0x2ac>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	f003 0302 	and.w	r3, r3, #2
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d0f0      	beq.n	80076b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076d4:	4b43      	ldr	r3, [pc, #268]	; (80077e4 <HAL_RCC_OscConfig+0x2ac>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	00db      	lsls	r3, r3, #3
 80076e2:	4940      	ldr	r1, [pc, #256]	; (80077e4 <HAL_RCC_OscConfig+0x2ac>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	600b      	str	r3, [r1, #0]
 80076e8:	e015      	b.n	8007716 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80076ea:	4b3f      	ldr	r3, [pc, #252]	; (80077e8 <HAL_RCC_OscConfig+0x2b0>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076f0:	f7ff f8a4 	bl	800683c <HAL_GetTick>
 80076f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80076f6:	e008      	b.n	800770a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80076f8:	f7ff f8a0 	bl	800683c <HAL_GetTick>
 80076fc:	4602      	mov	r2, r0
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	2b02      	cmp	r3, #2
 8007704:	d901      	bls.n	800770a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007706:	2303      	movs	r3, #3
 8007708:	e184      	b.n	8007a14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800770a:	4b36      	ldr	r3, [pc, #216]	; (80077e4 <HAL_RCC_OscConfig+0x2ac>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 0302 	and.w	r3, r3, #2
 8007712:	2b00      	cmp	r3, #0
 8007714:	d1f0      	bne.n	80076f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f003 0308 	and.w	r3, r3, #8
 800771e:	2b00      	cmp	r3, #0
 8007720:	d030      	beq.n	8007784 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	695b      	ldr	r3, [r3, #20]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d016      	beq.n	8007758 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800772a:	4b30      	ldr	r3, [pc, #192]	; (80077ec <HAL_RCC_OscConfig+0x2b4>)
 800772c:	2201      	movs	r2, #1
 800772e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007730:	f7ff f884 	bl	800683c <HAL_GetTick>
 8007734:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007736:	e008      	b.n	800774a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007738:	f7ff f880 	bl	800683c <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	2b02      	cmp	r3, #2
 8007744:	d901      	bls.n	800774a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e164      	b.n	8007a14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800774a:	4b26      	ldr	r3, [pc, #152]	; (80077e4 <HAL_RCC_OscConfig+0x2ac>)
 800774c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800774e:	f003 0302 	and.w	r3, r3, #2
 8007752:	2b00      	cmp	r3, #0
 8007754:	d0f0      	beq.n	8007738 <HAL_RCC_OscConfig+0x200>
 8007756:	e015      	b.n	8007784 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007758:	4b24      	ldr	r3, [pc, #144]	; (80077ec <HAL_RCC_OscConfig+0x2b4>)
 800775a:	2200      	movs	r2, #0
 800775c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800775e:	f7ff f86d 	bl	800683c <HAL_GetTick>
 8007762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007764:	e008      	b.n	8007778 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007766:	f7ff f869 	bl	800683c <HAL_GetTick>
 800776a:	4602      	mov	r2, r0
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	1ad3      	subs	r3, r2, r3
 8007770:	2b02      	cmp	r3, #2
 8007772:	d901      	bls.n	8007778 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8007774:	2303      	movs	r3, #3
 8007776:	e14d      	b.n	8007a14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007778:	4b1a      	ldr	r3, [pc, #104]	; (80077e4 <HAL_RCC_OscConfig+0x2ac>)
 800777a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800777c:	f003 0302 	and.w	r3, r3, #2
 8007780:	2b00      	cmp	r3, #0
 8007782:	d1f0      	bne.n	8007766 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f003 0304 	and.w	r3, r3, #4
 800778c:	2b00      	cmp	r3, #0
 800778e:	f000 80a0 	beq.w	80078d2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007792:	2300      	movs	r3, #0
 8007794:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007796:	4b13      	ldr	r3, [pc, #76]	; (80077e4 <HAL_RCC_OscConfig+0x2ac>)
 8007798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d10f      	bne.n	80077c2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80077a2:	2300      	movs	r3, #0
 80077a4:	60bb      	str	r3, [r7, #8]
 80077a6:	4b0f      	ldr	r3, [pc, #60]	; (80077e4 <HAL_RCC_OscConfig+0x2ac>)
 80077a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077aa:	4a0e      	ldr	r2, [pc, #56]	; (80077e4 <HAL_RCC_OscConfig+0x2ac>)
 80077ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077b0:	6413      	str	r3, [r2, #64]	; 0x40
 80077b2:	4b0c      	ldr	r3, [pc, #48]	; (80077e4 <HAL_RCC_OscConfig+0x2ac>)
 80077b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077ba:	60bb      	str	r3, [r7, #8]
 80077bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80077be:	2301      	movs	r3, #1
 80077c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077c2:	4b0b      	ldr	r3, [pc, #44]	; (80077f0 <HAL_RCC_OscConfig+0x2b8>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d121      	bne.n	8007812 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80077ce:	4b08      	ldr	r3, [pc, #32]	; (80077f0 <HAL_RCC_OscConfig+0x2b8>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a07      	ldr	r2, [pc, #28]	; (80077f0 <HAL_RCC_OscConfig+0x2b8>)
 80077d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80077da:	f7ff f82f 	bl	800683c <HAL_GetTick>
 80077de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80077e0:	e011      	b.n	8007806 <HAL_RCC_OscConfig+0x2ce>
 80077e2:	bf00      	nop
 80077e4:	40023800 	.word	0x40023800
 80077e8:	42470000 	.word	0x42470000
 80077ec:	42470e80 	.word	0x42470e80
 80077f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80077f4:	f7ff f822 	bl	800683c <HAL_GetTick>
 80077f8:	4602      	mov	r2, r0
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d901      	bls.n	8007806 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8007802:	2303      	movs	r3, #3
 8007804:	e106      	b.n	8007a14 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007806:	4b85      	ldr	r3, [pc, #532]	; (8007a1c <HAL_RCC_OscConfig+0x4e4>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800780e:	2b00      	cmp	r3, #0
 8007810:	d0f0      	beq.n	80077f4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	2b01      	cmp	r3, #1
 8007818:	d106      	bne.n	8007828 <HAL_RCC_OscConfig+0x2f0>
 800781a:	4b81      	ldr	r3, [pc, #516]	; (8007a20 <HAL_RCC_OscConfig+0x4e8>)
 800781c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800781e:	4a80      	ldr	r2, [pc, #512]	; (8007a20 <HAL_RCC_OscConfig+0x4e8>)
 8007820:	f043 0301 	orr.w	r3, r3, #1
 8007824:	6713      	str	r3, [r2, #112]	; 0x70
 8007826:	e01c      	b.n	8007862 <HAL_RCC_OscConfig+0x32a>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	2b05      	cmp	r3, #5
 800782e:	d10c      	bne.n	800784a <HAL_RCC_OscConfig+0x312>
 8007830:	4b7b      	ldr	r3, [pc, #492]	; (8007a20 <HAL_RCC_OscConfig+0x4e8>)
 8007832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007834:	4a7a      	ldr	r2, [pc, #488]	; (8007a20 <HAL_RCC_OscConfig+0x4e8>)
 8007836:	f043 0304 	orr.w	r3, r3, #4
 800783a:	6713      	str	r3, [r2, #112]	; 0x70
 800783c:	4b78      	ldr	r3, [pc, #480]	; (8007a20 <HAL_RCC_OscConfig+0x4e8>)
 800783e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007840:	4a77      	ldr	r2, [pc, #476]	; (8007a20 <HAL_RCC_OscConfig+0x4e8>)
 8007842:	f043 0301 	orr.w	r3, r3, #1
 8007846:	6713      	str	r3, [r2, #112]	; 0x70
 8007848:	e00b      	b.n	8007862 <HAL_RCC_OscConfig+0x32a>
 800784a:	4b75      	ldr	r3, [pc, #468]	; (8007a20 <HAL_RCC_OscConfig+0x4e8>)
 800784c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800784e:	4a74      	ldr	r2, [pc, #464]	; (8007a20 <HAL_RCC_OscConfig+0x4e8>)
 8007850:	f023 0301 	bic.w	r3, r3, #1
 8007854:	6713      	str	r3, [r2, #112]	; 0x70
 8007856:	4b72      	ldr	r3, [pc, #456]	; (8007a20 <HAL_RCC_OscConfig+0x4e8>)
 8007858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800785a:	4a71      	ldr	r2, [pc, #452]	; (8007a20 <HAL_RCC_OscConfig+0x4e8>)
 800785c:	f023 0304 	bic.w	r3, r3, #4
 8007860:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d015      	beq.n	8007896 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800786a:	f7fe ffe7 	bl	800683c <HAL_GetTick>
 800786e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007870:	e00a      	b.n	8007888 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007872:	f7fe ffe3 	bl	800683c <HAL_GetTick>
 8007876:	4602      	mov	r2, r0
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007880:	4293      	cmp	r3, r2
 8007882:	d901      	bls.n	8007888 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8007884:	2303      	movs	r3, #3
 8007886:	e0c5      	b.n	8007a14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007888:	4b65      	ldr	r3, [pc, #404]	; (8007a20 <HAL_RCC_OscConfig+0x4e8>)
 800788a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800788c:	f003 0302 	and.w	r3, r3, #2
 8007890:	2b00      	cmp	r3, #0
 8007892:	d0ee      	beq.n	8007872 <HAL_RCC_OscConfig+0x33a>
 8007894:	e014      	b.n	80078c0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007896:	f7fe ffd1 	bl	800683c <HAL_GetTick>
 800789a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800789c:	e00a      	b.n	80078b4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800789e:	f7fe ffcd 	bl	800683c <HAL_GetTick>
 80078a2:	4602      	mov	r2, r0
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d901      	bls.n	80078b4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e0af      	b.n	8007a14 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078b4:	4b5a      	ldr	r3, [pc, #360]	; (8007a20 <HAL_RCC_OscConfig+0x4e8>)
 80078b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078b8:	f003 0302 	and.w	r3, r3, #2
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1ee      	bne.n	800789e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80078c0:	7dfb      	ldrb	r3, [r7, #23]
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d105      	bne.n	80078d2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80078c6:	4b56      	ldr	r3, [pc, #344]	; (8007a20 <HAL_RCC_OscConfig+0x4e8>)
 80078c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ca:	4a55      	ldr	r2, [pc, #340]	; (8007a20 <HAL_RCC_OscConfig+0x4e8>)
 80078cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80078d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	699b      	ldr	r3, [r3, #24]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f000 809b 	beq.w	8007a12 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80078dc:	4b50      	ldr	r3, [pc, #320]	; (8007a20 <HAL_RCC_OscConfig+0x4e8>)
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	f003 030c 	and.w	r3, r3, #12
 80078e4:	2b08      	cmp	r3, #8
 80078e6:	d05c      	beq.n	80079a2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	699b      	ldr	r3, [r3, #24]
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d141      	bne.n	8007974 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80078f0:	4b4c      	ldr	r3, [pc, #304]	; (8007a24 <HAL_RCC_OscConfig+0x4ec>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078f6:	f7fe ffa1 	bl	800683c <HAL_GetTick>
 80078fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80078fc:	e008      	b.n	8007910 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80078fe:	f7fe ff9d 	bl	800683c <HAL_GetTick>
 8007902:	4602      	mov	r2, r0
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	2b02      	cmp	r3, #2
 800790a:	d901      	bls.n	8007910 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e081      	b.n	8007a14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007910:	4b43      	ldr	r3, [pc, #268]	; (8007a20 <HAL_RCC_OscConfig+0x4e8>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1f0      	bne.n	80078fe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	69da      	ldr	r2, [r3, #28]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6a1b      	ldr	r3, [r3, #32]
 8007924:	431a      	orrs	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792a:	019b      	lsls	r3, r3, #6
 800792c:	431a      	orrs	r2, r3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007932:	085b      	lsrs	r3, r3, #1
 8007934:	3b01      	subs	r3, #1
 8007936:	041b      	lsls	r3, r3, #16
 8007938:	431a      	orrs	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793e:	061b      	lsls	r3, r3, #24
 8007940:	4937      	ldr	r1, [pc, #220]	; (8007a20 <HAL_RCC_OscConfig+0x4e8>)
 8007942:	4313      	orrs	r3, r2
 8007944:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007946:	4b37      	ldr	r3, [pc, #220]	; (8007a24 <HAL_RCC_OscConfig+0x4ec>)
 8007948:	2201      	movs	r2, #1
 800794a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800794c:	f7fe ff76 	bl	800683c <HAL_GetTick>
 8007950:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007952:	e008      	b.n	8007966 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007954:	f7fe ff72 	bl	800683c <HAL_GetTick>
 8007958:	4602      	mov	r2, r0
 800795a:	693b      	ldr	r3, [r7, #16]
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	2b02      	cmp	r3, #2
 8007960:	d901      	bls.n	8007966 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8007962:	2303      	movs	r3, #3
 8007964:	e056      	b.n	8007a14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007966:	4b2e      	ldr	r3, [pc, #184]	; (8007a20 <HAL_RCC_OscConfig+0x4e8>)
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d0f0      	beq.n	8007954 <HAL_RCC_OscConfig+0x41c>
 8007972:	e04e      	b.n	8007a12 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007974:	4b2b      	ldr	r3, [pc, #172]	; (8007a24 <HAL_RCC_OscConfig+0x4ec>)
 8007976:	2200      	movs	r2, #0
 8007978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800797a:	f7fe ff5f 	bl	800683c <HAL_GetTick>
 800797e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007980:	e008      	b.n	8007994 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007982:	f7fe ff5b 	bl	800683c <HAL_GetTick>
 8007986:	4602      	mov	r2, r0
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	1ad3      	subs	r3, r2, r3
 800798c:	2b02      	cmp	r3, #2
 800798e:	d901      	bls.n	8007994 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007990:	2303      	movs	r3, #3
 8007992:	e03f      	b.n	8007a14 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007994:	4b22      	ldr	r3, [pc, #136]	; (8007a20 <HAL_RCC_OscConfig+0x4e8>)
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1f0      	bne.n	8007982 <HAL_RCC_OscConfig+0x44a>
 80079a0:	e037      	b.n	8007a12 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	699b      	ldr	r3, [r3, #24]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d101      	bne.n	80079ae <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e032      	b.n	8007a14 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80079ae:	4b1c      	ldr	r3, [pc, #112]	; (8007a20 <HAL_RCC_OscConfig+0x4e8>)
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	699b      	ldr	r3, [r3, #24]
 80079b8:	2b01      	cmp	r3, #1
 80079ba:	d028      	beq.n	8007a0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d121      	bne.n	8007a0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d11a      	bne.n	8007a0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80079de:	4013      	ands	r3, r2
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80079e4:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d111      	bne.n	8007a0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f4:	085b      	lsrs	r3, r3, #1
 80079f6:	3b01      	subs	r3, #1
 80079f8:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d107      	bne.n	8007a0e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a08:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a0a:	429a      	cmp	r2, r3
 8007a0c:	d001      	beq.n	8007a12 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e000      	b.n	8007a14 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3718      	adds	r7, #24
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	40007000 	.word	0x40007000
 8007a20:	40023800 	.word	0x40023800
 8007a24:	42470060 	.word	0x42470060

08007a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d101      	bne.n	8007a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	e0cc      	b.n	8007bd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007a3c:	4b68      	ldr	r3, [pc, #416]	; (8007be0 <HAL_RCC_ClockConfig+0x1b8>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f003 0307 	and.w	r3, r3, #7
 8007a44:	683a      	ldr	r2, [r7, #0]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d90c      	bls.n	8007a64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a4a:	4b65      	ldr	r3, [pc, #404]	; (8007be0 <HAL_RCC_ClockConfig+0x1b8>)
 8007a4c:	683a      	ldr	r2, [r7, #0]
 8007a4e:	b2d2      	uxtb	r2, r2
 8007a50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a52:	4b63      	ldr	r3, [pc, #396]	; (8007be0 <HAL_RCC_ClockConfig+0x1b8>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f003 0307 	and.w	r3, r3, #7
 8007a5a:	683a      	ldr	r2, [r7, #0]
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d001      	beq.n	8007a64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007a60:	2301      	movs	r3, #1
 8007a62:	e0b8      	b.n	8007bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f003 0302 	and.w	r3, r3, #2
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d020      	beq.n	8007ab2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 0304 	and.w	r3, r3, #4
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d005      	beq.n	8007a88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007a7c:	4b59      	ldr	r3, [pc, #356]	; (8007be4 <HAL_RCC_ClockConfig+0x1bc>)
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	4a58      	ldr	r2, [pc, #352]	; (8007be4 <HAL_RCC_ClockConfig+0x1bc>)
 8007a82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007a86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f003 0308 	and.w	r3, r3, #8
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d005      	beq.n	8007aa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007a94:	4b53      	ldr	r3, [pc, #332]	; (8007be4 <HAL_RCC_ClockConfig+0x1bc>)
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	4a52      	ldr	r2, [pc, #328]	; (8007be4 <HAL_RCC_ClockConfig+0x1bc>)
 8007a9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007a9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007aa0:	4b50      	ldr	r3, [pc, #320]	; (8007be4 <HAL_RCC_ClockConfig+0x1bc>)
 8007aa2:	689b      	ldr	r3, [r3, #8]
 8007aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	689b      	ldr	r3, [r3, #8]
 8007aac:	494d      	ldr	r1, [pc, #308]	; (8007be4 <HAL_RCC_ClockConfig+0x1bc>)
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f003 0301 	and.w	r3, r3, #1
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d044      	beq.n	8007b48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d107      	bne.n	8007ad6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ac6:	4b47      	ldr	r3, [pc, #284]	; (8007be4 <HAL_RCC_ClockConfig+0x1bc>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d119      	bne.n	8007b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e07f      	b.n	8007bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	2b02      	cmp	r3, #2
 8007adc:	d003      	beq.n	8007ae6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ae2:	2b03      	cmp	r3, #3
 8007ae4:	d107      	bne.n	8007af6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ae6:	4b3f      	ldr	r3, [pc, #252]	; (8007be4 <HAL_RCC_ClockConfig+0x1bc>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d109      	bne.n	8007b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e06f      	b.n	8007bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007af6:	4b3b      	ldr	r3, [pc, #236]	; (8007be4 <HAL_RCC_ClockConfig+0x1bc>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 0302 	and.w	r3, r3, #2
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d101      	bne.n	8007b06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e067      	b.n	8007bd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b06:	4b37      	ldr	r3, [pc, #220]	; (8007be4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	f023 0203 	bic.w	r2, r3, #3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	4934      	ldr	r1, [pc, #208]	; (8007be4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b14:	4313      	orrs	r3, r2
 8007b16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007b18:	f7fe fe90 	bl	800683c <HAL_GetTick>
 8007b1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b1e:	e00a      	b.n	8007b36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b20:	f7fe fe8c 	bl	800683c <HAL_GetTick>
 8007b24:	4602      	mov	r2, r0
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d901      	bls.n	8007b36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e04f      	b.n	8007bd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b36:	4b2b      	ldr	r3, [pc, #172]	; (8007be4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	f003 020c 	and.w	r2, r3, #12
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	685b      	ldr	r3, [r3, #4]
 8007b42:	009b      	lsls	r3, r3, #2
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d1eb      	bne.n	8007b20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007b48:	4b25      	ldr	r3, [pc, #148]	; (8007be0 <HAL_RCC_ClockConfig+0x1b8>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f003 0307 	and.w	r3, r3, #7
 8007b50:	683a      	ldr	r2, [r7, #0]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d20c      	bcs.n	8007b70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b56:	4b22      	ldr	r3, [pc, #136]	; (8007be0 <HAL_RCC_ClockConfig+0x1b8>)
 8007b58:	683a      	ldr	r2, [r7, #0]
 8007b5a:	b2d2      	uxtb	r2, r2
 8007b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b5e:	4b20      	ldr	r3, [pc, #128]	; (8007be0 <HAL_RCC_ClockConfig+0x1b8>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 0307 	and.w	r3, r3, #7
 8007b66:	683a      	ldr	r2, [r7, #0]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	d001      	beq.n	8007b70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	e032      	b.n	8007bd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 0304 	and.w	r3, r3, #4
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d008      	beq.n	8007b8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007b7c:	4b19      	ldr	r3, [pc, #100]	; (8007be4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	4916      	ldr	r1, [pc, #88]	; (8007be4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 0308 	and.w	r3, r3, #8
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d009      	beq.n	8007bae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007b9a:	4b12      	ldr	r3, [pc, #72]	; (8007be4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	00db      	lsls	r3, r3, #3
 8007ba8:	490e      	ldr	r1, [pc, #56]	; (8007be4 <HAL_RCC_ClockConfig+0x1bc>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007bae:	f000 f821 	bl	8007bf4 <HAL_RCC_GetSysClockFreq>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	4b0b      	ldr	r3, [pc, #44]	; (8007be4 <HAL_RCC_ClockConfig+0x1bc>)
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	091b      	lsrs	r3, r3, #4
 8007bba:	f003 030f 	and.w	r3, r3, #15
 8007bbe:	490a      	ldr	r1, [pc, #40]	; (8007be8 <HAL_RCC_ClockConfig+0x1c0>)
 8007bc0:	5ccb      	ldrb	r3, [r1, r3]
 8007bc2:	fa22 f303 	lsr.w	r3, r2, r3
 8007bc6:	4a09      	ldr	r2, [pc, #36]	; (8007bec <HAL_RCC_ClockConfig+0x1c4>)
 8007bc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007bca:	4b09      	ldr	r3, [pc, #36]	; (8007bf0 <HAL_RCC_ClockConfig+0x1c8>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7fe fdf0 	bl	80067b4 <HAL_InitTick>

  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	40023c00 	.word	0x40023c00
 8007be4:	40023800 	.word	0x40023800
 8007be8:	08013860 	.word	0x08013860
 8007bec:	20000038 	.word	0x20000038
 8007bf0:	2000003c 	.word	0x2000003c

08007bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007bf4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007bf8:	b084      	sub	sp, #16
 8007bfa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	607b      	str	r3, [r7, #4]
 8007c00:	2300      	movs	r3, #0
 8007c02:	60fb      	str	r3, [r7, #12]
 8007c04:	2300      	movs	r3, #0
 8007c06:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c0c:	4b67      	ldr	r3, [pc, #412]	; (8007dac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	f003 030c 	and.w	r3, r3, #12
 8007c14:	2b08      	cmp	r3, #8
 8007c16:	d00d      	beq.n	8007c34 <HAL_RCC_GetSysClockFreq+0x40>
 8007c18:	2b08      	cmp	r3, #8
 8007c1a:	f200 80bd 	bhi.w	8007d98 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d002      	beq.n	8007c28 <HAL_RCC_GetSysClockFreq+0x34>
 8007c22:	2b04      	cmp	r3, #4
 8007c24:	d003      	beq.n	8007c2e <HAL_RCC_GetSysClockFreq+0x3a>
 8007c26:	e0b7      	b.n	8007d98 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c28:	4b61      	ldr	r3, [pc, #388]	; (8007db0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007c2a:	60bb      	str	r3, [r7, #8]
       break;
 8007c2c:	e0b7      	b.n	8007d9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c2e:	4b61      	ldr	r3, [pc, #388]	; (8007db4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007c30:	60bb      	str	r3, [r7, #8]
      break;
 8007c32:	e0b4      	b.n	8007d9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c34:	4b5d      	ldr	r3, [pc, #372]	; (8007dac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c3c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c3e:	4b5b      	ldr	r3, [pc, #364]	; (8007dac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c40:	685b      	ldr	r3, [r3, #4]
 8007c42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d04d      	beq.n	8007ce6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c4a:	4b58      	ldr	r3, [pc, #352]	; (8007dac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	099b      	lsrs	r3, r3, #6
 8007c50:	461a      	mov	r2, r3
 8007c52:	f04f 0300 	mov.w	r3, #0
 8007c56:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007c5a:	f04f 0100 	mov.w	r1, #0
 8007c5e:	ea02 0800 	and.w	r8, r2, r0
 8007c62:	ea03 0901 	and.w	r9, r3, r1
 8007c66:	4640      	mov	r0, r8
 8007c68:	4649      	mov	r1, r9
 8007c6a:	f04f 0200 	mov.w	r2, #0
 8007c6e:	f04f 0300 	mov.w	r3, #0
 8007c72:	014b      	lsls	r3, r1, #5
 8007c74:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007c78:	0142      	lsls	r2, r0, #5
 8007c7a:	4610      	mov	r0, r2
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	ebb0 0008 	subs.w	r0, r0, r8
 8007c82:	eb61 0109 	sbc.w	r1, r1, r9
 8007c86:	f04f 0200 	mov.w	r2, #0
 8007c8a:	f04f 0300 	mov.w	r3, #0
 8007c8e:	018b      	lsls	r3, r1, #6
 8007c90:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007c94:	0182      	lsls	r2, r0, #6
 8007c96:	1a12      	subs	r2, r2, r0
 8007c98:	eb63 0301 	sbc.w	r3, r3, r1
 8007c9c:	f04f 0000 	mov.w	r0, #0
 8007ca0:	f04f 0100 	mov.w	r1, #0
 8007ca4:	00d9      	lsls	r1, r3, #3
 8007ca6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007caa:	00d0      	lsls	r0, r2, #3
 8007cac:	4602      	mov	r2, r0
 8007cae:	460b      	mov	r3, r1
 8007cb0:	eb12 0208 	adds.w	r2, r2, r8
 8007cb4:	eb43 0309 	adc.w	r3, r3, r9
 8007cb8:	f04f 0000 	mov.w	r0, #0
 8007cbc:	f04f 0100 	mov.w	r1, #0
 8007cc0:	0259      	lsls	r1, r3, #9
 8007cc2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007cc6:	0250      	lsls	r0, r2, #9
 8007cc8:	4602      	mov	r2, r0
 8007cca:	460b      	mov	r3, r1
 8007ccc:	4610      	mov	r0, r2
 8007cce:	4619      	mov	r1, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	f04f 0300 	mov.w	r3, #0
 8007cd8:	f7f9 f8ec 	bl	8000eb4 <__aeabi_uldivmod>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	460b      	mov	r3, r1
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	60fb      	str	r3, [r7, #12]
 8007ce4:	e04a      	b.n	8007d7c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ce6:	4b31      	ldr	r3, [pc, #196]	; (8007dac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	099b      	lsrs	r3, r3, #6
 8007cec:	461a      	mov	r2, r3
 8007cee:	f04f 0300 	mov.w	r3, #0
 8007cf2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007cf6:	f04f 0100 	mov.w	r1, #0
 8007cfa:	ea02 0400 	and.w	r4, r2, r0
 8007cfe:	ea03 0501 	and.w	r5, r3, r1
 8007d02:	4620      	mov	r0, r4
 8007d04:	4629      	mov	r1, r5
 8007d06:	f04f 0200 	mov.w	r2, #0
 8007d0a:	f04f 0300 	mov.w	r3, #0
 8007d0e:	014b      	lsls	r3, r1, #5
 8007d10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007d14:	0142      	lsls	r2, r0, #5
 8007d16:	4610      	mov	r0, r2
 8007d18:	4619      	mov	r1, r3
 8007d1a:	1b00      	subs	r0, r0, r4
 8007d1c:	eb61 0105 	sbc.w	r1, r1, r5
 8007d20:	f04f 0200 	mov.w	r2, #0
 8007d24:	f04f 0300 	mov.w	r3, #0
 8007d28:	018b      	lsls	r3, r1, #6
 8007d2a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007d2e:	0182      	lsls	r2, r0, #6
 8007d30:	1a12      	subs	r2, r2, r0
 8007d32:	eb63 0301 	sbc.w	r3, r3, r1
 8007d36:	f04f 0000 	mov.w	r0, #0
 8007d3a:	f04f 0100 	mov.w	r1, #0
 8007d3e:	00d9      	lsls	r1, r3, #3
 8007d40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007d44:	00d0      	lsls	r0, r2, #3
 8007d46:	4602      	mov	r2, r0
 8007d48:	460b      	mov	r3, r1
 8007d4a:	1912      	adds	r2, r2, r4
 8007d4c:	eb45 0303 	adc.w	r3, r5, r3
 8007d50:	f04f 0000 	mov.w	r0, #0
 8007d54:	f04f 0100 	mov.w	r1, #0
 8007d58:	0299      	lsls	r1, r3, #10
 8007d5a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007d5e:	0290      	lsls	r0, r2, #10
 8007d60:	4602      	mov	r2, r0
 8007d62:	460b      	mov	r3, r1
 8007d64:	4610      	mov	r0, r2
 8007d66:	4619      	mov	r1, r3
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	f04f 0300 	mov.w	r3, #0
 8007d70:	f7f9 f8a0 	bl	8000eb4 <__aeabi_uldivmod>
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	4613      	mov	r3, r2
 8007d7a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007d7c:	4b0b      	ldr	r3, [pc, #44]	; (8007dac <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	0c1b      	lsrs	r3, r3, #16
 8007d82:	f003 0303 	and.w	r3, r3, #3
 8007d86:	3301      	adds	r3, #1
 8007d88:	005b      	lsls	r3, r3, #1
 8007d8a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d94:	60bb      	str	r3, [r7, #8]
      break;
 8007d96:	e002      	b.n	8007d9e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007d98:	4b05      	ldr	r3, [pc, #20]	; (8007db0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007d9a:	60bb      	str	r3, [r7, #8]
      break;
 8007d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007d9e:	68bb      	ldr	r3, [r7, #8]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007daa:	bf00      	nop
 8007dac:	40023800 	.word	0x40023800
 8007db0:	00f42400 	.word	0x00f42400
 8007db4:	007a1200 	.word	0x007a1200

08007db8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007db8:	b480      	push	{r7}
 8007dba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007dbc:	4b03      	ldr	r3, [pc, #12]	; (8007dcc <HAL_RCC_GetHCLKFreq+0x14>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	20000038 	.word	0x20000038

08007dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007dd4:	f7ff fff0 	bl	8007db8 <HAL_RCC_GetHCLKFreq>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	4b05      	ldr	r3, [pc, #20]	; (8007df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ddc:	689b      	ldr	r3, [r3, #8]
 8007dde:	0a9b      	lsrs	r3, r3, #10
 8007de0:	f003 0307 	and.w	r3, r3, #7
 8007de4:	4903      	ldr	r1, [pc, #12]	; (8007df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007de6:	5ccb      	ldrb	r3, [r1, r3]
 8007de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	40023800 	.word	0x40023800
 8007df4:	08013870 	.word	0x08013870

08007df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007dfc:	f7ff ffdc 	bl	8007db8 <HAL_RCC_GetHCLKFreq>
 8007e00:	4602      	mov	r2, r0
 8007e02:	4b05      	ldr	r3, [pc, #20]	; (8007e18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	0b5b      	lsrs	r3, r3, #13
 8007e08:	f003 0307 	and.w	r3, r3, #7
 8007e0c:	4903      	ldr	r1, [pc, #12]	; (8007e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007e0e:	5ccb      	ldrb	r3, [r1, r3]
 8007e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	40023800 	.word	0x40023800
 8007e1c:	08013870 	.word	0x08013870

08007e20 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b082      	sub	sp, #8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d101      	bne.n	8007e32 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	e022      	b.n	8007e78 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d105      	bne.n	8007e4a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2200      	movs	r2, #0
 8007e42:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f7fc fe89 	bl	8004b5c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2203      	movs	r2, #3
 8007e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f814 	bl	8007e80 <HAL_SD_InitCard>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d001      	beq.n	8007e62 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e00a      	b.n	8007e78 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	2200      	movs	r2, #0
 8007e66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2201      	movs	r2, #1
 8007e72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007e76:	2300      	movs	r3, #0
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	3708      	adds	r7, #8
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	bd80      	pop	{r7, pc}

08007e80 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007e80:	b5b0      	push	{r4, r5, r7, lr}
 8007e82:	b08e      	sub	sp, #56	; 0x38
 8007e84:	af04      	add	r7, sp, #16
 8007e86:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8007e90:	2300      	movs	r3, #0
 8007e92:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8007e94:	2300      	movs	r3, #0
 8007e96:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8007e98:	2300      	movs	r3, #0
 8007e9a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8007e9c:	2376      	movs	r3, #118	; 0x76
 8007e9e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681d      	ldr	r5, [r3, #0]
 8007ea4:	466c      	mov	r4, sp
 8007ea6:	f107 0314 	add.w	r3, r7, #20
 8007eaa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007eae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007eb2:	f107 0308 	add.w	r3, r7, #8
 8007eb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007eb8:	4628      	mov	r0, r5
 8007eba:	f001 fdf5 	bl	8009aa8 <SDIO_Init>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d001      	beq.n	8007ed0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007ecc:	2301      	movs	r3, #1
 8007ece:	e04c      	b.n	8007f6a <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8007ed0:	4b28      	ldr	r3, [pc, #160]	; (8007f74 <HAL_SD_InitCard+0xf4>)
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4618      	mov	r0, r3
 8007edc:	f001 fe2d 	bl	8009b3a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8007ee0:	4b24      	ldr	r3, [pc, #144]	; (8007f74 <HAL_SD_InitCard+0xf4>)
 8007ee2:	2201      	movs	r2, #1
 8007ee4:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f001 f804 	bl	8008ef4 <SD_PowerON>
 8007eec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007eee:	6a3b      	ldr	r3, [r7, #32]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00b      	beq.n	8007f0c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f00:	6a3b      	ldr	r3, [r7, #32]
 8007f02:	431a      	orrs	r2, r3
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e02e      	b.n	8007f6a <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f000 ff25 	bl	8008d5c <SD_InitCard>
 8007f12:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f14:	6a3b      	ldr	r3, [r7, #32]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00b      	beq.n	8007f32 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f26:	6a3b      	ldr	r3, [r7, #32]
 8007f28:	431a      	orrs	r2, r3
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007f2e:	2301      	movs	r3, #1
 8007f30:	e01b      	b.n	8007f6a <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f001 fe90 	bl	8009c60 <SDMMC_CmdBlockLength>
 8007f40:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f42:	6a3b      	ldr	r3, [r7, #32]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00f      	beq.n	8007f68 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a0a      	ldr	r2, [pc, #40]	; (8007f78 <HAL_SD_InitCard+0xf8>)
 8007f4e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f54:	6a3b      	ldr	r3, [r7, #32]
 8007f56:	431a      	orrs	r2, r3
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	e000      	b.n	8007f6a <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3728      	adds	r7, #40	; 0x28
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bdb0      	pop	{r4, r5, r7, pc}
 8007f72:	bf00      	nop
 8007f74:	422580a0 	.word	0x422580a0
 8007f78:	004005ff 	.word	0x004005ff

08007f7c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b08c      	sub	sp, #48	; 0x30
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]
 8007f88:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d107      	bne.n	8007fa4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f98:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e0c0      	b.n	8008126 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	f040 80b9 	bne.w	8008124 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007fb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	441a      	add	r2, r3
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d907      	bls.n	8007fd6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e0a7      	b.n	8008126 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2203      	movs	r2, #3
 8007fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fec:	68fa      	ldr	r2, [r7, #12]
 8007fee:	6812      	ldr	r2, [r2, #0]
 8007ff0:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8007ff4:	f043 0302 	orr.w	r3, r3, #2
 8007ff8:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffe:	4a4c      	ldr	r2, [pc, #304]	; (8008130 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8008000:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008006:	4a4b      	ldr	r2, [pc, #300]	; (8008134 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8008008:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800800e:	2200      	movs	r2, #0
 8008010:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008016:	2200      	movs	r2, #0
 8008018:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802a:	689a      	ldr	r2, [r3, #8]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	430a      	orrs	r2, r1
 8008034:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	3380      	adds	r3, #128	; 0x80
 8008040:	4619      	mov	r1, r3
 8008042:	68ba      	ldr	r2, [r7, #8]
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	025b      	lsls	r3, r3, #9
 8008048:	089b      	lsrs	r3, r3, #2
 800804a:	f7fe fde7 	bl	8006c1c <HAL_DMA_Start_IT>
 800804e:	4603      	mov	r3, r0
 8008050:	2b00      	cmp	r3, #0
 8008052:	d017      	beq.n	8008084 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008062:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a33      	ldr	r2, [pc, #204]	; (8008138 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800806a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008070:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2201      	movs	r2, #1
 800807c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e050      	b.n	8008126 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008084:	4b2d      	ldr	r3, [pc, #180]	; (800813c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8008086:	2201      	movs	r2, #1
 8008088:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800808e:	2b01      	cmp	r3, #1
 8008090:	d002      	beq.n	8008098 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8008092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008094:	025b      	lsls	r3, r3, #9
 8008096:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008098:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800809c:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	025b      	lsls	r3, r3, #9
 80080a2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80080a4:	2390      	movs	r3, #144	; 0x90
 80080a6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80080a8:	2302      	movs	r3, #2
 80080aa:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80080ac:	2300      	movs	r3, #0
 80080ae:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80080b0:	2301      	movs	r3, #1
 80080b2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f107 0210 	add.w	r2, r7, #16
 80080bc:	4611      	mov	r1, r2
 80080be:	4618      	mov	r0, r3
 80080c0:	f001 fda2 	bl	8009c08 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d90a      	bls.n	80080e0 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	2282      	movs	r2, #130	; 0x82
 80080ce:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080d6:	4618      	mov	r0, r3
 80080d8:	f001 fe06 	bl	8009ce8 <SDMMC_CmdReadMultiBlock>
 80080dc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80080de:	e009      	b.n	80080f4 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2281      	movs	r2, #129	; 0x81
 80080e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080ec:	4618      	mov	r0, r3
 80080ee:	f001 fdd9 	bl	8009ca4 <SDMMC_CmdReadSingleBlock>
 80080f2:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80080f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d012      	beq.n	8008120 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a0e      	ldr	r2, [pc, #56]	; (8008138 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8008100:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008108:	431a      	orrs	r2, r3
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2201      	movs	r2, #1
 8008112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2200      	movs	r2, #0
 800811a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e002      	b.n	8008126 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8008120:	2300      	movs	r3, #0
 8008122:	e000      	b.n	8008126 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8008124:	2302      	movs	r3, #2
  }
}
 8008126:	4618      	mov	r0, r3
 8008128:	3730      	adds	r7, #48	; 0x30
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	08008b6b 	.word	0x08008b6b
 8008134:	08008bdd 	.word	0x08008bdd
 8008138:	004005ff 	.word	0x004005ff
 800813c:	4225858c 	.word	0x4225858c

08008140 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b08c      	sub	sp, #48	; 0x30
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	607a      	str	r2, [r7, #4]
 800814c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d107      	bne.n	8008168 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800815c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008164:	2301      	movs	r3, #1
 8008166:	e0c5      	b.n	80082f4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800816e:	b2db      	uxtb	r3, r3
 8008170:	2b01      	cmp	r3, #1
 8008172:	f040 80be 	bne.w	80082f2 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800817c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	441a      	add	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008186:	429a      	cmp	r2, r3
 8008188:	d907      	bls.n	800819a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e0ac      	b.n	80082f4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2203      	movs	r2, #3
 800819e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	2200      	movs	r2, #0
 80081a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	6812      	ldr	r2, [r2, #0]
 80081b4:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80081b8:	f043 0302 	orr.w	r3, r3, #2
 80081bc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c2:	4a4e      	ldr	r2, [pc, #312]	; (80082fc <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80081c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ca:	4a4d      	ldr	r2, [pc, #308]	; (8008300 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80081cc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081d2:	2200      	movs	r2, #0
 80081d4:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d002      	beq.n	80081e4 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80081de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081e0:	025b      	lsls	r3, r3, #9
 80081e2:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d90a      	bls.n	8008200 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	22a0      	movs	r2, #160	; 0xa0
 80081ee:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081f6:	4618      	mov	r0, r3
 80081f8:	f001 fdba 	bl	8009d70 <SDMMC_CmdWriteMultiBlock>
 80081fc:	62f8      	str	r0, [r7, #44]	; 0x2c
 80081fe:	e009      	b.n	8008214 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2290      	movs	r2, #144	; 0x90
 8008204:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800820c:	4618      	mov	r0, r3
 800820e:	f001 fd8d 	bl	8009d2c <SDMMC_CmdWriteSingleBlock>
 8008212:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008216:	2b00      	cmp	r3, #0
 8008218:	d012      	beq.n	8008240 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a39      	ldr	r2, [pc, #228]	; (8008304 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8008220:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008228:	431a      	orrs	r2, r3
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2201      	movs	r2, #1
 8008232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	e059      	b.n	80082f4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008240:	4b31      	ldr	r3, [pc, #196]	; (8008308 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8008242:	2201      	movs	r2, #1
 8008244:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800824a:	2240      	movs	r2, #64	; 0x40
 800824c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800825e:	689a      	ldr	r2, [r3, #8]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	430a      	orrs	r2, r1
 8008268:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800826e:	68b9      	ldr	r1, [r7, #8]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	3380      	adds	r3, #128	; 0x80
 8008276:	461a      	mov	r2, r3
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	025b      	lsls	r3, r3, #9
 800827c:	089b      	lsrs	r3, r3, #2
 800827e:	f7fe fccd 	bl	8006c1c <HAL_DMA_Start_IT>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d01c      	beq.n	80082c2 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	6812      	ldr	r2, [r2, #0]
 8008292:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8008296:	f023 0302 	bic.w	r3, r3, #2
 800829a:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4a18      	ldr	r2, [pc, #96]	; (8008304 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80082a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2200      	movs	r2, #0
 80082bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80082be:	2301      	movs	r3, #1
 80082c0:	e018      	b.n	80082f4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80082c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082c6:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	025b      	lsls	r3, r3, #9
 80082cc:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80082ce:	2390      	movs	r3, #144	; 0x90
 80082d0:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80082d2:	2300      	movs	r3, #0
 80082d4:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80082d6:	2300      	movs	r3, #0
 80082d8:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80082da:	2301      	movs	r3, #1
 80082dc:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f107 0210 	add.w	r2, r7, #16
 80082e6:	4611      	mov	r1, r2
 80082e8:	4618      	mov	r0, r3
 80082ea:	f001 fc8d 	bl	8009c08 <SDIO_ConfigData>

      return HAL_OK;
 80082ee:	2300      	movs	r3, #0
 80082f0:	e000      	b.n	80082f4 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80082f2:	2302      	movs	r3, #2
  }
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3730      	adds	r7, #48	; 0x30
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	08008b41 	.word	0x08008b41
 8008300:	08008bdd 	.word	0x08008bdd
 8008304:	004005ff 	.word	0x004005ff
 8008308:	4225858c 	.word	0x4225858c

0800830c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008318:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008324:	2b00      	cmp	r3, #0
 8008326:	d008      	beq.n	800833a <HAL_SD_IRQHandler+0x2e>
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	f003 0308 	and.w	r3, r3, #8
 800832e:	2b00      	cmp	r3, #0
 8008330:	d003      	beq.n	800833a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fffd 	bl	8009332 <SD_Read_IT>
 8008338:	e165      	b.n	8008606 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008344:	2b00      	cmp	r3, #0
 8008346:	f000 808f 	beq.w	8008468 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008352:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	6812      	ldr	r2, [r2, #0]
 800835e:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8008362:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8008366:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f022 0201 	bic.w	r2, r2, #1
 8008376:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f003 0308 	and.w	r3, r3, #8
 800837e:	2b00      	cmp	r3, #0
 8008380:	d039      	beq.n	80083f6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	f003 0302 	and.w	r3, r3, #2
 8008388:	2b00      	cmp	r3, #0
 800838a:	d104      	bne.n	8008396 <HAL_SD_IRQHandler+0x8a>
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f003 0320 	and.w	r3, r3, #32
 8008392:	2b00      	cmp	r3, #0
 8008394:	d011      	beq.n	80083ba <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4618      	mov	r0, r3
 800839c:	f001 fd0a 	bl	8009db4 <SDMMC_CmdStopTransfer>
 80083a0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d008      	beq.n	80083ba <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	431a      	orrs	r2, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 f92f 	bl	8008618 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f240 523a 	movw	r2, #1338	; 0x53a
 80083c2:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2200      	movs	r2, #0
 80083d0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f003 0301 	and.w	r3, r3, #1
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d104      	bne.n	80083e6 <HAL_SD_IRQHandler+0xda>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	f003 0302 	and.w	r3, r3, #2
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d003      	beq.n	80083ee <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	f002 f978 	bl	800a6dc <HAL_SD_RxCpltCallback>
 80083ec:	e10b      	b.n	8008606 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f002 f96a 	bl	800a6c8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80083f4:	e107      	b.n	8008606 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f000 8102 	beq.w	8008606 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f003 0320 	and.w	r3, r3, #32
 8008408:	2b00      	cmp	r3, #0
 800840a:	d011      	beq.n	8008430 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4618      	mov	r0, r3
 8008412:	f001 fccf 	bl	8009db4 <SDMMC_CmdStopTransfer>
 8008416:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d008      	beq.n	8008430 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	431a      	orrs	r2, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f8f4 	bl	8008618 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f003 0301 	and.w	r3, r3, #1
 8008436:	2b00      	cmp	r3, #0
 8008438:	f040 80e5 	bne.w	8008606 <HAL_SD_IRQHandler+0x2fa>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f003 0302 	and.w	r3, r3, #2
 8008442:	2b00      	cmp	r3, #0
 8008444:	f040 80df 	bne.w	8008606 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f022 0208 	bic.w	r2, r2, #8
 8008456:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2201      	movs	r2, #1
 800845c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f002 f931 	bl	800a6c8 <HAL_SD_TxCpltCallback>
}
 8008466:	e0ce      	b.n	8008606 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800846e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008472:	2b00      	cmp	r3, #0
 8008474:	d008      	beq.n	8008488 <HAL_SD_IRQHandler+0x17c>
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	f003 0308 	and.w	r3, r3, #8
 800847c:	2b00      	cmp	r3, #0
 800847e:	d003      	beq.n	8008488 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 ffa7 	bl	80093d4 <SD_Write_IT>
 8008486:	e0be      	b.n	8008606 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800848e:	f240 233a 	movw	r3, #570	; 0x23a
 8008492:	4013      	ands	r3, r2
 8008494:	2b00      	cmp	r3, #0
 8008496:	f000 80b6 	beq.w	8008606 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a0:	f003 0302 	and.w	r3, r3, #2
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d005      	beq.n	80084b4 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ac:	f043 0202 	orr.w	r2, r3, #2
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ba:	f003 0308 	and.w	r3, r3, #8
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d005      	beq.n	80084ce <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084c6:	f043 0208 	orr.w	r2, r3, #8
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084d4:	f003 0320 	and.w	r3, r3, #32
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d005      	beq.n	80084e8 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e0:	f043 0220 	orr.w	r2, r3, #32
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ee:	f003 0310 	and.w	r3, r3, #16
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d005      	beq.n	8008502 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084fa:	f043 0210 	orr.w	r2, r3, #16
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008508:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800850c:	2b00      	cmp	r3, #0
 800850e:	d005      	beq.n	800851c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008514:	f043 0208 	orr.w	r2, r3, #8
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f240 723a 	movw	r2, #1850	; 0x73a
 8008524:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	6812      	ldr	r2, [r2, #0]
 8008530:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8008534:	f023 0302 	bic.w	r3, r3, #2
 8008538:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4618      	mov	r0, r3
 8008540:	f001 fc38 	bl	8009db4 <SDMMC_CmdStopTransfer>
 8008544:	4602      	mov	r2, r0
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800854a:	431a      	orrs	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f003 0308 	and.w	r3, r3, #8
 8008556:	2b00      	cmp	r3, #0
 8008558:	d00a      	beq.n	8008570 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2201      	movs	r2, #1
 800855e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008568:	6878      	ldr	r0, [r7, #4]
 800856a:	f000 f855 	bl	8008618 <HAL_SD_ErrorCallback>
}
 800856e:	e04a      	b.n	8008606 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008576:	2b00      	cmp	r3, #0
 8008578:	d045      	beq.n	8008606 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	f003 0310 	and.w	r3, r3, #16
 8008580:	2b00      	cmp	r3, #0
 8008582:	d104      	bne.n	800858e <HAL_SD_IRQHandler+0x282>
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f003 0320 	and.w	r3, r3, #32
 800858a:	2b00      	cmp	r3, #0
 800858c:	d011      	beq.n	80085b2 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008592:	4a1f      	ldr	r2, [pc, #124]	; (8008610 <HAL_SD_IRQHandler+0x304>)
 8008594:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800859a:	4618      	mov	r0, r3
 800859c:	f7fe fb96 	bl	8006ccc <HAL_DMA_Abort_IT>
 80085a0:	4603      	mov	r3, r0
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d02f      	beq.n	8008606 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 fb68 	bl	8008c80 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80085b0:	e029      	b.n	8008606 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	f003 0301 	and.w	r3, r3, #1
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d104      	bne.n	80085c6 <HAL_SD_IRQHandler+0x2ba>
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	f003 0302 	and.w	r3, r3, #2
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d011      	beq.n	80085ea <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ca:	4a12      	ldr	r2, [pc, #72]	; (8008614 <HAL_SD_IRQHandler+0x308>)
 80085cc:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085d2:	4618      	mov	r0, r3
 80085d4:	f7fe fb7a 	bl	8006ccc <HAL_DMA_Abort_IT>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d013      	beq.n	8008606 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085e2:	4618      	mov	r0, r3
 80085e4:	f000 fb83 	bl	8008cee <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80085e8:	e00d      	b.n	8008606 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f002 f858 	bl	800a6b4 <HAL_SD_AbortCallback>
}
 8008604:	e7ff      	b.n	8008606 <HAL_SD_IRQHandler+0x2fa>
 8008606:	bf00      	nop
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	08008c81 	.word	0x08008c81
 8008614:	08008cef 	.word	0x08008cef

08008618 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008618:	b480      	push	{r7}
 800861a:	b083      	sub	sp, #12
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008620:	bf00      	nop
 8008622:	370c      	adds	r7, #12
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr

0800862c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800862c:	b480      	push	{r7}
 800862e:	b083      	sub	sp, #12
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800863a:	0f9b      	lsrs	r3, r3, #30
 800863c:	b2da      	uxtb	r2, r3
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008646:	0e9b      	lsrs	r3, r3, #26
 8008648:	b2db      	uxtb	r3, r3
 800864a:	f003 030f 	and.w	r3, r3, #15
 800864e:	b2da      	uxtb	r2, r3
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008658:	0e1b      	lsrs	r3, r3, #24
 800865a:	b2db      	uxtb	r3, r3
 800865c:	f003 0303 	and.w	r3, r3, #3
 8008660:	b2da      	uxtb	r2, r3
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800866a:	0c1b      	lsrs	r3, r3, #16
 800866c:	b2da      	uxtb	r2, r3
 800866e:	683b      	ldr	r3, [r7, #0]
 8008670:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008676:	0a1b      	lsrs	r3, r3, #8
 8008678:	b2da      	uxtb	r2, r3
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008682:	b2da      	uxtb	r2, r3
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800868c:	0d1b      	lsrs	r3, r3, #20
 800868e:	b29a      	uxth	r2, r3
 8008690:	683b      	ldr	r3, [r7, #0]
 8008692:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008698:	0c1b      	lsrs	r3, r3, #16
 800869a:	b2db      	uxtb	r3, r3
 800869c:	f003 030f 	and.w	r3, r3, #15
 80086a0:	b2da      	uxtb	r2, r3
 80086a2:	683b      	ldr	r3, [r7, #0]
 80086a4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086aa:	0bdb      	lsrs	r3, r3, #15
 80086ac:	b2db      	uxtb	r3, r3
 80086ae:	f003 0301 	and.w	r3, r3, #1
 80086b2:	b2da      	uxtb	r2, r3
 80086b4:	683b      	ldr	r3, [r7, #0]
 80086b6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086bc:	0b9b      	lsrs	r3, r3, #14
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	f003 0301 	and.w	r3, r3, #1
 80086c4:	b2da      	uxtb	r2, r3
 80086c6:	683b      	ldr	r3, [r7, #0]
 80086c8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086ce:	0b5b      	lsrs	r3, r3, #13
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	f003 0301 	and.w	r3, r3, #1
 80086d6:	b2da      	uxtb	r2, r3
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086e0:	0b1b      	lsrs	r3, r3, #12
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	f003 0301 	and.w	r3, r3, #1
 80086e8:	b2da      	uxtb	r2, r3
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	2200      	movs	r2, #0
 80086f2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d163      	bne.n	80087c4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008700:	009a      	lsls	r2, r3, #2
 8008702:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008706:	4013      	ands	r3, r2
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800870c:	0f92      	lsrs	r2, r2, #30
 800870e:	431a      	orrs	r2, r3
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008718:	0edb      	lsrs	r3, r3, #27
 800871a:	b2db      	uxtb	r3, r3
 800871c:	f003 0307 	and.w	r3, r3, #7
 8008720:	b2da      	uxtb	r2, r3
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800872a:	0e1b      	lsrs	r3, r3, #24
 800872c:	b2db      	uxtb	r3, r3
 800872e:	f003 0307 	and.w	r3, r3, #7
 8008732:	b2da      	uxtb	r2, r3
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800873c:	0d5b      	lsrs	r3, r3, #21
 800873e:	b2db      	uxtb	r3, r3
 8008740:	f003 0307 	and.w	r3, r3, #7
 8008744:	b2da      	uxtb	r2, r3
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800874e:	0c9b      	lsrs	r3, r3, #18
 8008750:	b2db      	uxtb	r3, r3
 8008752:	f003 0307 	and.w	r3, r3, #7
 8008756:	b2da      	uxtb	r2, r3
 8008758:	683b      	ldr	r3, [r7, #0]
 800875a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008760:	0bdb      	lsrs	r3, r3, #15
 8008762:	b2db      	uxtb	r3, r3
 8008764:	f003 0307 	and.w	r3, r3, #7
 8008768:	b2da      	uxtb	r2, r3
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	691b      	ldr	r3, [r3, #16]
 8008772:	1c5a      	adds	r2, r3, #1
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008778:	683b      	ldr	r3, [r7, #0]
 800877a:	7e1b      	ldrb	r3, [r3, #24]
 800877c:	b2db      	uxtb	r3, r3
 800877e:	f003 0307 	and.w	r3, r3, #7
 8008782:	3302      	adds	r3, #2
 8008784:	2201      	movs	r2, #1
 8008786:	fa02 f303 	lsl.w	r3, r2, r3
 800878a:	687a      	ldr	r2, [r7, #4]
 800878c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800878e:	fb02 f203 	mul.w	r2, r2, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	7a1b      	ldrb	r3, [r3, #8]
 800879a:	b2db      	uxtb	r3, r3
 800879c:	f003 030f 	and.w	r3, r3, #15
 80087a0:	2201      	movs	r2, #1
 80087a2:	409a      	lsls	r2, r3
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80087b0:	0a52      	lsrs	r2, r2, #9
 80087b2:	fb02 f203 	mul.w	r2, r2, r3
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087c0:	661a      	str	r2, [r3, #96]	; 0x60
 80087c2:	e031      	b.n	8008828 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d11d      	bne.n	8008808 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087d0:	041b      	lsls	r3, r3, #16
 80087d2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087da:	0c1b      	lsrs	r3, r3, #16
 80087dc:	431a      	orrs	r2, r3
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	691b      	ldr	r3, [r3, #16]
 80087e6:	3301      	adds	r3, #1
 80087e8:	029a      	lsls	r2, r3, #10
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087fc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	661a      	str	r2, [r3, #96]	; 0x60
 8008806:	e00f      	b.n	8008828 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a58      	ldr	r2, [pc, #352]	; (8008970 <HAL_SD_GetCardCSD+0x344>)
 800880e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008814:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008824:	2301      	movs	r3, #1
 8008826:	e09d      	b.n	8008964 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800882c:	0b9b      	lsrs	r3, r3, #14
 800882e:	b2db      	uxtb	r3, r3
 8008830:	f003 0301 	and.w	r3, r3, #1
 8008834:	b2da      	uxtb	r2, r3
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800883e:	09db      	lsrs	r3, r3, #7
 8008840:	b2db      	uxtb	r3, r3
 8008842:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008846:	b2da      	uxtb	r2, r3
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008850:	b2db      	uxtb	r3, r3
 8008852:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008856:	b2da      	uxtb	r2, r3
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008860:	0fdb      	lsrs	r3, r3, #31
 8008862:	b2da      	uxtb	r2, r3
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800886c:	0f5b      	lsrs	r3, r3, #29
 800886e:	b2db      	uxtb	r3, r3
 8008870:	f003 0303 	and.w	r3, r3, #3
 8008874:	b2da      	uxtb	r2, r3
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800887e:	0e9b      	lsrs	r3, r3, #26
 8008880:	b2db      	uxtb	r3, r3
 8008882:	f003 0307 	and.w	r3, r3, #7
 8008886:	b2da      	uxtb	r2, r3
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008890:	0d9b      	lsrs	r3, r3, #22
 8008892:	b2db      	uxtb	r3, r3
 8008894:	f003 030f 	and.w	r3, r3, #15
 8008898:	b2da      	uxtb	r2, r3
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088a2:	0d5b      	lsrs	r3, r3, #21
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	f003 0301 	and.w	r3, r3, #1
 80088aa:	b2da      	uxtb	r2, r3
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088be:	0c1b      	lsrs	r3, r3, #16
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	f003 0301 	and.w	r3, r3, #1
 80088c6:	b2da      	uxtb	r2, r3
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088d2:	0bdb      	lsrs	r3, r3, #15
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	f003 0301 	and.w	r3, r3, #1
 80088da:	b2da      	uxtb	r2, r3
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088e6:	0b9b      	lsrs	r3, r3, #14
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	f003 0301 	and.w	r3, r3, #1
 80088ee:	b2da      	uxtb	r2, r3
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088fa:	0b5b      	lsrs	r3, r3, #13
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	f003 0301 	and.w	r3, r3, #1
 8008902:	b2da      	uxtb	r2, r3
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800890e:	0b1b      	lsrs	r3, r3, #12
 8008910:	b2db      	uxtb	r3, r3
 8008912:	f003 0301 	and.w	r3, r3, #1
 8008916:	b2da      	uxtb	r2, r3
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008922:	0a9b      	lsrs	r3, r3, #10
 8008924:	b2db      	uxtb	r3, r3
 8008926:	f003 0303 	and.w	r3, r3, #3
 800892a:	b2da      	uxtb	r2, r3
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008936:	0a1b      	lsrs	r3, r3, #8
 8008938:	b2db      	uxtb	r3, r3
 800893a:	f003 0303 	and.w	r3, r3, #3
 800893e:	b2da      	uxtb	r2, r3
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800894a:	085b      	lsrs	r3, r3, #1
 800894c:	b2db      	uxtb	r3, r3
 800894e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008952:	b2da      	uxtb	r2, r3
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	2201      	movs	r2, #1
 800895e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	370c      	adds	r7, #12
 8008968:	46bd      	mov	sp, r7
 800896a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896e:	4770      	bx	lr
 8008970:	004005ff 	.word	0x004005ff

08008974 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80089b2:	683b      	ldr	r3, [r7, #0]
 80089b4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80089cc:	b5b0      	push	{r4, r5, r7, lr}
 80089ce:	b08e      	sub	sp, #56	; 0x38
 80089d0:	af04      	add	r7, sp, #16
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80089d6:	2300      	movs	r3, #0
 80089d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2203      	movs	r2, #3
 80089e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089e8:	2b03      	cmp	r3, #3
 80089ea:	d02e      	beq.n	8008a4a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089f2:	d106      	bne.n	8008a02 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	639a      	str	r2, [r3, #56]	; 0x38
 8008a00:	e029      	b.n	8008a56 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a08:	d10a      	bne.n	8008a20 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 fb28 	bl	8009060 <SD_WideBus_Enable>
 8008a10:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a16:	6a3b      	ldr	r3, [r7, #32]
 8008a18:	431a      	orrs	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	639a      	str	r2, [r3, #56]	; 0x38
 8008a1e:	e01a      	b.n	8008a56 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d10a      	bne.n	8008a3c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 fb65 	bl	80090f6 <SD_WideBus_Disable>
 8008a2c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a32:	6a3b      	ldr	r3, [r7, #32]
 8008a34:	431a      	orrs	r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	639a      	str	r2, [r3, #56]	; 0x38
 8008a3a:	e00c      	b.n	8008a56 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a40:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	639a      	str	r2, [r3, #56]	; 0x38
 8008a48:	e005      	b.n	8008a56 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a4e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d00b      	beq.n	8008a76 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a26      	ldr	r2, [pc, #152]	; (8008afc <HAL_SD_ConfigWideBusOperation+0x130>)
 8008a64:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008a74:	e01f      	b.n	8008ab6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	689b      	ldr	r3, [r3, #8]
 8008a80:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	68db      	ldr	r3, [r3, #12]
 8008a86:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	695b      	ldr	r3, [r3, #20]
 8008a90:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681d      	ldr	r5, [r3, #0]
 8008a9c:	466c      	mov	r4, sp
 8008a9e:	f107 0314 	add.w	r3, r7, #20
 8008aa2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008aa6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008aaa:	f107 0308 	add.w	r3, r7, #8
 8008aae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ab0:	4628      	mov	r0, r5
 8008ab2:	f000 fff9 	bl	8009aa8 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f001 f8ce 	bl	8009c60 <SDMMC_CmdBlockLength>
 8008ac4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ac6:	6a3b      	ldr	r3, [r7, #32]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d00c      	beq.n	8008ae6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a0a      	ldr	r2, [pc, #40]	; (8008afc <HAL_SD_ConfigWideBusOperation+0x130>)
 8008ad2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ad8:	6a3b      	ldr	r3, [r7, #32]
 8008ada:	431a      	orrs	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008aee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3728      	adds	r7, #40	; 0x28
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bdb0      	pop	{r4, r5, r7, pc}
 8008afa:	bf00      	nop
 8008afc:	004005ff 	.word	0x004005ff

08008b00 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b086      	sub	sp, #24
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008b0c:	f107 030c 	add.w	r3, r7, #12
 8008b10:	4619      	mov	r1, r3
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f000 fa7c 	bl	8009010 <SD_SendStatus>
 8008b18:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d005      	beq.n	8008b2c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	431a      	orrs	r2, r3
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	0a5b      	lsrs	r3, r3, #9
 8008b30:	f003 030f 	and.w	r3, r3, #15
 8008b34:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008b36:	693b      	ldr	r3, [r7, #16]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3718      	adds	r7, #24
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}

08008b40 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b085      	sub	sp, #20
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b5c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008b5e:	bf00      	nop
 8008b60:	3714      	adds	r7, #20
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr

08008b6a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b084      	sub	sp, #16
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b76:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b7c:	2b82      	cmp	r3, #130	; 0x82
 8008b7e:	d111      	bne.n	8008ba4 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4618      	mov	r0, r3
 8008b86:	f001 f915 	bl	8009db4 <SDMMC_CmdStopTransfer>
 8008b8a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d008      	beq.n	8008ba4 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	431a      	orrs	r2, r3
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008b9e:	68f8      	ldr	r0, [r7, #12]
 8008ba0:	f7ff fd3a 	bl	8008618 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f022 0208 	bic.w	r2, r2, #8
 8008bb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f240 523a 	movw	r2, #1338	; 0x53a
 8008bbc:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008bcc:	68f8      	ldr	r0, [r7, #12]
 8008bce:	f001 fd85 	bl	800a6dc <HAL_SD_RxCpltCallback>
#endif
}
 8008bd2:	bf00      	nop
 8008bd4:	3710      	adds	r7, #16
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
	...

08008bdc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b086      	sub	sp, #24
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f7fe fa1a 	bl	8007024 <HAL_DMA_GetError>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b02      	cmp	r3, #2
 8008bf4:	d03e      	beq.n	8008c74 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008bfc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c04:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008c06:	693b      	ldr	r3, [r7, #16]
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d002      	beq.n	8008c12 <SD_DMAError+0x36>
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d12d      	bne.n	8008c6e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a19      	ldr	r2, [pc, #100]	; (8008c7c <SD_DMAError+0xa0>)
 8008c18:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008c28:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c2e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008c36:	6978      	ldr	r0, [r7, #20]
 8008c38:	f7ff ff62 	bl	8008b00 <HAL_SD_GetCardState>
 8008c3c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	2b06      	cmp	r3, #6
 8008c42:	d002      	beq.n	8008c4a <SD_DMAError+0x6e>
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	2b05      	cmp	r3, #5
 8008c48:	d10a      	bne.n	8008c60 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f001 f8b0 	bl	8009db4 <SDMMC_CmdStopTransfer>
 8008c54:	4602      	mov	r2, r0
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c5a:	431a      	orrs	r2, r3
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008c6e:	6978      	ldr	r0, [r7, #20]
 8008c70:	f7ff fcd2 	bl	8008618 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008c74:	bf00      	nop
 8008c76:	3718      	adds	r7, #24
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	004005ff 	.word	0x004005ff

08008c80 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c8c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f240 523a 	movw	r2, #1338	; 0x53a
 8008c96:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008c98:	68f8      	ldr	r0, [r7, #12]
 8008c9a:	f7ff ff31 	bl	8008b00 <HAL_SD_GetCardState>
 8008c9e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	2200      	movs	r2, #0
 8008cac:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	2b06      	cmp	r3, #6
 8008cb2:	d002      	beq.n	8008cba <SD_DMATxAbort+0x3a>
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	2b05      	cmp	r3, #5
 8008cb8:	d10a      	bne.n	8008cd0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f001 f878 	bl	8009db4 <SDMMC_CmdStopTransfer>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cca:	431a      	orrs	r2, r3
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d103      	bne.n	8008ce0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008cd8:	68f8      	ldr	r0, [r7, #12]
 8008cda:	f001 fceb 	bl	800a6b4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008cde:	e002      	b.n	8008ce6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008ce0:	68f8      	ldr	r0, [r7, #12]
 8008ce2:	f7ff fc99 	bl	8008618 <HAL_SD_ErrorCallback>
}
 8008ce6:	bf00      	nop
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}

08008cee <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008cee:	b580      	push	{r7, lr}
 8008cf0:	b084      	sub	sp, #16
 8008cf2:	af00      	add	r7, sp, #0
 8008cf4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cfa:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f240 523a 	movw	r2, #1338	; 0x53a
 8008d04:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008d06:	68f8      	ldr	r0, [r7, #12]
 8008d08:	f7ff fefa 	bl	8008b00 <HAL_SD_GetCardState>
 8008d0c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2201      	movs	r2, #1
 8008d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	2b06      	cmp	r3, #6
 8008d20:	d002      	beq.n	8008d28 <SD_DMARxAbort+0x3a>
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	2b05      	cmp	r3, #5
 8008d26:	d10a      	bne.n	8008d3e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	f001 f841 	bl	8009db4 <SDMMC_CmdStopTransfer>
 8008d32:	4602      	mov	r2, r0
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d38:	431a      	orrs	r2, r3
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d103      	bne.n	8008d4e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f001 fcb4 	bl	800a6b4 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008d4c:	e002      	b.n	8008d54 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008d4e:	68f8      	ldr	r0, [r7, #12]
 8008d50:	f7ff fc62 	bl	8008618 <HAL_SD_ErrorCallback>
}
 8008d54:	bf00      	nop
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008d5c:	b5b0      	push	{r4, r5, r7, lr}
 8008d5e:	b094      	sub	sp, #80	; 0x50
 8008d60:	af04      	add	r7, sp, #16
 8008d62:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008d64:	2301      	movs	r3, #1
 8008d66:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f000 fef3 	bl	8009b58 <SDIO_GetPowerState>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d102      	bne.n	8008d7e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008d78:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008d7c:	e0b6      	b.n	8008eec <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d82:	2b03      	cmp	r3, #3
 8008d84:	d02f      	beq.n	8008de6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	f001 f91c 	bl	8009fc8 <SDMMC_CmdSendCID>
 8008d90:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d001      	beq.n	8008d9c <SD_InitCard+0x40>
    {
      return errorstate;
 8008d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d9a:	e0a7      	b.n	8008eec <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2100      	movs	r1, #0
 8008da2:	4618      	mov	r0, r3
 8008da4:	f000 ff1d 	bl	8009be2 <SDIO_GetResponse>
 8008da8:	4602      	mov	r2, r0
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2104      	movs	r1, #4
 8008db4:	4618      	mov	r0, r3
 8008db6:	f000 ff14 	bl	8009be2 <SDIO_GetResponse>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2108      	movs	r1, #8
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	f000 ff0b 	bl	8009be2 <SDIO_GetResponse>
 8008dcc:	4602      	mov	r2, r0
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	210c      	movs	r1, #12
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f000 ff02 	bl	8009be2 <SDIO_GetResponse>
 8008dde:	4602      	mov	r2, r0
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dea:	2b03      	cmp	r3, #3
 8008dec:	d00d      	beq.n	8008e0a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f107 020e 	add.w	r2, r7, #14
 8008df6:	4611      	mov	r1, r2
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f001 f922 	bl	800a042 <SDMMC_CmdSetRelAdd>
 8008dfe:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d001      	beq.n	8008e0a <SD_InitCard+0xae>
    {
      return errorstate;
 8008e06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e08:	e070      	b.n	8008eec <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e0e:	2b03      	cmp	r3, #3
 8008e10:	d036      	beq.n	8008e80 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008e12:	89fb      	ldrh	r3, [r7, #14]
 8008e14:	461a      	mov	r2, r3
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e22:	041b      	lsls	r3, r3, #16
 8008e24:	4619      	mov	r1, r3
 8008e26:	4610      	mov	r0, r2
 8008e28:	f001 f8ec 	bl	800a004 <SDMMC_CmdSendCSD>
 8008e2c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d001      	beq.n	8008e38 <SD_InitCard+0xdc>
    {
      return errorstate;
 8008e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e36:	e059      	b.n	8008eec <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	2100      	movs	r1, #0
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f000 fecf 	bl	8009be2 <SDIO_GetResponse>
 8008e44:	4602      	mov	r2, r0
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2104      	movs	r1, #4
 8008e50:	4618      	mov	r0, r3
 8008e52:	f000 fec6 	bl	8009be2 <SDIO_GetResponse>
 8008e56:	4602      	mov	r2, r0
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	2108      	movs	r1, #8
 8008e62:	4618      	mov	r0, r3
 8008e64:	f000 febd 	bl	8009be2 <SDIO_GetResponse>
 8008e68:	4602      	mov	r2, r0
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	210c      	movs	r1, #12
 8008e74:	4618      	mov	r0, r3
 8008e76:	f000 feb4 	bl	8009be2 <SDIO_GetResponse>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	2104      	movs	r1, #4
 8008e86:	4618      	mov	r0, r3
 8008e88:	f000 feab 	bl	8009be2 <SDIO_GetResponse>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	0d1a      	lsrs	r2, r3, #20
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008e94:	f107 0310 	add.w	r3, r7, #16
 8008e98:	4619      	mov	r1, r3
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f7ff fbc6 	bl	800862c <HAL_SD_GetCardCSD>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d002      	beq.n	8008eac <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008ea6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008eaa:	e01f      	b.n	8008eec <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6819      	ldr	r1, [r3, #0]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eb4:	041b      	lsls	r3, r3, #16
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	f04f 0300 	mov.w	r3, #0
 8008ebc:	4608      	mov	r0, r1
 8008ebe:	f000 ff9b 	bl	8009df8 <SDMMC_CmdSelDesel>
 8008ec2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d001      	beq.n	8008ece <SD_InitCard+0x172>
  {
    return errorstate;
 8008eca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ecc:	e00e      	b.n	8008eec <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681d      	ldr	r5, [r3, #0]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	466c      	mov	r4, sp
 8008ed6:	f103 0210 	add.w	r2, r3, #16
 8008eda:	ca07      	ldmia	r2, {r0, r1, r2}
 8008edc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008ee0:	3304      	adds	r3, #4
 8008ee2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	f000 fddf 	bl	8009aa8 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3740      	adds	r7, #64	; 0x40
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	bdb0      	pop	{r4, r5, r7, pc}

08008ef4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b086      	sub	sp, #24
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008efc:	2300      	movs	r3, #0
 8008efe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008f00:	2300      	movs	r3, #0
 8008f02:	617b      	str	r3, [r7, #20]
 8008f04:	2300      	movs	r3, #0
 8008f06:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f000 ff96 	bl	8009e3e <SDMMC_CmdGoIdleState>
 8008f12:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d001      	beq.n	8008f1e <SD_PowerON+0x2a>
  {
    return errorstate;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	e072      	b.n	8009004 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4618      	mov	r0, r3
 8008f24:	f000 ffa9 	bl	8009e7a <SDMMC_CmdOperCond>
 8008f28:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00d      	beq.n	8008f4c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2200      	movs	r2, #0
 8008f34:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f000 ff7f 	bl	8009e3e <SDMMC_CmdGoIdleState>
 8008f40:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d004      	beq.n	8008f52 <SD_PowerON+0x5e>
    {
      return errorstate;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	e05b      	b.n	8009004 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	d137      	bne.n	8008fca <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2100      	movs	r1, #0
 8008f60:	4618      	mov	r0, r3
 8008f62:	f000 ffa9 	bl	8009eb8 <SDMMC_CmdAppCommand>
 8008f66:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d02d      	beq.n	8008fca <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f6e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f72:	e047      	b.n	8009004 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	2100      	movs	r1, #0
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f000 ff9c 	bl	8009eb8 <SDMMC_CmdAppCommand>
 8008f80:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d001      	beq.n	8008f8c <SD_PowerON+0x98>
    {
      return errorstate;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	e03b      	b.n	8009004 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	491e      	ldr	r1, [pc, #120]	; (800900c <SD_PowerON+0x118>)
 8008f92:	4618      	mov	r0, r3
 8008f94:	f000 ffb2 	bl	8009efc <SDMMC_CmdAppOperCommand>
 8008f98:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d002      	beq.n	8008fa6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008fa0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008fa4:	e02e      	b.n	8009004 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	2100      	movs	r1, #0
 8008fac:	4618      	mov	r0, r3
 8008fae:	f000 fe18 	bl	8009be2 <SDIO_GetResponse>
 8008fb2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	0fdb      	lsrs	r3, r3, #31
 8008fb8:	2b01      	cmp	r3, #1
 8008fba:	d101      	bne.n	8008fc0 <SD_PowerON+0xcc>
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e000      	b.n	8008fc2 <SD_PowerON+0xce>
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	613b      	str	r3, [r7, #16]

    count++;
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d802      	bhi.n	8008fda <SD_PowerON+0xe6>
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d0cc      	beq.n	8008f74 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d902      	bls.n	8008fea <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008fe4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008fe8:	e00c      	b.n	8009004 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d003      	beq.n	8008ffc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	645a      	str	r2, [r3, #68]	; 0x44
 8008ffa:	e002      	b.n	8009002 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009002:	2300      	movs	r3, #0
}
 8009004:	4618      	mov	r0, r3
 8009006:	3718      	adds	r7, #24
 8009008:	46bd      	mov	sp, r7
 800900a:	bd80      	pop	{r7, pc}
 800900c:	c1100000 	.word	0xc1100000

08009010 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d102      	bne.n	8009026 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009020:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009024:	e018      	b.n	8009058 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800902e:	041b      	lsls	r3, r3, #16
 8009030:	4619      	mov	r1, r3
 8009032:	4610      	mov	r0, r2
 8009034:	f001 f826 	bl	800a084 <SDMMC_CmdSendStatus>
 8009038:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d001      	beq.n	8009044 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	e009      	b.n	8009058 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2100      	movs	r1, #0
 800904a:	4618      	mov	r0, r3
 800904c:	f000 fdc9 	bl	8009be2 <SDIO_GetResponse>
 8009050:	4602      	mov	r2, r0
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3710      	adds	r7, #16
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b086      	sub	sp, #24
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8009068:	2300      	movs	r3, #0
 800906a:	60fb      	str	r3, [r7, #12]
 800906c:	2300      	movs	r3, #0
 800906e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2100      	movs	r1, #0
 8009076:	4618      	mov	r0, r3
 8009078:	f000 fdb3 	bl	8009be2 <SDIO_GetResponse>
 800907c:	4603      	mov	r3, r0
 800907e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009082:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009086:	d102      	bne.n	800908e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009088:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800908c:	e02f      	b.n	80090ee <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800908e:	f107 030c 	add.w	r3, r7, #12
 8009092:	4619      	mov	r1, r3
 8009094:	6878      	ldr	r0, [r7, #4]
 8009096:	f000 f879 	bl	800918c <SD_FindSCR>
 800909a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d001      	beq.n	80090a6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	e023      	b.n	80090ee <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80090a6:	693b      	ldr	r3, [r7, #16]
 80090a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d01c      	beq.n	80090ea <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681a      	ldr	r2, [r3, #0]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090b8:	041b      	lsls	r3, r3, #16
 80090ba:	4619      	mov	r1, r3
 80090bc:	4610      	mov	r0, r2
 80090be:	f000 fefb 	bl	8009eb8 <SDMMC_CmdAppCommand>
 80090c2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d001      	beq.n	80090ce <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	e00f      	b.n	80090ee <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2102      	movs	r1, #2
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 ff34 	bl	8009f42 <SDMMC_CmdBusWidth>
 80090da:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d001      	beq.n	80090e6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80090e2:	697b      	ldr	r3, [r7, #20]
 80090e4:	e003      	b.n	80090ee <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80090e6:	2300      	movs	r3, #0
 80090e8:	e001      	b.n	80090ee <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80090ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3718      	adds	r7, #24
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80090f6:	b580      	push	{r7, lr}
 80090f8:	b086      	sub	sp, #24
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80090fe:	2300      	movs	r3, #0
 8009100:	60fb      	str	r3, [r7, #12]
 8009102:	2300      	movs	r3, #0
 8009104:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2100      	movs	r1, #0
 800910c:	4618      	mov	r0, r3
 800910e:	f000 fd68 	bl	8009be2 <SDIO_GetResponse>
 8009112:	4603      	mov	r3, r0
 8009114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009118:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800911c:	d102      	bne.n	8009124 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800911e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009122:	e02f      	b.n	8009184 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009124:	f107 030c 	add.w	r3, r7, #12
 8009128:	4619      	mov	r1, r3
 800912a:	6878      	ldr	r0, [r7, #4]
 800912c:	f000 f82e 	bl	800918c <SD_FindSCR>
 8009130:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d001      	beq.n	800913c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	e023      	b.n	8009184 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800913c:	693b      	ldr	r3, [r7, #16]
 800913e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009142:	2b00      	cmp	r3, #0
 8009144:	d01c      	beq.n	8009180 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800914e:	041b      	lsls	r3, r3, #16
 8009150:	4619      	mov	r1, r3
 8009152:	4610      	mov	r0, r2
 8009154:	f000 feb0 	bl	8009eb8 <SDMMC_CmdAppCommand>
 8009158:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800915a:	697b      	ldr	r3, [r7, #20]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d001      	beq.n	8009164 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	e00f      	b.n	8009184 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2100      	movs	r1, #0
 800916a:	4618      	mov	r0, r3
 800916c:	f000 fee9 	bl	8009f42 <SDMMC_CmdBusWidth>
 8009170:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d001      	beq.n	800917c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	e003      	b.n	8009184 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800917c:	2300      	movs	r3, #0
 800917e:	e001      	b.n	8009184 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009180:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009184:	4618      	mov	r0, r3
 8009186:	3718      	adds	r7, #24
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800918c:	b590      	push	{r4, r7, lr}
 800918e:	b08f      	sub	sp, #60	; 0x3c
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
 8009194:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009196:	f7fd fb51 	bl	800683c <HAL_GetTick>
 800919a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800919c:	2300      	movs	r3, #0
 800919e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80091a0:	2300      	movs	r3, #0
 80091a2:	60bb      	str	r3, [r7, #8]
 80091a4:	2300      	movs	r3, #0
 80091a6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	2108      	movs	r1, #8
 80091b2:	4618      	mov	r0, r3
 80091b4:	f000 fd54 	bl	8009c60 <SDMMC_CmdBlockLength>
 80091b8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80091ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d001      	beq.n	80091c4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80091c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c2:	e0b2      	b.n	800932a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091cc:	041b      	lsls	r3, r3, #16
 80091ce:	4619      	mov	r1, r3
 80091d0:	4610      	mov	r0, r2
 80091d2:	f000 fe71 	bl	8009eb8 <SDMMC_CmdAppCommand>
 80091d6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80091d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d001      	beq.n	80091e2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80091de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091e0:	e0a3      	b.n	800932a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80091e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091e6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80091e8:	2308      	movs	r3, #8
 80091ea:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80091ec:	2330      	movs	r3, #48	; 0x30
 80091ee:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80091f0:	2302      	movs	r3, #2
 80091f2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80091f4:	2300      	movs	r3, #0
 80091f6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80091f8:	2301      	movs	r3, #1
 80091fa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f107 0210 	add.w	r2, r7, #16
 8009204:	4611      	mov	r1, r2
 8009206:	4618      	mov	r0, r3
 8009208:	f000 fcfe 	bl	8009c08 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	4618      	mov	r0, r3
 8009212:	f000 feb8 	bl	8009f86 <SDMMC_CmdSendSCR>
 8009216:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921a:	2b00      	cmp	r3, #0
 800921c:	d02a      	beq.n	8009274 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800921e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009220:	e083      	b.n	800932a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009228:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800922c:	2b00      	cmp	r3, #0
 800922e:	d00f      	beq.n	8009250 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6819      	ldr	r1, [r3, #0]
 8009234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	f107 0208 	add.w	r2, r7, #8
 800923c:	18d4      	adds	r4, r2, r3
 800923e:	4608      	mov	r0, r1
 8009240:	f000 fc5d 	bl	8009afe <SDIO_ReadFIFO>
 8009244:	4603      	mov	r3, r0
 8009246:	6023      	str	r3, [r4, #0]
      index++;
 8009248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800924a:	3301      	adds	r3, #1
 800924c:	637b      	str	r3, [r7, #52]	; 0x34
 800924e:	e006      	b.n	800925e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009256:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800925a:	2b00      	cmp	r3, #0
 800925c:	d012      	beq.n	8009284 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800925e:	f7fd faed 	bl	800683c <HAL_GetTick>
 8009262:	4602      	mov	r2, r0
 8009264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009266:	1ad3      	subs	r3, r2, r3
 8009268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800926c:	d102      	bne.n	8009274 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800926e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009272:	e05a      	b.n	800932a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800927a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800927e:	2b00      	cmp	r3, #0
 8009280:	d0cf      	beq.n	8009222 <SD_FindSCR+0x96>
 8009282:	e000      	b.n	8009286 <SD_FindSCR+0xfa>
      break;
 8009284:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800928c:	f003 0308 	and.w	r3, r3, #8
 8009290:	2b00      	cmp	r3, #0
 8009292:	d005      	beq.n	80092a0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2208      	movs	r2, #8
 800929a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800929c:	2308      	movs	r3, #8
 800929e:	e044      	b.n	800932a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092a6:	f003 0302 	and.w	r3, r3, #2
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d005      	beq.n	80092ba <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	2202      	movs	r2, #2
 80092b4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80092b6:	2302      	movs	r3, #2
 80092b8:	e037      	b.n	800932a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092c0:	f003 0320 	and.w	r3, r3, #32
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d005      	beq.n	80092d4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2220      	movs	r2, #32
 80092ce:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80092d0:	2320      	movs	r3, #32
 80092d2:	e02a      	b.n	800932a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f240 523a 	movw	r2, #1338	; 0x53a
 80092dc:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	061a      	lsls	r2, r3, #24
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	021b      	lsls	r3, r3, #8
 80092e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80092ea:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	0a1b      	lsrs	r3, r3, #8
 80092f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80092f4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	0e1b      	lsrs	r3, r3, #24
 80092fa:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80092fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092fe:	601a      	str	r2, [r3, #0]
    scr++;
 8009300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009302:	3304      	adds	r3, #4
 8009304:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	061a      	lsls	r2, r3, #24
 800930a:	68bb      	ldr	r3, [r7, #8]
 800930c:	021b      	lsls	r3, r3, #8
 800930e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009312:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009314:	68bb      	ldr	r3, [r7, #8]
 8009316:	0a1b      	lsrs	r3, r3, #8
 8009318:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800931c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	0e1b      	lsrs	r3, r3, #24
 8009322:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009326:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009328:	2300      	movs	r3, #0
}
 800932a:	4618      	mov	r0, r3
 800932c:	373c      	adds	r7, #60	; 0x3c
 800932e:	46bd      	mov	sp, r7
 8009330:	bd90      	pop	{r4, r7, pc}

08009332 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009332:	b580      	push	{r7, lr}
 8009334:	b086      	sub	sp, #24
 8009336:	af00      	add	r7, sp, #0
 8009338:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800933e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009344:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d03f      	beq.n	80093cc <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800934c:	2300      	movs	r3, #0
 800934e:	617b      	str	r3, [r7, #20]
 8009350:	e033      	b.n	80093ba <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4618      	mov	r0, r3
 8009358:	f000 fbd1 	bl	8009afe <SDIO_ReadFIFO>
 800935c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	b2da      	uxtb	r2, r3
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	3301      	adds	r3, #1
 800936a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	3b01      	subs	r3, #1
 8009370:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	0a1b      	lsrs	r3, r3, #8
 8009376:	b2da      	uxtb	r2, r3
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	3301      	adds	r3, #1
 8009380:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	3b01      	subs	r3, #1
 8009386:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	0c1b      	lsrs	r3, r3, #16
 800938c:	b2da      	uxtb	r2, r3
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	3301      	adds	r3, #1
 8009396:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	3b01      	subs	r3, #1
 800939c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	0e1b      	lsrs	r3, r3, #24
 80093a2:	b2da      	uxtb	r2, r3
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	3301      	adds	r3, #1
 80093ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80093ae:	693b      	ldr	r3, [r7, #16]
 80093b0:	3b01      	subs	r3, #1
 80093b2:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80093b4:	697b      	ldr	r3, [r7, #20]
 80093b6:	3301      	adds	r3, #1
 80093b8:	617b      	str	r3, [r7, #20]
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	2b07      	cmp	r3, #7
 80093be:	d9c8      	bls.n	8009352 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	68fa      	ldr	r2, [r7, #12]
 80093c4:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	693a      	ldr	r2, [r7, #16]
 80093ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80093cc:	bf00      	nop
 80093ce:	3718      	adds	r7, #24
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b086      	sub	sp, #24
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	6a1b      	ldr	r3, [r3, #32]
 80093e0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d043      	beq.n	8009476 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80093ee:	2300      	movs	r3, #0
 80093f0:	617b      	str	r3, [r7, #20]
 80093f2:	e037      	b.n	8009464 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	3301      	adds	r3, #1
 80093fe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	3b01      	subs	r3, #1
 8009404:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	021a      	lsls	r2, r3, #8
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	4313      	orrs	r3, r2
 8009410:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	3301      	adds	r3, #1
 8009416:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	3b01      	subs	r3, #1
 800941c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	041a      	lsls	r2, r3, #16
 8009424:	68bb      	ldr	r3, [r7, #8]
 8009426:	4313      	orrs	r3, r2
 8009428:	60bb      	str	r3, [r7, #8]
      tmp++;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	3301      	adds	r3, #1
 800942e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	3b01      	subs	r3, #1
 8009434:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	061a      	lsls	r2, r3, #24
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	4313      	orrs	r3, r2
 8009440:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	3301      	adds	r3, #1
 8009446:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	3b01      	subs	r3, #1
 800944c:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f107 0208 	add.w	r2, r7, #8
 8009456:	4611      	mov	r1, r2
 8009458:	4618      	mov	r0, r3
 800945a:	f000 fb5d 	bl	8009b18 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	3301      	adds	r3, #1
 8009462:	617b      	str	r3, [r7, #20]
 8009464:	697b      	ldr	r3, [r7, #20]
 8009466:	2b07      	cmp	r3, #7
 8009468:	d9c4      	bls.n	80093f4 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	68fa      	ldr	r2, [r7, #12]
 800946e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	693a      	ldr	r2, [r7, #16]
 8009474:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009476:	bf00      	nop
 8009478:	3718      	adds	r7, #24
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800947e:	b580      	push	{r7, lr}
 8009480:	b082      	sub	sp, #8
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d101      	bne.n	8009490 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800948c:	2301      	movs	r3, #1
 800948e:	e03f      	b.n	8009510 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009496:	b2db      	uxtb	r3, r3
 8009498:	2b00      	cmp	r3, #0
 800949a:	d106      	bne.n	80094aa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	f7fd f877 	bl	8006598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2224      	movs	r2, #36	; 0x24
 80094ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	68da      	ldr	r2, [r3, #12]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80094c0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f928 	bl	8009718 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	691a      	ldr	r2, [r3, #16]
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80094d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	695a      	ldr	r2, [r3, #20]
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80094e6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	68da      	ldr	r2, [r3, #12]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80094f6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2220      	movs	r2, #32
 8009502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2220      	movs	r2, #32
 800950a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800950e:	2300      	movs	r3, #0
}
 8009510:	4618      	mov	r0, r3
 8009512:	3708      	adds	r7, #8
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b08a      	sub	sp, #40	; 0x28
 800951c:	af02      	add	r7, sp, #8
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	60b9      	str	r1, [r7, #8]
 8009522:	603b      	str	r3, [r7, #0]
 8009524:	4613      	mov	r3, r2
 8009526:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009528:	2300      	movs	r3, #0
 800952a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009532:	b2db      	uxtb	r3, r3
 8009534:	2b20      	cmp	r3, #32
 8009536:	d17c      	bne.n	8009632 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d002      	beq.n	8009544 <HAL_UART_Transmit+0x2c>
 800953e:	88fb      	ldrh	r3, [r7, #6]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d101      	bne.n	8009548 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009544:	2301      	movs	r3, #1
 8009546:	e075      	b.n	8009634 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800954e:	2b01      	cmp	r3, #1
 8009550:	d101      	bne.n	8009556 <HAL_UART_Transmit+0x3e>
 8009552:	2302      	movs	r3, #2
 8009554:	e06e      	b.n	8009634 <HAL_UART_Transmit+0x11c>
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2201      	movs	r2, #1
 800955a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2200      	movs	r2, #0
 8009562:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2221      	movs	r2, #33	; 0x21
 8009568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800956c:	f7fd f966 	bl	800683c <HAL_GetTick>
 8009570:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	88fa      	ldrh	r2, [r7, #6]
 8009576:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	88fa      	ldrh	r2, [r7, #6]
 800957c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009586:	d108      	bne.n	800959a <HAL_UART_Transmit+0x82>
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	691b      	ldr	r3, [r3, #16]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d104      	bne.n	800959a <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009590:	2300      	movs	r3, #0
 8009592:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	61bb      	str	r3, [r7, #24]
 8009598:	e003      	b.n	80095a2 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800959e:	2300      	movs	r3, #0
 80095a0:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2200      	movs	r2, #0
 80095a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80095aa:	e02a      	b.n	8009602 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	9300      	str	r3, [sp, #0]
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	2200      	movs	r2, #0
 80095b4:	2180      	movs	r1, #128	; 0x80
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	f000 f840 	bl	800963c <UART_WaitOnFlagUntilTimeout>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d001      	beq.n	80095c6 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80095c2:	2303      	movs	r3, #3
 80095c4:	e036      	b.n	8009634 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d10b      	bne.n	80095e4 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80095cc:	69bb      	ldr	r3, [r7, #24]
 80095ce:	881b      	ldrh	r3, [r3, #0]
 80095d0:	461a      	mov	r2, r3
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80095da:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80095dc:	69bb      	ldr	r3, [r7, #24]
 80095de:	3302      	adds	r3, #2
 80095e0:	61bb      	str	r3, [r7, #24]
 80095e2:	e007      	b.n	80095f4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	781a      	ldrb	r2, [r3, #0]
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	3301      	adds	r3, #1
 80095f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	3b01      	subs	r3, #1
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009606:	b29b      	uxth	r3, r3
 8009608:	2b00      	cmp	r3, #0
 800960a:	d1cf      	bne.n	80095ac <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	9300      	str	r3, [sp, #0]
 8009610:	697b      	ldr	r3, [r7, #20]
 8009612:	2200      	movs	r2, #0
 8009614:	2140      	movs	r1, #64	; 0x40
 8009616:	68f8      	ldr	r0, [r7, #12]
 8009618:	f000 f810 	bl	800963c <UART_WaitOnFlagUntilTimeout>
 800961c:	4603      	mov	r3, r0
 800961e:	2b00      	cmp	r3, #0
 8009620:	d001      	beq.n	8009626 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009622:	2303      	movs	r3, #3
 8009624:	e006      	b.n	8009634 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2220      	movs	r2, #32
 800962a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800962e:	2300      	movs	r3, #0
 8009630:	e000      	b.n	8009634 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009632:	2302      	movs	r3, #2
  }
}
 8009634:	4618      	mov	r0, r3
 8009636:	3720      	adds	r7, #32
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b090      	sub	sp, #64	; 0x40
 8009640:	af00      	add	r7, sp, #0
 8009642:	60f8      	str	r0, [r7, #12]
 8009644:	60b9      	str	r1, [r7, #8]
 8009646:	603b      	str	r3, [r7, #0]
 8009648:	4613      	mov	r3, r2
 800964a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800964c:	e050      	b.n	80096f0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800964e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009650:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009654:	d04c      	beq.n	80096f0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009658:	2b00      	cmp	r3, #0
 800965a:	d007      	beq.n	800966c <UART_WaitOnFlagUntilTimeout+0x30>
 800965c:	f7fd f8ee 	bl	800683c <HAL_GetTick>
 8009660:	4602      	mov	r2, r0
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	1ad3      	subs	r3, r2, r3
 8009666:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009668:	429a      	cmp	r2, r3
 800966a:	d241      	bcs.n	80096f0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	330c      	adds	r3, #12
 8009672:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009676:	e853 3f00 	ldrex	r3, [r3]
 800967a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800967c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	330c      	adds	r3, #12
 800968a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800968c:	637a      	str	r2, [r7, #52]	; 0x34
 800968e:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009690:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009692:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009694:	e841 2300 	strex	r3, r2, [r1]
 8009698:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800969a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800969c:	2b00      	cmp	r3, #0
 800969e:	d1e5      	bne.n	800966c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	3314      	adds	r3, #20
 80096a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	e853 3f00 	ldrex	r3, [r3]
 80096ae:	613b      	str	r3, [r7, #16]
   return(result);
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	f023 0301 	bic.w	r3, r3, #1
 80096b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	3314      	adds	r3, #20
 80096be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80096c0:	623a      	str	r2, [r7, #32]
 80096c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c4:	69f9      	ldr	r1, [r7, #28]
 80096c6:	6a3a      	ldr	r2, [r7, #32]
 80096c8:	e841 2300 	strex	r3, r2, [r1]
 80096cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80096ce:	69bb      	ldr	r3, [r7, #24]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1e5      	bne.n	80096a0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2220      	movs	r2, #32
 80096d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	2220      	movs	r2, #32
 80096e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	2200      	movs	r2, #0
 80096e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80096ec:	2303      	movs	r3, #3
 80096ee:	e00f      	b.n	8009710 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	681a      	ldr	r2, [r3, #0]
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	4013      	ands	r3, r2
 80096fa:	68ba      	ldr	r2, [r7, #8]
 80096fc:	429a      	cmp	r2, r3
 80096fe:	bf0c      	ite	eq
 8009700:	2301      	moveq	r3, #1
 8009702:	2300      	movne	r3, #0
 8009704:	b2db      	uxtb	r3, r3
 8009706:	461a      	mov	r2, r3
 8009708:	79fb      	ldrb	r3, [r7, #7]
 800970a:	429a      	cmp	r2, r3
 800970c:	d09f      	beq.n	800964e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800970e:	2300      	movs	r3, #0
}
 8009710:	4618      	mov	r0, r3
 8009712:	3740      	adds	r7, #64	; 0x40
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800971c:	b09f      	sub	sp, #124	; 0x7c
 800971e:	af00      	add	r7, sp, #0
 8009720:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	691b      	ldr	r3, [r3, #16]
 8009728:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800972c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800972e:	68d9      	ldr	r1, [r3, #12]
 8009730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009732:	681a      	ldr	r2, [r3, #0]
 8009734:	ea40 0301 	orr.w	r3, r0, r1
 8009738:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800973a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800973c:	689a      	ldr	r2, [r3, #8]
 800973e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009740:	691b      	ldr	r3, [r3, #16]
 8009742:	431a      	orrs	r2, r3
 8009744:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009746:	695b      	ldr	r3, [r3, #20]
 8009748:	431a      	orrs	r2, r3
 800974a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800974c:	69db      	ldr	r3, [r3, #28]
 800974e:	4313      	orrs	r3, r2
 8009750:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800975c:	f021 010c 	bic.w	r1, r1, #12
 8009760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009762:	681a      	ldr	r2, [r3, #0]
 8009764:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009766:	430b      	orrs	r3, r1
 8009768:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800976a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	695b      	ldr	r3, [r3, #20]
 8009770:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009776:	6999      	ldr	r1, [r3, #24]
 8009778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	ea40 0301 	orr.w	r3, r0, r1
 8009780:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	4bc5      	ldr	r3, [pc, #788]	; (8009a9c <UART_SetConfig+0x384>)
 8009788:	429a      	cmp	r2, r3
 800978a:	d004      	beq.n	8009796 <UART_SetConfig+0x7e>
 800978c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800978e:	681a      	ldr	r2, [r3, #0]
 8009790:	4bc3      	ldr	r3, [pc, #780]	; (8009aa0 <UART_SetConfig+0x388>)
 8009792:	429a      	cmp	r2, r3
 8009794:	d103      	bne.n	800979e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009796:	f7fe fb2f 	bl	8007df8 <HAL_RCC_GetPCLK2Freq>
 800979a:	6778      	str	r0, [r7, #116]	; 0x74
 800979c:	e002      	b.n	80097a4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800979e:	f7fe fb17 	bl	8007dd0 <HAL_RCC_GetPCLK1Freq>
 80097a2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80097a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097a6:	69db      	ldr	r3, [r3, #28]
 80097a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097ac:	f040 80b6 	bne.w	800991c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80097b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097b2:	461c      	mov	r4, r3
 80097b4:	f04f 0500 	mov.w	r5, #0
 80097b8:	4622      	mov	r2, r4
 80097ba:	462b      	mov	r3, r5
 80097bc:	1891      	adds	r1, r2, r2
 80097be:	6439      	str	r1, [r7, #64]	; 0x40
 80097c0:	415b      	adcs	r3, r3
 80097c2:	647b      	str	r3, [r7, #68]	; 0x44
 80097c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80097c8:	1912      	adds	r2, r2, r4
 80097ca:	eb45 0303 	adc.w	r3, r5, r3
 80097ce:	f04f 0000 	mov.w	r0, #0
 80097d2:	f04f 0100 	mov.w	r1, #0
 80097d6:	00d9      	lsls	r1, r3, #3
 80097d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80097dc:	00d0      	lsls	r0, r2, #3
 80097de:	4602      	mov	r2, r0
 80097e0:	460b      	mov	r3, r1
 80097e2:	1911      	adds	r1, r2, r4
 80097e4:	6639      	str	r1, [r7, #96]	; 0x60
 80097e6:	416b      	adcs	r3, r5
 80097e8:	667b      	str	r3, [r7, #100]	; 0x64
 80097ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	461a      	mov	r2, r3
 80097f0:	f04f 0300 	mov.w	r3, #0
 80097f4:	1891      	adds	r1, r2, r2
 80097f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80097f8:	415b      	adcs	r3, r3
 80097fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009800:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009804:	f7f7 fb56 	bl	8000eb4 <__aeabi_uldivmod>
 8009808:	4602      	mov	r2, r0
 800980a:	460b      	mov	r3, r1
 800980c:	4ba5      	ldr	r3, [pc, #660]	; (8009aa4 <UART_SetConfig+0x38c>)
 800980e:	fba3 2302 	umull	r2, r3, r3, r2
 8009812:	095b      	lsrs	r3, r3, #5
 8009814:	011e      	lsls	r6, r3, #4
 8009816:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009818:	461c      	mov	r4, r3
 800981a:	f04f 0500 	mov.w	r5, #0
 800981e:	4622      	mov	r2, r4
 8009820:	462b      	mov	r3, r5
 8009822:	1891      	adds	r1, r2, r2
 8009824:	6339      	str	r1, [r7, #48]	; 0x30
 8009826:	415b      	adcs	r3, r3
 8009828:	637b      	str	r3, [r7, #52]	; 0x34
 800982a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800982e:	1912      	adds	r2, r2, r4
 8009830:	eb45 0303 	adc.w	r3, r5, r3
 8009834:	f04f 0000 	mov.w	r0, #0
 8009838:	f04f 0100 	mov.w	r1, #0
 800983c:	00d9      	lsls	r1, r3, #3
 800983e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009842:	00d0      	lsls	r0, r2, #3
 8009844:	4602      	mov	r2, r0
 8009846:	460b      	mov	r3, r1
 8009848:	1911      	adds	r1, r2, r4
 800984a:	65b9      	str	r1, [r7, #88]	; 0x58
 800984c:	416b      	adcs	r3, r5
 800984e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	461a      	mov	r2, r3
 8009856:	f04f 0300 	mov.w	r3, #0
 800985a:	1891      	adds	r1, r2, r2
 800985c:	62b9      	str	r1, [r7, #40]	; 0x28
 800985e:	415b      	adcs	r3, r3
 8009860:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009862:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009866:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800986a:	f7f7 fb23 	bl	8000eb4 <__aeabi_uldivmod>
 800986e:	4602      	mov	r2, r0
 8009870:	460b      	mov	r3, r1
 8009872:	4b8c      	ldr	r3, [pc, #560]	; (8009aa4 <UART_SetConfig+0x38c>)
 8009874:	fba3 1302 	umull	r1, r3, r3, r2
 8009878:	095b      	lsrs	r3, r3, #5
 800987a:	2164      	movs	r1, #100	; 0x64
 800987c:	fb01 f303 	mul.w	r3, r1, r3
 8009880:	1ad3      	subs	r3, r2, r3
 8009882:	00db      	lsls	r3, r3, #3
 8009884:	3332      	adds	r3, #50	; 0x32
 8009886:	4a87      	ldr	r2, [pc, #540]	; (8009aa4 <UART_SetConfig+0x38c>)
 8009888:	fba2 2303 	umull	r2, r3, r2, r3
 800988c:	095b      	lsrs	r3, r3, #5
 800988e:	005b      	lsls	r3, r3, #1
 8009890:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009894:	441e      	add	r6, r3
 8009896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009898:	4618      	mov	r0, r3
 800989a:	f04f 0100 	mov.w	r1, #0
 800989e:	4602      	mov	r2, r0
 80098a0:	460b      	mov	r3, r1
 80098a2:	1894      	adds	r4, r2, r2
 80098a4:	623c      	str	r4, [r7, #32]
 80098a6:	415b      	adcs	r3, r3
 80098a8:	627b      	str	r3, [r7, #36]	; 0x24
 80098aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80098ae:	1812      	adds	r2, r2, r0
 80098b0:	eb41 0303 	adc.w	r3, r1, r3
 80098b4:	f04f 0400 	mov.w	r4, #0
 80098b8:	f04f 0500 	mov.w	r5, #0
 80098bc:	00dd      	lsls	r5, r3, #3
 80098be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80098c2:	00d4      	lsls	r4, r2, #3
 80098c4:	4622      	mov	r2, r4
 80098c6:	462b      	mov	r3, r5
 80098c8:	1814      	adds	r4, r2, r0
 80098ca:	653c      	str	r4, [r7, #80]	; 0x50
 80098cc:	414b      	adcs	r3, r1
 80098ce:	657b      	str	r3, [r7, #84]	; 0x54
 80098d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80098d2:	685b      	ldr	r3, [r3, #4]
 80098d4:	461a      	mov	r2, r3
 80098d6:	f04f 0300 	mov.w	r3, #0
 80098da:	1891      	adds	r1, r2, r2
 80098dc:	61b9      	str	r1, [r7, #24]
 80098de:	415b      	adcs	r3, r3
 80098e0:	61fb      	str	r3, [r7, #28]
 80098e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80098e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80098ea:	f7f7 fae3 	bl	8000eb4 <__aeabi_uldivmod>
 80098ee:	4602      	mov	r2, r0
 80098f0:	460b      	mov	r3, r1
 80098f2:	4b6c      	ldr	r3, [pc, #432]	; (8009aa4 <UART_SetConfig+0x38c>)
 80098f4:	fba3 1302 	umull	r1, r3, r3, r2
 80098f8:	095b      	lsrs	r3, r3, #5
 80098fa:	2164      	movs	r1, #100	; 0x64
 80098fc:	fb01 f303 	mul.w	r3, r1, r3
 8009900:	1ad3      	subs	r3, r2, r3
 8009902:	00db      	lsls	r3, r3, #3
 8009904:	3332      	adds	r3, #50	; 0x32
 8009906:	4a67      	ldr	r2, [pc, #412]	; (8009aa4 <UART_SetConfig+0x38c>)
 8009908:	fba2 2303 	umull	r2, r3, r2, r3
 800990c:	095b      	lsrs	r3, r3, #5
 800990e:	f003 0207 	and.w	r2, r3, #7
 8009912:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4432      	add	r2, r6
 8009918:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800991a:	e0b9      	b.n	8009a90 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800991c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800991e:	461c      	mov	r4, r3
 8009920:	f04f 0500 	mov.w	r5, #0
 8009924:	4622      	mov	r2, r4
 8009926:	462b      	mov	r3, r5
 8009928:	1891      	adds	r1, r2, r2
 800992a:	6139      	str	r1, [r7, #16]
 800992c:	415b      	adcs	r3, r3
 800992e:	617b      	str	r3, [r7, #20]
 8009930:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009934:	1912      	adds	r2, r2, r4
 8009936:	eb45 0303 	adc.w	r3, r5, r3
 800993a:	f04f 0000 	mov.w	r0, #0
 800993e:	f04f 0100 	mov.w	r1, #0
 8009942:	00d9      	lsls	r1, r3, #3
 8009944:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009948:	00d0      	lsls	r0, r2, #3
 800994a:	4602      	mov	r2, r0
 800994c:	460b      	mov	r3, r1
 800994e:	eb12 0804 	adds.w	r8, r2, r4
 8009952:	eb43 0905 	adc.w	r9, r3, r5
 8009956:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	4618      	mov	r0, r3
 800995c:	f04f 0100 	mov.w	r1, #0
 8009960:	f04f 0200 	mov.w	r2, #0
 8009964:	f04f 0300 	mov.w	r3, #0
 8009968:	008b      	lsls	r3, r1, #2
 800996a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800996e:	0082      	lsls	r2, r0, #2
 8009970:	4640      	mov	r0, r8
 8009972:	4649      	mov	r1, r9
 8009974:	f7f7 fa9e 	bl	8000eb4 <__aeabi_uldivmod>
 8009978:	4602      	mov	r2, r0
 800997a:	460b      	mov	r3, r1
 800997c:	4b49      	ldr	r3, [pc, #292]	; (8009aa4 <UART_SetConfig+0x38c>)
 800997e:	fba3 2302 	umull	r2, r3, r3, r2
 8009982:	095b      	lsrs	r3, r3, #5
 8009984:	011e      	lsls	r6, r3, #4
 8009986:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009988:	4618      	mov	r0, r3
 800998a:	f04f 0100 	mov.w	r1, #0
 800998e:	4602      	mov	r2, r0
 8009990:	460b      	mov	r3, r1
 8009992:	1894      	adds	r4, r2, r2
 8009994:	60bc      	str	r4, [r7, #8]
 8009996:	415b      	adcs	r3, r3
 8009998:	60fb      	str	r3, [r7, #12]
 800999a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800999e:	1812      	adds	r2, r2, r0
 80099a0:	eb41 0303 	adc.w	r3, r1, r3
 80099a4:	f04f 0400 	mov.w	r4, #0
 80099a8:	f04f 0500 	mov.w	r5, #0
 80099ac:	00dd      	lsls	r5, r3, #3
 80099ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80099b2:	00d4      	lsls	r4, r2, #3
 80099b4:	4622      	mov	r2, r4
 80099b6:	462b      	mov	r3, r5
 80099b8:	1814      	adds	r4, r2, r0
 80099ba:	64bc      	str	r4, [r7, #72]	; 0x48
 80099bc:	414b      	adcs	r3, r1
 80099be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80099c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	4618      	mov	r0, r3
 80099c6:	f04f 0100 	mov.w	r1, #0
 80099ca:	f04f 0200 	mov.w	r2, #0
 80099ce:	f04f 0300 	mov.w	r3, #0
 80099d2:	008b      	lsls	r3, r1, #2
 80099d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80099d8:	0082      	lsls	r2, r0, #2
 80099da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80099de:	f7f7 fa69 	bl	8000eb4 <__aeabi_uldivmod>
 80099e2:	4602      	mov	r2, r0
 80099e4:	460b      	mov	r3, r1
 80099e6:	4b2f      	ldr	r3, [pc, #188]	; (8009aa4 <UART_SetConfig+0x38c>)
 80099e8:	fba3 1302 	umull	r1, r3, r3, r2
 80099ec:	095b      	lsrs	r3, r3, #5
 80099ee:	2164      	movs	r1, #100	; 0x64
 80099f0:	fb01 f303 	mul.w	r3, r1, r3
 80099f4:	1ad3      	subs	r3, r2, r3
 80099f6:	011b      	lsls	r3, r3, #4
 80099f8:	3332      	adds	r3, #50	; 0x32
 80099fa:	4a2a      	ldr	r2, [pc, #168]	; (8009aa4 <UART_SetConfig+0x38c>)
 80099fc:	fba2 2303 	umull	r2, r3, r2, r3
 8009a00:	095b      	lsrs	r3, r3, #5
 8009a02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a06:	441e      	add	r6, r3
 8009a08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f04f 0100 	mov.w	r1, #0
 8009a10:	4602      	mov	r2, r0
 8009a12:	460b      	mov	r3, r1
 8009a14:	1894      	adds	r4, r2, r2
 8009a16:	603c      	str	r4, [r7, #0]
 8009a18:	415b      	adcs	r3, r3
 8009a1a:	607b      	str	r3, [r7, #4]
 8009a1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a20:	1812      	adds	r2, r2, r0
 8009a22:	eb41 0303 	adc.w	r3, r1, r3
 8009a26:	f04f 0400 	mov.w	r4, #0
 8009a2a:	f04f 0500 	mov.w	r5, #0
 8009a2e:	00dd      	lsls	r5, r3, #3
 8009a30:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009a34:	00d4      	lsls	r4, r2, #3
 8009a36:	4622      	mov	r2, r4
 8009a38:	462b      	mov	r3, r5
 8009a3a:	eb12 0a00 	adds.w	sl, r2, r0
 8009a3e:	eb43 0b01 	adc.w	fp, r3, r1
 8009a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	4618      	mov	r0, r3
 8009a48:	f04f 0100 	mov.w	r1, #0
 8009a4c:	f04f 0200 	mov.w	r2, #0
 8009a50:	f04f 0300 	mov.w	r3, #0
 8009a54:	008b      	lsls	r3, r1, #2
 8009a56:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009a5a:	0082      	lsls	r2, r0, #2
 8009a5c:	4650      	mov	r0, sl
 8009a5e:	4659      	mov	r1, fp
 8009a60:	f7f7 fa28 	bl	8000eb4 <__aeabi_uldivmod>
 8009a64:	4602      	mov	r2, r0
 8009a66:	460b      	mov	r3, r1
 8009a68:	4b0e      	ldr	r3, [pc, #56]	; (8009aa4 <UART_SetConfig+0x38c>)
 8009a6a:	fba3 1302 	umull	r1, r3, r3, r2
 8009a6e:	095b      	lsrs	r3, r3, #5
 8009a70:	2164      	movs	r1, #100	; 0x64
 8009a72:	fb01 f303 	mul.w	r3, r1, r3
 8009a76:	1ad3      	subs	r3, r2, r3
 8009a78:	011b      	lsls	r3, r3, #4
 8009a7a:	3332      	adds	r3, #50	; 0x32
 8009a7c:	4a09      	ldr	r2, [pc, #36]	; (8009aa4 <UART_SetConfig+0x38c>)
 8009a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a82:	095b      	lsrs	r3, r3, #5
 8009a84:	f003 020f 	and.w	r2, r3, #15
 8009a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4432      	add	r2, r6
 8009a8e:	609a      	str	r2, [r3, #8]
}
 8009a90:	bf00      	nop
 8009a92:	377c      	adds	r7, #124	; 0x7c
 8009a94:	46bd      	mov	sp, r7
 8009a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a9a:	bf00      	nop
 8009a9c:	40011000 	.word	0x40011000
 8009aa0:	40011400 	.word	0x40011400
 8009aa4:	51eb851f 	.word	0x51eb851f

08009aa8 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009aa8:	b084      	sub	sp, #16
 8009aaa:	b480      	push	{r7}
 8009aac:	b085      	sub	sp, #20
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
 8009ab2:	f107 001c 	add.w	r0, r7, #28
 8009ab6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009aba:	2300      	movs	r3, #0
 8009abc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009abe:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009ac0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009ac2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009ac6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009aca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009ace:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009ad2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009ad4:	68fa      	ldr	r2, [r7, #12]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009ae2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009ae6:	68fa      	ldr	r2, [r7, #12]
 8009ae8:	431a      	orrs	r2, r3
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009aee:	2300      	movs	r3, #0
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3714      	adds	r7, #20
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	b004      	add	sp, #16
 8009afc:	4770      	bx	lr

08009afe <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009afe:	b480      	push	{r7}
 8009b00:	b083      	sub	sp, #12
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b2c:	2300      	movs	r3, #0
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	370c      	adds	r7, #12
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr

08009b3a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009b3a:	b580      	push	{r7, lr}
 8009b3c:	b082      	sub	sp, #8
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2203      	movs	r2, #3
 8009b46:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8009b48:	2002      	movs	r0, #2
 8009b4a:	f7fc fe83 	bl	8006854 <HAL_Delay>
  
  return HAL_OK;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	3708      	adds	r7, #8
 8009b54:	46bd      	mov	sp, r7
 8009b56:	bd80      	pop	{r7, pc}

08009b58 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b083      	sub	sp, #12
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f003 0303 	and.w	r3, r3, #3
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	370c      	adds	r7, #12
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b085      	sub	sp, #20
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	681a      	ldr	r2, [r3, #0]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009b8a:	683b      	ldr	r3, [r7, #0]
 8009b8c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009b92:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009b98:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009b9e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009ba0:	68fa      	ldr	r2, [r7, #12]
 8009ba2:	4313      	orrs	r3, r2
 8009ba4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009bae:	f023 030f 	bic.w	r3, r3, #15
 8009bb2:	68fa      	ldr	r2, [r7, #12]
 8009bb4:	431a      	orrs	r2, r3
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009bba:	2300      	movs	r3, #0
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3714      	adds	r7, #20
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	691b      	ldr	r3, [r3, #16]
 8009bd4:	b2db      	uxtb	r3, r3
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	370c      	adds	r7, #12
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr

08009be2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009be2:	b480      	push	{r7}
 8009be4:	b085      	sub	sp, #20
 8009be6:	af00      	add	r7, sp, #0
 8009be8:	6078      	str	r0, [r7, #4]
 8009bea:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	3314      	adds	r3, #20
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	4413      	add	r3, r2
 8009bf6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
}  
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3714      	adds	r7, #20
 8009c00:	46bd      	mov	sp, r7
 8009c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c06:	4770      	bx	lr

08009c08 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009c08:	b480      	push	{r7}
 8009c0a:	b085      	sub	sp, #20
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009c12:	2300      	movs	r3, #0
 8009c14:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	685a      	ldr	r2, [r3, #4]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009c2e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009c34:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009c3a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009c3c:	68fa      	ldr	r2, [r7, #12]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c46:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	431a      	orrs	r2, r3
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009c52:	2300      	movs	r3, #0

}
 8009c54:	4618      	mov	r0, r3
 8009c56:	3714      	adds	r7, #20
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b088      	sub	sp, #32
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009c6e:	2310      	movs	r3, #16
 8009c70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009c72:	2340      	movs	r3, #64	; 0x40
 8009c74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009c76:	2300      	movs	r3, #0
 8009c78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009c7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009c80:	f107 0308 	add.w	r3, r7, #8
 8009c84:	4619      	mov	r1, r3
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f7ff ff74 	bl	8009b74 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8009c8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c90:	2110      	movs	r1, #16
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 fa44 	bl	800a120 <SDMMC_GetCmdResp1>
 8009c98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c9a:	69fb      	ldr	r3, [r7, #28]
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	3720      	adds	r7, #32
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	bd80      	pop	{r7, pc}

08009ca4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b088      	sub	sp, #32
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
 8009cac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009cb2:	2311      	movs	r3, #17
 8009cb4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009cb6:	2340      	movs	r3, #64	; 0x40
 8009cb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cc2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009cc4:	f107 0308 	add.w	r3, r7, #8
 8009cc8:	4619      	mov	r1, r3
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f7ff ff52 	bl	8009b74 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cd4:	2111      	movs	r1, #17
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 fa22 	bl	800a120 <SDMMC_GetCmdResp1>
 8009cdc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cde:	69fb      	ldr	r3, [r7, #28]
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3720      	adds	r7, #32
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}

08009ce8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b088      	sub	sp, #32
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009cf6:	2312      	movs	r3, #18
 8009cf8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009cfa:	2340      	movs	r3, #64	; 0x40
 8009cfc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d06:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d08:	f107 0308 	add.w	r3, r7, #8
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f7ff ff30 	bl	8009b74 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d18:	2112      	movs	r1, #18
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f000 fa00 	bl	800a120 <SDMMC_GetCmdResp1>
 8009d20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d22:	69fb      	ldr	r3, [r7, #28]
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3720      	adds	r7, #32
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b088      	sub	sp, #32
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009d3a:	2318      	movs	r3, #24
 8009d3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009d3e:	2340      	movs	r3, #64	; 0x40
 8009d40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009d42:	2300      	movs	r3, #0
 8009d44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d4c:	f107 0308 	add.w	r3, r7, #8
 8009d50:	4619      	mov	r1, r3
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f7ff ff0e 	bl	8009b74 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8009d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d5c:	2118      	movs	r1, #24
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 f9de 	bl	800a120 <SDMMC_GetCmdResp1>
 8009d64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d66:	69fb      	ldr	r3, [r7, #28]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3720      	adds	r7, #32
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	bd80      	pop	{r7, pc}

08009d70 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b088      	sub	sp, #32
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
 8009d78:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009d7a:	683b      	ldr	r3, [r7, #0]
 8009d7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009d7e:	2319      	movs	r3, #25
 8009d80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009d82:	2340      	movs	r3, #64	; 0x40
 8009d84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009d86:	2300      	movs	r3, #0
 8009d88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009d8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d8e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009d90:	f107 0308 	add.w	r3, r7, #8
 8009d94:	4619      	mov	r1, r3
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f7ff feec 	bl	8009b74 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8009d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009da0:	2119      	movs	r1, #25
 8009da2:	6878      	ldr	r0, [r7, #4]
 8009da4:	f000 f9bc 	bl	800a120 <SDMMC_GetCmdResp1>
 8009da8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009daa:	69fb      	ldr	r3, [r7, #28]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3720      	adds	r7, #32
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b088      	sub	sp, #32
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009dc0:	230c      	movs	r3, #12
 8009dc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009dc4:	2340      	movs	r3, #64	; 0x40
 8009dc6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009dc8:	2300      	movs	r3, #0
 8009dca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009dcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dd0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009dd2:	f107 0308 	add.w	r3, r7, #8
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f7ff fecb 	bl	8009b74 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8009dde:	4a05      	ldr	r2, [pc, #20]	; (8009df4 <SDMMC_CmdStopTransfer+0x40>)
 8009de0:	210c      	movs	r1, #12
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f000 f99c 	bl	800a120 <SDMMC_GetCmdResp1>
 8009de8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dea:	69fb      	ldr	r3, [r7, #28]
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3720      	adds	r7, #32
 8009df0:	46bd      	mov	sp, r7
 8009df2:	bd80      	pop	{r7, pc}
 8009df4:	05f5e100 	.word	0x05f5e100

08009df8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009df8:	b580      	push	{r7, lr}
 8009dfa:	b08a      	sub	sp, #40	; 0x28
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	60f8      	str	r0, [r7, #12]
 8009e00:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009e08:	2307      	movs	r3, #7
 8009e0a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e0c:	2340      	movs	r3, #64	; 0x40
 8009e0e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e10:	2300      	movs	r3, #0
 8009e12:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e18:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e1a:	f107 0310 	add.w	r3, r7, #16
 8009e1e:	4619      	mov	r1, r3
 8009e20:	68f8      	ldr	r0, [r7, #12]
 8009e22:	f7ff fea7 	bl	8009b74 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e2a:	2107      	movs	r1, #7
 8009e2c:	68f8      	ldr	r0, [r7, #12]
 8009e2e:	f000 f977 	bl	800a120 <SDMMC_GetCmdResp1>
 8009e32:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3728      	adds	r7, #40	; 0x28
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}

08009e3e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8009e3e:	b580      	push	{r7, lr}
 8009e40:	b088      	sub	sp, #32
 8009e42:	af00      	add	r7, sp, #0
 8009e44:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009e46:	2300      	movs	r3, #0
 8009e48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8009e4e:	2300      	movs	r3, #0
 8009e50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e52:	2300      	movs	r3, #0
 8009e54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e5a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e5c:	f107 0308 	add.w	r3, r7, #8
 8009e60:	4619      	mov	r1, r3
 8009e62:	6878      	ldr	r0, [r7, #4]
 8009e64:	f7ff fe86 	bl	8009b74 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8009e68:	6878      	ldr	r0, [r7, #4]
 8009e6a:	f000 f92d 	bl	800a0c8 <SDMMC_GetCmdError>
 8009e6e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e70:	69fb      	ldr	r3, [r7, #28]
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3720      	adds	r7, #32
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}

08009e7a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8009e7a:	b580      	push	{r7, lr}
 8009e7c:	b088      	sub	sp, #32
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009e82:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009e86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009e88:	2308      	movs	r3, #8
 8009e8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009e8c:	2340      	movs	r3, #64	; 0x40
 8009e8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009e90:	2300      	movs	r3, #0
 8009e92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009e94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e98:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009e9a:	f107 0308 	add.w	r3, r7, #8
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f7ff fe67 	bl	8009b74 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 fb24 	bl	800a4f4 <SDMMC_GetCmdResp7>
 8009eac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009eae:	69fb      	ldr	r3, [r7, #28]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3720      	adds	r7, #32
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b088      	sub	sp, #32
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009ec2:	683b      	ldr	r3, [r7, #0]
 8009ec4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009ec6:	2337      	movs	r3, #55	; 0x37
 8009ec8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009eca:	2340      	movs	r3, #64	; 0x40
 8009ecc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ece:	2300      	movs	r3, #0
 8009ed0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ed2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ed6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009ed8:	f107 0308 	add.w	r3, r7, #8
 8009edc:	4619      	mov	r1, r3
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f7ff fe48 	bl	8009b74 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009ee4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ee8:	2137      	movs	r1, #55	; 0x37
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	f000 f918 	bl	800a120 <SDMMC_GetCmdResp1>
 8009ef0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ef2:	69fb      	ldr	r3, [r7, #28]
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3720      	adds	r7, #32
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b088      	sub	sp, #32
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009f0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009f12:	2329      	movs	r3, #41	; 0x29
 8009f14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f16:	2340      	movs	r3, #64	; 0x40
 8009f18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f24:	f107 0308 	add.w	r3, r7, #8
 8009f28:	4619      	mov	r1, r3
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f7ff fe22 	bl	8009b74 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 fa2b 	bl	800a38c <SDMMC_GetCmdResp3>
 8009f36:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f38:	69fb      	ldr	r3, [r7, #28]
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3720      	adds	r7, #32
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}

08009f42 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8009f42:	b580      	push	{r7, lr}
 8009f44:	b088      	sub	sp, #32
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
 8009f4a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009f50:	2306      	movs	r3, #6
 8009f52:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f54:	2340      	movs	r3, #64	; 0x40
 8009f56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f60:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009f62:	f107 0308 	add.w	r3, r7, #8
 8009f66:	4619      	mov	r1, r3
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f7ff fe03 	bl	8009b74 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8009f6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f72:	2106      	movs	r1, #6
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 f8d3 	bl	800a120 <SDMMC_GetCmdResp1>
 8009f7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f7c:	69fb      	ldr	r3, [r7, #28]
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3720      	adds	r7, #32
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}

08009f86 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b088      	sub	sp, #32
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009f92:	2333      	movs	r3, #51	; 0x33
 8009f94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009f96:	2340      	movs	r3, #64	; 0x40
 8009f98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009f9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fa2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009fa4:	f107 0308 	add.w	r3, r7, #8
 8009fa8:	4619      	mov	r1, r3
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f7ff fde2 	bl	8009b74 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fb4:	2133      	movs	r1, #51	; 0x33
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	f000 f8b2 	bl	800a120 <SDMMC_GetCmdResp1>
 8009fbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fbe:	69fb      	ldr	r3, [r7, #28]
}
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3720      	adds	r7, #32
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}

08009fc8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b088      	sub	sp, #32
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009fd4:	2302      	movs	r3, #2
 8009fd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009fd8:	23c0      	movs	r3, #192	; 0xc0
 8009fda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009fe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fe4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009fe6:	f107 0308 	add.w	r3, r7, #8
 8009fea:	4619      	mov	r1, r3
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f7ff fdc1 	bl	8009b74 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f000 f982 	bl	800a2fc <SDMMC_GetCmdResp2>
 8009ff8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ffa:	69fb      	ldr	r3, [r7, #28]
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3720      	adds	r7, #32
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b088      	sub	sp, #32
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a012:	2309      	movs	r3, #9
 800a014:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a016:	23c0      	movs	r3, #192	; 0xc0
 800a018:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a01a:	2300      	movs	r3, #0
 800a01c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a01e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a022:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a024:	f107 0308 	add.w	r3, r7, #8
 800a028:	4619      	mov	r1, r3
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f7ff fda2 	bl	8009b74 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f000 f963 	bl	800a2fc <SDMMC_GetCmdResp2>
 800a036:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a038:	69fb      	ldr	r3, [r7, #28]
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3720      	adds	r7, #32
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}

0800a042 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b088      	sub	sp, #32
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
 800a04a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a04c:	2300      	movs	r3, #0
 800a04e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a050:	2303      	movs	r3, #3
 800a052:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a054:	2340      	movs	r3, #64	; 0x40
 800a056:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a058:	2300      	movs	r3, #0
 800a05a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a05c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a060:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a062:	f107 0308 	add.w	r3, r7, #8
 800a066:	4619      	mov	r1, r3
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f7ff fd83 	bl	8009b74 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a06e:	683a      	ldr	r2, [r7, #0]
 800a070:	2103      	movs	r1, #3
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 f9c8 	bl	800a408 <SDMMC_GetCmdResp6>
 800a078:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a07a:	69fb      	ldr	r3, [r7, #28]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3720      	adds	r7, #32
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b088      	sub	sp, #32
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
 800a08c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a092:	230d      	movs	r3, #13
 800a094:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a096:	2340      	movs	r3, #64	; 0x40
 800a098:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a09a:	2300      	movs	r3, #0
 800a09c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a09e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0a4:	f107 0308 	add.w	r3, r7, #8
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f7ff fd62 	bl	8009b74 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a0b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0b4:	210d      	movs	r1, #13
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 f832 	bl	800a120 <SDMMC_GetCmdResp1>
 800a0bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0be:	69fb      	ldr	r3, [r7, #28]
}
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	3720      	adds	r7, #32
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	bd80      	pop	{r7, pc}

0800a0c8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b085      	sub	sp, #20
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a0d0:	4b11      	ldr	r3, [pc, #68]	; (800a118 <SDMMC_GetCmdError+0x50>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	4a11      	ldr	r2, [pc, #68]	; (800a11c <SDMMC_GetCmdError+0x54>)
 800a0d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a0da:	0a5b      	lsrs	r3, r3, #9
 800a0dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0e0:	fb02 f303 	mul.w	r3, r2, r3
 800a0e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	1e5a      	subs	r2, r3, #1
 800a0ea:	60fa      	str	r2, [r7, #12]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d102      	bne.n	800a0f6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a0f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0f4:	e009      	b.n	800a10a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d0f1      	beq.n	800a0e6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	22c5      	movs	r2, #197	; 0xc5
 800a106:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a108:	2300      	movs	r3, #0
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3714      	adds	r7, #20
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr
 800a116:	bf00      	nop
 800a118:	20000038 	.word	0x20000038
 800a11c:	10624dd3 	.word	0x10624dd3

0800a120 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b088      	sub	sp, #32
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	460b      	mov	r3, r1
 800a12a:	607a      	str	r2, [r7, #4]
 800a12c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a12e:	4b70      	ldr	r3, [pc, #448]	; (800a2f0 <SDMMC_GetCmdResp1+0x1d0>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a70      	ldr	r2, [pc, #448]	; (800a2f4 <SDMMC_GetCmdResp1+0x1d4>)
 800a134:	fba2 2303 	umull	r2, r3, r2, r3
 800a138:	0a5a      	lsrs	r2, r3, #9
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	fb02 f303 	mul.w	r3, r2, r3
 800a140:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	1e5a      	subs	r2, r3, #1
 800a146:	61fa      	str	r2, [r7, #28]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d102      	bne.n	800a152 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a14c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a150:	e0c9      	b.n	800a2e6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a156:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d0ef      	beq.n	800a142 <SDMMC_GetCmdResp1+0x22>
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d1ea      	bne.n	800a142 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a170:	f003 0304 	and.w	r3, r3, #4
 800a174:	2b00      	cmp	r3, #0
 800a176:	d004      	beq.n	800a182 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	2204      	movs	r2, #4
 800a17c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a17e:	2304      	movs	r3, #4
 800a180:	e0b1      	b.n	800a2e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a186:	f003 0301 	and.w	r3, r3, #1
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d004      	beq.n	800a198 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2201      	movs	r2, #1
 800a192:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a194:	2301      	movs	r3, #1
 800a196:	e0a6      	b.n	800a2e6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	22c5      	movs	r2, #197	; 0xc5
 800a19c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a19e:	68f8      	ldr	r0, [r7, #12]
 800a1a0:	f7ff fd12 	bl	8009bc8 <SDIO_GetCommandResponse>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	461a      	mov	r2, r3
 800a1a8:	7afb      	ldrb	r3, [r7, #11]
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d001      	beq.n	800a1b2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e099      	b.n	800a2e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a1b2:	2100      	movs	r1, #0
 800a1b4:	68f8      	ldr	r0, [r7, #12]
 800a1b6:	f7ff fd14 	bl	8009be2 <SDIO_GetResponse>
 800a1ba:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a1bc:	697a      	ldr	r2, [r7, #20]
 800a1be:	4b4e      	ldr	r3, [pc, #312]	; (800a2f8 <SDMMC_GetCmdResp1+0x1d8>)
 800a1c0:	4013      	ands	r3, r2
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d101      	bne.n	800a1ca <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	e08d      	b.n	800a2e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	da02      	bge.n	800a1d6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a1d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a1d4:	e087      	b.n	800a2e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d001      	beq.n	800a1e4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a1e0:	2340      	movs	r3, #64	; 0x40
 800a1e2:	e080      	b.n	800a2e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a1e4:	697b      	ldr	r3, [r7, #20]
 800a1e6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d001      	beq.n	800a1f2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a1ee:	2380      	movs	r3, #128	; 0x80
 800a1f0:	e079      	b.n	800a2e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d002      	beq.n	800a202 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a1fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a200:	e071      	b.n	800a2e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d002      	beq.n	800a212 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a20c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a210:	e069      	b.n	800a2e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d002      	beq.n	800a222 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a21c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a220:	e061      	b.n	800a2e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d002      	beq.n	800a232 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a22c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a230:	e059      	b.n	800a2e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a232:	697b      	ldr	r3, [r7, #20]
 800a234:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d002      	beq.n	800a242 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a23c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a240:	e051      	b.n	800a2e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a242:	697b      	ldr	r3, [r7, #20]
 800a244:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d002      	beq.n	800a252 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a24c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a250:	e049      	b.n	800a2e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a252:	697b      	ldr	r3, [r7, #20]
 800a254:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d002      	beq.n	800a262 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a25c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a260:	e041      	b.n	800a2e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a262:	697b      	ldr	r3, [r7, #20]
 800a264:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d002      	beq.n	800a272 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a26c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a270:	e039      	b.n	800a2e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d002      	beq.n	800a282 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a27c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a280:	e031      	b.n	800a2e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a282:	697b      	ldr	r3, [r7, #20]
 800a284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d002      	beq.n	800a292 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a28c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a290:	e029      	b.n	800a2e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d002      	beq.n	800a2a2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a29c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a2a0:	e021      	b.n	800a2e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d002      	beq.n	800a2b2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a2ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a2b0:	e019      	b.n	800a2e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d002      	beq.n	800a2c2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a2bc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a2c0:	e011      	b.n	800a2e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d002      	beq.n	800a2d2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a2cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a2d0:	e009      	b.n	800a2e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	f003 0308 	and.w	r3, r3, #8
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d002      	beq.n	800a2e2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a2dc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a2e0:	e001      	b.n	800a2e6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a2e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3720      	adds	r7, #32
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	20000038 	.word	0x20000038
 800a2f4:	10624dd3 	.word	0x10624dd3
 800a2f8:	fdffe008 	.word	0xfdffe008

0800a2fc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b085      	sub	sp, #20
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a304:	4b1f      	ldr	r3, [pc, #124]	; (800a384 <SDMMC_GetCmdResp2+0x88>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	4a1f      	ldr	r2, [pc, #124]	; (800a388 <SDMMC_GetCmdResp2+0x8c>)
 800a30a:	fba2 2303 	umull	r2, r3, r2, r3
 800a30e:	0a5b      	lsrs	r3, r3, #9
 800a310:	f241 3288 	movw	r2, #5000	; 0x1388
 800a314:	fb02 f303 	mul.w	r3, r2, r3
 800a318:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	1e5a      	subs	r2, r3, #1
 800a31e:	60fa      	str	r2, [r7, #12]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d102      	bne.n	800a32a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a324:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a328:	e026      	b.n	800a378 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a32e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a330:	68bb      	ldr	r3, [r7, #8]
 800a332:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a336:	2b00      	cmp	r3, #0
 800a338:	d0ef      	beq.n	800a31a <SDMMC_GetCmdResp2+0x1e>
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a340:	2b00      	cmp	r3, #0
 800a342:	d1ea      	bne.n	800a31a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a348:	f003 0304 	and.w	r3, r3, #4
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d004      	beq.n	800a35a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	2204      	movs	r2, #4
 800a354:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a356:	2304      	movs	r3, #4
 800a358:	e00e      	b.n	800a378 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a35e:	f003 0301 	and.w	r3, r3, #1
 800a362:	2b00      	cmp	r3, #0
 800a364:	d004      	beq.n	800a370 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	2201      	movs	r2, #1
 800a36a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a36c:	2301      	movs	r3, #1
 800a36e:	e003      	b.n	800a378 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	22c5      	movs	r2, #197	; 0xc5
 800a374:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a376:	2300      	movs	r3, #0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3714      	adds	r7, #20
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr
 800a384:	20000038 	.word	0x20000038
 800a388:	10624dd3 	.word	0x10624dd3

0800a38c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b085      	sub	sp, #20
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a394:	4b1a      	ldr	r3, [pc, #104]	; (800a400 <SDMMC_GetCmdResp3+0x74>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a1a      	ldr	r2, [pc, #104]	; (800a404 <SDMMC_GetCmdResp3+0x78>)
 800a39a:	fba2 2303 	umull	r2, r3, r2, r3
 800a39e:	0a5b      	lsrs	r3, r3, #9
 800a3a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3a4:	fb02 f303 	mul.w	r3, r2, r3
 800a3a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	1e5a      	subs	r2, r3, #1
 800a3ae:	60fa      	str	r2, [r7, #12]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d102      	bne.n	800a3ba <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a3b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a3b8:	e01b      	b.n	800a3f2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3be:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d0ef      	beq.n	800a3aa <SDMMC_GetCmdResp3+0x1e>
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d1ea      	bne.n	800a3aa <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3d8:	f003 0304 	and.w	r3, r3, #4
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d004      	beq.n	800a3ea <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2204      	movs	r2, #4
 800a3e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a3e6:	2304      	movs	r3, #4
 800a3e8:	e003      	b.n	800a3f2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	22c5      	movs	r2, #197	; 0xc5
 800a3ee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a3f0:	2300      	movs	r3, #0
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3714      	adds	r7, #20
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fc:	4770      	bx	lr
 800a3fe:	bf00      	nop
 800a400:	20000038 	.word	0x20000038
 800a404:	10624dd3 	.word	0x10624dd3

0800a408 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b088      	sub	sp, #32
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	460b      	mov	r3, r1
 800a412:	607a      	str	r2, [r7, #4]
 800a414:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a416:	4b35      	ldr	r3, [pc, #212]	; (800a4ec <SDMMC_GetCmdResp6+0xe4>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a35      	ldr	r2, [pc, #212]	; (800a4f0 <SDMMC_GetCmdResp6+0xe8>)
 800a41c:	fba2 2303 	umull	r2, r3, r2, r3
 800a420:	0a5b      	lsrs	r3, r3, #9
 800a422:	f241 3288 	movw	r2, #5000	; 0x1388
 800a426:	fb02 f303 	mul.w	r3, r2, r3
 800a42a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	1e5a      	subs	r2, r3, #1
 800a430:	61fa      	str	r2, [r7, #28]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d102      	bne.n	800a43c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a436:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a43a:	e052      	b.n	800a4e2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a440:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a442:	69bb      	ldr	r3, [r7, #24]
 800a444:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d0ef      	beq.n	800a42c <SDMMC_GetCmdResp6+0x24>
 800a44c:	69bb      	ldr	r3, [r7, #24]
 800a44e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a452:	2b00      	cmp	r3, #0
 800a454:	d1ea      	bne.n	800a42c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a45a:	f003 0304 	and.w	r3, r3, #4
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d004      	beq.n	800a46c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2204      	movs	r2, #4
 800a466:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a468:	2304      	movs	r3, #4
 800a46a:	e03a      	b.n	800a4e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a470:	f003 0301 	and.w	r3, r3, #1
 800a474:	2b00      	cmp	r3, #0
 800a476:	d004      	beq.n	800a482 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2201      	movs	r2, #1
 800a47c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a47e:	2301      	movs	r3, #1
 800a480:	e02f      	b.n	800a4e2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	f7ff fba0 	bl	8009bc8 <SDIO_GetCommandResponse>
 800a488:	4603      	mov	r3, r0
 800a48a:	461a      	mov	r2, r3
 800a48c:	7afb      	ldrb	r3, [r7, #11]
 800a48e:	4293      	cmp	r3, r2
 800a490:	d001      	beq.n	800a496 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a492:	2301      	movs	r3, #1
 800a494:	e025      	b.n	800a4e2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	22c5      	movs	r2, #197	; 0xc5
 800a49a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a49c:	2100      	movs	r1, #0
 800a49e:	68f8      	ldr	r0, [r7, #12]
 800a4a0:	f7ff fb9f 	bl	8009be2 <SDIO_GetResponse>
 800a4a4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a4a6:	697b      	ldr	r3, [r7, #20]
 800a4a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d106      	bne.n	800a4be <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	0c1b      	lsrs	r3, r3, #16
 800a4b4:	b29a      	uxth	r2, r3
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	e011      	b.n	800a4e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a4be:	697b      	ldr	r3, [r7, #20]
 800a4c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d002      	beq.n	800a4ce <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a4c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a4cc:	e009      	b.n	800a4e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d002      	beq.n	800a4de <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a4d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a4dc:	e001      	b.n	800a4e2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a4de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3720      	adds	r7, #32
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	bd80      	pop	{r7, pc}
 800a4ea:	bf00      	nop
 800a4ec:	20000038 	.word	0x20000038
 800a4f0:	10624dd3 	.word	0x10624dd3

0800a4f4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b085      	sub	sp, #20
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a4fc:	4b22      	ldr	r3, [pc, #136]	; (800a588 <SDMMC_GetCmdResp7+0x94>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	4a22      	ldr	r2, [pc, #136]	; (800a58c <SDMMC_GetCmdResp7+0x98>)
 800a502:	fba2 2303 	umull	r2, r3, r2, r3
 800a506:	0a5b      	lsrs	r3, r3, #9
 800a508:	f241 3288 	movw	r2, #5000	; 0x1388
 800a50c:	fb02 f303 	mul.w	r3, r2, r3
 800a510:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	1e5a      	subs	r2, r3, #1
 800a516:	60fa      	str	r2, [r7, #12]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d102      	bne.n	800a522 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a51c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a520:	e02c      	b.n	800a57c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a526:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d0ef      	beq.n	800a512 <SDMMC_GetCmdResp7+0x1e>
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d1ea      	bne.n	800a512 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a540:	f003 0304 	and.w	r3, r3, #4
 800a544:	2b00      	cmp	r3, #0
 800a546:	d004      	beq.n	800a552 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2204      	movs	r2, #4
 800a54c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a54e:	2304      	movs	r3, #4
 800a550:	e014      	b.n	800a57c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a556:	f003 0301 	and.w	r3, r3, #1
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d004      	beq.n	800a568 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2201      	movs	r2, #1
 800a562:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a564:	2301      	movs	r3, #1
 800a566:	e009      	b.n	800a57c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a56c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a570:	2b00      	cmp	r3, #0
 800a572:	d002      	beq.n	800a57a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2240      	movs	r2, #64	; 0x40
 800a578:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a57a:	2300      	movs	r3, #0
  
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3714      	adds	r7, #20
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr
 800a588:	20000038 	.word	0x20000038
 800a58c:	10624dd3 	.word	0x10624dd3

0800a590 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800a594:	4904      	ldr	r1, [pc, #16]	; (800a5a8 <MX_FATFS_Init+0x18>)
 800a596:	4805      	ldr	r0, [pc, #20]	; (800a5ac <MX_FATFS_Init+0x1c>)
 800a598:	f003 f940 	bl	800d81c <FATFS_LinkDriver>
 800a59c:	4603      	mov	r3, r0
 800a59e:	461a      	mov	r2, r3
 800a5a0:	4b03      	ldr	r3, [pc, #12]	; (800a5b0 <MX_FATFS_Init+0x20>)
 800a5a2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a5a4:	bf00      	nop
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	2000167c 	.word	0x2000167c
 800a5ac:	08013880 	.word	0x08013880
 800a5b0:	20001678 	.word	0x20001678

0800a5b4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a5b8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800a5ce:	f000 f896 	bl	800a6fe <BSP_SD_IsDetected>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d001      	beq.n	800a5dc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	e012      	b.n	800a602 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800a5dc:	480b      	ldr	r0, [pc, #44]	; (800a60c <BSP_SD_Init+0x48>)
 800a5de:	f7fd fc1f 	bl	8007e20 <HAL_SD_Init>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800a5e6:	79fb      	ldrb	r3, [r7, #7]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d109      	bne.n	800a600 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800a5ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a5f0:	4806      	ldr	r0, [pc, #24]	; (800a60c <BSP_SD_Init+0x48>)
 800a5f2:	f7fe f9eb 	bl	80089cc <HAL_SD_ConfigWideBusOperation>
 800a5f6:	4603      	mov	r3, r0
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d001      	beq.n	800a600 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800a600:	79fb      	ldrb	r3, [r7, #7]
}
 800a602:	4618      	mov	r0, r3
 800a604:	3708      	adds	r7, #8
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	200015ac 	.word	0x200015ac

0800a610 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b086      	sub	sp, #24
 800a614:	af00      	add	r7, sp, #0
 800a616:	60f8      	str	r0, [r7, #12]
 800a618:	60b9      	str	r1, [r7, #8]
 800a61a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a61c:	2300      	movs	r3, #0
 800a61e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	68ba      	ldr	r2, [r7, #8]
 800a624:	68f9      	ldr	r1, [r7, #12]
 800a626:	4806      	ldr	r0, [pc, #24]	; (800a640 <BSP_SD_ReadBlocks_DMA+0x30>)
 800a628:	f7fd fca8 	bl	8007f7c <HAL_SD_ReadBlocks_DMA>
 800a62c:	4603      	mov	r3, r0
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d001      	beq.n	800a636 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a632:	2301      	movs	r3, #1
 800a634:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a636:	7dfb      	ldrb	r3, [r7, #23]
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3718      	adds	r7, #24
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}
 800a640:	200015ac 	.word	0x200015ac

0800a644 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b086      	sub	sp, #24
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800a650:	2300      	movs	r3, #0
 800a652:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	68ba      	ldr	r2, [r7, #8]
 800a658:	68f9      	ldr	r1, [r7, #12]
 800a65a:	4806      	ldr	r0, [pc, #24]	; (800a674 <BSP_SD_WriteBlocks_DMA+0x30>)
 800a65c:	f7fd fd70 	bl	8008140 <HAL_SD_WriteBlocks_DMA>
 800a660:	4603      	mov	r3, r0
 800a662:	2b00      	cmp	r3, #0
 800a664:	d001      	beq.n	800a66a <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800a666:	2301      	movs	r3, #1
 800a668:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800a66a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3718      	adds	r7, #24
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	200015ac 	.word	0x200015ac

0800a678 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800a67c:	4805      	ldr	r0, [pc, #20]	; (800a694 <BSP_SD_GetCardState+0x1c>)
 800a67e:	f7fe fa3f 	bl	8008b00 <HAL_SD_GetCardState>
 800a682:	4603      	mov	r3, r0
 800a684:	2b04      	cmp	r3, #4
 800a686:	bf14      	ite	ne
 800a688:	2301      	movne	r3, #1
 800a68a:	2300      	moveq	r3, #0
 800a68c:	b2db      	uxtb	r3, r3
}
 800a68e:	4618      	mov	r0, r3
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	200015ac 	.word	0x200015ac

0800a698 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800a6a0:	6879      	ldr	r1, [r7, #4]
 800a6a2:	4803      	ldr	r0, [pc, #12]	; (800a6b0 <BSP_SD_GetCardInfo+0x18>)
 800a6a4:	f7fe f966 	bl	8008974 <HAL_SD_GetCardInfo>
}
 800a6a8:	bf00      	nop
 800a6aa:	3708      	adds	r7, #8
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}
 800a6b0:	200015ac 	.word	0x200015ac

0800a6b4 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800a6bc:	f000 f818 	bl	800a6f0 <BSP_SD_AbortCallback>
}
 800a6c0:	bf00      	nop
 800a6c2:	3708      	adds	r7, #8
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	bd80      	pop	{r7, pc}

0800a6c8 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b082      	sub	sp, #8
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800a6d0:	f000 f98c 	bl	800a9ec <BSP_SD_WriteCpltCallback>
}
 800a6d4:	bf00      	nop
 800a6d6:	3708      	adds	r7, #8
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}

0800a6dc <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b082      	sub	sp, #8
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800a6e4:	f000 f98e 	bl	800aa04 <BSP_SD_ReadCpltCallback>
}
 800a6e8:	bf00      	nop
 800a6ea:	3708      	adds	r7, #8
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}

0800a6f0 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	af00      	add	r7, sp, #0

}
 800a6f4:	bf00      	nop
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr

0800a6fe <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800a6fe:	b480      	push	{r7}
 800a700:	b083      	sub	sp, #12
 800a702:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800a704:	2301      	movs	r3, #1
 800a706:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800a708:	79fb      	ldrb	r3, [r7, #7]
 800a70a:	b2db      	uxtb	r3, r3
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	370c      	adds	r7, #12
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr

0800a718 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b084      	sub	sp, #16
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800a720:	f7fc f88c 	bl	800683c <HAL_GetTick>
 800a724:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800a726:	e006      	b.n	800a736 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a728:	f7ff ffa6 	bl	800a678 <BSP_SD_GetCardState>
 800a72c:	4603      	mov	r3, r0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d101      	bne.n	800a736 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800a732:	2300      	movs	r3, #0
 800a734:	e009      	b.n	800a74a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800a736:	f7fc f881 	bl	800683c <HAL_GetTick>
 800a73a:	4602      	mov	r2, r0
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	1ad3      	subs	r3, r2, r3
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	429a      	cmp	r2, r3
 800a744:	d8f0      	bhi.n	800a728 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800a746:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800a74a:	4618      	mov	r0, r3
 800a74c:	3710      	adds	r7, #16
 800a74e:	46bd      	mov	sp, r7
 800a750:	bd80      	pop	{r7, pc}
	...

0800a754 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
 800a75a:	4603      	mov	r3, r0
 800a75c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800a75e:	4b0b      	ldr	r3, [pc, #44]	; (800a78c <SD_CheckStatus+0x38>)
 800a760:	2201      	movs	r2, #1
 800a762:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800a764:	f7ff ff88 	bl	800a678 <BSP_SD_GetCardState>
 800a768:	4603      	mov	r3, r0
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d107      	bne.n	800a77e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800a76e:	4b07      	ldr	r3, [pc, #28]	; (800a78c <SD_CheckStatus+0x38>)
 800a770:	781b      	ldrb	r3, [r3, #0]
 800a772:	b2db      	uxtb	r3, r3
 800a774:	f023 0301 	bic.w	r3, r3, #1
 800a778:	b2da      	uxtb	r2, r3
 800a77a:	4b04      	ldr	r3, [pc, #16]	; (800a78c <SD_CheckStatus+0x38>)
 800a77c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800a77e:	4b03      	ldr	r3, [pc, #12]	; (800a78c <SD_CheckStatus+0x38>)
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	b2db      	uxtb	r3, r3
}
 800a784:	4618      	mov	r0, r3
 800a786:	3708      	adds	r7, #8
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}
 800a78c:	20000041 	.word	0x20000041

0800a790 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b082      	sub	sp, #8
 800a794:	af00      	add	r7, sp, #0
 800a796:	4603      	mov	r3, r0
 800a798:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a79a:	f7ff ff13 	bl	800a5c4 <BSP_SD_Init>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d107      	bne.n	800a7b4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800a7a4:	79fb      	ldrb	r3, [r7, #7]
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f7ff ffd4 	bl	800a754 <SD_CheckStatus>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	4b04      	ldr	r3, [pc, #16]	; (800a7c4 <SD_initialize+0x34>)
 800a7b2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a7b4:	4b03      	ldr	r3, [pc, #12]	; (800a7c4 <SD_initialize+0x34>)
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	b2db      	uxtb	r3, r3
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3708      	adds	r7, #8
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}
 800a7c2:	bf00      	nop
 800a7c4:	20000041 	.word	0x20000041

0800a7c8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b082      	sub	sp, #8
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800a7d2:	79fb      	ldrb	r3, [r7, #7]
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f7ff ffbd 	bl	800a754 <SD_CheckStatus>
 800a7da:	4603      	mov	r3, r0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3708      	adds	r7, #8
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}

0800a7e4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b086      	sub	sp, #24
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	60b9      	str	r1, [r7, #8]
 800a7ec:	607a      	str	r2, [r7, #4]
 800a7ee:	603b      	str	r3, [r7, #0]
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a7f8:	f247 5030 	movw	r0, #30000	; 0x7530
 800a7fc:	f7ff ff8c 	bl	800a718 <SD_CheckStatusWithTimeout>
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	da01      	bge.n	800a80a <SD_read+0x26>
  {
    return res;
 800a806:	7dfb      	ldrb	r3, [r7, #23]
 800a808:	e03b      	b.n	800a882 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800a80a:	683a      	ldr	r2, [r7, #0]
 800a80c:	6879      	ldr	r1, [r7, #4]
 800a80e:	68b8      	ldr	r0, [r7, #8]
 800a810:	f7ff fefe 	bl	800a610 <BSP_SD_ReadBlocks_DMA>
 800a814:	4603      	mov	r3, r0
 800a816:	2b00      	cmp	r3, #0
 800a818:	d132      	bne.n	800a880 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800a81a:	4b1c      	ldr	r3, [pc, #112]	; (800a88c <SD_read+0xa8>)
 800a81c:	2200      	movs	r2, #0
 800a81e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800a820:	f7fc f80c 	bl	800683c <HAL_GetTick>
 800a824:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a826:	bf00      	nop
 800a828:	4b18      	ldr	r3, [pc, #96]	; (800a88c <SD_read+0xa8>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d108      	bne.n	800a842 <SD_read+0x5e>
 800a830:	f7fc f804 	bl	800683c <HAL_GetTick>
 800a834:	4602      	mov	r2, r0
 800a836:	693b      	ldr	r3, [r7, #16]
 800a838:	1ad3      	subs	r3, r2, r3
 800a83a:	f247 522f 	movw	r2, #29999	; 0x752f
 800a83e:	4293      	cmp	r3, r2
 800a840:	d9f2      	bls.n	800a828 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800a842:	4b12      	ldr	r3, [pc, #72]	; (800a88c <SD_read+0xa8>)
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d102      	bne.n	800a850 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800a84a:	2301      	movs	r3, #1
 800a84c:	75fb      	strb	r3, [r7, #23]
 800a84e:	e017      	b.n	800a880 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800a850:	4b0e      	ldr	r3, [pc, #56]	; (800a88c <SD_read+0xa8>)
 800a852:	2200      	movs	r2, #0
 800a854:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a856:	f7fb fff1 	bl	800683c <HAL_GetTick>
 800a85a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a85c:	e007      	b.n	800a86e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a85e:	f7ff ff0b 	bl	800a678 <BSP_SD_GetCardState>
 800a862:	4603      	mov	r3, r0
 800a864:	2b00      	cmp	r3, #0
 800a866:	d102      	bne.n	800a86e <SD_read+0x8a>
          {
            res = RES_OK;
 800a868:	2300      	movs	r3, #0
 800a86a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800a86c:	e008      	b.n	800a880 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a86e:	f7fb ffe5 	bl	800683c <HAL_GetTick>
 800a872:	4602      	mov	r2, r0
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	1ad3      	subs	r3, r2, r3
 800a878:	f247 522f 	movw	r2, #29999	; 0x752f
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d9ee      	bls.n	800a85e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800a880:	7dfb      	ldrb	r3, [r7, #23]
}
 800a882:	4618      	mov	r0, r3
 800a884:	3718      	adds	r7, #24
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	2000140c 	.word	0x2000140c

0800a890 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b086      	sub	sp, #24
 800a894:	af00      	add	r7, sp, #0
 800a896:	60b9      	str	r1, [r7, #8]
 800a898:	607a      	str	r2, [r7, #4]
 800a89a:	603b      	str	r3, [r7, #0]
 800a89c:	4603      	mov	r3, r0
 800a89e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800a8a4:	4b24      	ldr	r3, [pc, #144]	; (800a938 <SD_write+0xa8>)
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800a8aa:	f247 5030 	movw	r0, #30000	; 0x7530
 800a8ae:	f7ff ff33 	bl	800a718 <SD_CheckStatusWithTimeout>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	da01      	bge.n	800a8bc <SD_write+0x2c>
  {
    return res;
 800a8b8:	7dfb      	ldrb	r3, [r7, #23]
 800a8ba:	e038      	b.n	800a92e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800a8bc:	683a      	ldr	r2, [r7, #0]
 800a8be:	6879      	ldr	r1, [r7, #4]
 800a8c0:	68b8      	ldr	r0, [r7, #8]
 800a8c2:	f7ff febf 	bl	800a644 <BSP_SD_WriteBlocks_DMA>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d12f      	bne.n	800a92c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800a8cc:	f7fb ffb6 	bl	800683c <HAL_GetTick>
 800a8d0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800a8d2:	bf00      	nop
 800a8d4:	4b18      	ldr	r3, [pc, #96]	; (800a938 <SD_write+0xa8>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d108      	bne.n	800a8ee <SD_write+0x5e>
 800a8dc:	f7fb ffae 	bl	800683c <HAL_GetTick>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	693b      	ldr	r3, [r7, #16]
 800a8e4:	1ad3      	subs	r3, r2, r3
 800a8e6:	f247 522f 	movw	r2, #29999	; 0x752f
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d9f2      	bls.n	800a8d4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800a8ee:	4b12      	ldr	r3, [pc, #72]	; (800a938 <SD_write+0xa8>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d102      	bne.n	800a8fc <SD_write+0x6c>
      {
        res = RES_ERROR;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	75fb      	strb	r3, [r7, #23]
 800a8fa:	e017      	b.n	800a92c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800a8fc:	4b0e      	ldr	r3, [pc, #56]	; (800a938 <SD_write+0xa8>)
 800a8fe:	2200      	movs	r2, #0
 800a900:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800a902:	f7fb ff9b 	bl	800683c <HAL_GetTick>
 800a906:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a908:	e007      	b.n	800a91a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800a90a:	f7ff feb5 	bl	800a678 <BSP_SD_GetCardState>
 800a90e:	4603      	mov	r3, r0
 800a910:	2b00      	cmp	r3, #0
 800a912:	d102      	bne.n	800a91a <SD_write+0x8a>
          {
            res = RES_OK;
 800a914:	2300      	movs	r3, #0
 800a916:	75fb      	strb	r3, [r7, #23]
            break;
 800a918:	e008      	b.n	800a92c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800a91a:	f7fb ff8f 	bl	800683c <HAL_GetTick>
 800a91e:	4602      	mov	r2, r0
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	1ad3      	subs	r3, r2, r3
 800a924:	f247 522f 	movw	r2, #29999	; 0x752f
 800a928:	4293      	cmp	r3, r2
 800a92a:	d9ee      	bls.n	800a90a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800a92c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3718      	adds	r7, #24
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	20001408 	.word	0x20001408

0800a93c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b08c      	sub	sp, #48	; 0x30
 800a940:	af00      	add	r7, sp, #0
 800a942:	4603      	mov	r3, r0
 800a944:	603a      	str	r2, [r7, #0]
 800a946:	71fb      	strb	r3, [r7, #7]
 800a948:	460b      	mov	r3, r1
 800a94a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800a94c:	2301      	movs	r3, #1
 800a94e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a952:	4b25      	ldr	r3, [pc, #148]	; (800a9e8 <SD_ioctl+0xac>)
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	b2db      	uxtb	r3, r3
 800a958:	f003 0301 	and.w	r3, r3, #1
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d001      	beq.n	800a964 <SD_ioctl+0x28>
 800a960:	2303      	movs	r3, #3
 800a962:	e03c      	b.n	800a9de <SD_ioctl+0xa2>

  switch (cmd)
 800a964:	79bb      	ldrb	r3, [r7, #6]
 800a966:	2b03      	cmp	r3, #3
 800a968:	d834      	bhi.n	800a9d4 <SD_ioctl+0x98>
 800a96a:	a201      	add	r2, pc, #4	; (adr r2, 800a970 <SD_ioctl+0x34>)
 800a96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a970:	0800a981 	.word	0x0800a981
 800a974:	0800a989 	.word	0x0800a989
 800a978:	0800a9a1 	.word	0x0800a9a1
 800a97c:	0800a9bb 	.word	0x0800a9bb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a980:	2300      	movs	r3, #0
 800a982:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a986:	e028      	b.n	800a9da <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800a988:	f107 030c 	add.w	r3, r7, #12
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7ff fe83 	bl	800a698 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a998:	2300      	movs	r3, #0
 800a99a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a99e:	e01c      	b.n	800a9da <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a9a0:	f107 030c 	add.w	r3, r7, #12
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f7ff fe77 	bl	800a698 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ac:	b29a      	uxth	r2, r3
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a9b8:	e00f      	b.n	800a9da <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800a9ba:	f107 030c 	add.w	r3, r7, #12
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f7ff fe6a 	bl	800a698 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c6:	0a5a      	lsrs	r2, r3, #9
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a9d2:	e002      	b.n	800a9da <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800a9d4:	2304      	movs	r3, #4
 800a9d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a9da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3730      	adds	r7, #48	; 0x30
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}
 800a9e6:	bf00      	nop
 800a9e8:	20000041 	.word	0x20000041

0800a9ec <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800a9f0:	4b03      	ldr	r3, [pc, #12]	; (800aa00 <BSP_SD_WriteCpltCallback+0x14>)
 800a9f2:	2201      	movs	r2, #1
 800a9f4:	601a      	str	r2, [r3, #0]
}
 800a9f6:	bf00      	nop
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fe:	4770      	bx	lr
 800aa00:	20001408 	.word	0x20001408

0800aa04 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800aa04:	b480      	push	{r7}
 800aa06:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800aa08:	4b03      	ldr	r3, [pc, #12]	; (800aa18 <BSP_SD_ReadCpltCallback+0x14>)
 800aa0a:	2201      	movs	r2, #1
 800aa0c:	601a      	str	r2, [r3, #0]
}
 800aa0e:	bf00      	nop
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr
 800aa18:	2000140c 	.word	0x2000140c

0800aa1c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	4603      	mov	r3, r0
 800aa24:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800aa26:	79fb      	ldrb	r3, [r7, #7]
 800aa28:	4a08      	ldr	r2, [pc, #32]	; (800aa4c <disk_status+0x30>)
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	4413      	add	r3, r2
 800aa2e:	685b      	ldr	r3, [r3, #4]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	79fa      	ldrb	r2, [r7, #7]
 800aa34:	4905      	ldr	r1, [pc, #20]	; (800aa4c <disk_status+0x30>)
 800aa36:	440a      	add	r2, r1
 800aa38:	7a12      	ldrb	r2, [r2, #8]
 800aa3a:	4610      	mov	r0, r2
 800aa3c:	4798      	blx	r3
 800aa3e:	4603      	mov	r3, r0
 800aa40:	73fb      	strb	r3, [r7, #15]
  return stat;
 800aa42:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3710      	adds	r7, #16
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	20001438 	.word	0x20001438

0800aa50 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	4603      	mov	r3, r0
 800aa58:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800aa5e:	79fb      	ldrb	r3, [r7, #7]
 800aa60:	4a0d      	ldr	r2, [pc, #52]	; (800aa98 <disk_initialize+0x48>)
 800aa62:	5cd3      	ldrb	r3, [r2, r3]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d111      	bne.n	800aa8c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800aa68:	79fb      	ldrb	r3, [r7, #7]
 800aa6a:	4a0b      	ldr	r2, [pc, #44]	; (800aa98 <disk_initialize+0x48>)
 800aa6c:	2101      	movs	r1, #1
 800aa6e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800aa70:	79fb      	ldrb	r3, [r7, #7]
 800aa72:	4a09      	ldr	r2, [pc, #36]	; (800aa98 <disk_initialize+0x48>)
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	4413      	add	r3, r2
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	79fa      	ldrb	r2, [r7, #7]
 800aa7e:	4906      	ldr	r1, [pc, #24]	; (800aa98 <disk_initialize+0x48>)
 800aa80:	440a      	add	r2, r1
 800aa82:	7a12      	ldrb	r2, [r2, #8]
 800aa84:	4610      	mov	r0, r2
 800aa86:	4798      	blx	r3
 800aa88:	4603      	mov	r3, r0
 800aa8a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800aa8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	20001438 	.word	0x20001438

0800aa9c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800aa9c:	b590      	push	{r4, r7, lr}
 800aa9e:	b087      	sub	sp, #28
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	60b9      	str	r1, [r7, #8]
 800aaa4:	607a      	str	r2, [r7, #4]
 800aaa6:	603b      	str	r3, [r7, #0]
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800aaac:	7bfb      	ldrb	r3, [r7, #15]
 800aaae:	4a0a      	ldr	r2, [pc, #40]	; (800aad8 <disk_read+0x3c>)
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	4413      	add	r3, r2
 800aab4:	685b      	ldr	r3, [r3, #4]
 800aab6:	689c      	ldr	r4, [r3, #8]
 800aab8:	7bfb      	ldrb	r3, [r7, #15]
 800aaba:	4a07      	ldr	r2, [pc, #28]	; (800aad8 <disk_read+0x3c>)
 800aabc:	4413      	add	r3, r2
 800aabe:	7a18      	ldrb	r0, [r3, #8]
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	68b9      	ldr	r1, [r7, #8]
 800aac6:	47a0      	blx	r4
 800aac8:	4603      	mov	r3, r0
 800aaca:	75fb      	strb	r3, [r7, #23]
  return res;
 800aacc:	7dfb      	ldrb	r3, [r7, #23]
}
 800aace:	4618      	mov	r0, r3
 800aad0:	371c      	adds	r7, #28
 800aad2:	46bd      	mov	sp, r7
 800aad4:	bd90      	pop	{r4, r7, pc}
 800aad6:	bf00      	nop
 800aad8:	20001438 	.word	0x20001438

0800aadc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800aadc:	b590      	push	{r4, r7, lr}
 800aade:	b087      	sub	sp, #28
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	60b9      	str	r1, [r7, #8]
 800aae4:	607a      	str	r2, [r7, #4]
 800aae6:	603b      	str	r3, [r7, #0]
 800aae8:	4603      	mov	r3, r0
 800aaea:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800aaec:	7bfb      	ldrb	r3, [r7, #15]
 800aaee:	4a0a      	ldr	r2, [pc, #40]	; (800ab18 <disk_write+0x3c>)
 800aaf0:	009b      	lsls	r3, r3, #2
 800aaf2:	4413      	add	r3, r2
 800aaf4:	685b      	ldr	r3, [r3, #4]
 800aaf6:	68dc      	ldr	r4, [r3, #12]
 800aaf8:	7bfb      	ldrb	r3, [r7, #15]
 800aafa:	4a07      	ldr	r2, [pc, #28]	; (800ab18 <disk_write+0x3c>)
 800aafc:	4413      	add	r3, r2
 800aafe:	7a18      	ldrb	r0, [r3, #8]
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	68b9      	ldr	r1, [r7, #8]
 800ab06:	47a0      	blx	r4
 800ab08:	4603      	mov	r3, r0
 800ab0a:	75fb      	strb	r3, [r7, #23]
  return res;
 800ab0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	371c      	adds	r7, #28
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd90      	pop	{r4, r7, pc}
 800ab16:	bf00      	nop
 800ab18:	20001438 	.word	0x20001438

0800ab1c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b084      	sub	sp, #16
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	4603      	mov	r3, r0
 800ab24:	603a      	str	r2, [r7, #0]
 800ab26:	71fb      	strb	r3, [r7, #7]
 800ab28:	460b      	mov	r3, r1
 800ab2a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ab2c:	79fb      	ldrb	r3, [r7, #7]
 800ab2e:	4a09      	ldr	r2, [pc, #36]	; (800ab54 <disk_ioctl+0x38>)
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	4413      	add	r3, r2
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	691b      	ldr	r3, [r3, #16]
 800ab38:	79fa      	ldrb	r2, [r7, #7]
 800ab3a:	4906      	ldr	r1, [pc, #24]	; (800ab54 <disk_ioctl+0x38>)
 800ab3c:	440a      	add	r2, r1
 800ab3e:	7a10      	ldrb	r0, [r2, #8]
 800ab40:	79b9      	ldrb	r1, [r7, #6]
 800ab42:	683a      	ldr	r2, [r7, #0]
 800ab44:	4798      	blx	r3
 800ab46:	4603      	mov	r3, r0
 800ab48:	73fb      	strb	r3, [r7, #15]
  return res;
 800ab4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	3710      	adds	r7, #16
 800ab50:	46bd      	mov	sp, r7
 800ab52:	bd80      	pop	{r7, pc}
 800ab54:	20001438 	.word	0x20001438

0800ab58 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	3301      	adds	r3, #1
 800ab64:	781b      	ldrb	r3, [r3, #0]
 800ab66:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ab68:	89fb      	ldrh	r3, [r7, #14]
 800ab6a:	021b      	lsls	r3, r3, #8
 800ab6c:	b21a      	sxth	r2, r3
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	b21b      	sxth	r3, r3
 800ab74:	4313      	orrs	r3, r2
 800ab76:	b21b      	sxth	r3, r3
 800ab78:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ab7a:	89fb      	ldrh	r3, [r7, #14]
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3714      	adds	r7, #20
 800ab80:	46bd      	mov	sp, r7
 800ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab86:	4770      	bx	lr

0800ab88 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b085      	sub	sp, #20
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	3303      	adds	r3, #3
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	021b      	lsls	r3, r3, #8
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	3202      	adds	r2, #2
 800aba0:	7812      	ldrb	r2, [r2, #0]
 800aba2:	4313      	orrs	r3, r2
 800aba4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	021b      	lsls	r3, r3, #8
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	3201      	adds	r2, #1
 800abae:	7812      	ldrb	r2, [r2, #0]
 800abb0:	4313      	orrs	r3, r2
 800abb2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	021b      	lsls	r3, r3, #8
 800abb8:	687a      	ldr	r2, [r7, #4]
 800abba:	7812      	ldrb	r2, [r2, #0]
 800abbc:	4313      	orrs	r3, r2
 800abbe:	60fb      	str	r3, [r7, #12]
	return rv;
 800abc0:	68fb      	ldr	r3, [r7, #12]
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3714      	adds	r7, #20
 800abc6:	46bd      	mov	sp, r7
 800abc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abcc:	4770      	bx	lr

0800abce <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800abce:	b480      	push	{r7}
 800abd0:	b083      	sub	sp, #12
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
 800abd6:	460b      	mov	r3, r1
 800abd8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	1c5a      	adds	r2, r3, #1
 800abde:	607a      	str	r2, [r7, #4]
 800abe0:	887a      	ldrh	r2, [r7, #2]
 800abe2:	b2d2      	uxtb	r2, r2
 800abe4:	701a      	strb	r2, [r3, #0]
 800abe6:	887b      	ldrh	r3, [r7, #2]
 800abe8:	0a1b      	lsrs	r3, r3, #8
 800abea:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	1c5a      	adds	r2, r3, #1
 800abf0:	607a      	str	r2, [r7, #4]
 800abf2:	887a      	ldrh	r2, [r7, #2]
 800abf4:	b2d2      	uxtb	r2, r2
 800abf6:	701a      	strb	r2, [r3, #0]
}
 800abf8:	bf00      	nop
 800abfa:	370c      	adds	r7, #12
 800abfc:	46bd      	mov	sp, r7
 800abfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac02:	4770      	bx	lr

0800ac04 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ac04:	b480      	push	{r7}
 800ac06:	b083      	sub	sp, #12
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
 800ac0c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	1c5a      	adds	r2, r3, #1
 800ac12:	607a      	str	r2, [r7, #4]
 800ac14:	683a      	ldr	r2, [r7, #0]
 800ac16:	b2d2      	uxtb	r2, r2
 800ac18:	701a      	strb	r2, [r3, #0]
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	0a1b      	lsrs	r3, r3, #8
 800ac1e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	1c5a      	adds	r2, r3, #1
 800ac24:	607a      	str	r2, [r7, #4]
 800ac26:	683a      	ldr	r2, [r7, #0]
 800ac28:	b2d2      	uxtb	r2, r2
 800ac2a:	701a      	strb	r2, [r3, #0]
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	0a1b      	lsrs	r3, r3, #8
 800ac30:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	1c5a      	adds	r2, r3, #1
 800ac36:	607a      	str	r2, [r7, #4]
 800ac38:	683a      	ldr	r2, [r7, #0]
 800ac3a:	b2d2      	uxtb	r2, r2
 800ac3c:	701a      	strb	r2, [r3, #0]
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	0a1b      	lsrs	r3, r3, #8
 800ac42:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	1c5a      	adds	r2, r3, #1
 800ac48:	607a      	str	r2, [r7, #4]
 800ac4a:	683a      	ldr	r2, [r7, #0]
 800ac4c:	b2d2      	uxtb	r2, r2
 800ac4e:	701a      	strb	r2, [r3, #0]
}
 800ac50:	bf00      	nop
 800ac52:	370c      	adds	r7, #12
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr

0800ac5c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ac5c:	b480      	push	{r7}
 800ac5e:	b087      	sub	sp, #28
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	60f8      	str	r0, [r7, #12]
 800ac64:	60b9      	str	r1, [r7, #8]
 800ac66:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d00d      	beq.n	800ac92 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ac76:	693a      	ldr	r2, [r7, #16]
 800ac78:	1c53      	adds	r3, r2, #1
 800ac7a:	613b      	str	r3, [r7, #16]
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	1c59      	adds	r1, r3, #1
 800ac80:	6179      	str	r1, [r7, #20]
 800ac82:	7812      	ldrb	r2, [r2, #0]
 800ac84:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	3b01      	subs	r3, #1
 800ac8a:	607b      	str	r3, [r7, #4]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d1f1      	bne.n	800ac76 <mem_cpy+0x1a>
	}
}
 800ac92:	bf00      	nop
 800ac94:	371c      	adds	r7, #28
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr

0800ac9e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ac9e:	b480      	push	{r7}
 800aca0:	b087      	sub	sp, #28
 800aca2:	af00      	add	r7, sp, #0
 800aca4:	60f8      	str	r0, [r7, #12]
 800aca6:	60b9      	str	r1, [r7, #8]
 800aca8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	1c5a      	adds	r2, r3, #1
 800acb2:	617a      	str	r2, [r7, #20]
 800acb4:	68ba      	ldr	r2, [r7, #8]
 800acb6:	b2d2      	uxtb	r2, r2
 800acb8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	3b01      	subs	r3, #1
 800acbe:	607b      	str	r3, [r7, #4]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d1f3      	bne.n	800acae <mem_set+0x10>
}
 800acc6:	bf00      	nop
 800acc8:	bf00      	nop
 800acca:	371c      	adds	r7, #28
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800acd4:	b480      	push	{r7}
 800acd6:	b089      	sub	sp, #36	; 0x24
 800acd8:	af00      	add	r7, sp, #0
 800acda:	60f8      	str	r0, [r7, #12]
 800acdc:	60b9      	str	r1, [r7, #8]
 800acde:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	61fb      	str	r3, [r7, #28]
 800ace4:	68bb      	ldr	r3, [r7, #8]
 800ace6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ace8:	2300      	movs	r3, #0
 800acea:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800acec:	69fb      	ldr	r3, [r7, #28]
 800acee:	1c5a      	adds	r2, r3, #1
 800acf0:	61fa      	str	r2, [r7, #28]
 800acf2:	781b      	ldrb	r3, [r3, #0]
 800acf4:	4619      	mov	r1, r3
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	1c5a      	adds	r2, r3, #1
 800acfa:	61ba      	str	r2, [r7, #24]
 800acfc:	781b      	ldrb	r3, [r3, #0]
 800acfe:	1acb      	subs	r3, r1, r3
 800ad00:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	3b01      	subs	r3, #1
 800ad06:	607b      	str	r3, [r7, #4]
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d002      	beq.n	800ad14 <mem_cmp+0x40>
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d0eb      	beq.n	800acec <mem_cmp+0x18>

	return r;
 800ad14:	697b      	ldr	r3, [r7, #20]
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3724      	adds	r7, #36	; 0x24
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr

0800ad22 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ad22:	b480      	push	{r7}
 800ad24:	b083      	sub	sp, #12
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
 800ad2a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800ad2c:	e002      	b.n	800ad34 <chk_chr+0x12>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	3301      	adds	r3, #1
 800ad32:	607b      	str	r3, [r7, #4]
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	781b      	ldrb	r3, [r3, #0]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d005      	beq.n	800ad48 <chk_chr+0x26>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	781b      	ldrb	r3, [r3, #0]
 800ad40:	461a      	mov	r2, r3
 800ad42:	683b      	ldr	r3, [r7, #0]
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d1f2      	bne.n	800ad2e <chk_chr+0xc>
	return *str;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	781b      	ldrb	r3, [r3, #0]
}
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	370c      	adds	r7, #12
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b085      	sub	sp, #20
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ad62:	2300      	movs	r3, #0
 800ad64:	60bb      	str	r3, [r7, #8]
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	60fb      	str	r3, [r7, #12]
 800ad6a:	e029      	b.n	800adc0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800ad6c:	4a27      	ldr	r2, [pc, #156]	; (800ae0c <chk_lock+0xb4>)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	011b      	lsls	r3, r3, #4
 800ad72:	4413      	add	r3, r2
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d01d      	beq.n	800adb6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ad7a:	4a24      	ldr	r2, [pc, #144]	; (800ae0c <chk_lock+0xb4>)
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	011b      	lsls	r3, r3, #4
 800ad80:	4413      	add	r3, r2
 800ad82:	681a      	ldr	r2, [r3, #0]
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d116      	bne.n	800adba <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ad8c:	4a1f      	ldr	r2, [pc, #124]	; (800ae0c <chk_lock+0xb4>)
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	011b      	lsls	r3, r3, #4
 800ad92:	4413      	add	r3, r2
 800ad94:	3304      	adds	r3, #4
 800ad96:	681a      	ldr	r2, [r3, #0]
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ad9c:	429a      	cmp	r2, r3
 800ad9e:	d10c      	bne.n	800adba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ada0:	4a1a      	ldr	r2, [pc, #104]	; (800ae0c <chk_lock+0xb4>)
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	011b      	lsls	r3, r3, #4
 800ada6:	4413      	add	r3, r2
 800ada8:	3308      	adds	r3, #8
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d102      	bne.n	800adba <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800adb4:	e007      	b.n	800adc6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800adb6:	2301      	movs	r3, #1
 800adb8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	3301      	adds	r3, #1
 800adbe:	60fb      	str	r3, [r7, #12]
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d9d2      	bls.n	800ad6c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	2b02      	cmp	r3, #2
 800adca:	d109      	bne.n	800ade0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d102      	bne.n	800add8 <chk_lock+0x80>
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	2b02      	cmp	r3, #2
 800add6:	d101      	bne.n	800addc <chk_lock+0x84>
 800add8:	2300      	movs	r3, #0
 800adda:	e010      	b.n	800adfe <chk_lock+0xa6>
 800addc:	2312      	movs	r3, #18
 800adde:	e00e      	b.n	800adfe <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d108      	bne.n	800adf8 <chk_lock+0xa0>
 800ade6:	4a09      	ldr	r2, [pc, #36]	; (800ae0c <chk_lock+0xb4>)
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	011b      	lsls	r3, r3, #4
 800adec:	4413      	add	r3, r2
 800adee:	330c      	adds	r3, #12
 800adf0:	881b      	ldrh	r3, [r3, #0]
 800adf2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adf6:	d101      	bne.n	800adfc <chk_lock+0xa4>
 800adf8:	2310      	movs	r3, #16
 800adfa:	e000      	b.n	800adfe <chk_lock+0xa6>
 800adfc:	2300      	movs	r3, #0
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3714      	adds	r7, #20
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr
 800ae0a:	bf00      	nop
 800ae0c:	20001418 	.word	0x20001418

0800ae10 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ae10:	b480      	push	{r7}
 800ae12:	b083      	sub	sp, #12
 800ae14:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ae16:	2300      	movs	r3, #0
 800ae18:	607b      	str	r3, [r7, #4]
 800ae1a:	e002      	b.n	800ae22 <enq_lock+0x12>
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	3301      	adds	r3, #1
 800ae20:	607b      	str	r3, [r7, #4]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2b01      	cmp	r3, #1
 800ae26:	d806      	bhi.n	800ae36 <enq_lock+0x26>
 800ae28:	4a09      	ldr	r2, [pc, #36]	; (800ae50 <enq_lock+0x40>)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	011b      	lsls	r3, r3, #4
 800ae2e:	4413      	add	r3, r2
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d1f2      	bne.n	800ae1c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2b02      	cmp	r3, #2
 800ae3a:	bf14      	ite	ne
 800ae3c:	2301      	movne	r3, #1
 800ae3e:	2300      	moveq	r3, #0
 800ae40:	b2db      	uxtb	r3, r3
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	370c      	adds	r7, #12
 800ae46:	46bd      	mov	sp, r7
 800ae48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop
 800ae50:	20001418 	.word	0x20001418

0800ae54 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ae54:	b480      	push	{r7}
 800ae56:	b085      	sub	sp, #20
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ae5e:	2300      	movs	r3, #0
 800ae60:	60fb      	str	r3, [r7, #12]
 800ae62:	e01f      	b.n	800aea4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ae64:	4a41      	ldr	r2, [pc, #260]	; (800af6c <inc_lock+0x118>)
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	011b      	lsls	r3, r3, #4
 800ae6a:	4413      	add	r3, r2
 800ae6c:	681a      	ldr	r2, [r3, #0]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d113      	bne.n	800ae9e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ae76:	4a3d      	ldr	r2, [pc, #244]	; (800af6c <inc_lock+0x118>)
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	011b      	lsls	r3, r3, #4
 800ae7c:	4413      	add	r3, r2
 800ae7e:	3304      	adds	r3, #4
 800ae80:	681a      	ldr	r2, [r3, #0]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d109      	bne.n	800ae9e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ae8a:	4a38      	ldr	r2, [pc, #224]	; (800af6c <inc_lock+0x118>)
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	011b      	lsls	r3, r3, #4
 800ae90:	4413      	add	r3, r2
 800ae92:	3308      	adds	r3, #8
 800ae94:	681a      	ldr	r2, [r3, #0]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ae9a:	429a      	cmp	r2, r3
 800ae9c:	d006      	beq.n	800aeac <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	3301      	adds	r3, #1
 800aea2:	60fb      	str	r3, [r7, #12]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	2b01      	cmp	r3, #1
 800aea8:	d9dc      	bls.n	800ae64 <inc_lock+0x10>
 800aeaa:	e000      	b.n	800aeae <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800aeac:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	2b02      	cmp	r3, #2
 800aeb2:	d132      	bne.n	800af1a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	60fb      	str	r3, [r7, #12]
 800aeb8:	e002      	b.n	800aec0 <inc_lock+0x6c>
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	3301      	adds	r3, #1
 800aebe:	60fb      	str	r3, [r7, #12]
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2b01      	cmp	r3, #1
 800aec4:	d806      	bhi.n	800aed4 <inc_lock+0x80>
 800aec6:	4a29      	ldr	r2, [pc, #164]	; (800af6c <inc_lock+0x118>)
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	011b      	lsls	r3, r3, #4
 800aecc:	4413      	add	r3, r2
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d1f2      	bne.n	800aeba <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2b02      	cmp	r3, #2
 800aed8:	d101      	bne.n	800aede <inc_lock+0x8a>
 800aeda:	2300      	movs	r3, #0
 800aedc:	e040      	b.n	800af60 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681a      	ldr	r2, [r3, #0]
 800aee2:	4922      	ldr	r1, [pc, #136]	; (800af6c <inc_lock+0x118>)
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	011b      	lsls	r3, r3, #4
 800aee8:	440b      	add	r3, r1
 800aeea:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	689a      	ldr	r2, [r3, #8]
 800aef0:	491e      	ldr	r1, [pc, #120]	; (800af6c <inc_lock+0x118>)
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	011b      	lsls	r3, r3, #4
 800aef6:	440b      	add	r3, r1
 800aef8:	3304      	adds	r3, #4
 800aefa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	695a      	ldr	r2, [r3, #20]
 800af00:	491a      	ldr	r1, [pc, #104]	; (800af6c <inc_lock+0x118>)
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	011b      	lsls	r3, r3, #4
 800af06:	440b      	add	r3, r1
 800af08:	3308      	adds	r3, #8
 800af0a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800af0c:	4a17      	ldr	r2, [pc, #92]	; (800af6c <inc_lock+0x118>)
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	011b      	lsls	r3, r3, #4
 800af12:	4413      	add	r3, r2
 800af14:	330c      	adds	r3, #12
 800af16:	2200      	movs	r2, #0
 800af18:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d009      	beq.n	800af34 <inc_lock+0xe0>
 800af20:	4a12      	ldr	r2, [pc, #72]	; (800af6c <inc_lock+0x118>)
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	011b      	lsls	r3, r3, #4
 800af26:	4413      	add	r3, r2
 800af28:	330c      	adds	r3, #12
 800af2a:	881b      	ldrh	r3, [r3, #0]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d001      	beq.n	800af34 <inc_lock+0xe0>
 800af30:	2300      	movs	r3, #0
 800af32:	e015      	b.n	800af60 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d108      	bne.n	800af4c <inc_lock+0xf8>
 800af3a:	4a0c      	ldr	r2, [pc, #48]	; (800af6c <inc_lock+0x118>)
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	011b      	lsls	r3, r3, #4
 800af40:	4413      	add	r3, r2
 800af42:	330c      	adds	r3, #12
 800af44:	881b      	ldrh	r3, [r3, #0]
 800af46:	3301      	adds	r3, #1
 800af48:	b29a      	uxth	r2, r3
 800af4a:	e001      	b.n	800af50 <inc_lock+0xfc>
 800af4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af50:	4906      	ldr	r1, [pc, #24]	; (800af6c <inc_lock+0x118>)
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	011b      	lsls	r3, r3, #4
 800af56:	440b      	add	r3, r1
 800af58:	330c      	adds	r3, #12
 800af5a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	3301      	adds	r3, #1
}
 800af60:	4618      	mov	r0, r3
 800af62:	3714      	adds	r7, #20
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr
 800af6c:	20001418 	.word	0x20001418

0800af70 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800af70:	b480      	push	{r7}
 800af72:	b085      	sub	sp, #20
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	3b01      	subs	r3, #1
 800af7c:	607b      	str	r3, [r7, #4]
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2b01      	cmp	r3, #1
 800af82:	d825      	bhi.n	800afd0 <dec_lock+0x60>
		n = Files[i].ctr;
 800af84:	4a17      	ldr	r2, [pc, #92]	; (800afe4 <dec_lock+0x74>)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	011b      	lsls	r3, r3, #4
 800af8a:	4413      	add	r3, r2
 800af8c:	330c      	adds	r3, #12
 800af8e:	881b      	ldrh	r3, [r3, #0]
 800af90:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800af92:	89fb      	ldrh	r3, [r7, #14]
 800af94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af98:	d101      	bne.n	800af9e <dec_lock+0x2e>
 800af9a:	2300      	movs	r3, #0
 800af9c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800af9e:	89fb      	ldrh	r3, [r7, #14]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d002      	beq.n	800afaa <dec_lock+0x3a>
 800afa4:	89fb      	ldrh	r3, [r7, #14]
 800afa6:	3b01      	subs	r3, #1
 800afa8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800afaa:	4a0e      	ldr	r2, [pc, #56]	; (800afe4 <dec_lock+0x74>)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	011b      	lsls	r3, r3, #4
 800afb0:	4413      	add	r3, r2
 800afb2:	330c      	adds	r3, #12
 800afb4:	89fa      	ldrh	r2, [r7, #14]
 800afb6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800afb8:	89fb      	ldrh	r3, [r7, #14]
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d105      	bne.n	800afca <dec_lock+0x5a>
 800afbe:	4a09      	ldr	r2, [pc, #36]	; (800afe4 <dec_lock+0x74>)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	011b      	lsls	r3, r3, #4
 800afc4:	4413      	add	r3, r2
 800afc6:	2200      	movs	r2, #0
 800afc8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800afca:	2300      	movs	r3, #0
 800afcc:	737b      	strb	r3, [r7, #13]
 800afce:	e001      	b.n	800afd4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800afd0:	2302      	movs	r3, #2
 800afd2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800afd4:	7b7b      	ldrb	r3, [r7, #13]
}
 800afd6:	4618      	mov	r0, r3
 800afd8:	3714      	adds	r7, #20
 800afda:	46bd      	mov	sp, r7
 800afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe0:	4770      	bx	lr
 800afe2:	bf00      	nop
 800afe4:	20001418 	.word	0x20001418

0800afe8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800afe8:	b480      	push	{r7}
 800afea:	b085      	sub	sp, #20
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800aff0:	2300      	movs	r3, #0
 800aff2:	60fb      	str	r3, [r7, #12]
 800aff4:	e010      	b.n	800b018 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800aff6:	4a0d      	ldr	r2, [pc, #52]	; (800b02c <clear_lock+0x44>)
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	011b      	lsls	r3, r3, #4
 800affc:	4413      	add	r3, r2
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	687a      	ldr	r2, [r7, #4]
 800b002:	429a      	cmp	r2, r3
 800b004:	d105      	bne.n	800b012 <clear_lock+0x2a>
 800b006:	4a09      	ldr	r2, [pc, #36]	; (800b02c <clear_lock+0x44>)
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	011b      	lsls	r3, r3, #4
 800b00c:	4413      	add	r3, r2
 800b00e:	2200      	movs	r2, #0
 800b010:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	3301      	adds	r3, #1
 800b016:	60fb      	str	r3, [r7, #12]
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	d9eb      	bls.n	800aff6 <clear_lock+0xe>
	}
}
 800b01e:	bf00      	nop
 800b020:	bf00      	nop
 800b022:	3714      	adds	r7, #20
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr
 800b02c:	20001418 	.word	0x20001418

0800b030 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b086      	sub	sp, #24
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b038:	2300      	movs	r3, #0
 800b03a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	78db      	ldrb	r3, [r3, #3]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d034      	beq.n	800b0ae <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b048:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	7858      	ldrb	r0, [r3, #1]
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b054:	2301      	movs	r3, #1
 800b056:	697a      	ldr	r2, [r7, #20]
 800b058:	f7ff fd40 	bl	800aadc <disk_write>
 800b05c:	4603      	mov	r3, r0
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d002      	beq.n	800b068 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b062:	2301      	movs	r3, #1
 800b064:	73fb      	strb	r3, [r7, #15]
 800b066:	e022      	b.n	800b0ae <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2200      	movs	r2, #0
 800b06c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	6a1b      	ldr	r3, [r3, #32]
 800b072:	697a      	ldr	r2, [r7, #20]
 800b074:	1ad2      	subs	r2, r2, r3
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	699b      	ldr	r3, [r3, #24]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d217      	bcs.n	800b0ae <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	789b      	ldrb	r3, [r3, #2]
 800b082:	613b      	str	r3, [r7, #16]
 800b084:	e010      	b.n	800b0a8 <sync_window+0x78>
					wsect += fs->fsize;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	699b      	ldr	r3, [r3, #24]
 800b08a:	697a      	ldr	r2, [r7, #20]
 800b08c:	4413      	add	r3, r2
 800b08e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	7858      	ldrb	r0, [r3, #1]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b09a:	2301      	movs	r3, #1
 800b09c:	697a      	ldr	r2, [r7, #20]
 800b09e:	f7ff fd1d 	bl	800aadc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b0a2:	693b      	ldr	r3, [r7, #16]
 800b0a4:	3b01      	subs	r3, #1
 800b0a6:	613b      	str	r3, [r7, #16]
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d8eb      	bhi.n	800b086 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b0ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3718      	adds	r7, #24
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b084      	sub	sp, #16
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ca:	683a      	ldr	r2, [r7, #0]
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	d01b      	beq.n	800b108 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	f7ff ffad 	bl	800b030 <sync_window>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b0da:	7bfb      	ldrb	r3, [r7, #15]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d113      	bne.n	800b108 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	7858      	ldrb	r0, [r3, #1]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	683a      	ldr	r2, [r7, #0]
 800b0ee:	f7ff fcd5 	bl	800aa9c <disk_read>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d004      	beq.n	800b102 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b0f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b0fc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b0fe:	2301      	movs	r3, #1
 800b100:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	683a      	ldr	r2, [r7, #0]
 800b106:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800b108:	7bfb      	ldrb	r3, [r7, #15]
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3710      	adds	r7, #16
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
	...

0800b114 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b084      	sub	sp, #16
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f7ff ff87 	bl	800b030 <sync_window>
 800b122:	4603      	mov	r3, r0
 800b124:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b126:	7bfb      	ldrb	r3, [r7, #15]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d158      	bne.n	800b1de <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	781b      	ldrb	r3, [r3, #0]
 800b130:	2b03      	cmp	r3, #3
 800b132:	d148      	bne.n	800b1c6 <sync_fs+0xb2>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	791b      	ldrb	r3, [r3, #4]
 800b138:	2b01      	cmp	r3, #1
 800b13a:	d144      	bne.n	800b1c6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	3330      	adds	r3, #48	; 0x30
 800b140:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b144:	2100      	movs	r1, #0
 800b146:	4618      	mov	r0, r3
 800b148:	f7ff fda9 	bl	800ac9e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	3330      	adds	r3, #48	; 0x30
 800b150:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b154:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b158:	4618      	mov	r0, r3
 800b15a:	f7ff fd38 	bl	800abce <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	3330      	adds	r3, #48	; 0x30
 800b162:	4921      	ldr	r1, [pc, #132]	; (800b1e8 <sync_fs+0xd4>)
 800b164:	4618      	mov	r0, r3
 800b166:	f7ff fd4d 	bl	800ac04 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	3330      	adds	r3, #48	; 0x30
 800b16e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b172:	491e      	ldr	r1, [pc, #120]	; (800b1ec <sync_fs+0xd8>)
 800b174:	4618      	mov	r0, r3
 800b176:	f7ff fd45 	bl	800ac04 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	3330      	adds	r3, #48	; 0x30
 800b17e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	691b      	ldr	r3, [r3, #16]
 800b186:	4619      	mov	r1, r3
 800b188:	4610      	mov	r0, r2
 800b18a:	f7ff fd3b 	bl	800ac04 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	3330      	adds	r3, #48	; 0x30
 800b192:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	68db      	ldr	r3, [r3, #12]
 800b19a:	4619      	mov	r1, r3
 800b19c:	4610      	mov	r0, r2
 800b19e:	f7ff fd31 	bl	800ac04 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	69db      	ldr	r3, [r3, #28]
 800b1a6:	1c5a      	adds	r2, r3, #1
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	7858      	ldrb	r0, [r3, #1]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	f7ff fc8e 	bl	800aadc <disk_write>
			fs->fsi_flag = 0;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	785b      	ldrb	r3, [r3, #1]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	2100      	movs	r1, #0
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7ff fca4 	bl	800ab1c <disk_ioctl>
 800b1d4:	4603      	mov	r3, r0
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d001      	beq.n	800b1de <sync_fs+0xca>
 800b1da:	2301      	movs	r3, #1
 800b1dc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b1de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3710      	adds	r7, #16
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}
 800b1e8:	41615252 	.word	0x41615252
 800b1ec:	61417272 	.word	0x61417272

0800b1f0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b083      	sub	sp, #12
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
 800b1f8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	3b02      	subs	r3, #2
 800b1fe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	695b      	ldr	r3, [r3, #20]
 800b204:	3b02      	subs	r3, #2
 800b206:	683a      	ldr	r2, [r7, #0]
 800b208:	429a      	cmp	r2, r3
 800b20a:	d301      	bcc.n	800b210 <clust2sect+0x20>
 800b20c:	2300      	movs	r3, #0
 800b20e:	e008      	b.n	800b222 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	895b      	ldrh	r3, [r3, #10]
 800b214:	461a      	mov	r2, r3
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	fb03 f202 	mul.w	r2, r3, r2
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b220:	4413      	add	r3, r2
}
 800b222:	4618      	mov	r0, r3
 800b224:	370c      	adds	r7, #12
 800b226:	46bd      	mov	sp, r7
 800b228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22c:	4770      	bx	lr

0800b22e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b22e:	b580      	push	{r7, lr}
 800b230:	b086      	sub	sp, #24
 800b232:	af00      	add	r7, sp, #0
 800b234:	6078      	str	r0, [r7, #4]
 800b236:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	2b01      	cmp	r3, #1
 800b242:	d904      	bls.n	800b24e <get_fat+0x20>
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	695b      	ldr	r3, [r3, #20]
 800b248:	683a      	ldr	r2, [r7, #0]
 800b24a:	429a      	cmp	r2, r3
 800b24c:	d302      	bcc.n	800b254 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b24e:	2301      	movs	r3, #1
 800b250:	617b      	str	r3, [r7, #20]
 800b252:	e08f      	b.n	800b374 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b254:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b258:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	2b03      	cmp	r3, #3
 800b260:	d062      	beq.n	800b328 <get_fat+0xfa>
 800b262:	2b03      	cmp	r3, #3
 800b264:	dc7c      	bgt.n	800b360 <get_fat+0x132>
 800b266:	2b01      	cmp	r3, #1
 800b268:	d002      	beq.n	800b270 <get_fat+0x42>
 800b26a:	2b02      	cmp	r3, #2
 800b26c:	d042      	beq.n	800b2f4 <get_fat+0xc6>
 800b26e:	e077      	b.n	800b360 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	60fb      	str	r3, [r7, #12]
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	085b      	lsrs	r3, r3, #1
 800b278:	68fa      	ldr	r2, [r7, #12]
 800b27a:	4413      	add	r3, r2
 800b27c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	6a1a      	ldr	r2, [r3, #32]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	0a5b      	lsrs	r3, r3, #9
 800b286:	4413      	add	r3, r2
 800b288:	4619      	mov	r1, r3
 800b28a:	6938      	ldr	r0, [r7, #16]
 800b28c:	f7ff ff14 	bl	800b0b8 <move_window>
 800b290:	4603      	mov	r3, r0
 800b292:	2b00      	cmp	r3, #0
 800b294:	d167      	bne.n	800b366 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	1c5a      	adds	r2, r3, #1
 800b29a:	60fa      	str	r2, [r7, #12]
 800b29c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2a0:	693a      	ldr	r2, [r7, #16]
 800b2a2:	4413      	add	r3, r2
 800b2a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b2a8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b2aa:	693b      	ldr	r3, [r7, #16]
 800b2ac:	6a1a      	ldr	r2, [r3, #32]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	0a5b      	lsrs	r3, r3, #9
 800b2b2:	4413      	add	r3, r2
 800b2b4:	4619      	mov	r1, r3
 800b2b6:	6938      	ldr	r0, [r7, #16]
 800b2b8:	f7ff fefe 	bl	800b0b8 <move_window>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d153      	bne.n	800b36a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2c8:	693a      	ldr	r2, [r7, #16]
 800b2ca:	4413      	add	r3, r2
 800b2cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b2d0:	021b      	lsls	r3, r3, #8
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	f003 0301 	and.w	r3, r3, #1
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d002      	beq.n	800b2ea <get_fat+0xbc>
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	091b      	lsrs	r3, r3, #4
 800b2e8:	e002      	b.n	800b2f0 <get_fat+0xc2>
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2f0:	617b      	str	r3, [r7, #20]
			break;
 800b2f2:	e03f      	b.n	800b374 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	6a1a      	ldr	r2, [r3, #32]
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	0a1b      	lsrs	r3, r3, #8
 800b2fc:	4413      	add	r3, r2
 800b2fe:	4619      	mov	r1, r3
 800b300:	6938      	ldr	r0, [r7, #16]
 800b302:	f7ff fed9 	bl	800b0b8 <move_window>
 800b306:	4603      	mov	r3, r0
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d130      	bne.n	800b36e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	005b      	lsls	r3, r3, #1
 800b316:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b31a:	4413      	add	r3, r2
 800b31c:	4618      	mov	r0, r3
 800b31e:	f7ff fc1b 	bl	800ab58 <ld_word>
 800b322:	4603      	mov	r3, r0
 800b324:	617b      	str	r3, [r7, #20]
			break;
 800b326:	e025      	b.n	800b374 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	6a1a      	ldr	r2, [r3, #32]
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	09db      	lsrs	r3, r3, #7
 800b330:	4413      	add	r3, r2
 800b332:	4619      	mov	r1, r3
 800b334:	6938      	ldr	r0, [r7, #16]
 800b336:	f7ff febf 	bl	800b0b8 <move_window>
 800b33a:	4603      	mov	r3, r0
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d118      	bne.n	800b372 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	009b      	lsls	r3, r3, #2
 800b34a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b34e:	4413      	add	r3, r2
 800b350:	4618      	mov	r0, r3
 800b352:	f7ff fc19 	bl	800ab88 <ld_dword>
 800b356:	4603      	mov	r3, r0
 800b358:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b35c:	617b      	str	r3, [r7, #20]
			break;
 800b35e:	e009      	b.n	800b374 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b360:	2301      	movs	r3, #1
 800b362:	617b      	str	r3, [r7, #20]
 800b364:	e006      	b.n	800b374 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b366:	bf00      	nop
 800b368:	e004      	b.n	800b374 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b36a:	bf00      	nop
 800b36c:	e002      	b.n	800b374 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b36e:	bf00      	nop
 800b370:	e000      	b.n	800b374 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b372:	bf00      	nop
		}
	}

	return val;
 800b374:	697b      	ldr	r3, [r7, #20]
}
 800b376:	4618      	mov	r0, r3
 800b378:	3718      	adds	r7, #24
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}

0800b37e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b37e:	b590      	push	{r4, r7, lr}
 800b380:	b089      	sub	sp, #36	; 0x24
 800b382:	af00      	add	r7, sp, #0
 800b384:	60f8      	str	r0, [r7, #12]
 800b386:	60b9      	str	r1, [r7, #8]
 800b388:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b38a:	2302      	movs	r3, #2
 800b38c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	2b01      	cmp	r3, #1
 800b392:	f240 80d2 	bls.w	800b53a <put_fat+0x1bc>
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	695b      	ldr	r3, [r3, #20]
 800b39a:	68ba      	ldr	r2, [r7, #8]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	f080 80cc 	bcs.w	800b53a <put_fat+0x1bc>
		switch (fs->fs_type) {
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	781b      	ldrb	r3, [r3, #0]
 800b3a6:	2b03      	cmp	r3, #3
 800b3a8:	f000 8096 	beq.w	800b4d8 <put_fat+0x15a>
 800b3ac:	2b03      	cmp	r3, #3
 800b3ae:	f300 80cd 	bgt.w	800b54c <put_fat+0x1ce>
 800b3b2:	2b01      	cmp	r3, #1
 800b3b4:	d002      	beq.n	800b3bc <put_fat+0x3e>
 800b3b6:	2b02      	cmp	r3, #2
 800b3b8:	d06e      	beq.n	800b498 <put_fat+0x11a>
 800b3ba:	e0c7      	b.n	800b54c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	61bb      	str	r3, [r7, #24]
 800b3c0:	69bb      	ldr	r3, [r7, #24]
 800b3c2:	085b      	lsrs	r3, r3, #1
 800b3c4:	69ba      	ldr	r2, [r7, #24]
 800b3c6:	4413      	add	r3, r2
 800b3c8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	6a1a      	ldr	r2, [r3, #32]
 800b3ce:	69bb      	ldr	r3, [r7, #24]
 800b3d0:	0a5b      	lsrs	r3, r3, #9
 800b3d2:	4413      	add	r3, r2
 800b3d4:	4619      	mov	r1, r3
 800b3d6:	68f8      	ldr	r0, [r7, #12]
 800b3d8:	f7ff fe6e 	bl	800b0b8 <move_window>
 800b3dc:	4603      	mov	r3, r0
 800b3de:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b3e0:	7ffb      	ldrb	r3, [r7, #31]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	f040 80ab 	bne.w	800b53e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b3ee:	69bb      	ldr	r3, [r7, #24]
 800b3f0:	1c59      	adds	r1, r3, #1
 800b3f2:	61b9      	str	r1, [r7, #24]
 800b3f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3f8:	4413      	add	r3, r2
 800b3fa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b3fc:	68bb      	ldr	r3, [r7, #8]
 800b3fe:	f003 0301 	and.w	r3, r3, #1
 800b402:	2b00      	cmp	r3, #0
 800b404:	d00d      	beq.n	800b422 <put_fat+0xa4>
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	781b      	ldrb	r3, [r3, #0]
 800b40a:	b25b      	sxtb	r3, r3
 800b40c:	f003 030f 	and.w	r3, r3, #15
 800b410:	b25a      	sxtb	r2, r3
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	b2db      	uxtb	r3, r3
 800b416:	011b      	lsls	r3, r3, #4
 800b418:	b25b      	sxtb	r3, r3
 800b41a:	4313      	orrs	r3, r2
 800b41c:	b25b      	sxtb	r3, r3
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	e001      	b.n	800b426 <put_fat+0xa8>
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	b2db      	uxtb	r3, r3
 800b426:	697a      	ldr	r2, [r7, #20]
 800b428:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	2201      	movs	r2, #1
 800b42e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	6a1a      	ldr	r2, [r3, #32]
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	0a5b      	lsrs	r3, r3, #9
 800b438:	4413      	add	r3, r2
 800b43a:	4619      	mov	r1, r3
 800b43c:	68f8      	ldr	r0, [r7, #12]
 800b43e:	f7ff fe3b 	bl	800b0b8 <move_window>
 800b442:	4603      	mov	r3, r0
 800b444:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b446:	7ffb      	ldrb	r3, [r7, #31]
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d17a      	bne.n	800b542 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b452:	69bb      	ldr	r3, [r7, #24]
 800b454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b458:	4413      	add	r3, r2
 800b45a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	f003 0301 	and.w	r3, r3, #1
 800b462:	2b00      	cmp	r3, #0
 800b464:	d003      	beq.n	800b46e <put_fat+0xf0>
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	091b      	lsrs	r3, r3, #4
 800b46a:	b2db      	uxtb	r3, r3
 800b46c:	e00e      	b.n	800b48c <put_fat+0x10e>
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	b25b      	sxtb	r3, r3
 800b474:	f023 030f 	bic.w	r3, r3, #15
 800b478:	b25a      	sxtb	r2, r3
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	0a1b      	lsrs	r3, r3, #8
 800b47e:	b25b      	sxtb	r3, r3
 800b480:	f003 030f 	and.w	r3, r3, #15
 800b484:	b25b      	sxtb	r3, r3
 800b486:	4313      	orrs	r3, r2
 800b488:	b25b      	sxtb	r3, r3
 800b48a:	b2db      	uxtb	r3, r3
 800b48c:	697a      	ldr	r2, [r7, #20]
 800b48e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	2201      	movs	r2, #1
 800b494:	70da      	strb	r2, [r3, #3]
			break;
 800b496:	e059      	b.n	800b54c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	6a1a      	ldr	r2, [r3, #32]
 800b49c:	68bb      	ldr	r3, [r7, #8]
 800b49e:	0a1b      	lsrs	r3, r3, #8
 800b4a0:	4413      	add	r3, r2
 800b4a2:	4619      	mov	r1, r3
 800b4a4:	68f8      	ldr	r0, [r7, #12]
 800b4a6:	f7ff fe07 	bl	800b0b8 <move_window>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b4ae:	7ffb      	ldrb	r3, [r7, #31]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d148      	bne.n	800b546 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	005b      	lsls	r3, r3, #1
 800b4be:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b4c2:	4413      	add	r3, r2
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	b292      	uxth	r2, r2
 800b4c8:	4611      	mov	r1, r2
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f7ff fb7f 	bl	800abce <st_word>
			fs->wflag = 1;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	70da      	strb	r2, [r3, #3]
			break;
 800b4d6:	e039      	b.n	800b54c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	6a1a      	ldr	r2, [r3, #32]
 800b4dc:	68bb      	ldr	r3, [r7, #8]
 800b4de:	09db      	lsrs	r3, r3, #7
 800b4e0:	4413      	add	r3, r2
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	68f8      	ldr	r0, [r7, #12]
 800b4e6:	f7ff fde7 	bl	800b0b8 <move_window>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b4ee:	7ffb      	ldrb	r3, [r7, #31]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d12a      	bne.n	800b54a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	009b      	lsls	r3, r3, #2
 800b504:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b508:	4413      	add	r3, r2
 800b50a:	4618      	mov	r0, r3
 800b50c:	f7ff fb3c 	bl	800ab88 <ld_dword>
 800b510:	4603      	mov	r3, r0
 800b512:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b516:	4323      	orrs	r3, r4
 800b518:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	009b      	lsls	r3, r3, #2
 800b524:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b528:	4413      	add	r3, r2
 800b52a:	6879      	ldr	r1, [r7, #4]
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7ff fb69 	bl	800ac04 <st_dword>
			fs->wflag = 1;
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	2201      	movs	r2, #1
 800b536:	70da      	strb	r2, [r3, #3]
			break;
 800b538:	e008      	b.n	800b54c <put_fat+0x1ce>
		}
	}
 800b53a:	bf00      	nop
 800b53c:	e006      	b.n	800b54c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b53e:	bf00      	nop
 800b540:	e004      	b.n	800b54c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b542:	bf00      	nop
 800b544:	e002      	b.n	800b54c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b546:	bf00      	nop
 800b548:	e000      	b.n	800b54c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800b54a:	bf00      	nop
	return res;
 800b54c:	7ffb      	ldrb	r3, [r7, #31]
}
 800b54e:	4618      	mov	r0, r3
 800b550:	3724      	adds	r7, #36	; 0x24
 800b552:	46bd      	mov	sp, r7
 800b554:	bd90      	pop	{r4, r7, pc}

0800b556 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b556:	b580      	push	{r7, lr}
 800b558:	b088      	sub	sp, #32
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	60f8      	str	r0, [r7, #12]
 800b55e:	60b9      	str	r1, [r7, #8]
 800b560:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b562:	2300      	movs	r3, #0
 800b564:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b56c:	68bb      	ldr	r3, [r7, #8]
 800b56e:	2b01      	cmp	r3, #1
 800b570:	d904      	bls.n	800b57c <remove_chain+0x26>
 800b572:	69bb      	ldr	r3, [r7, #24]
 800b574:	695b      	ldr	r3, [r3, #20]
 800b576:	68ba      	ldr	r2, [r7, #8]
 800b578:	429a      	cmp	r2, r3
 800b57a:	d301      	bcc.n	800b580 <remove_chain+0x2a>
 800b57c:	2302      	movs	r3, #2
 800b57e:	e04b      	b.n	800b618 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d00c      	beq.n	800b5a0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b586:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b58a:	6879      	ldr	r1, [r7, #4]
 800b58c:	69b8      	ldr	r0, [r7, #24]
 800b58e:	f7ff fef6 	bl	800b37e <put_fat>
 800b592:	4603      	mov	r3, r0
 800b594:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b596:	7ffb      	ldrb	r3, [r7, #31]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d001      	beq.n	800b5a0 <remove_chain+0x4a>
 800b59c:	7ffb      	ldrb	r3, [r7, #31]
 800b59e:	e03b      	b.n	800b618 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b5a0:	68b9      	ldr	r1, [r7, #8]
 800b5a2:	68f8      	ldr	r0, [r7, #12]
 800b5a4:	f7ff fe43 	bl	800b22e <get_fat>
 800b5a8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d031      	beq.n	800b614 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d101      	bne.n	800b5ba <remove_chain+0x64>
 800b5b6:	2302      	movs	r3, #2
 800b5b8:	e02e      	b.n	800b618 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b5ba:	697b      	ldr	r3, [r7, #20]
 800b5bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5c0:	d101      	bne.n	800b5c6 <remove_chain+0x70>
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	e028      	b.n	800b618 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	68b9      	ldr	r1, [r7, #8]
 800b5ca:	69b8      	ldr	r0, [r7, #24]
 800b5cc:	f7ff fed7 	bl	800b37e <put_fat>
 800b5d0:	4603      	mov	r3, r0
 800b5d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b5d4:	7ffb      	ldrb	r3, [r7, #31]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d001      	beq.n	800b5de <remove_chain+0x88>
 800b5da:	7ffb      	ldrb	r3, [r7, #31]
 800b5dc:	e01c      	b.n	800b618 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b5de:	69bb      	ldr	r3, [r7, #24]
 800b5e0:	691a      	ldr	r2, [r3, #16]
 800b5e2:	69bb      	ldr	r3, [r7, #24]
 800b5e4:	695b      	ldr	r3, [r3, #20]
 800b5e6:	3b02      	subs	r3, #2
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	d20b      	bcs.n	800b604 <remove_chain+0xae>
			fs->free_clst++;
 800b5ec:	69bb      	ldr	r3, [r7, #24]
 800b5ee:	691b      	ldr	r3, [r3, #16]
 800b5f0:	1c5a      	adds	r2, r3, #1
 800b5f2:	69bb      	ldr	r3, [r7, #24]
 800b5f4:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800b5f6:	69bb      	ldr	r3, [r7, #24]
 800b5f8:	791b      	ldrb	r3, [r3, #4]
 800b5fa:	f043 0301 	orr.w	r3, r3, #1
 800b5fe:	b2da      	uxtb	r2, r3
 800b600:	69bb      	ldr	r3, [r7, #24]
 800b602:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b608:	69bb      	ldr	r3, [r7, #24]
 800b60a:	695b      	ldr	r3, [r3, #20]
 800b60c:	68ba      	ldr	r2, [r7, #8]
 800b60e:	429a      	cmp	r2, r3
 800b610:	d3c6      	bcc.n	800b5a0 <remove_chain+0x4a>
 800b612:	e000      	b.n	800b616 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b614:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b616:	2300      	movs	r3, #0
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3720      	adds	r7, #32
 800b61c:	46bd      	mov	sp, r7
 800b61e:	bd80      	pop	{r7, pc}

0800b620 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b088      	sub	sp, #32
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b630:	683b      	ldr	r3, [r7, #0]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d10d      	bne.n	800b652 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b636:	693b      	ldr	r3, [r7, #16]
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b63c:	69bb      	ldr	r3, [r7, #24]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d004      	beq.n	800b64c <create_chain+0x2c>
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	695b      	ldr	r3, [r3, #20]
 800b646:	69ba      	ldr	r2, [r7, #24]
 800b648:	429a      	cmp	r2, r3
 800b64a:	d31b      	bcc.n	800b684 <create_chain+0x64>
 800b64c:	2301      	movs	r3, #1
 800b64e:	61bb      	str	r3, [r7, #24]
 800b650:	e018      	b.n	800b684 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b652:	6839      	ldr	r1, [r7, #0]
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f7ff fdea 	bl	800b22e <get_fat>
 800b65a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	2b01      	cmp	r3, #1
 800b660:	d801      	bhi.n	800b666 <create_chain+0x46>
 800b662:	2301      	movs	r3, #1
 800b664:	e070      	b.n	800b748 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b66c:	d101      	bne.n	800b672 <create_chain+0x52>
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	e06a      	b.n	800b748 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b672:	693b      	ldr	r3, [r7, #16]
 800b674:	695b      	ldr	r3, [r3, #20]
 800b676:	68fa      	ldr	r2, [r7, #12]
 800b678:	429a      	cmp	r2, r3
 800b67a:	d201      	bcs.n	800b680 <create_chain+0x60>
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	e063      	b.n	800b748 <create_chain+0x128>
		scl = clst;
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b684:	69bb      	ldr	r3, [r7, #24]
 800b686:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b688:	69fb      	ldr	r3, [r7, #28]
 800b68a:	3301      	adds	r3, #1
 800b68c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	695b      	ldr	r3, [r3, #20]
 800b692:	69fa      	ldr	r2, [r7, #28]
 800b694:	429a      	cmp	r2, r3
 800b696:	d307      	bcc.n	800b6a8 <create_chain+0x88>
				ncl = 2;
 800b698:	2302      	movs	r3, #2
 800b69a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b69c:	69fa      	ldr	r2, [r7, #28]
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d901      	bls.n	800b6a8 <create_chain+0x88>
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	e04f      	b.n	800b748 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b6a8:	69f9      	ldr	r1, [r7, #28]
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f7ff fdbf 	bl	800b22e <get_fat>
 800b6b0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d00e      	beq.n	800b6d6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	2b01      	cmp	r3, #1
 800b6bc:	d003      	beq.n	800b6c6 <create_chain+0xa6>
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b6c4:	d101      	bne.n	800b6ca <create_chain+0xaa>
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	e03e      	b.n	800b748 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b6ca:	69fa      	ldr	r2, [r7, #28]
 800b6cc:	69bb      	ldr	r3, [r7, #24]
 800b6ce:	429a      	cmp	r2, r3
 800b6d0:	d1da      	bne.n	800b688 <create_chain+0x68>
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	e038      	b.n	800b748 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b6d6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b6d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b6dc:	69f9      	ldr	r1, [r7, #28]
 800b6de:	6938      	ldr	r0, [r7, #16]
 800b6e0:	f7ff fe4d 	bl	800b37e <put_fat>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b6e8:	7dfb      	ldrb	r3, [r7, #23]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d109      	bne.n	800b702 <create_chain+0xe2>
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d006      	beq.n	800b702 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b6f4:	69fa      	ldr	r2, [r7, #28]
 800b6f6:	6839      	ldr	r1, [r7, #0]
 800b6f8:	6938      	ldr	r0, [r7, #16]
 800b6fa:	f7ff fe40 	bl	800b37e <put_fat>
 800b6fe:	4603      	mov	r3, r0
 800b700:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b702:	7dfb      	ldrb	r3, [r7, #23]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d116      	bne.n	800b736 <create_chain+0x116>
		fs->last_clst = ncl;
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	69fa      	ldr	r2, [r7, #28]
 800b70c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b70e:	693b      	ldr	r3, [r7, #16]
 800b710:	691a      	ldr	r2, [r3, #16]
 800b712:	693b      	ldr	r3, [r7, #16]
 800b714:	695b      	ldr	r3, [r3, #20]
 800b716:	3b02      	subs	r3, #2
 800b718:	429a      	cmp	r2, r3
 800b71a:	d804      	bhi.n	800b726 <create_chain+0x106>
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	691b      	ldr	r3, [r3, #16]
 800b720:	1e5a      	subs	r2, r3, #1
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	791b      	ldrb	r3, [r3, #4]
 800b72a:	f043 0301 	orr.w	r3, r3, #1
 800b72e:	b2da      	uxtb	r2, r3
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	711a      	strb	r2, [r3, #4]
 800b734:	e007      	b.n	800b746 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b736:	7dfb      	ldrb	r3, [r7, #23]
 800b738:	2b01      	cmp	r3, #1
 800b73a:	d102      	bne.n	800b742 <create_chain+0x122>
 800b73c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b740:	e000      	b.n	800b744 <create_chain+0x124>
 800b742:	2301      	movs	r3, #1
 800b744:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b746:	69fb      	ldr	r3, [r7, #28]
}
 800b748:	4618      	mov	r0, r3
 800b74a:	3720      	adds	r7, #32
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b750:	b480      	push	{r7}
 800b752:	b087      	sub	sp, #28
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b764:	3304      	adds	r3, #4
 800b766:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	0a5b      	lsrs	r3, r3, #9
 800b76c:	68fa      	ldr	r2, [r7, #12]
 800b76e:	8952      	ldrh	r2, [r2, #10]
 800b770:	fbb3 f3f2 	udiv	r3, r3, r2
 800b774:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	1d1a      	adds	r2, r3, #4
 800b77a:	613a      	str	r2, [r7, #16]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b780:	68bb      	ldr	r3, [r7, #8]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d101      	bne.n	800b78a <clmt_clust+0x3a>
 800b786:	2300      	movs	r3, #0
 800b788:	e010      	b.n	800b7ac <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b78a:	697a      	ldr	r2, [r7, #20]
 800b78c:	68bb      	ldr	r3, [r7, #8]
 800b78e:	429a      	cmp	r2, r3
 800b790:	d307      	bcc.n	800b7a2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b792:	697a      	ldr	r2, [r7, #20]
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	1ad3      	subs	r3, r2, r3
 800b798:	617b      	str	r3, [r7, #20]
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	3304      	adds	r3, #4
 800b79e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b7a0:	e7e9      	b.n	800b776 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800b7a2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	681a      	ldr	r2, [r3, #0]
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	4413      	add	r3, r2
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	371c      	adds	r7, #28
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b086      	sub	sp, #24
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800b7c8:	683b      	ldr	r3, [r7, #0]
 800b7ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b7ce:	d204      	bcs.n	800b7da <dir_sdi+0x22>
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	f003 031f 	and.w	r3, r3, #31
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d001      	beq.n	800b7de <dir_sdi+0x26>
		return FR_INT_ERR;
 800b7da:	2302      	movs	r3, #2
 800b7dc:	e063      	b.n	800b8a6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	683a      	ldr	r2, [r7, #0]
 800b7e2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	689b      	ldr	r3, [r3, #8]
 800b7e8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b7ea:	697b      	ldr	r3, [r7, #20]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d106      	bne.n	800b7fe <dir_sdi+0x46>
 800b7f0:	693b      	ldr	r3, [r7, #16]
 800b7f2:	781b      	ldrb	r3, [r3, #0]
 800b7f4:	2b02      	cmp	r3, #2
 800b7f6:	d902      	bls.n	800b7fe <dir_sdi+0x46>
		clst = fs->dirbase;
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7fc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b7fe:	697b      	ldr	r3, [r7, #20]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d10c      	bne.n	800b81e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b804:	683b      	ldr	r3, [r7, #0]
 800b806:	095b      	lsrs	r3, r3, #5
 800b808:	693a      	ldr	r2, [r7, #16]
 800b80a:	8912      	ldrh	r2, [r2, #8]
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d301      	bcc.n	800b814 <dir_sdi+0x5c>
 800b810:	2302      	movs	r3, #2
 800b812:	e048      	b.n	800b8a6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b814:	693b      	ldr	r3, [r7, #16]
 800b816:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	61da      	str	r2, [r3, #28]
 800b81c:	e029      	b.n	800b872 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	895b      	ldrh	r3, [r3, #10]
 800b822:	025b      	lsls	r3, r3, #9
 800b824:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b826:	e019      	b.n	800b85c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6979      	ldr	r1, [r7, #20]
 800b82c:	4618      	mov	r0, r3
 800b82e:	f7ff fcfe 	bl	800b22e <get_fat>
 800b832:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b83a:	d101      	bne.n	800b840 <dir_sdi+0x88>
 800b83c:	2301      	movs	r3, #1
 800b83e:	e032      	b.n	800b8a6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b840:	697b      	ldr	r3, [r7, #20]
 800b842:	2b01      	cmp	r3, #1
 800b844:	d904      	bls.n	800b850 <dir_sdi+0x98>
 800b846:	693b      	ldr	r3, [r7, #16]
 800b848:	695b      	ldr	r3, [r3, #20]
 800b84a:	697a      	ldr	r2, [r7, #20]
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d301      	bcc.n	800b854 <dir_sdi+0x9c>
 800b850:	2302      	movs	r3, #2
 800b852:	e028      	b.n	800b8a6 <dir_sdi+0xee>
			ofs -= csz;
 800b854:	683a      	ldr	r2, [r7, #0]
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	1ad3      	subs	r3, r2, r3
 800b85a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b85c:	683a      	ldr	r2, [r7, #0]
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	429a      	cmp	r2, r3
 800b862:	d2e1      	bcs.n	800b828 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b864:	6979      	ldr	r1, [r7, #20]
 800b866:	6938      	ldr	r0, [r7, #16]
 800b868:	f7ff fcc2 	bl	800b1f0 <clust2sect>
 800b86c:	4602      	mov	r2, r0
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	697a      	ldr	r2, [r7, #20]
 800b876:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	69db      	ldr	r3, [r3, #28]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d101      	bne.n	800b884 <dir_sdi+0xcc>
 800b880:	2302      	movs	r3, #2
 800b882:	e010      	b.n	800b8a6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	69da      	ldr	r2, [r3, #28]
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	0a5b      	lsrs	r3, r3, #9
 800b88c:	441a      	add	r2, r3
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b89e:	441a      	add	r2, r3
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b8a4:	2300      	movs	r3, #0
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3718      	adds	r7, #24
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	bd80      	pop	{r7, pc}

0800b8ae <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b8ae:	b580      	push	{r7, lr}
 800b8b0:	b086      	sub	sp, #24
 800b8b2:	af00      	add	r7, sp, #0
 800b8b4:	6078      	str	r0, [r7, #4]
 800b8b6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	695b      	ldr	r3, [r3, #20]
 800b8c2:	3320      	adds	r3, #32
 800b8c4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	69db      	ldr	r3, [r3, #28]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d003      	beq.n	800b8d6 <dir_next+0x28>
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b8d4:	d301      	bcc.n	800b8da <dir_next+0x2c>
 800b8d6:	2304      	movs	r3, #4
 800b8d8:	e0aa      	b.n	800ba30 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	f040 8098 	bne.w	800ba16 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	69db      	ldr	r3, [r3, #28]
 800b8ea:	1c5a      	adds	r2, r3, #1
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	699b      	ldr	r3, [r3, #24]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d10b      	bne.n	800b910 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	095b      	lsrs	r3, r3, #5
 800b8fc:	68fa      	ldr	r2, [r7, #12]
 800b8fe:	8912      	ldrh	r2, [r2, #8]
 800b900:	4293      	cmp	r3, r2
 800b902:	f0c0 8088 	bcc.w	800ba16 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	2200      	movs	r2, #0
 800b90a:	61da      	str	r2, [r3, #28]
 800b90c:	2304      	movs	r3, #4
 800b90e:	e08f      	b.n	800ba30 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	0a5b      	lsrs	r3, r3, #9
 800b914:	68fa      	ldr	r2, [r7, #12]
 800b916:	8952      	ldrh	r2, [r2, #10]
 800b918:	3a01      	subs	r2, #1
 800b91a:	4013      	ands	r3, r2
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d17a      	bne.n	800ba16 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b920:	687a      	ldr	r2, [r7, #4]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	699b      	ldr	r3, [r3, #24]
 800b926:	4619      	mov	r1, r3
 800b928:	4610      	mov	r0, r2
 800b92a:	f7ff fc80 	bl	800b22e <get_fat>
 800b92e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	2b01      	cmp	r3, #1
 800b934:	d801      	bhi.n	800b93a <dir_next+0x8c>
 800b936:	2302      	movs	r3, #2
 800b938:	e07a      	b.n	800ba30 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b93a:	697b      	ldr	r3, [r7, #20]
 800b93c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b940:	d101      	bne.n	800b946 <dir_next+0x98>
 800b942:	2301      	movs	r3, #1
 800b944:	e074      	b.n	800ba30 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b946:	68fb      	ldr	r3, [r7, #12]
 800b948:	695b      	ldr	r3, [r3, #20]
 800b94a:	697a      	ldr	r2, [r7, #20]
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d358      	bcc.n	800ba02 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d104      	bne.n	800b960 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2200      	movs	r2, #0
 800b95a:	61da      	str	r2, [r3, #28]
 800b95c:	2304      	movs	r3, #4
 800b95e:	e067      	b.n	800ba30 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b960:	687a      	ldr	r2, [r7, #4]
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	699b      	ldr	r3, [r3, #24]
 800b966:	4619      	mov	r1, r3
 800b968:	4610      	mov	r0, r2
 800b96a:	f7ff fe59 	bl	800b620 <create_chain>
 800b96e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d101      	bne.n	800b97a <dir_next+0xcc>
 800b976:	2307      	movs	r3, #7
 800b978:	e05a      	b.n	800ba30 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	2b01      	cmp	r3, #1
 800b97e:	d101      	bne.n	800b984 <dir_next+0xd6>
 800b980:	2302      	movs	r3, #2
 800b982:	e055      	b.n	800ba30 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b984:	697b      	ldr	r3, [r7, #20]
 800b986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b98a:	d101      	bne.n	800b990 <dir_next+0xe2>
 800b98c:	2301      	movs	r3, #1
 800b98e:	e04f      	b.n	800ba30 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b990:	68f8      	ldr	r0, [r7, #12]
 800b992:	f7ff fb4d 	bl	800b030 <sync_window>
 800b996:	4603      	mov	r3, r0
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d001      	beq.n	800b9a0 <dir_next+0xf2>
 800b99c:	2301      	movs	r3, #1
 800b99e:	e047      	b.n	800ba30 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	3330      	adds	r3, #48	; 0x30
 800b9a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9a8:	2100      	movs	r1, #0
 800b9aa:	4618      	mov	r0, r3
 800b9ac:	f7ff f977 	bl	800ac9e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b9b0:	2300      	movs	r3, #0
 800b9b2:	613b      	str	r3, [r7, #16]
 800b9b4:	6979      	ldr	r1, [r7, #20]
 800b9b6:	68f8      	ldr	r0, [r7, #12]
 800b9b8:	f7ff fc1a 	bl	800b1f0 <clust2sect>
 800b9bc:	4602      	mov	r2, r0
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	62da      	str	r2, [r3, #44]	; 0x2c
 800b9c2:	e012      	b.n	800b9ea <dir_next+0x13c>
						fs->wflag = 1;
 800b9c4:	68fb      	ldr	r3, [r7, #12]
 800b9c6:	2201      	movs	r2, #1
 800b9c8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b9ca:	68f8      	ldr	r0, [r7, #12]
 800b9cc:	f7ff fb30 	bl	800b030 <sync_window>
 800b9d0:	4603      	mov	r3, r0
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d001      	beq.n	800b9da <dir_next+0x12c>
 800b9d6:	2301      	movs	r3, #1
 800b9d8:	e02a      	b.n	800ba30 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	3301      	adds	r3, #1
 800b9de:	613b      	str	r3, [r7, #16]
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9e4:	1c5a      	adds	r2, r3, #1
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	62da      	str	r2, [r3, #44]	; 0x2c
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	895b      	ldrh	r3, [r3, #10]
 800b9ee:	461a      	mov	r2, r3
 800b9f0:	693b      	ldr	r3, [r7, #16]
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d3e6      	bcc.n	800b9c4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b9fa:	693b      	ldr	r3, [r7, #16]
 800b9fc:	1ad2      	subs	r2, r2, r3
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	697a      	ldr	r2, [r7, #20]
 800ba06:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ba08:	6979      	ldr	r1, [r7, #20]
 800ba0a:	68f8      	ldr	r0, [r7, #12]
 800ba0c:	f7ff fbf0 	bl	800b1f0 <clust2sect>
 800ba10:	4602      	mov	r2, r0
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	68ba      	ldr	r2, [r7, #8]
 800ba1a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba28:	441a      	add	r2, r3
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ba2e:	2300      	movs	r3, #0
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	3718      	adds	r7, #24
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b086      	sub	sp, #24
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ba48:	2100      	movs	r1, #0
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f7ff feb4 	bl	800b7b8 <dir_sdi>
 800ba50:	4603      	mov	r3, r0
 800ba52:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ba54:	7dfb      	ldrb	r3, [r7, #23]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d12b      	bne.n	800bab2 <dir_alloc+0x7a>
		n = 0;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	69db      	ldr	r3, [r3, #28]
 800ba62:	4619      	mov	r1, r3
 800ba64:	68f8      	ldr	r0, [r7, #12]
 800ba66:	f7ff fb27 	bl	800b0b8 <move_window>
 800ba6a:	4603      	mov	r3, r0
 800ba6c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ba6e:	7dfb      	ldrb	r3, [r7, #23]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d11d      	bne.n	800bab0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	6a1b      	ldr	r3, [r3, #32]
 800ba78:	781b      	ldrb	r3, [r3, #0]
 800ba7a:	2be5      	cmp	r3, #229	; 0xe5
 800ba7c:	d004      	beq.n	800ba88 <dir_alloc+0x50>
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6a1b      	ldr	r3, [r3, #32]
 800ba82:	781b      	ldrb	r3, [r3, #0]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d107      	bne.n	800ba98 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	3301      	adds	r3, #1
 800ba8c:	613b      	str	r3, [r7, #16]
 800ba8e:	693a      	ldr	r2, [r7, #16]
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	429a      	cmp	r2, r3
 800ba94:	d102      	bne.n	800ba9c <dir_alloc+0x64>
 800ba96:	e00c      	b.n	800bab2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ba98:	2300      	movs	r3, #0
 800ba9a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ba9c:	2101      	movs	r1, #1
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f7ff ff05 	bl	800b8ae <dir_next>
 800baa4:	4603      	mov	r3, r0
 800baa6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800baa8:	7dfb      	ldrb	r3, [r7, #23]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d0d7      	beq.n	800ba5e <dir_alloc+0x26>
 800baae:	e000      	b.n	800bab2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bab0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bab2:	7dfb      	ldrb	r3, [r7, #23]
 800bab4:	2b04      	cmp	r3, #4
 800bab6:	d101      	bne.n	800babc <dir_alloc+0x84>
 800bab8:	2307      	movs	r3, #7
 800baba:	75fb      	strb	r3, [r7, #23]
	return res;
 800babc:	7dfb      	ldrb	r3, [r7, #23]
}
 800babe:	4618      	mov	r0, r3
 800bac0:	3718      	adds	r7, #24
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}

0800bac6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bac6:	b580      	push	{r7, lr}
 800bac8:	b084      	sub	sp, #16
 800baca:	af00      	add	r7, sp, #0
 800bacc:	6078      	str	r0, [r7, #4]
 800bace:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bad0:	683b      	ldr	r3, [r7, #0]
 800bad2:	331a      	adds	r3, #26
 800bad4:	4618      	mov	r0, r3
 800bad6:	f7ff f83f 	bl	800ab58 <ld_word>
 800bada:	4603      	mov	r3, r0
 800badc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	2b03      	cmp	r3, #3
 800bae4:	d109      	bne.n	800bafa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	3314      	adds	r3, #20
 800baea:	4618      	mov	r0, r3
 800baec:	f7ff f834 	bl	800ab58 <ld_word>
 800baf0:	4603      	mov	r3, r0
 800baf2:	041b      	lsls	r3, r3, #16
 800baf4:	68fa      	ldr	r2, [r7, #12]
 800baf6:	4313      	orrs	r3, r2
 800baf8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bafa:	68fb      	ldr	r3, [r7, #12]
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3710      	adds	r7, #16
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b084      	sub	sp, #16
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60f8      	str	r0, [r7, #12]
 800bb0c:	60b9      	str	r1, [r7, #8]
 800bb0e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	331a      	adds	r3, #26
 800bb14:	687a      	ldr	r2, [r7, #4]
 800bb16:	b292      	uxth	r2, r2
 800bb18:	4611      	mov	r1, r2
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f7ff f857 	bl	800abce <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	2b03      	cmp	r3, #3
 800bb26:	d109      	bne.n	800bb3c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	f103 0214 	add.w	r2, r3, #20
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	0c1b      	lsrs	r3, r3, #16
 800bb32:	b29b      	uxth	r3, r3
 800bb34:	4619      	mov	r1, r3
 800bb36:	4610      	mov	r0, r2
 800bb38:	f7ff f849 	bl	800abce <st_word>
	}
}
 800bb3c:	bf00      	nop
 800bb3e:	3710      	adds	r7, #16
 800bb40:	46bd      	mov	sp, r7
 800bb42:	bd80      	pop	{r7, pc}

0800bb44 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b086      	sub	sp, #24
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bb52:	2100      	movs	r1, #0
 800bb54:	6878      	ldr	r0, [r7, #4]
 800bb56:	f7ff fe2f 	bl	800b7b8 <dir_sdi>
 800bb5a:	4603      	mov	r3, r0
 800bb5c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bb5e:	7dfb      	ldrb	r3, [r7, #23]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d001      	beq.n	800bb68 <dir_find+0x24>
 800bb64:	7dfb      	ldrb	r3, [r7, #23]
 800bb66:	e03e      	b.n	800bbe6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	69db      	ldr	r3, [r3, #28]
 800bb6c:	4619      	mov	r1, r3
 800bb6e:	6938      	ldr	r0, [r7, #16]
 800bb70:	f7ff faa2 	bl	800b0b8 <move_window>
 800bb74:	4603      	mov	r3, r0
 800bb76:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bb78:	7dfb      	ldrb	r3, [r7, #23]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d12f      	bne.n	800bbde <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6a1b      	ldr	r3, [r3, #32]
 800bb82:	781b      	ldrb	r3, [r3, #0]
 800bb84:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bb86:	7bfb      	ldrb	r3, [r7, #15]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d102      	bne.n	800bb92 <dir_find+0x4e>
 800bb8c:	2304      	movs	r3, #4
 800bb8e:	75fb      	strb	r3, [r7, #23]
 800bb90:	e028      	b.n	800bbe4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	6a1b      	ldr	r3, [r3, #32]
 800bb96:	330b      	adds	r3, #11
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb9e:	b2da      	uxtb	r2, r3
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6a1b      	ldr	r3, [r3, #32]
 800bba8:	330b      	adds	r3, #11
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	f003 0308 	and.w	r3, r3, #8
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d10a      	bne.n	800bbca <dir_find+0x86>
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6a18      	ldr	r0, [r3, #32]
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	3324      	adds	r3, #36	; 0x24
 800bbbc:	220b      	movs	r2, #11
 800bbbe:	4619      	mov	r1, r3
 800bbc0:	f7ff f888 	bl	800acd4 <mem_cmp>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d00b      	beq.n	800bbe2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800bbca:	2100      	movs	r1, #0
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f7ff fe6e 	bl	800b8ae <dir_next>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800bbd6:	7dfb      	ldrb	r3, [r7, #23]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d0c5      	beq.n	800bb68 <dir_find+0x24>
 800bbdc:	e002      	b.n	800bbe4 <dir_find+0xa0>
		if (res != FR_OK) break;
 800bbde:	bf00      	nop
 800bbe0:	e000      	b.n	800bbe4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800bbe2:	bf00      	nop

	return res;
 800bbe4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3718      	adds	r7, #24
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}

0800bbee <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bbee:	b580      	push	{r7, lr}
 800bbf0:	b084      	sub	sp, #16
 800bbf2:	af00      	add	r7, sp, #0
 800bbf4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800bbfc:	2101      	movs	r1, #1
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f7ff ff1a 	bl	800ba38 <dir_alloc>
 800bc04:	4603      	mov	r3, r0
 800bc06:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800bc08:	7bfb      	ldrb	r3, [r7, #15]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d11c      	bne.n	800bc48 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	69db      	ldr	r3, [r3, #28]
 800bc12:	4619      	mov	r1, r3
 800bc14:	68b8      	ldr	r0, [r7, #8]
 800bc16:	f7ff fa4f 	bl	800b0b8 <move_window>
 800bc1a:	4603      	mov	r3, r0
 800bc1c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800bc1e:	7bfb      	ldrb	r3, [r7, #15]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d111      	bne.n	800bc48 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	6a1b      	ldr	r3, [r3, #32]
 800bc28:	2220      	movs	r2, #32
 800bc2a:	2100      	movs	r1, #0
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f7ff f836 	bl	800ac9e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6a18      	ldr	r0, [r3, #32]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	3324      	adds	r3, #36	; 0x24
 800bc3a:	220b      	movs	r2, #11
 800bc3c:	4619      	mov	r1, r3
 800bc3e:	f7ff f80d 	bl	800ac5c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	2201      	movs	r2, #1
 800bc46:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800bc48:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3710      	adds	r7, #16
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}
	...

0800bc54 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b088      	sub	sp, #32
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	60fb      	str	r3, [r7, #12]
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	3324      	adds	r3, #36	; 0x24
 800bc68:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800bc6a:	220b      	movs	r2, #11
 800bc6c:	2120      	movs	r1, #32
 800bc6e:	68b8      	ldr	r0, [r7, #8]
 800bc70:	f7ff f815 	bl	800ac9e <mem_set>
	si = i = 0; ni = 8;
 800bc74:	2300      	movs	r3, #0
 800bc76:	613b      	str	r3, [r7, #16]
 800bc78:	693b      	ldr	r3, [r7, #16]
 800bc7a:	61fb      	str	r3, [r7, #28]
 800bc7c:	2308      	movs	r3, #8
 800bc7e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800bc80:	69fb      	ldr	r3, [r7, #28]
 800bc82:	1c5a      	adds	r2, r3, #1
 800bc84:	61fa      	str	r2, [r7, #28]
 800bc86:	68fa      	ldr	r2, [r7, #12]
 800bc88:	4413      	add	r3, r2
 800bc8a:	781b      	ldrb	r3, [r3, #0]
 800bc8c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bc8e:	7efb      	ldrb	r3, [r7, #27]
 800bc90:	2b20      	cmp	r3, #32
 800bc92:	d94e      	bls.n	800bd32 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800bc94:	7efb      	ldrb	r3, [r7, #27]
 800bc96:	2b2f      	cmp	r3, #47	; 0x2f
 800bc98:	d006      	beq.n	800bca8 <create_name+0x54>
 800bc9a:	7efb      	ldrb	r3, [r7, #27]
 800bc9c:	2b5c      	cmp	r3, #92	; 0x5c
 800bc9e:	d110      	bne.n	800bcc2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bca0:	e002      	b.n	800bca8 <create_name+0x54>
 800bca2:	69fb      	ldr	r3, [r7, #28]
 800bca4:	3301      	adds	r3, #1
 800bca6:	61fb      	str	r3, [r7, #28]
 800bca8:	68fa      	ldr	r2, [r7, #12]
 800bcaa:	69fb      	ldr	r3, [r7, #28]
 800bcac:	4413      	add	r3, r2
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	2b2f      	cmp	r3, #47	; 0x2f
 800bcb2:	d0f6      	beq.n	800bca2 <create_name+0x4e>
 800bcb4:	68fa      	ldr	r2, [r7, #12]
 800bcb6:	69fb      	ldr	r3, [r7, #28]
 800bcb8:	4413      	add	r3, r2
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	2b5c      	cmp	r3, #92	; 0x5c
 800bcbe:	d0f0      	beq.n	800bca2 <create_name+0x4e>
			break;
 800bcc0:	e038      	b.n	800bd34 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800bcc2:	7efb      	ldrb	r3, [r7, #27]
 800bcc4:	2b2e      	cmp	r3, #46	; 0x2e
 800bcc6:	d003      	beq.n	800bcd0 <create_name+0x7c>
 800bcc8:	693a      	ldr	r2, [r7, #16]
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d30c      	bcc.n	800bcea <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	2b0b      	cmp	r3, #11
 800bcd4:	d002      	beq.n	800bcdc <create_name+0x88>
 800bcd6:	7efb      	ldrb	r3, [r7, #27]
 800bcd8:	2b2e      	cmp	r3, #46	; 0x2e
 800bcda:	d001      	beq.n	800bce0 <create_name+0x8c>
 800bcdc:	2306      	movs	r3, #6
 800bcde:	e044      	b.n	800bd6a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800bce0:	2308      	movs	r3, #8
 800bce2:	613b      	str	r3, [r7, #16]
 800bce4:	230b      	movs	r3, #11
 800bce6:	617b      	str	r3, [r7, #20]
			continue;
 800bce8:	e022      	b.n	800bd30 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800bcea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	da04      	bge.n	800bcfc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800bcf2:	7efb      	ldrb	r3, [r7, #27]
 800bcf4:	3b80      	subs	r3, #128	; 0x80
 800bcf6:	4a1f      	ldr	r2, [pc, #124]	; (800bd74 <create_name+0x120>)
 800bcf8:	5cd3      	ldrb	r3, [r2, r3]
 800bcfa:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800bcfc:	7efb      	ldrb	r3, [r7, #27]
 800bcfe:	4619      	mov	r1, r3
 800bd00:	481d      	ldr	r0, [pc, #116]	; (800bd78 <create_name+0x124>)
 800bd02:	f7ff f80e 	bl	800ad22 <chk_chr>
 800bd06:	4603      	mov	r3, r0
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d001      	beq.n	800bd10 <create_name+0xbc>
 800bd0c:	2306      	movs	r3, #6
 800bd0e:	e02c      	b.n	800bd6a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800bd10:	7efb      	ldrb	r3, [r7, #27]
 800bd12:	2b60      	cmp	r3, #96	; 0x60
 800bd14:	d905      	bls.n	800bd22 <create_name+0xce>
 800bd16:	7efb      	ldrb	r3, [r7, #27]
 800bd18:	2b7a      	cmp	r3, #122	; 0x7a
 800bd1a:	d802      	bhi.n	800bd22 <create_name+0xce>
 800bd1c:	7efb      	ldrb	r3, [r7, #27]
 800bd1e:	3b20      	subs	r3, #32
 800bd20:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800bd22:	693b      	ldr	r3, [r7, #16]
 800bd24:	1c5a      	adds	r2, r3, #1
 800bd26:	613a      	str	r2, [r7, #16]
 800bd28:	68ba      	ldr	r2, [r7, #8]
 800bd2a:	4413      	add	r3, r2
 800bd2c:	7efa      	ldrb	r2, [r7, #27]
 800bd2e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800bd30:	e7a6      	b.n	800bc80 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bd32:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800bd34:	68fa      	ldr	r2, [r7, #12]
 800bd36:	69fb      	ldr	r3, [r7, #28]
 800bd38:	441a      	add	r2, r3
 800bd3a:	683b      	ldr	r3, [r7, #0]
 800bd3c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d101      	bne.n	800bd48 <create_name+0xf4>
 800bd44:	2306      	movs	r3, #6
 800bd46:	e010      	b.n	800bd6a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bd48:	68bb      	ldr	r3, [r7, #8]
 800bd4a:	781b      	ldrb	r3, [r3, #0]
 800bd4c:	2be5      	cmp	r3, #229	; 0xe5
 800bd4e:	d102      	bne.n	800bd56 <create_name+0x102>
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	2205      	movs	r2, #5
 800bd54:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bd56:	7efb      	ldrb	r3, [r7, #27]
 800bd58:	2b20      	cmp	r3, #32
 800bd5a:	d801      	bhi.n	800bd60 <create_name+0x10c>
 800bd5c:	2204      	movs	r2, #4
 800bd5e:	e000      	b.n	800bd62 <create_name+0x10e>
 800bd60:	2200      	movs	r2, #0
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	330b      	adds	r3, #11
 800bd66:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800bd68:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3720      	adds	r7, #32
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	bf00      	nop
 800bd74:	08013894 	.word	0x08013894
 800bd78:	0801381c 	.word	0x0801381c

0800bd7c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b086      	sub	sp, #24
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bd8a:	693b      	ldr	r3, [r7, #16]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bd90:	e002      	b.n	800bd98 <follow_path+0x1c>
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	3301      	adds	r3, #1
 800bd96:	603b      	str	r3, [r7, #0]
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	2b2f      	cmp	r3, #47	; 0x2f
 800bd9e:	d0f8      	beq.n	800bd92 <follow_path+0x16>
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	2b5c      	cmp	r3, #92	; 0x5c
 800bda6:	d0f4      	beq.n	800bd92 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800bda8:	693b      	ldr	r3, [r7, #16]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	2b1f      	cmp	r3, #31
 800bdb4:	d80a      	bhi.n	800bdcc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2280      	movs	r2, #128	; 0x80
 800bdba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800bdbe:	2100      	movs	r1, #0
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f7ff fcf9 	bl	800b7b8 <dir_sdi>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	75fb      	strb	r3, [r7, #23]
 800bdca:	e043      	b.n	800be54 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800bdcc:	463b      	mov	r3, r7
 800bdce:	4619      	mov	r1, r3
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f7ff ff3f 	bl	800bc54 <create_name>
 800bdd6:	4603      	mov	r3, r0
 800bdd8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bdda:	7dfb      	ldrb	r3, [r7, #23]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d134      	bne.n	800be4a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f7ff feaf 	bl	800bb44 <dir_find>
 800bde6:	4603      	mov	r3, r0
 800bde8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800bdf0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800bdf2:	7dfb      	ldrb	r3, [r7, #23]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d00a      	beq.n	800be0e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800bdf8:	7dfb      	ldrb	r3, [r7, #23]
 800bdfa:	2b04      	cmp	r3, #4
 800bdfc:	d127      	bne.n	800be4e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800bdfe:	7afb      	ldrb	r3, [r7, #11]
 800be00:	f003 0304 	and.w	r3, r3, #4
 800be04:	2b00      	cmp	r3, #0
 800be06:	d122      	bne.n	800be4e <follow_path+0xd2>
 800be08:	2305      	movs	r3, #5
 800be0a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800be0c:	e01f      	b.n	800be4e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800be0e:	7afb      	ldrb	r3, [r7, #11]
 800be10:	f003 0304 	and.w	r3, r3, #4
 800be14:	2b00      	cmp	r3, #0
 800be16:	d11c      	bne.n	800be52 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800be18:	693b      	ldr	r3, [r7, #16]
 800be1a:	799b      	ldrb	r3, [r3, #6]
 800be1c:	f003 0310 	and.w	r3, r3, #16
 800be20:	2b00      	cmp	r3, #0
 800be22:	d102      	bne.n	800be2a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800be24:	2305      	movs	r3, #5
 800be26:	75fb      	strb	r3, [r7, #23]
 800be28:	e014      	b.n	800be54 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	695b      	ldr	r3, [r3, #20]
 800be34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be38:	4413      	add	r3, r2
 800be3a:	4619      	mov	r1, r3
 800be3c:	68f8      	ldr	r0, [r7, #12]
 800be3e:	f7ff fe42 	bl	800bac6 <ld_clust>
 800be42:	4602      	mov	r2, r0
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800be48:	e7c0      	b.n	800bdcc <follow_path+0x50>
			if (res != FR_OK) break;
 800be4a:	bf00      	nop
 800be4c:	e002      	b.n	800be54 <follow_path+0xd8>
				break;
 800be4e:	bf00      	nop
 800be50:	e000      	b.n	800be54 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800be52:	bf00      	nop
			}
		}
	}

	return res;
 800be54:	7dfb      	ldrb	r3, [r7, #23]
}
 800be56:	4618      	mov	r0, r3
 800be58:	3718      	adds	r7, #24
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}

0800be5e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800be5e:	b480      	push	{r7}
 800be60:	b087      	sub	sp, #28
 800be62:	af00      	add	r7, sp, #0
 800be64:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800be66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be6a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d031      	beq.n	800bed8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	617b      	str	r3, [r7, #20]
 800be7a:	e002      	b.n	800be82 <get_ldnumber+0x24>
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	3301      	adds	r3, #1
 800be80:	617b      	str	r3, [r7, #20]
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	781b      	ldrb	r3, [r3, #0]
 800be86:	2b20      	cmp	r3, #32
 800be88:	d903      	bls.n	800be92 <get_ldnumber+0x34>
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	781b      	ldrb	r3, [r3, #0]
 800be8e:	2b3a      	cmp	r3, #58	; 0x3a
 800be90:	d1f4      	bne.n	800be7c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	781b      	ldrb	r3, [r3, #0]
 800be96:	2b3a      	cmp	r3, #58	; 0x3a
 800be98:	d11c      	bne.n	800bed4 <get_ldnumber+0x76>
			tp = *path;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	1c5a      	adds	r2, r3, #1
 800bea4:	60fa      	str	r2, [r7, #12]
 800bea6:	781b      	ldrb	r3, [r3, #0]
 800bea8:	3b30      	subs	r3, #48	; 0x30
 800beaa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800beac:	68bb      	ldr	r3, [r7, #8]
 800beae:	2b09      	cmp	r3, #9
 800beb0:	d80e      	bhi.n	800bed0 <get_ldnumber+0x72>
 800beb2:	68fa      	ldr	r2, [r7, #12]
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	429a      	cmp	r2, r3
 800beb8:	d10a      	bne.n	800bed0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d107      	bne.n	800bed0 <get_ldnumber+0x72>
					vol = (int)i;
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	3301      	adds	r3, #1
 800bec8:	617b      	str	r3, [r7, #20]
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	697a      	ldr	r2, [r7, #20]
 800bece:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	e002      	b.n	800beda <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bed4:	2300      	movs	r3, #0
 800bed6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bed8:	693b      	ldr	r3, [r7, #16]
}
 800beda:	4618      	mov	r0, r3
 800bedc:	371c      	adds	r7, #28
 800bede:	46bd      	mov	sp, r7
 800bee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee4:	4770      	bx	lr
	...

0800bee8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b082      	sub	sp, #8
 800beec:	af00      	add	r7, sp, #0
 800beee:	6078      	str	r0, [r7, #4]
 800bef0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	2200      	movs	r2, #0
 800bef6:	70da      	strb	r2, [r3, #3]
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800befe:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bf00:	6839      	ldr	r1, [r7, #0]
 800bf02:	6878      	ldr	r0, [r7, #4]
 800bf04:	f7ff f8d8 	bl	800b0b8 <move_window>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d001      	beq.n	800bf12 <check_fs+0x2a>
 800bf0e:	2304      	movs	r3, #4
 800bf10:	e038      	b.n	800bf84 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	3330      	adds	r3, #48	; 0x30
 800bf16:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f7fe fe1c 	bl	800ab58 <ld_word>
 800bf20:	4603      	mov	r3, r0
 800bf22:	461a      	mov	r2, r3
 800bf24:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d001      	beq.n	800bf30 <check_fs+0x48>
 800bf2c:	2303      	movs	r3, #3
 800bf2e:	e029      	b.n	800bf84 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bf36:	2be9      	cmp	r3, #233	; 0xe9
 800bf38:	d009      	beq.n	800bf4e <check_fs+0x66>
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bf40:	2beb      	cmp	r3, #235	; 0xeb
 800bf42:	d11e      	bne.n	800bf82 <check_fs+0x9a>
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800bf4a:	2b90      	cmp	r3, #144	; 0x90
 800bf4c:	d119      	bne.n	800bf82 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	3330      	adds	r3, #48	; 0x30
 800bf52:	3336      	adds	r3, #54	; 0x36
 800bf54:	4618      	mov	r0, r3
 800bf56:	f7fe fe17 	bl	800ab88 <ld_dword>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bf60:	4a0a      	ldr	r2, [pc, #40]	; (800bf8c <check_fs+0xa4>)
 800bf62:	4293      	cmp	r3, r2
 800bf64:	d101      	bne.n	800bf6a <check_fs+0x82>
 800bf66:	2300      	movs	r3, #0
 800bf68:	e00c      	b.n	800bf84 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	3330      	adds	r3, #48	; 0x30
 800bf6e:	3352      	adds	r3, #82	; 0x52
 800bf70:	4618      	mov	r0, r3
 800bf72:	f7fe fe09 	bl	800ab88 <ld_dword>
 800bf76:	4603      	mov	r3, r0
 800bf78:	4a05      	ldr	r2, [pc, #20]	; (800bf90 <check_fs+0xa8>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d101      	bne.n	800bf82 <check_fs+0x9a>
 800bf7e:	2300      	movs	r3, #0
 800bf80:	e000      	b.n	800bf84 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bf82:	2302      	movs	r3, #2
}
 800bf84:	4618      	mov	r0, r3
 800bf86:	3708      	adds	r7, #8
 800bf88:	46bd      	mov	sp, r7
 800bf8a:	bd80      	pop	{r7, pc}
 800bf8c:	00544146 	.word	0x00544146
 800bf90:	33544146 	.word	0x33544146

0800bf94 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b096      	sub	sp, #88	; 0x58
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	60f8      	str	r0, [r7, #12]
 800bf9c:	60b9      	str	r1, [r7, #8]
 800bf9e:	4613      	mov	r3, r2
 800bfa0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bfa2:	68bb      	ldr	r3, [r7, #8]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bfa8:	68f8      	ldr	r0, [r7, #12]
 800bfaa:	f7ff ff58 	bl	800be5e <get_ldnumber>
 800bfae:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bfb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	da01      	bge.n	800bfba <find_volume+0x26>
 800bfb6:	230b      	movs	r3, #11
 800bfb8:	e22e      	b.n	800c418 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bfba:	4aa8      	ldr	r2, [pc, #672]	; (800c25c <find_volume+0x2c8>)
 800bfbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfc2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bfc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d101      	bne.n	800bfce <find_volume+0x3a>
 800bfca:	230c      	movs	r3, #12
 800bfcc:	e224      	b.n	800c418 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfd2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bfd4:	79fb      	ldrb	r3, [r7, #7]
 800bfd6:	f023 0301 	bic.w	r3, r3, #1
 800bfda:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bfdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfde:	781b      	ldrb	r3, [r3, #0]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d01a      	beq.n	800c01a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800bfe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe6:	785b      	ldrb	r3, [r3, #1]
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f7fe fd17 	bl	800aa1c <disk_status>
 800bfee:	4603      	mov	r3, r0
 800bff0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bff4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bff8:	f003 0301 	and.w	r3, r3, #1
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d10c      	bne.n	800c01a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c000:	79fb      	ldrb	r3, [r7, #7]
 800c002:	2b00      	cmp	r3, #0
 800c004:	d007      	beq.n	800c016 <find_volume+0x82>
 800c006:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c00a:	f003 0304 	and.w	r3, r3, #4
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d001      	beq.n	800c016 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c012:	230a      	movs	r3, #10
 800c014:	e200      	b.n	800c418 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800c016:	2300      	movs	r3, #0
 800c018:	e1fe      	b.n	800c418 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c01c:	2200      	movs	r2, #0
 800c01e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c022:	b2da      	uxtb	r2, r3
 800c024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c026:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c02a:	785b      	ldrb	r3, [r3, #1]
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7fe fd0f 	bl	800aa50 <disk_initialize>
 800c032:	4603      	mov	r3, r0
 800c034:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c038:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c03c:	f003 0301 	and.w	r3, r3, #1
 800c040:	2b00      	cmp	r3, #0
 800c042:	d001      	beq.n	800c048 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c044:	2303      	movs	r3, #3
 800c046:	e1e7      	b.n	800c418 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c048:	79fb      	ldrb	r3, [r7, #7]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d007      	beq.n	800c05e <find_volume+0xca>
 800c04e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c052:	f003 0304 	and.w	r3, r3, #4
 800c056:	2b00      	cmp	r3, #0
 800c058:	d001      	beq.n	800c05e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c05a:	230a      	movs	r3, #10
 800c05c:	e1dc      	b.n	800c418 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c05e:	2300      	movs	r3, #0
 800c060:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c062:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c064:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c066:	f7ff ff3f 	bl	800bee8 <check_fs>
 800c06a:	4603      	mov	r3, r0
 800c06c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c070:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c074:	2b02      	cmp	r3, #2
 800c076:	d14b      	bne.n	800c110 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c078:	2300      	movs	r3, #0
 800c07a:	643b      	str	r3, [r7, #64]	; 0x40
 800c07c:	e01f      	b.n	800c0be <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c07e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c080:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c084:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c086:	011b      	lsls	r3, r3, #4
 800c088:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c08c:	4413      	add	r3, r2
 800c08e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c092:	3304      	adds	r3, #4
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d006      	beq.n	800c0a8 <find_volume+0x114>
 800c09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09c:	3308      	adds	r3, #8
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7fe fd72 	bl	800ab88 <ld_dword>
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	e000      	b.n	800c0aa <find_volume+0x116>
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0ac:	009b      	lsls	r3, r3, #2
 800c0ae:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800c0b2:	440b      	add	r3, r1
 800c0b4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c0b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0ba:	3301      	adds	r3, #1
 800c0bc:	643b      	str	r3, [r7, #64]	; 0x40
 800c0be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0c0:	2b03      	cmp	r3, #3
 800c0c2:	d9dc      	bls.n	800c07e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c0c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d002      	beq.n	800c0d4 <find_volume+0x140>
 800c0ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0d0:	3b01      	subs	r3, #1
 800c0d2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c0d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c0d6:	009b      	lsls	r3, r3, #2
 800c0d8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800c0dc:	4413      	add	r3, r2
 800c0de:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c0e2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c0e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d005      	beq.n	800c0f6 <find_volume+0x162>
 800c0ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c0ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c0ee:	f7ff fefb 	bl	800bee8 <check_fs>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	e000      	b.n	800c0f8 <find_volume+0x164>
 800c0f6:	2303      	movs	r3, #3
 800c0f8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c0fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c100:	2b01      	cmp	r3, #1
 800c102:	d905      	bls.n	800c110 <find_volume+0x17c>
 800c104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c106:	3301      	adds	r3, #1
 800c108:	643b      	str	r3, [r7, #64]	; 0x40
 800c10a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c10c:	2b03      	cmp	r3, #3
 800c10e:	d9e1      	bls.n	800c0d4 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c110:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c114:	2b04      	cmp	r3, #4
 800c116:	d101      	bne.n	800c11c <find_volume+0x188>
 800c118:	2301      	movs	r3, #1
 800c11a:	e17d      	b.n	800c418 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c11c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c120:	2b01      	cmp	r3, #1
 800c122:	d901      	bls.n	800c128 <find_volume+0x194>
 800c124:	230d      	movs	r3, #13
 800c126:	e177      	b.n	800c418 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c12a:	3330      	adds	r3, #48	; 0x30
 800c12c:	330b      	adds	r3, #11
 800c12e:	4618      	mov	r0, r3
 800c130:	f7fe fd12 	bl	800ab58 <ld_word>
 800c134:	4603      	mov	r3, r0
 800c136:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c13a:	d001      	beq.n	800c140 <find_volume+0x1ac>
 800c13c:	230d      	movs	r3, #13
 800c13e:	e16b      	b.n	800c418 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c142:	3330      	adds	r3, #48	; 0x30
 800c144:	3316      	adds	r3, #22
 800c146:	4618      	mov	r0, r3
 800c148:	f7fe fd06 	bl	800ab58 <ld_word>
 800c14c:	4603      	mov	r3, r0
 800c14e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c150:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c152:	2b00      	cmp	r3, #0
 800c154:	d106      	bne.n	800c164 <find_volume+0x1d0>
 800c156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c158:	3330      	adds	r3, #48	; 0x30
 800c15a:	3324      	adds	r3, #36	; 0x24
 800c15c:	4618      	mov	r0, r3
 800c15e:	f7fe fd13 	bl	800ab88 <ld_dword>
 800c162:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c166:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c168:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c16c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800c170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c172:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c176:	789b      	ldrb	r3, [r3, #2]
 800c178:	2b01      	cmp	r3, #1
 800c17a:	d005      	beq.n	800c188 <find_volume+0x1f4>
 800c17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c17e:	789b      	ldrb	r3, [r3, #2]
 800c180:	2b02      	cmp	r3, #2
 800c182:	d001      	beq.n	800c188 <find_volume+0x1f4>
 800c184:	230d      	movs	r3, #13
 800c186:	e147      	b.n	800c418 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c18a:	789b      	ldrb	r3, [r3, #2]
 800c18c:	461a      	mov	r2, r3
 800c18e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c190:	fb02 f303 	mul.w	r3, r2, r3
 800c194:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c19c:	b29a      	uxth	r2, r3
 800c19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1a4:	895b      	ldrh	r3, [r3, #10]
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d008      	beq.n	800c1bc <find_volume+0x228>
 800c1aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1ac:	895b      	ldrh	r3, [r3, #10]
 800c1ae:	461a      	mov	r2, r3
 800c1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b2:	895b      	ldrh	r3, [r3, #10]
 800c1b4:	3b01      	subs	r3, #1
 800c1b6:	4013      	ands	r3, r2
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d001      	beq.n	800c1c0 <find_volume+0x22c>
 800c1bc:	230d      	movs	r3, #13
 800c1be:	e12b      	b.n	800c418 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c2:	3330      	adds	r3, #48	; 0x30
 800c1c4:	3311      	adds	r3, #17
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f7fe fcc6 	bl	800ab58 <ld_word>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	461a      	mov	r2, r3
 800c1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1d6:	891b      	ldrh	r3, [r3, #8]
 800c1d8:	f003 030f 	and.w	r3, r3, #15
 800c1dc:	b29b      	uxth	r3, r3
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d001      	beq.n	800c1e6 <find_volume+0x252>
 800c1e2:	230d      	movs	r3, #13
 800c1e4:	e118      	b.n	800c418 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1e8:	3330      	adds	r3, #48	; 0x30
 800c1ea:	3313      	adds	r3, #19
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f7fe fcb3 	bl	800ab58 <ld_word>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c1f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d106      	bne.n	800c20a <find_volume+0x276>
 800c1fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1fe:	3330      	adds	r3, #48	; 0x30
 800c200:	3320      	adds	r3, #32
 800c202:	4618      	mov	r0, r3
 800c204:	f7fe fcc0 	bl	800ab88 <ld_dword>
 800c208:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c20c:	3330      	adds	r3, #48	; 0x30
 800c20e:	330e      	adds	r3, #14
 800c210:	4618      	mov	r0, r3
 800c212:	f7fe fca1 	bl	800ab58 <ld_word>
 800c216:	4603      	mov	r3, r0
 800c218:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c21a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d101      	bne.n	800c224 <find_volume+0x290>
 800c220:	230d      	movs	r3, #13
 800c222:	e0f9      	b.n	800c418 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c224:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c228:	4413      	add	r3, r2
 800c22a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c22c:	8912      	ldrh	r2, [r2, #8]
 800c22e:	0912      	lsrs	r2, r2, #4
 800c230:	b292      	uxth	r2, r2
 800c232:	4413      	add	r3, r2
 800c234:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c236:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23a:	429a      	cmp	r2, r3
 800c23c:	d201      	bcs.n	800c242 <find_volume+0x2ae>
 800c23e:	230d      	movs	r3, #13
 800c240:	e0ea      	b.n	800c418 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c242:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c246:	1ad3      	subs	r3, r2, r3
 800c248:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c24a:	8952      	ldrh	r2, [r2, #10]
 800c24c:	fbb3 f3f2 	udiv	r3, r3, r2
 800c250:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c254:	2b00      	cmp	r3, #0
 800c256:	d103      	bne.n	800c260 <find_volume+0x2cc>
 800c258:	230d      	movs	r3, #13
 800c25a:	e0dd      	b.n	800c418 <find_volume+0x484>
 800c25c:	20001410 	.word	0x20001410
		fmt = FS_FAT32;
 800c260:	2303      	movs	r3, #3
 800c262:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c268:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d802      	bhi.n	800c276 <find_volume+0x2e2>
 800c270:	2302      	movs	r3, #2
 800c272:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c278:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c27c:	4293      	cmp	r3, r2
 800c27e:	d802      	bhi.n	800c286 <find_volume+0x2f2>
 800c280:	2301      	movs	r3, #1
 800c282:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c288:	1c9a      	adds	r2, r3, #2
 800c28a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c28c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800c28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c290:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c292:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c294:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c298:	441a      	add	r2, r3
 800c29a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c29c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800c29e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2a2:	441a      	add	r2, r3
 800c2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a6:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800c2a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c2ac:	2b03      	cmp	r3, #3
 800c2ae:	d11e      	bne.n	800c2ee <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2b2:	3330      	adds	r3, #48	; 0x30
 800c2b4:	332a      	adds	r3, #42	; 0x2a
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f7fe fc4e 	bl	800ab58 <ld_word>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d001      	beq.n	800c2c6 <find_volume+0x332>
 800c2c2:	230d      	movs	r3, #13
 800c2c4:	e0a8      	b.n	800c418 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c2c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2c8:	891b      	ldrh	r3, [r3, #8]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d001      	beq.n	800c2d2 <find_volume+0x33e>
 800c2ce:	230d      	movs	r3, #13
 800c2d0:	e0a2      	b.n	800c418 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c2d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2d4:	3330      	adds	r3, #48	; 0x30
 800c2d6:	332c      	adds	r3, #44	; 0x2c
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f7fe fc55 	bl	800ab88 <ld_dword>
 800c2de:	4602      	mov	r2, r0
 800c2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e6:	695b      	ldr	r3, [r3, #20]
 800c2e8:	009b      	lsls	r3, r3, #2
 800c2ea:	647b      	str	r3, [r7, #68]	; 0x44
 800c2ec:	e01f      	b.n	800c32e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c2ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2f0:	891b      	ldrh	r3, [r3, #8]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d101      	bne.n	800c2fa <find_volume+0x366>
 800c2f6:	230d      	movs	r3, #13
 800c2f8:	e08e      	b.n	800c418 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2fc:	6a1a      	ldr	r2, [r3, #32]
 800c2fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c300:	441a      	add	r2, r3
 800c302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c304:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c306:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c30a:	2b02      	cmp	r3, #2
 800c30c:	d103      	bne.n	800c316 <find_volume+0x382>
 800c30e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c310:	695b      	ldr	r3, [r3, #20]
 800c312:	005b      	lsls	r3, r3, #1
 800c314:	e00a      	b.n	800c32c <find_volume+0x398>
 800c316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c318:	695a      	ldr	r2, [r3, #20]
 800c31a:	4613      	mov	r3, r2
 800c31c:	005b      	lsls	r3, r3, #1
 800c31e:	4413      	add	r3, r2
 800c320:	085a      	lsrs	r2, r3, #1
 800c322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c324:	695b      	ldr	r3, [r3, #20]
 800c326:	f003 0301 	and.w	r3, r3, #1
 800c32a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c32c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c32e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c330:	699a      	ldr	r2, [r3, #24]
 800c332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c334:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c338:	0a5b      	lsrs	r3, r3, #9
 800c33a:	429a      	cmp	r2, r3
 800c33c:	d201      	bcs.n	800c342 <find_volume+0x3ae>
 800c33e:	230d      	movs	r3, #13
 800c340:	e06a      	b.n	800c418 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c344:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c348:	611a      	str	r2, [r3, #16]
 800c34a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c34c:	691a      	ldr	r2, [r3, #16]
 800c34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c350:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800c352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c354:	2280      	movs	r2, #128	; 0x80
 800c356:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c358:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c35c:	2b03      	cmp	r3, #3
 800c35e:	d149      	bne.n	800c3f4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c362:	3330      	adds	r3, #48	; 0x30
 800c364:	3330      	adds	r3, #48	; 0x30
 800c366:	4618      	mov	r0, r3
 800c368:	f7fe fbf6 	bl	800ab58 <ld_word>
 800c36c:	4603      	mov	r3, r0
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d140      	bne.n	800c3f4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c374:	3301      	adds	r3, #1
 800c376:	4619      	mov	r1, r3
 800c378:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c37a:	f7fe fe9d 	bl	800b0b8 <move_window>
 800c37e:	4603      	mov	r3, r0
 800c380:	2b00      	cmp	r3, #0
 800c382:	d137      	bne.n	800c3f4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800c384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c386:	2200      	movs	r2, #0
 800c388:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38c:	3330      	adds	r3, #48	; 0x30
 800c38e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c392:	4618      	mov	r0, r3
 800c394:	f7fe fbe0 	bl	800ab58 <ld_word>
 800c398:	4603      	mov	r3, r0
 800c39a:	461a      	mov	r2, r3
 800c39c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d127      	bne.n	800c3f4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c3a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a6:	3330      	adds	r3, #48	; 0x30
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f7fe fbed 	bl	800ab88 <ld_dword>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	4a1b      	ldr	r2, [pc, #108]	; (800c420 <find_volume+0x48c>)
 800c3b2:	4293      	cmp	r3, r2
 800c3b4:	d11e      	bne.n	800c3f4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b8:	3330      	adds	r3, #48	; 0x30
 800c3ba:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f7fe fbe2 	bl	800ab88 <ld_dword>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	4a17      	ldr	r2, [pc, #92]	; (800c424 <find_volume+0x490>)
 800c3c8:	4293      	cmp	r3, r2
 800c3ca:	d113      	bne.n	800c3f4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ce:	3330      	adds	r3, #48	; 0x30
 800c3d0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f7fe fbd7 	bl	800ab88 <ld_dword>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3de:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e2:	3330      	adds	r3, #48	; 0x30
 800c3e4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	f7fe fbcd 	bl	800ab88 <ld_dword>
 800c3ee:	4602      	mov	r2, r0
 800c3f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f2:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c3fa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c3fc:	4b0a      	ldr	r3, [pc, #40]	; (800c428 <find_volume+0x494>)
 800c3fe:	881b      	ldrh	r3, [r3, #0]
 800c400:	3301      	adds	r3, #1
 800c402:	b29a      	uxth	r2, r3
 800c404:	4b08      	ldr	r3, [pc, #32]	; (800c428 <find_volume+0x494>)
 800c406:	801a      	strh	r2, [r3, #0]
 800c408:	4b07      	ldr	r3, [pc, #28]	; (800c428 <find_volume+0x494>)
 800c40a:	881a      	ldrh	r2, [r3, #0]
 800c40c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c40e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c410:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c412:	f7fe fde9 	bl	800afe8 <clear_lock>
#endif
	return FR_OK;
 800c416:	2300      	movs	r3, #0
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3758      	adds	r7, #88	; 0x58
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}
 800c420:	41615252 	.word	0x41615252
 800c424:	61417272 	.word	0x61417272
 800c428:	20001414 	.word	0x20001414

0800c42c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c42c:	b580      	push	{r7, lr}
 800c42e:	b084      	sub	sp, #16
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
 800c434:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c436:	2309      	movs	r3, #9
 800c438:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d01c      	beq.n	800c47a <validate+0x4e>
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d018      	beq.n	800c47a <validate+0x4e>
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	781b      	ldrb	r3, [r3, #0]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d013      	beq.n	800c47a <validate+0x4e>
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	889a      	ldrh	r2, [r3, #4]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	88db      	ldrh	r3, [r3, #6]
 800c45c:	429a      	cmp	r2, r3
 800c45e:	d10c      	bne.n	800c47a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	785b      	ldrb	r3, [r3, #1]
 800c466:	4618      	mov	r0, r3
 800c468:	f7fe fad8 	bl	800aa1c <disk_status>
 800c46c:	4603      	mov	r3, r0
 800c46e:	f003 0301 	and.w	r3, r3, #1
 800c472:	2b00      	cmp	r3, #0
 800c474:	d101      	bne.n	800c47a <validate+0x4e>
			res = FR_OK;
 800c476:	2300      	movs	r3, #0
 800c478:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c47a:	7bfb      	ldrb	r3, [r7, #15]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d102      	bne.n	800c486 <validate+0x5a>
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	e000      	b.n	800c488 <validate+0x5c>
 800c486:	2300      	movs	r3, #0
 800c488:	683a      	ldr	r2, [r7, #0]
 800c48a:	6013      	str	r3, [r2, #0]
	return res;
 800c48c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c48e:	4618      	mov	r0, r3
 800c490:	3710      	adds	r7, #16
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
	...

0800c498 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b088      	sub	sp, #32
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	60f8      	str	r0, [r7, #12]
 800c4a0:	60b9      	str	r1, [r7, #8]
 800c4a2:	4613      	mov	r3, r2
 800c4a4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c4aa:	f107 0310 	add.w	r3, r7, #16
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f7ff fcd5 	bl	800be5e <get_ldnumber>
 800c4b4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c4b6:	69fb      	ldr	r3, [r7, #28]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	da01      	bge.n	800c4c0 <f_mount+0x28>
 800c4bc:	230b      	movs	r3, #11
 800c4be:	e02b      	b.n	800c518 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c4c0:	4a17      	ldr	r2, [pc, #92]	; (800c520 <f_mount+0x88>)
 800c4c2:	69fb      	ldr	r3, [r7, #28]
 800c4c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c4c8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c4ca:	69bb      	ldr	r3, [r7, #24]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d005      	beq.n	800c4dc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c4d0:	69b8      	ldr	r0, [r7, #24]
 800c4d2:	f7fe fd89 	bl	800afe8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c4d6:	69bb      	ldr	r3, [r7, #24]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d002      	beq.n	800c4e8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c4e8:	68fa      	ldr	r2, [r7, #12]
 800c4ea:	490d      	ldr	r1, [pc, #52]	; (800c520 <f_mount+0x88>)
 800c4ec:	69fb      	ldr	r3, [r7, #28]
 800c4ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d002      	beq.n	800c4fe <f_mount+0x66>
 800c4f8:	79fb      	ldrb	r3, [r7, #7]
 800c4fa:	2b01      	cmp	r3, #1
 800c4fc:	d001      	beq.n	800c502 <f_mount+0x6a>
 800c4fe:	2300      	movs	r3, #0
 800c500:	e00a      	b.n	800c518 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c502:	f107 010c 	add.w	r1, r7, #12
 800c506:	f107 0308 	add.w	r3, r7, #8
 800c50a:	2200      	movs	r2, #0
 800c50c:	4618      	mov	r0, r3
 800c50e:	f7ff fd41 	bl	800bf94 <find_volume>
 800c512:	4603      	mov	r3, r0
 800c514:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c516:	7dfb      	ldrb	r3, [r7, #23]
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3720      	adds	r7, #32
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}
 800c520:	20001410 	.word	0x20001410

0800c524 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b098      	sub	sp, #96	; 0x60
 800c528:	af00      	add	r7, sp, #0
 800c52a:	60f8      	str	r0, [r7, #12]
 800c52c:	60b9      	str	r1, [r7, #8]
 800c52e:	4613      	mov	r3, r2
 800c530:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d101      	bne.n	800c53c <f_open+0x18>
 800c538:	2309      	movs	r3, #9
 800c53a:	e1ad      	b.n	800c898 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c53c:	79fb      	ldrb	r3, [r7, #7]
 800c53e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c542:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c544:	79fa      	ldrb	r2, [r7, #7]
 800c546:	f107 0110 	add.w	r1, r7, #16
 800c54a:	f107 0308 	add.w	r3, r7, #8
 800c54e:	4618      	mov	r0, r3
 800c550:	f7ff fd20 	bl	800bf94 <find_volume>
 800c554:	4603      	mov	r3, r0
 800c556:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800c55a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c55e:	2b00      	cmp	r3, #0
 800c560:	f040 8191 	bne.w	800c886 <f_open+0x362>
		dj.obj.fs = fs;
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c568:	68ba      	ldr	r2, [r7, #8]
 800c56a:	f107 0314 	add.w	r3, r7, #20
 800c56e:	4611      	mov	r1, r2
 800c570:	4618      	mov	r0, r3
 800c572:	f7ff fc03 	bl	800bd7c <follow_path>
 800c576:	4603      	mov	r3, r0
 800c578:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c57c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c580:	2b00      	cmp	r3, #0
 800c582:	d11a      	bne.n	800c5ba <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c584:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c588:	b25b      	sxtb	r3, r3
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	da03      	bge.n	800c596 <f_open+0x72>
				res = FR_INVALID_NAME;
 800c58e:	2306      	movs	r3, #6
 800c590:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c594:	e011      	b.n	800c5ba <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c596:	79fb      	ldrb	r3, [r7, #7]
 800c598:	f023 0301 	bic.w	r3, r3, #1
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	bf14      	ite	ne
 800c5a0:	2301      	movne	r3, #1
 800c5a2:	2300      	moveq	r3, #0
 800c5a4:	b2db      	uxtb	r3, r3
 800c5a6:	461a      	mov	r2, r3
 800c5a8:	f107 0314 	add.w	r3, r7, #20
 800c5ac:	4611      	mov	r1, r2
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f7fe fbd2 	bl	800ad58 <chk_lock>
 800c5b4:	4603      	mov	r3, r0
 800c5b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c5ba:	79fb      	ldrb	r3, [r7, #7]
 800c5bc:	f003 031c 	and.w	r3, r3, #28
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d07f      	beq.n	800c6c4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c5c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d017      	beq.n	800c5fc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c5cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c5d0:	2b04      	cmp	r3, #4
 800c5d2:	d10e      	bne.n	800c5f2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c5d4:	f7fe fc1c 	bl	800ae10 <enq_lock>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d006      	beq.n	800c5ec <f_open+0xc8>
 800c5de:	f107 0314 	add.w	r3, r7, #20
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	f7ff fb03 	bl	800bbee <dir_register>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	e000      	b.n	800c5ee <f_open+0xca>
 800c5ec:	2312      	movs	r3, #18
 800c5ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c5f2:	79fb      	ldrb	r3, [r7, #7]
 800c5f4:	f043 0308 	orr.w	r3, r3, #8
 800c5f8:	71fb      	strb	r3, [r7, #7]
 800c5fa:	e010      	b.n	800c61e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c5fc:	7ebb      	ldrb	r3, [r7, #26]
 800c5fe:	f003 0311 	and.w	r3, r3, #17
 800c602:	2b00      	cmp	r3, #0
 800c604:	d003      	beq.n	800c60e <f_open+0xea>
					res = FR_DENIED;
 800c606:	2307      	movs	r3, #7
 800c608:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c60c:	e007      	b.n	800c61e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c60e:	79fb      	ldrb	r3, [r7, #7]
 800c610:	f003 0304 	and.w	r3, r3, #4
 800c614:	2b00      	cmp	r3, #0
 800c616:	d002      	beq.n	800c61e <f_open+0xfa>
 800c618:	2308      	movs	r3, #8
 800c61a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c61e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c622:	2b00      	cmp	r3, #0
 800c624:	d168      	bne.n	800c6f8 <f_open+0x1d4>
 800c626:	79fb      	ldrb	r3, [r7, #7]
 800c628:	f003 0308 	and.w	r3, r3, #8
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d063      	beq.n	800c6f8 <f_open+0x1d4>
				dw = GET_FATTIME();
 800c630:	f7fd ffc0 	bl	800a5b4 <get_fattime>
 800c634:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c638:	330e      	adds	r3, #14
 800c63a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c63c:	4618      	mov	r0, r3
 800c63e:	f7fe fae1 	bl	800ac04 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c644:	3316      	adds	r3, #22
 800c646:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c648:	4618      	mov	r0, r3
 800c64a:	f7fe fadb 	bl	800ac04 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c64e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c650:	330b      	adds	r3, #11
 800c652:	2220      	movs	r2, #32
 800c654:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c656:	693b      	ldr	r3, [r7, #16]
 800c658:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c65a:	4611      	mov	r1, r2
 800c65c:	4618      	mov	r0, r3
 800c65e:	f7ff fa32 	bl	800bac6 <ld_clust>
 800c662:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c668:	2200      	movs	r2, #0
 800c66a:	4618      	mov	r0, r3
 800c66c:	f7ff fa4a 	bl	800bb04 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c672:	331c      	adds	r3, #28
 800c674:	2100      	movs	r1, #0
 800c676:	4618      	mov	r0, r3
 800c678:	f7fe fac4 	bl	800ac04 <st_dword>
					fs->wflag = 1;
 800c67c:	693b      	ldr	r3, [r7, #16]
 800c67e:	2201      	movs	r2, #1
 800c680:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c684:	2b00      	cmp	r3, #0
 800c686:	d037      	beq.n	800c6f8 <f_open+0x1d4>
						dw = fs->winsect;
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c68c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c68e:	f107 0314 	add.w	r3, r7, #20
 800c692:	2200      	movs	r2, #0
 800c694:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c696:	4618      	mov	r0, r3
 800c698:	f7fe ff5d 	bl	800b556 <remove_chain>
 800c69c:	4603      	mov	r3, r0
 800c69e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800c6a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d126      	bne.n	800c6f8 <f_open+0x1d4>
							res = move_window(fs, dw);
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	f7fe fd02 	bl	800b0b8 <move_window>
 800c6b4:	4603      	mov	r3, r0
 800c6b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c6ba:	693b      	ldr	r3, [r7, #16]
 800c6bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c6be:	3a01      	subs	r2, #1
 800c6c0:	60da      	str	r2, [r3, #12]
 800c6c2:	e019      	b.n	800c6f8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c6c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d115      	bne.n	800c6f8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c6cc:	7ebb      	ldrb	r3, [r7, #26]
 800c6ce:	f003 0310 	and.w	r3, r3, #16
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d003      	beq.n	800c6de <f_open+0x1ba>
					res = FR_NO_FILE;
 800c6d6:	2304      	movs	r3, #4
 800c6d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c6dc:	e00c      	b.n	800c6f8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c6de:	79fb      	ldrb	r3, [r7, #7]
 800c6e0:	f003 0302 	and.w	r3, r3, #2
 800c6e4:	2b00      	cmp	r3, #0
 800c6e6:	d007      	beq.n	800c6f8 <f_open+0x1d4>
 800c6e8:	7ebb      	ldrb	r3, [r7, #26]
 800c6ea:	f003 0301 	and.w	r3, r3, #1
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d002      	beq.n	800c6f8 <f_open+0x1d4>
						res = FR_DENIED;
 800c6f2:	2307      	movs	r3, #7
 800c6f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c6f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d128      	bne.n	800c752 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c700:	79fb      	ldrb	r3, [r7, #7]
 800c702:	f003 0308 	and.w	r3, r3, #8
 800c706:	2b00      	cmp	r3, #0
 800c708:	d003      	beq.n	800c712 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c70a:	79fb      	ldrb	r3, [r7, #7]
 800c70c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c710:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c71a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c720:	79fb      	ldrb	r3, [r7, #7]
 800c722:	f023 0301 	bic.w	r3, r3, #1
 800c726:	2b00      	cmp	r3, #0
 800c728:	bf14      	ite	ne
 800c72a:	2301      	movne	r3, #1
 800c72c:	2300      	moveq	r3, #0
 800c72e:	b2db      	uxtb	r3, r3
 800c730:	461a      	mov	r2, r3
 800c732:	f107 0314 	add.w	r3, r7, #20
 800c736:	4611      	mov	r1, r2
 800c738:	4618      	mov	r0, r3
 800c73a:	f7fe fb8b 	bl	800ae54 <inc_lock>
 800c73e:	4602      	mov	r2, r0
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	691b      	ldr	r3, [r3, #16]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d102      	bne.n	800c752 <f_open+0x22e>
 800c74c:	2302      	movs	r3, #2
 800c74e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c752:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c756:	2b00      	cmp	r3, #0
 800c758:	f040 8095 	bne.w	800c886 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c760:	4611      	mov	r1, r2
 800c762:	4618      	mov	r0, r3
 800c764:	f7ff f9af 	bl	800bac6 <ld_clust>
 800c768:	4602      	mov	r2, r0
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c76e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c770:	331c      	adds	r3, #28
 800c772:	4618      	mov	r0, r3
 800c774:	f7fe fa08 	bl	800ab88 <ld_dword>
 800c778:	4602      	mov	r2, r0
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	2200      	movs	r2, #0
 800c782:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c784:	693a      	ldr	r2, [r7, #16]
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c78a:	693b      	ldr	r3, [r7, #16]
 800c78c:	88da      	ldrh	r2, [r3, #6]
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	79fa      	ldrb	r2, [r7, #7]
 800c796:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2200      	movs	r2, #0
 800c79c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	3330      	adds	r3, #48	; 0x30
 800c7ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c7b2:	2100      	movs	r1, #0
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f7fe fa72 	bl	800ac9e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c7ba:	79fb      	ldrb	r3, [r7, #7]
 800c7bc:	f003 0320 	and.w	r3, r3, #32
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d060      	beq.n	800c886 <f_open+0x362>
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	68db      	ldr	r3, [r3, #12]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d05c      	beq.n	800c886 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	68da      	ldr	r2, [r3, #12]
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c7d4:	693b      	ldr	r3, [r7, #16]
 800c7d6:	895b      	ldrh	r3, [r3, #10]
 800c7d8:	025b      	lsls	r3, r3, #9
 800c7da:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	689b      	ldr	r3, [r3, #8]
 800c7e0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	68db      	ldr	r3, [r3, #12]
 800c7e6:	657b      	str	r3, [r7, #84]	; 0x54
 800c7e8:	e016      	b.n	800c818 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c7ee:	4618      	mov	r0, r3
 800c7f0:	f7fe fd1d 	bl	800b22e <get_fat>
 800c7f4:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800c7f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c7f8:	2b01      	cmp	r3, #1
 800c7fa:	d802      	bhi.n	800c802 <f_open+0x2de>
 800c7fc:	2302      	movs	r3, #2
 800c7fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c802:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c808:	d102      	bne.n	800c810 <f_open+0x2ec>
 800c80a:	2301      	movs	r3, #1
 800c80c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c810:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c814:	1ad3      	subs	r3, r2, r3
 800c816:	657b      	str	r3, [r7, #84]	; 0x54
 800c818:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d103      	bne.n	800c828 <f_open+0x304>
 800c820:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c824:	429a      	cmp	r2, r3
 800c826:	d8e0      	bhi.n	800c7ea <f_open+0x2c6>
				}
				fp->clust = clst;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c82c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c82e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c832:	2b00      	cmp	r3, #0
 800c834:	d127      	bne.n	800c886 <f_open+0x362>
 800c836:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c838:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d022      	beq.n	800c886 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c840:	693b      	ldr	r3, [r7, #16]
 800c842:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c844:	4618      	mov	r0, r3
 800c846:	f7fe fcd3 	bl	800b1f0 <clust2sect>
 800c84a:	6478      	str	r0, [r7, #68]	; 0x44
 800c84c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d103      	bne.n	800c85a <f_open+0x336>
						res = FR_INT_ERR;
 800c852:	2302      	movs	r3, #2
 800c854:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c858:	e015      	b.n	800c886 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c85a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c85c:	0a5a      	lsrs	r2, r3, #9
 800c85e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c860:	441a      	add	r2, r3
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	7858      	ldrb	r0, [r3, #1]
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c870:	68fb      	ldr	r3, [r7, #12]
 800c872:	6a1a      	ldr	r2, [r3, #32]
 800c874:	2301      	movs	r3, #1
 800c876:	f7fe f911 	bl	800aa9c <disk_read>
 800c87a:	4603      	mov	r3, r0
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d002      	beq.n	800c886 <f_open+0x362>
 800c880:	2301      	movs	r3, #1
 800c882:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c886:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d002      	beq.n	800c894 <f_open+0x370>
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	2200      	movs	r2, #0
 800c892:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c894:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3760      	adds	r7, #96	; 0x60
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}

0800c8a0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b08c      	sub	sp, #48	; 0x30
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	60f8      	str	r0, [r7, #12]
 800c8a8:	60b9      	str	r1, [r7, #8]
 800c8aa:	607a      	str	r2, [r7, #4]
 800c8ac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	f107 0210 	add.w	r2, r7, #16
 800c8be:	4611      	mov	r1, r2
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f7ff fdb3 	bl	800c42c <validate>
 800c8c6:	4603      	mov	r3, r0
 800c8c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c8cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d107      	bne.n	800c8e4 <f_write+0x44>
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	7d5b      	ldrb	r3, [r3, #21]
 800c8d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c8dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d002      	beq.n	800c8ea <f_write+0x4a>
 800c8e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8e8:	e14b      	b.n	800cb82 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	7d1b      	ldrb	r3, [r3, #20]
 800c8ee:	f003 0302 	and.w	r3, r3, #2
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d101      	bne.n	800c8fa <f_write+0x5a>
 800c8f6:	2307      	movs	r3, #7
 800c8f8:	e143      	b.n	800cb82 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	699a      	ldr	r2, [r3, #24]
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	441a      	add	r2, r3
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	699b      	ldr	r3, [r3, #24]
 800c906:	429a      	cmp	r2, r3
 800c908:	f080 812d 	bcs.w	800cb66 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	699b      	ldr	r3, [r3, #24]
 800c910:	43db      	mvns	r3, r3
 800c912:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c914:	e127      	b.n	800cb66 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	699b      	ldr	r3, [r3, #24]
 800c91a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c91e:	2b00      	cmp	r3, #0
 800c920:	f040 80e3 	bne.w	800caea <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	699b      	ldr	r3, [r3, #24]
 800c928:	0a5b      	lsrs	r3, r3, #9
 800c92a:	693a      	ldr	r2, [r7, #16]
 800c92c:	8952      	ldrh	r2, [r2, #10]
 800c92e:	3a01      	subs	r2, #1
 800c930:	4013      	ands	r3, r2
 800c932:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c934:	69bb      	ldr	r3, [r7, #24]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d143      	bne.n	800c9c2 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	699b      	ldr	r3, [r3, #24]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d10c      	bne.n	800c95c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	689b      	ldr	r3, [r3, #8]
 800c946:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d11a      	bne.n	800c984 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	2100      	movs	r1, #0
 800c952:	4618      	mov	r0, r3
 800c954:	f7fe fe64 	bl	800b620 <create_chain>
 800c958:	62b8      	str	r0, [r7, #40]	; 0x28
 800c95a:	e013      	b.n	800c984 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c960:	2b00      	cmp	r3, #0
 800c962:	d007      	beq.n	800c974 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	699b      	ldr	r3, [r3, #24]
 800c968:	4619      	mov	r1, r3
 800c96a:	68f8      	ldr	r0, [r7, #12]
 800c96c:	f7fe fef0 	bl	800b750 <clmt_clust>
 800c970:	62b8      	str	r0, [r7, #40]	; 0x28
 800c972:	e007      	b.n	800c984 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c974:	68fa      	ldr	r2, [r7, #12]
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	69db      	ldr	r3, [r3, #28]
 800c97a:	4619      	mov	r1, r3
 800c97c:	4610      	mov	r0, r2
 800c97e:	f7fe fe4f 	bl	800b620 <create_chain>
 800c982:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c986:	2b00      	cmp	r3, #0
 800c988:	f000 80f2 	beq.w	800cb70 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c98e:	2b01      	cmp	r3, #1
 800c990:	d104      	bne.n	800c99c <f_write+0xfc>
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	2202      	movs	r2, #2
 800c996:	755a      	strb	r2, [r3, #21]
 800c998:	2302      	movs	r3, #2
 800c99a:	e0f2      	b.n	800cb82 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c99e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9a2:	d104      	bne.n	800c9ae <f_write+0x10e>
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	2201      	movs	r2, #1
 800c9a8:	755a      	strb	r2, [r3, #21]
 800c9aa:	2301      	movs	r3, #1
 800c9ac:	e0e9      	b.n	800cb82 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9b2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	689b      	ldr	r3, [r3, #8]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d102      	bne.n	800c9c2 <f_write+0x122>
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9c0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	7d1b      	ldrb	r3, [r3, #20]
 800c9c6:	b25b      	sxtb	r3, r3
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	da18      	bge.n	800c9fe <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	7858      	ldrb	r0, [r3, #1]
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	6a1a      	ldr	r2, [r3, #32]
 800c9da:	2301      	movs	r3, #1
 800c9dc:	f7fe f87e 	bl	800aadc <disk_write>
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d004      	beq.n	800c9f0 <f_write+0x150>
 800c9e6:	68fb      	ldr	r3, [r7, #12]
 800c9e8:	2201      	movs	r2, #1
 800c9ea:	755a      	strb	r2, [r3, #21]
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	e0c8      	b.n	800cb82 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	7d1b      	ldrb	r3, [r3, #20]
 800c9f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9f8:	b2da      	uxtb	r2, r3
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c9fe:	693a      	ldr	r2, [r7, #16]
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	69db      	ldr	r3, [r3, #28]
 800ca04:	4619      	mov	r1, r3
 800ca06:	4610      	mov	r0, r2
 800ca08:	f7fe fbf2 	bl	800b1f0 <clust2sect>
 800ca0c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ca0e:	697b      	ldr	r3, [r7, #20]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d104      	bne.n	800ca1e <f_write+0x17e>
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	2202      	movs	r2, #2
 800ca18:	755a      	strb	r2, [r3, #21]
 800ca1a:	2302      	movs	r3, #2
 800ca1c:	e0b1      	b.n	800cb82 <f_write+0x2e2>
			sect += csect;
 800ca1e:	697a      	ldr	r2, [r7, #20]
 800ca20:	69bb      	ldr	r3, [r7, #24]
 800ca22:	4413      	add	r3, r2
 800ca24:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	0a5b      	lsrs	r3, r3, #9
 800ca2a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ca2c:	6a3b      	ldr	r3, [r7, #32]
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d03c      	beq.n	800caac <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ca32:	69ba      	ldr	r2, [r7, #24]
 800ca34:	6a3b      	ldr	r3, [r7, #32]
 800ca36:	4413      	add	r3, r2
 800ca38:	693a      	ldr	r2, [r7, #16]
 800ca3a:	8952      	ldrh	r2, [r2, #10]
 800ca3c:	4293      	cmp	r3, r2
 800ca3e:	d905      	bls.n	800ca4c <f_write+0x1ac>
					cc = fs->csize - csect;
 800ca40:	693b      	ldr	r3, [r7, #16]
 800ca42:	895b      	ldrh	r3, [r3, #10]
 800ca44:	461a      	mov	r2, r3
 800ca46:	69bb      	ldr	r3, [r7, #24]
 800ca48:	1ad3      	subs	r3, r2, r3
 800ca4a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	7858      	ldrb	r0, [r3, #1]
 800ca50:	6a3b      	ldr	r3, [r7, #32]
 800ca52:	697a      	ldr	r2, [r7, #20]
 800ca54:	69f9      	ldr	r1, [r7, #28]
 800ca56:	f7fe f841 	bl	800aadc <disk_write>
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d004      	beq.n	800ca6a <f_write+0x1ca>
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	2201      	movs	r2, #1
 800ca64:	755a      	strb	r2, [r3, #21]
 800ca66:	2301      	movs	r3, #1
 800ca68:	e08b      	b.n	800cb82 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	6a1a      	ldr	r2, [r3, #32]
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	1ad3      	subs	r3, r2, r3
 800ca72:	6a3a      	ldr	r2, [r7, #32]
 800ca74:	429a      	cmp	r2, r3
 800ca76:	d915      	bls.n	800caa4 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	6a1a      	ldr	r2, [r3, #32]
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	1ad3      	subs	r3, r2, r3
 800ca86:	025b      	lsls	r3, r3, #9
 800ca88:	69fa      	ldr	r2, [r7, #28]
 800ca8a:	4413      	add	r3, r2
 800ca8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca90:	4619      	mov	r1, r3
 800ca92:	f7fe f8e3 	bl	800ac5c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	7d1b      	ldrb	r3, [r3, #20]
 800ca9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca9e:	b2da      	uxtb	r2, r3
 800caa0:	68fb      	ldr	r3, [r7, #12]
 800caa2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800caa4:	6a3b      	ldr	r3, [r7, #32]
 800caa6:	025b      	lsls	r3, r3, #9
 800caa8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800caaa:	e03f      	b.n	800cb2c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	6a1b      	ldr	r3, [r3, #32]
 800cab0:	697a      	ldr	r2, [r7, #20]
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d016      	beq.n	800cae4 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	699a      	ldr	r2, [r3, #24]
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d210      	bcs.n	800cae4 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cac2:	693b      	ldr	r3, [r7, #16]
 800cac4:	7858      	ldrb	r0, [r3, #1]
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cacc:	2301      	movs	r3, #1
 800cace:	697a      	ldr	r2, [r7, #20]
 800cad0:	f7fd ffe4 	bl	800aa9c <disk_read>
 800cad4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d004      	beq.n	800cae4 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	2201      	movs	r2, #1
 800cade:	755a      	strb	r2, [r3, #21]
 800cae0:	2301      	movs	r3, #1
 800cae2:	e04e      	b.n	800cb82 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	697a      	ldr	r2, [r7, #20]
 800cae8:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	699b      	ldr	r3, [r3, #24]
 800caee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caf2:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800caf6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800caf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d901      	bls.n	800cb04 <f_write+0x264>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	699b      	ldr	r3, [r3, #24]
 800cb0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb12:	4413      	add	r3, r2
 800cb14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb16:	69f9      	ldr	r1, [r7, #28]
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7fe f89f 	bl	800ac5c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	7d1b      	ldrb	r3, [r3, #20]
 800cb22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cb26:	b2da      	uxtb	r2, r3
 800cb28:	68fb      	ldr	r3, [r7, #12]
 800cb2a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800cb2c:	69fa      	ldr	r2, [r7, #28]
 800cb2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb30:	4413      	add	r3, r2
 800cb32:	61fb      	str	r3, [r7, #28]
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	699a      	ldr	r2, [r3, #24]
 800cb38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb3a:	441a      	add	r2, r3
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	619a      	str	r2, [r3, #24]
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	68da      	ldr	r2, [r3, #12]
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	699b      	ldr	r3, [r3, #24]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	bf38      	it	cc
 800cb4c:	461a      	movcc	r2, r3
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	60da      	str	r2, [r3, #12]
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	681a      	ldr	r2, [r3, #0]
 800cb56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb58:	441a      	add	r2, r3
 800cb5a:	683b      	ldr	r3, [r7, #0]
 800cb5c:	601a      	str	r2, [r3, #0]
 800cb5e:	687a      	ldr	r2, [r7, #4]
 800cb60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb62:	1ad3      	subs	r3, r2, r3
 800cb64:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	f47f aed4 	bne.w	800c916 <f_write+0x76>
 800cb6e:	e000      	b.n	800cb72 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cb70:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	7d1b      	ldrb	r3, [r3, #20]
 800cb76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb7a:	b2da      	uxtb	r2, r3
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800cb80:	2300      	movs	r3, #0
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3730      	adds	r7, #48	; 0x30
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}

0800cb8a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800cb8a:	b580      	push	{r7, lr}
 800cb8c:	b086      	sub	sp, #24
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	f107 0208 	add.w	r2, r7, #8
 800cb98:	4611      	mov	r1, r2
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	f7ff fc46 	bl	800c42c <validate>
 800cba0:	4603      	mov	r3, r0
 800cba2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cba4:	7dfb      	ldrb	r3, [r7, #23]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d168      	bne.n	800cc7c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	7d1b      	ldrb	r3, [r3, #20]
 800cbae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d062      	beq.n	800cc7c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	7d1b      	ldrb	r3, [r3, #20]
 800cbba:	b25b      	sxtb	r3, r3
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	da15      	bge.n	800cbec <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	7858      	ldrb	r0, [r3, #1]
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	6a1a      	ldr	r2, [r3, #32]
 800cbce:	2301      	movs	r3, #1
 800cbd0:	f7fd ff84 	bl	800aadc <disk_write>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d001      	beq.n	800cbde <f_sync+0x54>
 800cbda:	2301      	movs	r3, #1
 800cbdc:	e04f      	b.n	800cc7e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	7d1b      	ldrb	r3, [r3, #20]
 800cbe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbe6:	b2da      	uxtb	r2, r3
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cbec:	f7fd fce2 	bl	800a5b4 <get_fattime>
 800cbf0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800cbf2:	68ba      	ldr	r2, [r7, #8]
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbf8:	4619      	mov	r1, r3
 800cbfa:	4610      	mov	r0, r2
 800cbfc:	f7fe fa5c 	bl	800b0b8 <move_window>
 800cc00:	4603      	mov	r3, r0
 800cc02:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800cc04:	7dfb      	ldrb	r3, [r7, #23]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d138      	bne.n	800cc7c <f_sync+0xf2>
					dir = fp->dir_ptr;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc0e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	330b      	adds	r3, #11
 800cc14:	781a      	ldrb	r2, [r3, #0]
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	330b      	adds	r3, #11
 800cc1a:	f042 0220 	orr.w	r2, r2, #32
 800cc1e:	b2d2      	uxtb	r2, r2
 800cc20:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6818      	ldr	r0, [r3, #0]
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	689b      	ldr	r3, [r3, #8]
 800cc2a:	461a      	mov	r2, r3
 800cc2c:	68f9      	ldr	r1, [r7, #12]
 800cc2e:	f7fe ff69 	bl	800bb04 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	f103 021c 	add.w	r2, r3, #28
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	68db      	ldr	r3, [r3, #12]
 800cc3c:	4619      	mov	r1, r3
 800cc3e:	4610      	mov	r0, r2
 800cc40:	f7fd ffe0 	bl	800ac04 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	3316      	adds	r3, #22
 800cc48:	6939      	ldr	r1, [r7, #16]
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	f7fd ffda 	bl	800ac04 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	3312      	adds	r3, #18
 800cc54:	2100      	movs	r1, #0
 800cc56:	4618      	mov	r0, r3
 800cc58:	f7fd ffb9 	bl	800abce <st_word>
					fs->wflag = 1;
 800cc5c:	68bb      	ldr	r3, [r7, #8]
 800cc5e:	2201      	movs	r2, #1
 800cc60:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	4618      	mov	r0, r3
 800cc66:	f7fe fa55 	bl	800b114 <sync_fs>
 800cc6a:	4603      	mov	r3, r0
 800cc6c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	7d1b      	ldrb	r3, [r3, #20]
 800cc72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc76:	b2da      	uxtb	r2, r3
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cc7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3718      	adds	r7, #24
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}

0800cc86 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cc86:	b580      	push	{r7, lr}
 800cc88:	b084      	sub	sp, #16
 800cc8a:	af00      	add	r7, sp, #0
 800cc8c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f7ff ff7b 	bl	800cb8a <f_sync>
 800cc94:	4603      	mov	r3, r0
 800cc96:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cc98:	7bfb      	ldrb	r3, [r7, #15]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d118      	bne.n	800ccd0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f107 0208 	add.w	r2, r7, #8
 800cca4:	4611      	mov	r1, r2
 800cca6:	4618      	mov	r0, r3
 800cca8:	f7ff fbc0 	bl	800c42c <validate>
 800ccac:	4603      	mov	r3, r0
 800ccae:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ccb0:	7bfb      	ldrb	r3, [r7, #15]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d10c      	bne.n	800ccd0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	691b      	ldr	r3, [r3, #16]
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f7fe f958 	bl	800af70 <dec_lock>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ccc4:	7bfb      	ldrb	r3, [r7, #15]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d102      	bne.n	800ccd0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2200      	movs	r2, #0
 800ccce:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ccd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3710      	adds	r7, #16
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}

0800ccda <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800ccda:	b580      	push	{r7, lr}
 800ccdc:	b090      	sub	sp, #64	; 0x40
 800ccde:	af00      	add	r7, sp, #0
 800cce0:	6078      	str	r0, [r7, #4]
 800cce2:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f107 0208 	add.w	r2, r7, #8
 800ccea:	4611      	mov	r1, r2
 800ccec:	4618      	mov	r0, r3
 800ccee:	f7ff fb9d 	bl	800c42c <validate>
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800ccf8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d103      	bne.n	800cd08 <f_lseek+0x2e>
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	7d5b      	ldrb	r3, [r3, #21]
 800cd04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800cd08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d002      	beq.n	800cd16 <f_lseek+0x3c>
 800cd10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cd14:	e1e6      	b.n	800d0e4 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	f000 80d1 	beq.w	800cec2 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800cd20:	683b      	ldr	r3, [r7, #0]
 800cd22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd26:	d15a      	bne.n	800cdde <f_lseek+0x104>
			tbl = fp->cltbl;
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd2c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800cd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd30:	1d1a      	adds	r2, r3, #4
 800cd32:	627a      	str	r2, [r7, #36]	; 0x24
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	617b      	str	r3, [r7, #20]
 800cd38:	2302      	movs	r3, #2
 800cd3a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	689b      	ldr	r3, [r3, #8]
 800cd40:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800cd42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d03a      	beq.n	800cdbe <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800cd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd4a:	613b      	str	r3, [r7, #16]
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd52:	3302      	adds	r3, #2
 800cd54:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800cd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd58:	60fb      	str	r3, [r7, #12]
 800cd5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd5c:	3301      	adds	r3, #1
 800cd5e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cd64:	4618      	mov	r0, r3
 800cd66:	f7fe fa62 	bl	800b22e <get_fat>
 800cd6a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800cd6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd6e:	2b01      	cmp	r3, #1
 800cd70:	d804      	bhi.n	800cd7c <f_lseek+0xa2>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2202      	movs	r2, #2
 800cd76:	755a      	strb	r2, [r3, #21]
 800cd78:	2302      	movs	r3, #2
 800cd7a:	e1b3      	b.n	800d0e4 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cd82:	d104      	bne.n	800cd8e <f_lseek+0xb4>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2201      	movs	r2, #1
 800cd88:	755a      	strb	r2, [r3, #21]
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	e1aa      	b.n	800d0e4 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	3301      	adds	r3, #1
 800cd92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd94:	429a      	cmp	r2, r3
 800cd96:	d0de      	beq.n	800cd56 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800cd98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd9a:	697b      	ldr	r3, [r7, #20]
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	d809      	bhi.n	800cdb4 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800cda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda2:	1d1a      	adds	r2, r3, #4
 800cda4:	627a      	str	r2, [r7, #36]	; 0x24
 800cda6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cda8:	601a      	str	r2, [r3, #0]
 800cdaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdac:	1d1a      	adds	r2, r3, #4
 800cdae:	627a      	str	r2, [r7, #36]	; 0x24
 800cdb0:	693a      	ldr	r2, [r7, #16]
 800cdb2:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	695b      	ldr	r3, [r3, #20]
 800cdb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cdba:	429a      	cmp	r2, r3
 800cdbc:	d3c4      	bcc.n	800cd48 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdc4:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800cdc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	429a      	cmp	r2, r3
 800cdcc:	d803      	bhi.n	800cdd6 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800cdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdd0:	2200      	movs	r2, #0
 800cdd2:	601a      	str	r2, [r3, #0]
 800cdd4:	e184      	b.n	800d0e0 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800cdd6:	2311      	movs	r3, #17
 800cdd8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800cddc:	e180      	b.n	800d0e0 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	68db      	ldr	r3, [r3, #12]
 800cde2:	683a      	ldr	r2, [r7, #0]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d902      	bls.n	800cdee <f_lseek+0x114>
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	68db      	ldr	r3, [r3, #12]
 800cdec:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	683a      	ldr	r2, [r7, #0]
 800cdf2:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	f000 8172 	beq.w	800d0e0 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800cdfc:	683b      	ldr	r3, [r7, #0]
 800cdfe:	3b01      	subs	r3, #1
 800ce00:	4619      	mov	r1, r3
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f7fe fca4 	bl	800b750 <clmt_clust>
 800ce08:	4602      	mov	r2, r0
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800ce0e:	68ba      	ldr	r2, [r7, #8]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	69db      	ldr	r3, [r3, #28]
 800ce14:	4619      	mov	r1, r3
 800ce16:	4610      	mov	r0, r2
 800ce18:	f7fe f9ea 	bl	800b1f0 <clust2sect>
 800ce1c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800ce1e:	69bb      	ldr	r3, [r7, #24]
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d104      	bne.n	800ce2e <f_lseek+0x154>
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	2202      	movs	r2, #2
 800ce28:	755a      	strb	r2, [r3, #21]
 800ce2a:	2302      	movs	r3, #2
 800ce2c:	e15a      	b.n	800d0e4 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	3b01      	subs	r3, #1
 800ce32:	0a5b      	lsrs	r3, r3, #9
 800ce34:	68ba      	ldr	r2, [r7, #8]
 800ce36:	8952      	ldrh	r2, [r2, #10]
 800ce38:	3a01      	subs	r2, #1
 800ce3a:	4013      	ands	r3, r2
 800ce3c:	69ba      	ldr	r2, [r7, #24]
 800ce3e:	4413      	add	r3, r2
 800ce40:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	699b      	ldr	r3, [r3, #24]
 800ce46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	f000 8148 	beq.w	800d0e0 <f_lseek+0x406>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	6a1b      	ldr	r3, [r3, #32]
 800ce54:	69ba      	ldr	r2, [r7, #24]
 800ce56:	429a      	cmp	r2, r3
 800ce58:	f000 8142 	beq.w	800d0e0 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	7d1b      	ldrb	r3, [r3, #20]
 800ce60:	b25b      	sxtb	r3, r3
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	da18      	bge.n	800ce98 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ce66:	68bb      	ldr	r3, [r7, #8]
 800ce68:	7858      	ldrb	r0, [r3, #1]
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6a1a      	ldr	r2, [r3, #32]
 800ce74:	2301      	movs	r3, #1
 800ce76:	f7fd fe31 	bl	800aadc <disk_write>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d004      	beq.n	800ce8a <f_lseek+0x1b0>
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	2201      	movs	r2, #1
 800ce84:	755a      	strb	r2, [r3, #21]
 800ce86:	2301      	movs	r3, #1
 800ce88:	e12c      	b.n	800d0e4 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	7d1b      	ldrb	r3, [r3, #20]
 800ce8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce92:	b2da      	uxtb	r2, r3
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800ce98:	68bb      	ldr	r3, [r7, #8]
 800ce9a:	7858      	ldrb	r0, [r3, #1]
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cea2:	2301      	movs	r3, #1
 800cea4:	69ba      	ldr	r2, [r7, #24]
 800cea6:	f7fd fdf9 	bl	800aa9c <disk_read>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d004      	beq.n	800ceba <f_lseek+0x1e0>
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2201      	movs	r2, #1
 800ceb4:	755a      	strb	r2, [r3, #21]
 800ceb6:	2301      	movs	r3, #1
 800ceb8:	e114      	b.n	800d0e4 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	69ba      	ldr	r2, [r7, #24]
 800cebe:	621a      	str	r2, [r3, #32]
 800cec0:	e10e      	b.n	800d0e0 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	68db      	ldr	r3, [r3, #12]
 800cec6:	683a      	ldr	r2, [r7, #0]
 800cec8:	429a      	cmp	r2, r3
 800ceca:	d908      	bls.n	800cede <f_lseek+0x204>
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	7d1b      	ldrb	r3, [r3, #20]
 800ced0:	f003 0302 	and.w	r3, r3, #2
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d102      	bne.n	800cede <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	68db      	ldr	r3, [r3, #12]
 800cedc:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	699b      	ldr	r3, [r3, #24]
 800cee2:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800cee4:	2300      	movs	r3, #0
 800cee6:	637b      	str	r3, [r7, #52]	; 0x34
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ceec:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800ceee:	683b      	ldr	r3, [r7, #0]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	f000 80a7 	beq.w	800d044 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	895b      	ldrh	r3, [r3, #10]
 800cefa:	025b      	lsls	r3, r3, #9
 800cefc:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800cefe:	6a3b      	ldr	r3, [r7, #32]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d01b      	beq.n	800cf3c <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	1e5a      	subs	r2, r3, #1
 800cf08:	69fb      	ldr	r3, [r7, #28]
 800cf0a:	fbb2 f2f3 	udiv	r2, r2, r3
 800cf0e:	6a3b      	ldr	r3, [r7, #32]
 800cf10:	1e59      	subs	r1, r3, #1
 800cf12:	69fb      	ldr	r3, [r7, #28]
 800cf14:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d30f      	bcc.n	800cf3c <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800cf1c:	6a3b      	ldr	r3, [r7, #32]
 800cf1e:	1e5a      	subs	r2, r3, #1
 800cf20:	69fb      	ldr	r3, [r7, #28]
 800cf22:	425b      	negs	r3, r3
 800cf24:	401a      	ands	r2, r3
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	699b      	ldr	r3, [r3, #24]
 800cf2e:	683a      	ldr	r2, [r7, #0]
 800cf30:	1ad3      	subs	r3, r2, r3
 800cf32:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	69db      	ldr	r3, [r3, #28]
 800cf38:	63bb      	str	r3, [r7, #56]	; 0x38
 800cf3a:	e022      	b.n	800cf82 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	689b      	ldr	r3, [r3, #8]
 800cf40:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800cf42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d119      	bne.n	800cf7c <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2100      	movs	r1, #0
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f7fe fb67 	bl	800b620 <create_chain>
 800cf52:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cf54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf56:	2b01      	cmp	r3, #1
 800cf58:	d104      	bne.n	800cf64 <f_lseek+0x28a>
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2202      	movs	r2, #2
 800cf5e:	755a      	strb	r2, [r3, #21]
 800cf60:	2302      	movs	r3, #2
 800cf62:	e0bf      	b.n	800d0e4 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cf64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf6a:	d104      	bne.n	800cf76 <f_lseek+0x29c>
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	2201      	movs	r2, #1
 800cf70:	755a      	strb	r2, [r3, #21]
 800cf72:	2301      	movs	r3, #1
 800cf74:	e0b6      	b.n	800d0e4 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf7a:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf80:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800cf82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d05d      	beq.n	800d044 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800cf88:	e03a      	b.n	800d000 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800cf8a:	683a      	ldr	r2, [r7, #0]
 800cf8c:	69fb      	ldr	r3, [r7, #28]
 800cf8e:	1ad3      	subs	r3, r2, r3
 800cf90:	603b      	str	r3, [r7, #0]
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	699a      	ldr	r2, [r3, #24]
 800cf96:	69fb      	ldr	r3, [r7, #28]
 800cf98:	441a      	add	r2, r3
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	7d1b      	ldrb	r3, [r3, #20]
 800cfa2:	f003 0302 	and.w	r3, r3, #2
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d00b      	beq.n	800cfc2 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f7fe fb36 	bl	800b620 <create_chain>
 800cfb4:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800cfb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d108      	bne.n	800cfce <f_lseek+0x2f4>
							ofs = 0; break;
 800cfbc:	2300      	movs	r3, #0
 800cfbe:	603b      	str	r3, [r7, #0]
 800cfc0:	e022      	b.n	800d008 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f7fe f931 	bl	800b22e <get_fat>
 800cfcc:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cfce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cfd4:	d104      	bne.n	800cfe0 <f_lseek+0x306>
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2201      	movs	r2, #1
 800cfda:	755a      	strb	r2, [r3, #21]
 800cfdc:	2301      	movs	r3, #1
 800cfde:	e081      	b.n	800d0e4 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800cfe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfe2:	2b01      	cmp	r3, #1
 800cfe4:	d904      	bls.n	800cff0 <f_lseek+0x316>
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	695b      	ldr	r3, [r3, #20]
 800cfea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d304      	bcc.n	800cffa <f_lseek+0x320>
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	2202      	movs	r2, #2
 800cff4:	755a      	strb	r2, [r3, #21]
 800cff6:	2302      	movs	r3, #2
 800cff8:	e074      	b.n	800d0e4 <f_lseek+0x40a>
					fp->clust = clst;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cffe:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800d000:	683a      	ldr	r2, [r7, #0]
 800d002:	69fb      	ldr	r3, [r7, #28]
 800d004:	429a      	cmp	r2, r3
 800d006:	d8c0      	bhi.n	800cf8a <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	699a      	ldr	r2, [r3, #24]
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	441a      	add	r2, r3
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800d014:	683b      	ldr	r3, [r7, #0]
 800d016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d012      	beq.n	800d044 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d01e:	68bb      	ldr	r3, [r7, #8]
 800d020:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d022:	4618      	mov	r0, r3
 800d024:	f7fe f8e4 	bl	800b1f0 <clust2sect>
 800d028:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d02a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d104      	bne.n	800d03a <f_lseek+0x360>
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	2202      	movs	r2, #2
 800d034:	755a      	strb	r2, [r3, #21]
 800d036:	2302      	movs	r3, #2
 800d038:	e054      	b.n	800d0e4 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800d03a:	683b      	ldr	r3, [r7, #0]
 800d03c:	0a5b      	lsrs	r3, r3, #9
 800d03e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d040:	4413      	add	r3, r2
 800d042:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	699a      	ldr	r2, [r3, #24]
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	68db      	ldr	r3, [r3, #12]
 800d04c:	429a      	cmp	r2, r3
 800d04e:	d90a      	bls.n	800d066 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	699a      	ldr	r2, [r3, #24]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	7d1b      	ldrb	r3, [r3, #20]
 800d05c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d060:	b2da      	uxtb	r2, r3
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	699b      	ldr	r3, [r3, #24]
 800d06a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d036      	beq.n	800d0e0 <f_lseek+0x406>
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	6a1b      	ldr	r3, [r3, #32]
 800d076:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d078:	429a      	cmp	r2, r3
 800d07a:	d031      	beq.n	800d0e0 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	7d1b      	ldrb	r3, [r3, #20]
 800d080:	b25b      	sxtb	r3, r3
 800d082:	2b00      	cmp	r3, #0
 800d084:	da18      	bge.n	800d0b8 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	7858      	ldrb	r0, [r3, #1]
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	6a1a      	ldr	r2, [r3, #32]
 800d094:	2301      	movs	r3, #1
 800d096:	f7fd fd21 	bl	800aadc <disk_write>
 800d09a:	4603      	mov	r3, r0
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d004      	beq.n	800d0aa <f_lseek+0x3d0>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2201      	movs	r2, #1
 800d0a4:	755a      	strb	r2, [r3, #21]
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	e01c      	b.n	800d0e4 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	7d1b      	ldrb	r3, [r3, #20]
 800d0ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0b2:	b2da      	uxtb	r2, r3
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d0b8:	68bb      	ldr	r3, [r7, #8]
 800d0ba:	7858      	ldrb	r0, [r3, #1]
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d0c2:	2301      	movs	r3, #1
 800d0c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0c6:	f7fd fce9 	bl	800aa9c <disk_read>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d004      	beq.n	800d0da <f_lseek+0x400>
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	755a      	strb	r2, [r3, #21]
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	e004      	b.n	800d0e4 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0de:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800d0e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	3740      	adds	r7, #64	; 0x40
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}

0800d0ec <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b092      	sub	sp, #72	; 0x48
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	60f8      	str	r0, [r7, #12]
 800d0f4:	60b9      	str	r1, [r7, #8]
 800d0f6:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800d0f8:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d0fc:	f107 030c 	add.w	r3, r7, #12
 800d100:	2200      	movs	r2, #0
 800d102:	4618      	mov	r0, r3
 800d104:	f7fe ff46 	bl	800bf94 <find_volume>
 800d108:	4603      	mov	r3, r0
 800d10a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800d10e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d112:	2b00      	cmp	r3, #0
 800d114:	f040 8099 	bne.w	800d24a <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800d118:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800d11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d120:	691a      	ldr	r2, [r3, #16]
 800d122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d124:	695b      	ldr	r3, [r3, #20]
 800d126:	3b02      	subs	r3, #2
 800d128:	429a      	cmp	r2, r3
 800d12a:	d804      	bhi.n	800d136 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800d12c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d12e:	691a      	ldr	r2, [r3, #16]
 800d130:	68bb      	ldr	r3, [r7, #8]
 800d132:	601a      	str	r2, [r3, #0]
 800d134:	e089      	b.n	800d24a <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800d136:	2300      	movs	r3, #0
 800d138:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800d13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d13c:	781b      	ldrb	r3, [r3, #0]
 800d13e:	2b01      	cmp	r3, #1
 800d140:	d128      	bne.n	800d194 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800d142:	2302      	movs	r3, #2
 800d144:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d148:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800d14a:	f107 0314 	add.w	r3, r7, #20
 800d14e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d150:	4618      	mov	r0, r3
 800d152:	f7fe f86c 	bl	800b22e <get_fat>
 800d156:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800d158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d15a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d15e:	d103      	bne.n	800d168 <f_getfree+0x7c>
 800d160:	2301      	movs	r3, #1
 800d162:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d166:	e063      	b.n	800d230 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800d168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d16a:	2b01      	cmp	r3, #1
 800d16c:	d103      	bne.n	800d176 <f_getfree+0x8a>
 800d16e:	2302      	movs	r3, #2
 800d170:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d174:	e05c      	b.n	800d230 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800d176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d102      	bne.n	800d182 <f_getfree+0x96>
 800d17c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d17e:	3301      	adds	r3, #1
 800d180:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800d182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d184:	3301      	adds	r3, #1
 800d186:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d18a:	695b      	ldr	r3, [r3, #20]
 800d18c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d18e:	429a      	cmp	r2, r3
 800d190:	d3db      	bcc.n	800d14a <f_getfree+0x5e>
 800d192:	e04d      	b.n	800d230 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800d194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d196:	695b      	ldr	r3, [r3, #20]
 800d198:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d19c:	6a1b      	ldr	r3, [r3, #32]
 800d19e:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	637b      	str	r3, [r7, #52]	; 0x34
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800d1a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d113      	bne.n	800d1d6 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800d1ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b2:	1c5a      	adds	r2, r3, #1
 800d1b4:	63ba      	str	r2, [r7, #56]	; 0x38
 800d1b6:	4619      	mov	r1, r3
 800d1b8:	f7fd ff7e 	bl	800b0b8 <move_window>
 800d1bc:	4603      	mov	r3, r0
 800d1be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800d1c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d131      	bne.n	800d22e <f_getfree+0x142>
							p = fs->win;
 800d1ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1cc:	3330      	adds	r3, #48	; 0x30
 800d1ce:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800d1d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d1d4:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800d1d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	2b02      	cmp	r3, #2
 800d1dc:	d10f      	bne.n	800d1fe <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800d1de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1e0:	f7fd fcba 	bl	800ab58 <ld_word>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d102      	bne.n	800d1f0 <f_getfree+0x104>
 800d1ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d1ec:	3301      	adds	r3, #1
 800d1ee:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800d1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f2:	3302      	adds	r3, #2
 800d1f4:	633b      	str	r3, [r7, #48]	; 0x30
 800d1f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1f8:	3b02      	subs	r3, #2
 800d1fa:	637b      	str	r3, [r7, #52]	; 0x34
 800d1fc:	e010      	b.n	800d220 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800d1fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d200:	f7fd fcc2 	bl	800ab88 <ld_dword>
 800d204:	4603      	mov	r3, r0
 800d206:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d102      	bne.n	800d214 <f_getfree+0x128>
 800d20e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d210:	3301      	adds	r3, #1
 800d212:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800d214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d216:	3304      	adds	r3, #4
 800d218:	633b      	str	r3, [r7, #48]	; 0x30
 800d21a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d21c:	3b04      	subs	r3, #4
 800d21e:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800d220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d222:	3b01      	subs	r3, #1
 800d224:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d1bd      	bne.n	800d1a8 <f_getfree+0xbc>
 800d22c:	e000      	b.n	800d230 <f_getfree+0x144>
							if (res != FR_OK) break;
 800d22e:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800d230:	68bb      	ldr	r3, [r7, #8]
 800d232:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d234:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800d236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d238:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d23a:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800d23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d23e:	791a      	ldrb	r2, [r3, #4]
 800d240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d242:	f042 0201 	orr.w	r2, r2, #1
 800d246:	b2d2      	uxtb	r2, r2
 800d248:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800d24a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3748      	adds	r7, #72	; 0x48
 800d252:	46bd      	mov	sp, r7
 800d254:	bd80      	pop	{r7, pc}

0800d256 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800d256:	b580      	push	{r7, lr}
 800d258:	b084      	sub	sp, #16
 800d25a:	af00      	add	r7, sp, #0
 800d25c:	6078      	str	r0, [r7, #4]
 800d25e:	460b      	mov	r3, r1
 800d260:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 800d262:	78fb      	ldrb	r3, [r7, #3]
 800d264:	2b0a      	cmp	r3, #10
 800d266:	d103      	bne.n	800d270 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 800d268:	210d      	movs	r1, #13
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f7ff fff3 	bl	800d256 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	685b      	ldr	r3, [r3, #4]
 800d274:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	db25      	blt.n	800d2c8 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	1c5a      	adds	r2, r3, #1
 800d280:	60fa      	str	r2, [r7, #12]
 800d282:	687a      	ldr	r2, [r7, #4]
 800d284:	4413      	add	r3, r2
 800d286:	78fa      	ldrb	r2, [r7, #3]
 800d288:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	2b3c      	cmp	r3, #60	; 0x3c
 800d28e:	dd12      	ble.n	800d2b6 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	6818      	ldr	r0, [r3, #0]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f103 010c 	add.w	r1, r3, #12
 800d29a:	68fa      	ldr	r2, [r7, #12]
 800d29c:	f107 0308 	add.w	r3, r7, #8
 800d2a0:	f7ff fafe 	bl	800c8a0 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800d2a4:	68ba      	ldr	r2, [r7, #8]
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	d101      	bne.n	800d2b0 <putc_bfd+0x5a>
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	e001      	b.n	800d2b4 <putc_bfd+0x5e>
 800d2b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d2b4:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	68fa      	ldr	r2, [r7, #12]
 800d2ba:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	689b      	ldr	r3, [r3, #8]
 800d2c0:	1c5a      	adds	r2, r3, #1
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	609a      	str	r2, [r3, #8]
 800d2c6:	e000      	b.n	800d2ca <putc_bfd+0x74>
	if (i < 0) return;
 800d2c8:	bf00      	nop
}
 800d2ca:	3710      	adds	r7, #16
 800d2cc:	46bd      	mov	sp, r7
 800d2ce:	bd80      	pop	{r7, pc}

0800d2d0 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800d2d0:	b580      	push	{r7, lr}
 800d2d2:	b084      	sub	sp, #16
 800d2d4:	af00      	add	r7, sp, #0
 800d2d6:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	685b      	ldr	r3, [r3, #4]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	db16      	blt.n	800d30e <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	6818      	ldr	r0, [r3, #0]
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f103 010c 	add.w	r1, r3, #12
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	685b      	ldr	r3, [r3, #4]
 800d2ee:	461a      	mov	r2, r3
 800d2f0:	f107 030c 	add.w	r3, r7, #12
 800d2f4:	f7ff fad4 	bl	800c8a0 <f_write>
 800d2f8:	4603      	mov	r3, r0
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d107      	bne.n	800d30e <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	685b      	ldr	r3, [r3, #4]
 800d302:	68fa      	ldr	r2, [r7, #12]
 800d304:	4293      	cmp	r3, r2
 800d306:	d102      	bne.n	800d30e <putc_flush+0x3e>
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	689b      	ldr	r3, [r3, #8]
 800d30c:	e001      	b.n	800d312 <putc_flush+0x42>
	return EOF;
 800d30e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800d312:	4618      	mov	r0, r3
 800d314:	3710      	adds	r7, #16
 800d316:	46bd      	mov	sp, r7
 800d318:	bd80      	pop	{r7, pc}

0800d31a <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800d31a:	b480      	push	{r7}
 800d31c:	b083      	sub	sp, #12
 800d31e:	af00      	add	r7, sp, #0
 800d320:	6078      	str	r0, [r7, #4]
 800d322:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	683a      	ldr	r2, [r7, #0]
 800d328:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2200      	movs	r2, #0
 800d32e:	605a      	str	r2, [r3, #4]
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	685a      	ldr	r2, [r3, #4]
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	609a      	str	r2, [r3, #8]
}
 800d338:	bf00      	nop
 800d33a:	370c      	adds	r7, #12
 800d33c:	46bd      	mov	sp, r7
 800d33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d342:	4770      	bx	lr

0800d344 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800d344:	b40e      	push	{r1, r2, r3}
 800d346:	b580      	push	{r7, lr}
 800d348:	b0a7      	sub	sp, #156	; 0x9c
 800d34a:	af00      	add	r7, sp, #0
 800d34c:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800d34e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d352:	6879      	ldr	r1, [r7, #4]
 800d354:	4618      	mov	r0, r3
 800d356:	f7ff ffe0 	bl	800d31a <putc_init>

	va_start(arp, fmt);
 800d35a:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800d35e:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800d360:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d364:	1c5a      	adds	r2, r3, #1
 800d366:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d36a:	781b      	ldrb	r3, [r3, #0]
 800d36c:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800d370:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d374:	2b00      	cmp	r3, #0
 800d376:	f000 81f4 	beq.w	800d762 <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 800d37a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d37e:	2b25      	cmp	r3, #37	; 0x25
 800d380:	d008      	beq.n	800d394 <f_printf+0x50>
			putc_bfd(&pb, c);
 800d382:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800d386:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d38a:	4611      	mov	r1, r2
 800d38c:	4618      	mov	r0, r3
 800d38e:	f7ff ff62 	bl	800d256 <putc_bfd>
			continue;
 800d392:	e1e5      	b.n	800d760 <f_printf+0x41c>
		}
		w = f = 0;
 800d394:	2300      	movs	r3, #0
 800d396:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800d39a:	2300      	movs	r3, #0
 800d39c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800d3a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d3a4:	1c5a      	adds	r2, r3, #1
 800d3a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d3aa:	781b      	ldrb	r3, [r3, #0]
 800d3ac:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800d3b0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d3b4:	2b30      	cmp	r3, #48	; 0x30
 800d3b6:	d10b      	bne.n	800d3d0 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800d3b8:	2301      	movs	r3, #1
 800d3ba:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800d3be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d3c2:	1c5a      	adds	r2, r3, #1
 800d3c4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d3c8:	781b      	ldrb	r3, [r3, #0]
 800d3ca:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800d3ce:	e024      	b.n	800d41a <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800d3d0:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d3d4:	2b2d      	cmp	r3, #45	; 0x2d
 800d3d6:	d120      	bne.n	800d41a <f_printf+0xd6>
				f = 2; c = *fmt++;
 800d3d8:	2302      	movs	r3, #2
 800d3da:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800d3de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d3e2:	1c5a      	adds	r2, r3, #1
 800d3e4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d3e8:	781b      	ldrb	r3, [r3, #0]
 800d3ea:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800d3ee:	e014      	b.n	800d41a <f_printf+0xd6>
			w = w * 10 + c - '0';
 800d3f0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d3f4:	4613      	mov	r3, r2
 800d3f6:	009b      	lsls	r3, r3, #2
 800d3f8:	4413      	add	r3, r2
 800d3fa:	005b      	lsls	r3, r3, #1
 800d3fc:	461a      	mov	r2, r3
 800d3fe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d402:	4413      	add	r3, r2
 800d404:	3b30      	subs	r3, #48	; 0x30
 800d406:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800d40a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d40e:	1c5a      	adds	r2, r3, #1
 800d410:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800d41a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d41e:	2b2f      	cmp	r3, #47	; 0x2f
 800d420:	d903      	bls.n	800d42a <f_printf+0xe6>
 800d422:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d426:	2b39      	cmp	r3, #57	; 0x39
 800d428:	d9e2      	bls.n	800d3f0 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800d42a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d42e:	2b6c      	cmp	r3, #108	; 0x6c
 800d430:	d003      	beq.n	800d43a <f_printf+0xf6>
 800d432:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d436:	2b4c      	cmp	r3, #76	; 0x4c
 800d438:	d10d      	bne.n	800d456 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800d43a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d43e:	f043 0304 	orr.w	r3, r3, #4
 800d442:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800d446:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d44a:	1c5a      	adds	r2, r3, #1
 800d44c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d450:	781b      	ldrb	r3, [r3, #0]
 800d452:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800d456:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	f000 8183 	beq.w	800d766 <f_printf+0x422>
		d = c;
 800d460:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d464:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800d468:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d46c:	2b60      	cmp	r3, #96	; 0x60
 800d46e:	d908      	bls.n	800d482 <f_printf+0x13e>
 800d470:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d474:	2b7a      	cmp	r3, #122	; 0x7a
 800d476:	d804      	bhi.n	800d482 <f_printf+0x13e>
 800d478:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d47c:	3b20      	subs	r3, #32
 800d47e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800d482:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d486:	3b42      	subs	r3, #66	; 0x42
 800d488:	2b16      	cmp	r3, #22
 800d48a:	f200 8098 	bhi.w	800d5be <f_printf+0x27a>
 800d48e:	a201      	add	r2, pc, #4	; (adr r2, 800d494 <f_printf+0x150>)
 800d490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d494:	0800d59f 	.word	0x0800d59f
 800d498:	0800d587 	.word	0x0800d587
 800d49c:	0800d5af 	.word	0x0800d5af
 800d4a0:	0800d5bf 	.word	0x0800d5bf
 800d4a4:	0800d5bf 	.word	0x0800d5bf
 800d4a8:	0800d5bf 	.word	0x0800d5bf
 800d4ac:	0800d5bf 	.word	0x0800d5bf
 800d4b0:	0800d5bf 	.word	0x0800d5bf
 800d4b4:	0800d5bf 	.word	0x0800d5bf
 800d4b8:	0800d5bf 	.word	0x0800d5bf
 800d4bc:	0800d5bf 	.word	0x0800d5bf
 800d4c0:	0800d5bf 	.word	0x0800d5bf
 800d4c4:	0800d5bf 	.word	0x0800d5bf
 800d4c8:	0800d5a7 	.word	0x0800d5a7
 800d4cc:	0800d5bf 	.word	0x0800d5bf
 800d4d0:	0800d5bf 	.word	0x0800d5bf
 800d4d4:	0800d5bf 	.word	0x0800d5bf
 800d4d8:	0800d4f1 	.word	0x0800d4f1
 800d4dc:	0800d5bf 	.word	0x0800d5bf
 800d4e0:	0800d5af 	.word	0x0800d5af
 800d4e4:	0800d5bf 	.word	0x0800d5bf
 800d4e8:	0800d5bf 	.word	0x0800d5bf
 800d4ec:	0800d5b7 	.word	0x0800d5b7
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800d4f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4f2:	1d1a      	adds	r2, r3, #4
 800d4f4:	67ba      	str	r2, [r7, #120]	; 0x78
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d500:	e004      	b.n	800d50c <f_printf+0x1c8>
 800d502:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d506:	3301      	adds	r3, #1
 800d508:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d50c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d50e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d512:	4413      	add	r3, r2
 800d514:	781b      	ldrb	r3, [r3, #0]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d1f3      	bne.n	800d502 <f_printf+0x1be>
			if (!(f & 2)) {
 800d51a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d51e:	f003 0302 	and.w	r3, r3, #2
 800d522:	2b00      	cmp	r3, #0
 800d524:	d11a      	bne.n	800d55c <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800d526:	e005      	b.n	800d534 <f_printf+0x1f0>
 800d528:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d52c:	2120      	movs	r1, #32
 800d52e:	4618      	mov	r0, r3
 800d530:	f7ff fe91 	bl	800d256 <putc_bfd>
 800d534:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d538:	1c5a      	adds	r2, r3, #1
 800d53a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d53e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d542:	429a      	cmp	r2, r3
 800d544:	d8f0      	bhi.n	800d528 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800d546:	e009      	b.n	800d55c <f_printf+0x218>
 800d548:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d54a:	1c5a      	adds	r2, r3, #1
 800d54c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d54e:	781a      	ldrb	r2, [r3, #0]
 800d550:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d554:	4611      	mov	r1, r2
 800d556:	4618      	mov	r0, r3
 800d558:	f7ff fe7d 	bl	800d256 <putc_bfd>
 800d55c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d55e:	781b      	ldrb	r3, [r3, #0]
 800d560:	2b00      	cmp	r3, #0
 800d562:	d1f1      	bne.n	800d548 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800d564:	e005      	b.n	800d572 <f_printf+0x22e>
 800d566:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d56a:	2120      	movs	r1, #32
 800d56c:	4618      	mov	r0, r3
 800d56e:	f7ff fe72 	bl	800d256 <putc_bfd>
 800d572:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d576:	1c5a      	adds	r2, r3, #1
 800d578:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d57c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d580:	429a      	cmp	r2, r3
 800d582:	d8f0      	bhi.n	800d566 <f_printf+0x222>
			continue;
 800d584:	e0ec      	b.n	800d760 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800d586:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d588:	1d1a      	adds	r2, r3, #4
 800d58a:	67ba      	str	r2, [r7, #120]	; 0x78
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	b2da      	uxtb	r2, r3
 800d590:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d594:	4611      	mov	r1, r2
 800d596:	4618      	mov	r0, r3
 800d598:	f7ff fe5d 	bl	800d256 <putc_bfd>
 800d59c:	e0e0      	b.n	800d760 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 800d59e:	2302      	movs	r3, #2
 800d5a0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800d5a4:	e014      	b.n	800d5d0 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800d5a6:	2308      	movs	r3, #8
 800d5a8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800d5ac:	e010      	b.n	800d5d0 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800d5ae:	230a      	movs	r3, #10
 800d5b0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800d5b4:	e00c      	b.n	800d5d0 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800d5b6:	2310      	movs	r3, #16
 800d5b8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800d5bc:	e008      	b.n	800d5d0 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800d5be:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800d5c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d5c6:	4611      	mov	r1, r2
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	f7ff fe44 	bl	800d256 <putc_bfd>
 800d5ce:	e0c7      	b.n	800d760 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800d5d0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d5d4:	f003 0304 	and.w	r3, r3, #4
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d004      	beq.n	800d5e6 <f_printf+0x2a2>
 800d5dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d5de:	1d1a      	adds	r2, r3, #4
 800d5e0:	67ba      	str	r2, [r7, #120]	; 0x78
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	e00c      	b.n	800d600 <f_printf+0x2bc>
 800d5e6:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d5ea:	2b44      	cmp	r3, #68	; 0x44
 800d5ec:	d104      	bne.n	800d5f8 <f_printf+0x2b4>
 800d5ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d5f0:	1d1a      	adds	r2, r3, #4
 800d5f2:	67ba      	str	r2, [r7, #120]	; 0x78
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	e003      	b.n	800d600 <f_printf+0x2bc>
 800d5f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d5fa:	1d1a      	adds	r2, r3, #4
 800d5fc:	67ba      	str	r2, [r7, #120]	; 0x78
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800d604:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d608:	2b44      	cmp	r3, #68	; 0x44
 800d60a:	d10e      	bne.n	800d62a <f_printf+0x2e6>
 800d60c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d610:	2b00      	cmp	r3, #0
 800d612:	da0a      	bge.n	800d62a <f_printf+0x2e6>
			v = 0 - v;
 800d614:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d618:	425b      	negs	r3, r3
 800d61a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800d61e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d622:	f043 0308 	orr.w	r3, r3, #8
 800d626:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800d62a:	2300      	movs	r3, #0
 800d62c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800d630:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800d634:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d638:	fbb3 f1f2 	udiv	r1, r3, r2
 800d63c:	fb02 f201 	mul.w	r2, r2, r1
 800d640:	1a9b      	subs	r3, r3, r2
 800d642:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800d646:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800d64a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d64e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d652:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800d656:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d65a:	2b09      	cmp	r3, #9
 800d65c:	d90b      	bls.n	800d676 <f_printf+0x332>
 800d65e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d662:	2b78      	cmp	r3, #120	; 0x78
 800d664:	d101      	bne.n	800d66a <f_printf+0x326>
 800d666:	2227      	movs	r2, #39	; 0x27
 800d668:	e000      	b.n	800d66c <f_printf+0x328>
 800d66a:	2207      	movs	r2, #7
 800d66c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d670:	4413      	add	r3, r2
 800d672:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800d676:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d67a:	1c5a      	adds	r2, r3, #1
 800d67c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800d680:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800d684:	3230      	adds	r2, #48	; 0x30
 800d686:	b2d2      	uxtb	r2, r2
 800d688:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800d68c:	440b      	add	r3, r1
 800d68e:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800d692:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d696:	2b00      	cmp	r3, #0
 800d698:	d003      	beq.n	800d6a2 <f_printf+0x35e>
 800d69a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d69e:	2b1f      	cmp	r3, #31
 800d6a0:	d9c6      	bls.n	800d630 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800d6a2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d6a6:	f003 0308 	and.w	r3, r3, #8
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d00a      	beq.n	800d6c4 <f_printf+0x380>
 800d6ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d6b2:	1c5a      	adds	r2, r3, #1
 800d6b4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800d6b8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800d6bc:	4413      	add	r3, r2
 800d6be:	222d      	movs	r2, #45	; 0x2d
 800d6c0:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800d6c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d6c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d6cc:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d6d0:	f003 0301 	and.w	r3, r3, #1
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d001      	beq.n	800d6dc <f_printf+0x398>
 800d6d8:	2330      	movs	r3, #48	; 0x30
 800d6da:	e000      	b.n	800d6de <f_printf+0x39a>
 800d6dc:	2320      	movs	r3, #32
 800d6de:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800d6e2:	e007      	b.n	800d6f4 <f_printf+0x3b0>
 800d6e4:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800d6e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d6ec:	4611      	mov	r1, r2
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f7ff fdb1 	bl	800d256 <putc_bfd>
 800d6f4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d6f8:	f003 0302 	and.w	r3, r3, #2
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d108      	bne.n	800d712 <f_printf+0x3ce>
 800d700:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d704:	1c5a      	adds	r2, r3, #1
 800d706:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d70a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d70e:	429a      	cmp	r2, r3
 800d710:	d8e8      	bhi.n	800d6e4 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 800d712:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d716:	3b01      	subs	r3, #1
 800d718:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d71c:	f107 020c 	add.w	r2, r7, #12
 800d720:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d724:	4413      	add	r3, r2
 800d726:	781a      	ldrb	r2, [r3, #0]
 800d728:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d72c:	4611      	mov	r1, r2
 800d72e:	4618      	mov	r0, r3
 800d730:	f7ff fd91 	bl	800d256 <putc_bfd>
		} while (i);
 800d734:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d1ea      	bne.n	800d712 <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 800d73c:	e007      	b.n	800d74e <f_printf+0x40a>
 800d73e:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800d742:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d746:	4611      	mov	r1, r2
 800d748:	4618      	mov	r0, r3
 800d74a:	f7ff fd84 	bl	800d256 <putc_bfd>
 800d74e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d752:	1c5a      	adds	r2, r3, #1
 800d754:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d758:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d75c:	429a      	cmp	r2, r3
 800d75e:	d8ee      	bhi.n	800d73e <f_printf+0x3fa>
		c = *fmt++;
 800d760:	e5fe      	b.n	800d360 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800d762:	bf00      	nop
 800d764:	e000      	b.n	800d768 <f_printf+0x424>
		if (!c) break;
 800d766:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800d768:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d76c:	4618      	mov	r0, r3
 800d76e:	f7ff fdaf 	bl	800d2d0 <putc_flush>
 800d772:	4603      	mov	r3, r0
}
 800d774:	4618      	mov	r0, r3
 800d776:	379c      	adds	r7, #156	; 0x9c
 800d778:	46bd      	mov	sp, r7
 800d77a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d77e:	b003      	add	sp, #12
 800d780:	4770      	bx	lr
 800d782:	bf00      	nop

0800d784 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d784:	b480      	push	{r7}
 800d786:	b087      	sub	sp, #28
 800d788:	af00      	add	r7, sp, #0
 800d78a:	60f8      	str	r0, [r7, #12]
 800d78c:	60b9      	str	r1, [r7, #8]
 800d78e:	4613      	mov	r3, r2
 800d790:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d792:	2301      	movs	r3, #1
 800d794:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d796:	2300      	movs	r3, #0
 800d798:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d79a:	4b1f      	ldr	r3, [pc, #124]	; (800d818 <FATFS_LinkDriverEx+0x94>)
 800d79c:	7a5b      	ldrb	r3, [r3, #9]
 800d79e:	b2db      	uxtb	r3, r3
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d131      	bne.n	800d808 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d7a4:	4b1c      	ldr	r3, [pc, #112]	; (800d818 <FATFS_LinkDriverEx+0x94>)
 800d7a6:	7a5b      	ldrb	r3, [r3, #9]
 800d7a8:	b2db      	uxtb	r3, r3
 800d7aa:	461a      	mov	r2, r3
 800d7ac:	4b1a      	ldr	r3, [pc, #104]	; (800d818 <FATFS_LinkDriverEx+0x94>)
 800d7ae:	2100      	movs	r1, #0
 800d7b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d7b2:	4b19      	ldr	r3, [pc, #100]	; (800d818 <FATFS_LinkDriverEx+0x94>)
 800d7b4:	7a5b      	ldrb	r3, [r3, #9]
 800d7b6:	b2db      	uxtb	r3, r3
 800d7b8:	4a17      	ldr	r2, [pc, #92]	; (800d818 <FATFS_LinkDriverEx+0x94>)
 800d7ba:	009b      	lsls	r3, r3, #2
 800d7bc:	4413      	add	r3, r2
 800d7be:	68fa      	ldr	r2, [r7, #12]
 800d7c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d7c2:	4b15      	ldr	r3, [pc, #84]	; (800d818 <FATFS_LinkDriverEx+0x94>)
 800d7c4:	7a5b      	ldrb	r3, [r3, #9]
 800d7c6:	b2db      	uxtb	r3, r3
 800d7c8:	461a      	mov	r2, r3
 800d7ca:	4b13      	ldr	r3, [pc, #76]	; (800d818 <FATFS_LinkDriverEx+0x94>)
 800d7cc:	4413      	add	r3, r2
 800d7ce:	79fa      	ldrb	r2, [r7, #7]
 800d7d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d7d2:	4b11      	ldr	r3, [pc, #68]	; (800d818 <FATFS_LinkDriverEx+0x94>)
 800d7d4:	7a5b      	ldrb	r3, [r3, #9]
 800d7d6:	b2db      	uxtb	r3, r3
 800d7d8:	1c5a      	adds	r2, r3, #1
 800d7da:	b2d1      	uxtb	r1, r2
 800d7dc:	4a0e      	ldr	r2, [pc, #56]	; (800d818 <FATFS_LinkDriverEx+0x94>)
 800d7de:	7251      	strb	r1, [r2, #9]
 800d7e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d7e2:	7dbb      	ldrb	r3, [r7, #22]
 800d7e4:	3330      	adds	r3, #48	; 0x30
 800d7e6:	b2da      	uxtb	r2, r3
 800d7e8:	68bb      	ldr	r3, [r7, #8]
 800d7ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d7ec:	68bb      	ldr	r3, [r7, #8]
 800d7ee:	3301      	adds	r3, #1
 800d7f0:	223a      	movs	r2, #58	; 0x3a
 800d7f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d7f4:	68bb      	ldr	r3, [r7, #8]
 800d7f6:	3302      	adds	r3, #2
 800d7f8:	222f      	movs	r2, #47	; 0x2f
 800d7fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	3303      	adds	r3, #3
 800d800:	2200      	movs	r2, #0
 800d802:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d804:	2300      	movs	r3, #0
 800d806:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d808:	7dfb      	ldrb	r3, [r7, #23]
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	371c      	adds	r7, #28
 800d80e:	46bd      	mov	sp, r7
 800d810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d814:	4770      	bx	lr
 800d816:	bf00      	nop
 800d818:	20001438 	.word	0x20001438

0800d81c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b082      	sub	sp, #8
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d826:	2200      	movs	r2, #0
 800d828:	6839      	ldr	r1, [r7, #0]
 800d82a:	6878      	ldr	r0, [r7, #4]
 800d82c:	f7ff ffaa 	bl	800d784 <FATFS_LinkDriverEx>
 800d830:	4603      	mov	r3, r0
}
 800d832:	4618      	mov	r0, r3
 800d834:	3708      	adds	r7, #8
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}

0800d83a <atoi>:
 800d83a:	220a      	movs	r2, #10
 800d83c:	2100      	movs	r1, #0
 800d83e:	f001 bf51 	b.w	800f6e4 <strtol>
	...

0800d844 <__errno>:
 800d844:	4b01      	ldr	r3, [pc, #4]	; (800d84c <__errno+0x8>)
 800d846:	6818      	ldr	r0, [r3, #0]
 800d848:	4770      	bx	lr
 800d84a:	bf00      	nop
 800d84c:	20000044 	.word	0x20000044

0800d850 <__libc_init_array>:
 800d850:	b570      	push	{r4, r5, r6, lr}
 800d852:	4d0d      	ldr	r5, [pc, #52]	; (800d888 <__libc_init_array+0x38>)
 800d854:	4c0d      	ldr	r4, [pc, #52]	; (800d88c <__libc_init_array+0x3c>)
 800d856:	1b64      	subs	r4, r4, r5
 800d858:	10a4      	asrs	r4, r4, #2
 800d85a:	2600      	movs	r6, #0
 800d85c:	42a6      	cmp	r6, r4
 800d85e:	d109      	bne.n	800d874 <__libc_init_array+0x24>
 800d860:	4d0b      	ldr	r5, [pc, #44]	; (800d890 <__libc_init_array+0x40>)
 800d862:	4c0c      	ldr	r4, [pc, #48]	; (800d894 <__libc_init_array+0x44>)
 800d864:	f004 fd56 	bl	8012314 <_init>
 800d868:	1b64      	subs	r4, r4, r5
 800d86a:	10a4      	asrs	r4, r4, #2
 800d86c:	2600      	movs	r6, #0
 800d86e:	42a6      	cmp	r6, r4
 800d870:	d105      	bne.n	800d87e <__libc_init_array+0x2e>
 800d872:	bd70      	pop	{r4, r5, r6, pc}
 800d874:	f855 3b04 	ldr.w	r3, [r5], #4
 800d878:	4798      	blx	r3
 800d87a:	3601      	adds	r6, #1
 800d87c:	e7ee      	b.n	800d85c <__libc_init_array+0xc>
 800d87e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d882:	4798      	blx	r3
 800d884:	3601      	adds	r6, #1
 800d886:	e7f2      	b.n	800d86e <__libc_init_array+0x1e>
 800d888:	08013e38 	.word	0x08013e38
 800d88c:	08013e38 	.word	0x08013e38
 800d890:	08013e38 	.word	0x08013e38
 800d894:	08013e40 	.word	0x08013e40

0800d898 <isalnum>:
 800d898:	4b02      	ldr	r3, [pc, #8]	; (800d8a4 <isalnum+0xc>)
 800d89a:	4418      	add	r0, r3
 800d89c:	7840      	ldrb	r0, [r0, #1]
 800d89e:	f000 0007 	and.w	r0, r0, #7
 800d8a2:	4770      	bx	lr
 800d8a4:	08013a5c 	.word	0x08013a5c

0800d8a8 <malloc>:
 800d8a8:	4b02      	ldr	r3, [pc, #8]	; (800d8b4 <malloc+0xc>)
 800d8aa:	4601      	mov	r1, r0
 800d8ac:	6818      	ldr	r0, [r3, #0]
 800d8ae:	f000 b85b 	b.w	800d968 <_malloc_r>
 800d8b2:	bf00      	nop
 800d8b4:	20000044 	.word	0x20000044

0800d8b8 <memset>:
 800d8b8:	4402      	add	r2, r0
 800d8ba:	4603      	mov	r3, r0
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	d100      	bne.n	800d8c2 <memset+0xa>
 800d8c0:	4770      	bx	lr
 800d8c2:	f803 1b01 	strb.w	r1, [r3], #1
 800d8c6:	e7f9      	b.n	800d8bc <memset+0x4>

0800d8c8 <_free_r>:
 800d8c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d8ca:	2900      	cmp	r1, #0
 800d8cc:	d048      	beq.n	800d960 <_free_r+0x98>
 800d8ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8d2:	9001      	str	r0, [sp, #4]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	f1a1 0404 	sub.w	r4, r1, #4
 800d8da:	bfb8      	it	lt
 800d8dc:	18e4      	addlt	r4, r4, r3
 800d8de:	f003 fc27 	bl	8011130 <__malloc_lock>
 800d8e2:	4a20      	ldr	r2, [pc, #128]	; (800d964 <_free_r+0x9c>)
 800d8e4:	9801      	ldr	r0, [sp, #4]
 800d8e6:	6813      	ldr	r3, [r2, #0]
 800d8e8:	4615      	mov	r5, r2
 800d8ea:	b933      	cbnz	r3, 800d8fa <_free_r+0x32>
 800d8ec:	6063      	str	r3, [r4, #4]
 800d8ee:	6014      	str	r4, [r2, #0]
 800d8f0:	b003      	add	sp, #12
 800d8f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d8f6:	f003 bc21 	b.w	801113c <__malloc_unlock>
 800d8fa:	42a3      	cmp	r3, r4
 800d8fc:	d90b      	bls.n	800d916 <_free_r+0x4e>
 800d8fe:	6821      	ldr	r1, [r4, #0]
 800d900:	1862      	adds	r2, r4, r1
 800d902:	4293      	cmp	r3, r2
 800d904:	bf04      	itt	eq
 800d906:	681a      	ldreq	r2, [r3, #0]
 800d908:	685b      	ldreq	r3, [r3, #4]
 800d90a:	6063      	str	r3, [r4, #4]
 800d90c:	bf04      	itt	eq
 800d90e:	1852      	addeq	r2, r2, r1
 800d910:	6022      	streq	r2, [r4, #0]
 800d912:	602c      	str	r4, [r5, #0]
 800d914:	e7ec      	b.n	800d8f0 <_free_r+0x28>
 800d916:	461a      	mov	r2, r3
 800d918:	685b      	ldr	r3, [r3, #4]
 800d91a:	b10b      	cbz	r3, 800d920 <_free_r+0x58>
 800d91c:	42a3      	cmp	r3, r4
 800d91e:	d9fa      	bls.n	800d916 <_free_r+0x4e>
 800d920:	6811      	ldr	r1, [r2, #0]
 800d922:	1855      	adds	r5, r2, r1
 800d924:	42a5      	cmp	r5, r4
 800d926:	d10b      	bne.n	800d940 <_free_r+0x78>
 800d928:	6824      	ldr	r4, [r4, #0]
 800d92a:	4421      	add	r1, r4
 800d92c:	1854      	adds	r4, r2, r1
 800d92e:	42a3      	cmp	r3, r4
 800d930:	6011      	str	r1, [r2, #0]
 800d932:	d1dd      	bne.n	800d8f0 <_free_r+0x28>
 800d934:	681c      	ldr	r4, [r3, #0]
 800d936:	685b      	ldr	r3, [r3, #4]
 800d938:	6053      	str	r3, [r2, #4]
 800d93a:	4421      	add	r1, r4
 800d93c:	6011      	str	r1, [r2, #0]
 800d93e:	e7d7      	b.n	800d8f0 <_free_r+0x28>
 800d940:	d902      	bls.n	800d948 <_free_r+0x80>
 800d942:	230c      	movs	r3, #12
 800d944:	6003      	str	r3, [r0, #0]
 800d946:	e7d3      	b.n	800d8f0 <_free_r+0x28>
 800d948:	6825      	ldr	r5, [r4, #0]
 800d94a:	1961      	adds	r1, r4, r5
 800d94c:	428b      	cmp	r3, r1
 800d94e:	bf04      	itt	eq
 800d950:	6819      	ldreq	r1, [r3, #0]
 800d952:	685b      	ldreq	r3, [r3, #4]
 800d954:	6063      	str	r3, [r4, #4]
 800d956:	bf04      	itt	eq
 800d958:	1949      	addeq	r1, r1, r5
 800d95a:	6021      	streq	r1, [r4, #0]
 800d95c:	6054      	str	r4, [r2, #4]
 800d95e:	e7c7      	b.n	800d8f0 <_free_r+0x28>
 800d960:	b003      	add	sp, #12
 800d962:	bd30      	pop	{r4, r5, pc}
 800d964:	20001444 	.word	0x20001444

0800d968 <_malloc_r>:
 800d968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d96a:	1ccd      	adds	r5, r1, #3
 800d96c:	f025 0503 	bic.w	r5, r5, #3
 800d970:	3508      	adds	r5, #8
 800d972:	2d0c      	cmp	r5, #12
 800d974:	bf38      	it	cc
 800d976:	250c      	movcc	r5, #12
 800d978:	2d00      	cmp	r5, #0
 800d97a:	4606      	mov	r6, r0
 800d97c:	db01      	blt.n	800d982 <_malloc_r+0x1a>
 800d97e:	42a9      	cmp	r1, r5
 800d980:	d903      	bls.n	800d98a <_malloc_r+0x22>
 800d982:	230c      	movs	r3, #12
 800d984:	6033      	str	r3, [r6, #0]
 800d986:	2000      	movs	r0, #0
 800d988:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d98a:	f003 fbd1 	bl	8011130 <__malloc_lock>
 800d98e:	4921      	ldr	r1, [pc, #132]	; (800da14 <_malloc_r+0xac>)
 800d990:	680a      	ldr	r2, [r1, #0]
 800d992:	4614      	mov	r4, r2
 800d994:	b99c      	cbnz	r4, 800d9be <_malloc_r+0x56>
 800d996:	4f20      	ldr	r7, [pc, #128]	; (800da18 <_malloc_r+0xb0>)
 800d998:	683b      	ldr	r3, [r7, #0]
 800d99a:	b923      	cbnz	r3, 800d9a6 <_malloc_r+0x3e>
 800d99c:	4621      	mov	r1, r4
 800d99e:	4630      	mov	r0, r6
 800d9a0:	f000 ff44 	bl	800e82c <_sbrk_r>
 800d9a4:	6038      	str	r0, [r7, #0]
 800d9a6:	4629      	mov	r1, r5
 800d9a8:	4630      	mov	r0, r6
 800d9aa:	f000 ff3f 	bl	800e82c <_sbrk_r>
 800d9ae:	1c43      	adds	r3, r0, #1
 800d9b0:	d123      	bne.n	800d9fa <_malloc_r+0x92>
 800d9b2:	230c      	movs	r3, #12
 800d9b4:	6033      	str	r3, [r6, #0]
 800d9b6:	4630      	mov	r0, r6
 800d9b8:	f003 fbc0 	bl	801113c <__malloc_unlock>
 800d9bc:	e7e3      	b.n	800d986 <_malloc_r+0x1e>
 800d9be:	6823      	ldr	r3, [r4, #0]
 800d9c0:	1b5b      	subs	r3, r3, r5
 800d9c2:	d417      	bmi.n	800d9f4 <_malloc_r+0x8c>
 800d9c4:	2b0b      	cmp	r3, #11
 800d9c6:	d903      	bls.n	800d9d0 <_malloc_r+0x68>
 800d9c8:	6023      	str	r3, [r4, #0]
 800d9ca:	441c      	add	r4, r3
 800d9cc:	6025      	str	r5, [r4, #0]
 800d9ce:	e004      	b.n	800d9da <_malloc_r+0x72>
 800d9d0:	6863      	ldr	r3, [r4, #4]
 800d9d2:	42a2      	cmp	r2, r4
 800d9d4:	bf0c      	ite	eq
 800d9d6:	600b      	streq	r3, [r1, #0]
 800d9d8:	6053      	strne	r3, [r2, #4]
 800d9da:	4630      	mov	r0, r6
 800d9dc:	f003 fbae 	bl	801113c <__malloc_unlock>
 800d9e0:	f104 000b 	add.w	r0, r4, #11
 800d9e4:	1d23      	adds	r3, r4, #4
 800d9e6:	f020 0007 	bic.w	r0, r0, #7
 800d9ea:	1ac2      	subs	r2, r0, r3
 800d9ec:	d0cc      	beq.n	800d988 <_malloc_r+0x20>
 800d9ee:	1a1b      	subs	r3, r3, r0
 800d9f0:	50a3      	str	r3, [r4, r2]
 800d9f2:	e7c9      	b.n	800d988 <_malloc_r+0x20>
 800d9f4:	4622      	mov	r2, r4
 800d9f6:	6864      	ldr	r4, [r4, #4]
 800d9f8:	e7cc      	b.n	800d994 <_malloc_r+0x2c>
 800d9fa:	1cc4      	adds	r4, r0, #3
 800d9fc:	f024 0403 	bic.w	r4, r4, #3
 800da00:	42a0      	cmp	r0, r4
 800da02:	d0e3      	beq.n	800d9cc <_malloc_r+0x64>
 800da04:	1a21      	subs	r1, r4, r0
 800da06:	4630      	mov	r0, r6
 800da08:	f000 ff10 	bl	800e82c <_sbrk_r>
 800da0c:	3001      	adds	r0, #1
 800da0e:	d1dd      	bne.n	800d9cc <_malloc_r+0x64>
 800da10:	e7cf      	b.n	800d9b2 <_malloc_r+0x4a>
 800da12:	bf00      	nop
 800da14:	20001444 	.word	0x20001444
 800da18:	20001448 	.word	0x20001448

0800da1c <__cvt>:
 800da1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da20:	ec55 4b10 	vmov	r4, r5, d0
 800da24:	2d00      	cmp	r5, #0
 800da26:	460e      	mov	r6, r1
 800da28:	4619      	mov	r1, r3
 800da2a:	462b      	mov	r3, r5
 800da2c:	bfbb      	ittet	lt
 800da2e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800da32:	461d      	movlt	r5, r3
 800da34:	2300      	movge	r3, #0
 800da36:	232d      	movlt	r3, #45	; 0x2d
 800da38:	700b      	strb	r3, [r1, #0]
 800da3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800da3c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800da40:	4691      	mov	r9, r2
 800da42:	f023 0820 	bic.w	r8, r3, #32
 800da46:	bfbc      	itt	lt
 800da48:	4622      	movlt	r2, r4
 800da4a:	4614      	movlt	r4, r2
 800da4c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800da50:	d005      	beq.n	800da5e <__cvt+0x42>
 800da52:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800da56:	d100      	bne.n	800da5a <__cvt+0x3e>
 800da58:	3601      	adds	r6, #1
 800da5a:	2102      	movs	r1, #2
 800da5c:	e000      	b.n	800da60 <__cvt+0x44>
 800da5e:	2103      	movs	r1, #3
 800da60:	ab03      	add	r3, sp, #12
 800da62:	9301      	str	r3, [sp, #4]
 800da64:	ab02      	add	r3, sp, #8
 800da66:	9300      	str	r3, [sp, #0]
 800da68:	ec45 4b10 	vmov	d0, r4, r5
 800da6c:	4653      	mov	r3, sl
 800da6e:	4632      	mov	r2, r6
 800da70:	f001 ffae 	bl	800f9d0 <_dtoa_r>
 800da74:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800da78:	4607      	mov	r7, r0
 800da7a:	d102      	bne.n	800da82 <__cvt+0x66>
 800da7c:	f019 0f01 	tst.w	r9, #1
 800da80:	d022      	beq.n	800dac8 <__cvt+0xac>
 800da82:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800da86:	eb07 0906 	add.w	r9, r7, r6
 800da8a:	d110      	bne.n	800daae <__cvt+0x92>
 800da8c:	783b      	ldrb	r3, [r7, #0]
 800da8e:	2b30      	cmp	r3, #48	; 0x30
 800da90:	d10a      	bne.n	800daa8 <__cvt+0x8c>
 800da92:	2200      	movs	r2, #0
 800da94:	2300      	movs	r3, #0
 800da96:	4620      	mov	r0, r4
 800da98:	4629      	mov	r1, r5
 800da9a:	f7f3 f81d 	bl	8000ad8 <__aeabi_dcmpeq>
 800da9e:	b918      	cbnz	r0, 800daa8 <__cvt+0x8c>
 800daa0:	f1c6 0601 	rsb	r6, r6, #1
 800daa4:	f8ca 6000 	str.w	r6, [sl]
 800daa8:	f8da 3000 	ldr.w	r3, [sl]
 800daac:	4499      	add	r9, r3
 800daae:	2200      	movs	r2, #0
 800dab0:	2300      	movs	r3, #0
 800dab2:	4620      	mov	r0, r4
 800dab4:	4629      	mov	r1, r5
 800dab6:	f7f3 f80f 	bl	8000ad8 <__aeabi_dcmpeq>
 800daba:	b108      	cbz	r0, 800dac0 <__cvt+0xa4>
 800dabc:	f8cd 900c 	str.w	r9, [sp, #12]
 800dac0:	2230      	movs	r2, #48	; 0x30
 800dac2:	9b03      	ldr	r3, [sp, #12]
 800dac4:	454b      	cmp	r3, r9
 800dac6:	d307      	bcc.n	800dad8 <__cvt+0xbc>
 800dac8:	9b03      	ldr	r3, [sp, #12]
 800daca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dacc:	1bdb      	subs	r3, r3, r7
 800dace:	4638      	mov	r0, r7
 800dad0:	6013      	str	r3, [r2, #0]
 800dad2:	b004      	add	sp, #16
 800dad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dad8:	1c59      	adds	r1, r3, #1
 800dada:	9103      	str	r1, [sp, #12]
 800dadc:	701a      	strb	r2, [r3, #0]
 800dade:	e7f0      	b.n	800dac2 <__cvt+0xa6>

0800dae0 <__exponent>:
 800dae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dae2:	4603      	mov	r3, r0
 800dae4:	2900      	cmp	r1, #0
 800dae6:	bfb8      	it	lt
 800dae8:	4249      	neglt	r1, r1
 800daea:	f803 2b02 	strb.w	r2, [r3], #2
 800daee:	bfb4      	ite	lt
 800daf0:	222d      	movlt	r2, #45	; 0x2d
 800daf2:	222b      	movge	r2, #43	; 0x2b
 800daf4:	2909      	cmp	r1, #9
 800daf6:	7042      	strb	r2, [r0, #1]
 800daf8:	dd2a      	ble.n	800db50 <__exponent+0x70>
 800dafa:	f10d 0407 	add.w	r4, sp, #7
 800dafe:	46a4      	mov	ip, r4
 800db00:	270a      	movs	r7, #10
 800db02:	46a6      	mov	lr, r4
 800db04:	460a      	mov	r2, r1
 800db06:	fb91 f6f7 	sdiv	r6, r1, r7
 800db0a:	fb07 1516 	mls	r5, r7, r6, r1
 800db0e:	3530      	adds	r5, #48	; 0x30
 800db10:	2a63      	cmp	r2, #99	; 0x63
 800db12:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800db16:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800db1a:	4631      	mov	r1, r6
 800db1c:	dcf1      	bgt.n	800db02 <__exponent+0x22>
 800db1e:	3130      	adds	r1, #48	; 0x30
 800db20:	f1ae 0502 	sub.w	r5, lr, #2
 800db24:	f804 1c01 	strb.w	r1, [r4, #-1]
 800db28:	1c44      	adds	r4, r0, #1
 800db2a:	4629      	mov	r1, r5
 800db2c:	4561      	cmp	r1, ip
 800db2e:	d30a      	bcc.n	800db46 <__exponent+0x66>
 800db30:	f10d 0209 	add.w	r2, sp, #9
 800db34:	eba2 020e 	sub.w	r2, r2, lr
 800db38:	4565      	cmp	r5, ip
 800db3a:	bf88      	it	hi
 800db3c:	2200      	movhi	r2, #0
 800db3e:	4413      	add	r3, r2
 800db40:	1a18      	subs	r0, r3, r0
 800db42:	b003      	add	sp, #12
 800db44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800db46:	f811 2b01 	ldrb.w	r2, [r1], #1
 800db4a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800db4e:	e7ed      	b.n	800db2c <__exponent+0x4c>
 800db50:	2330      	movs	r3, #48	; 0x30
 800db52:	3130      	adds	r1, #48	; 0x30
 800db54:	7083      	strb	r3, [r0, #2]
 800db56:	70c1      	strb	r1, [r0, #3]
 800db58:	1d03      	adds	r3, r0, #4
 800db5a:	e7f1      	b.n	800db40 <__exponent+0x60>

0800db5c <_printf_float>:
 800db5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db60:	ed2d 8b02 	vpush	{d8}
 800db64:	b08d      	sub	sp, #52	; 0x34
 800db66:	460c      	mov	r4, r1
 800db68:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800db6c:	4616      	mov	r6, r2
 800db6e:	461f      	mov	r7, r3
 800db70:	4605      	mov	r5, r0
 800db72:	f003 fa51 	bl	8011018 <_localeconv_r>
 800db76:	f8d0 a000 	ldr.w	sl, [r0]
 800db7a:	4650      	mov	r0, sl
 800db7c:	f7f2 fb30 	bl	80001e0 <strlen>
 800db80:	2300      	movs	r3, #0
 800db82:	930a      	str	r3, [sp, #40]	; 0x28
 800db84:	6823      	ldr	r3, [r4, #0]
 800db86:	9305      	str	r3, [sp, #20]
 800db88:	f8d8 3000 	ldr.w	r3, [r8]
 800db8c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800db90:	3307      	adds	r3, #7
 800db92:	f023 0307 	bic.w	r3, r3, #7
 800db96:	f103 0208 	add.w	r2, r3, #8
 800db9a:	f8c8 2000 	str.w	r2, [r8]
 800db9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dba2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800dba6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800dbaa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dbae:	9307      	str	r3, [sp, #28]
 800dbb0:	f8cd 8018 	str.w	r8, [sp, #24]
 800dbb4:	ee08 0a10 	vmov	s16, r0
 800dbb8:	4b9f      	ldr	r3, [pc, #636]	; (800de38 <_printf_float+0x2dc>)
 800dbba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dbbe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dbc2:	f7f2 ffbb 	bl	8000b3c <__aeabi_dcmpun>
 800dbc6:	bb88      	cbnz	r0, 800dc2c <_printf_float+0xd0>
 800dbc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dbcc:	4b9a      	ldr	r3, [pc, #616]	; (800de38 <_printf_float+0x2dc>)
 800dbce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dbd2:	f7f2 ff95 	bl	8000b00 <__aeabi_dcmple>
 800dbd6:	bb48      	cbnz	r0, 800dc2c <_printf_float+0xd0>
 800dbd8:	2200      	movs	r2, #0
 800dbda:	2300      	movs	r3, #0
 800dbdc:	4640      	mov	r0, r8
 800dbde:	4649      	mov	r1, r9
 800dbe0:	f7f2 ff84 	bl	8000aec <__aeabi_dcmplt>
 800dbe4:	b110      	cbz	r0, 800dbec <_printf_float+0x90>
 800dbe6:	232d      	movs	r3, #45	; 0x2d
 800dbe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dbec:	4b93      	ldr	r3, [pc, #588]	; (800de3c <_printf_float+0x2e0>)
 800dbee:	4894      	ldr	r0, [pc, #592]	; (800de40 <_printf_float+0x2e4>)
 800dbf0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800dbf4:	bf94      	ite	ls
 800dbf6:	4698      	movls	r8, r3
 800dbf8:	4680      	movhi	r8, r0
 800dbfa:	2303      	movs	r3, #3
 800dbfc:	6123      	str	r3, [r4, #16]
 800dbfe:	9b05      	ldr	r3, [sp, #20]
 800dc00:	f023 0204 	bic.w	r2, r3, #4
 800dc04:	6022      	str	r2, [r4, #0]
 800dc06:	f04f 0900 	mov.w	r9, #0
 800dc0a:	9700      	str	r7, [sp, #0]
 800dc0c:	4633      	mov	r3, r6
 800dc0e:	aa0b      	add	r2, sp, #44	; 0x2c
 800dc10:	4621      	mov	r1, r4
 800dc12:	4628      	mov	r0, r5
 800dc14:	f000 f9d8 	bl	800dfc8 <_printf_common>
 800dc18:	3001      	adds	r0, #1
 800dc1a:	f040 8090 	bne.w	800dd3e <_printf_float+0x1e2>
 800dc1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dc22:	b00d      	add	sp, #52	; 0x34
 800dc24:	ecbd 8b02 	vpop	{d8}
 800dc28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc2c:	4642      	mov	r2, r8
 800dc2e:	464b      	mov	r3, r9
 800dc30:	4640      	mov	r0, r8
 800dc32:	4649      	mov	r1, r9
 800dc34:	f7f2 ff82 	bl	8000b3c <__aeabi_dcmpun>
 800dc38:	b140      	cbz	r0, 800dc4c <_printf_float+0xf0>
 800dc3a:	464b      	mov	r3, r9
 800dc3c:	2b00      	cmp	r3, #0
 800dc3e:	bfbc      	itt	lt
 800dc40:	232d      	movlt	r3, #45	; 0x2d
 800dc42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800dc46:	487f      	ldr	r0, [pc, #508]	; (800de44 <_printf_float+0x2e8>)
 800dc48:	4b7f      	ldr	r3, [pc, #508]	; (800de48 <_printf_float+0x2ec>)
 800dc4a:	e7d1      	b.n	800dbf0 <_printf_float+0x94>
 800dc4c:	6863      	ldr	r3, [r4, #4]
 800dc4e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800dc52:	9206      	str	r2, [sp, #24]
 800dc54:	1c5a      	adds	r2, r3, #1
 800dc56:	d13f      	bne.n	800dcd8 <_printf_float+0x17c>
 800dc58:	2306      	movs	r3, #6
 800dc5a:	6063      	str	r3, [r4, #4]
 800dc5c:	9b05      	ldr	r3, [sp, #20]
 800dc5e:	6861      	ldr	r1, [r4, #4]
 800dc60:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800dc64:	2300      	movs	r3, #0
 800dc66:	9303      	str	r3, [sp, #12]
 800dc68:	ab0a      	add	r3, sp, #40	; 0x28
 800dc6a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800dc6e:	ab09      	add	r3, sp, #36	; 0x24
 800dc70:	ec49 8b10 	vmov	d0, r8, r9
 800dc74:	9300      	str	r3, [sp, #0]
 800dc76:	6022      	str	r2, [r4, #0]
 800dc78:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dc7c:	4628      	mov	r0, r5
 800dc7e:	f7ff fecd 	bl	800da1c <__cvt>
 800dc82:	9b06      	ldr	r3, [sp, #24]
 800dc84:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dc86:	2b47      	cmp	r3, #71	; 0x47
 800dc88:	4680      	mov	r8, r0
 800dc8a:	d108      	bne.n	800dc9e <_printf_float+0x142>
 800dc8c:	1cc8      	adds	r0, r1, #3
 800dc8e:	db02      	blt.n	800dc96 <_printf_float+0x13a>
 800dc90:	6863      	ldr	r3, [r4, #4]
 800dc92:	4299      	cmp	r1, r3
 800dc94:	dd41      	ble.n	800dd1a <_printf_float+0x1be>
 800dc96:	f1ab 0b02 	sub.w	fp, fp, #2
 800dc9a:	fa5f fb8b 	uxtb.w	fp, fp
 800dc9e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dca2:	d820      	bhi.n	800dce6 <_printf_float+0x18a>
 800dca4:	3901      	subs	r1, #1
 800dca6:	465a      	mov	r2, fp
 800dca8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dcac:	9109      	str	r1, [sp, #36]	; 0x24
 800dcae:	f7ff ff17 	bl	800dae0 <__exponent>
 800dcb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dcb4:	1813      	adds	r3, r2, r0
 800dcb6:	2a01      	cmp	r2, #1
 800dcb8:	4681      	mov	r9, r0
 800dcba:	6123      	str	r3, [r4, #16]
 800dcbc:	dc02      	bgt.n	800dcc4 <_printf_float+0x168>
 800dcbe:	6822      	ldr	r2, [r4, #0]
 800dcc0:	07d2      	lsls	r2, r2, #31
 800dcc2:	d501      	bpl.n	800dcc8 <_printf_float+0x16c>
 800dcc4:	3301      	adds	r3, #1
 800dcc6:	6123      	str	r3, [r4, #16]
 800dcc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d09c      	beq.n	800dc0a <_printf_float+0xae>
 800dcd0:	232d      	movs	r3, #45	; 0x2d
 800dcd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dcd6:	e798      	b.n	800dc0a <_printf_float+0xae>
 800dcd8:	9a06      	ldr	r2, [sp, #24]
 800dcda:	2a47      	cmp	r2, #71	; 0x47
 800dcdc:	d1be      	bne.n	800dc5c <_printf_float+0x100>
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d1bc      	bne.n	800dc5c <_printf_float+0x100>
 800dce2:	2301      	movs	r3, #1
 800dce4:	e7b9      	b.n	800dc5a <_printf_float+0xfe>
 800dce6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800dcea:	d118      	bne.n	800dd1e <_printf_float+0x1c2>
 800dcec:	2900      	cmp	r1, #0
 800dcee:	6863      	ldr	r3, [r4, #4]
 800dcf0:	dd0b      	ble.n	800dd0a <_printf_float+0x1ae>
 800dcf2:	6121      	str	r1, [r4, #16]
 800dcf4:	b913      	cbnz	r3, 800dcfc <_printf_float+0x1a0>
 800dcf6:	6822      	ldr	r2, [r4, #0]
 800dcf8:	07d0      	lsls	r0, r2, #31
 800dcfa:	d502      	bpl.n	800dd02 <_printf_float+0x1a6>
 800dcfc:	3301      	adds	r3, #1
 800dcfe:	440b      	add	r3, r1
 800dd00:	6123      	str	r3, [r4, #16]
 800dd02:	65a1      	str	r1, [r4, #88]	; 0x58
 800dd04:	f04f 0900 	mov.w	r9, #0
 800dd08:	e7de      	b.n	800dcc8 <_printf_float+0x16c>
 800dd0a:	b913      	cbnz	r3, 800dd12 <_printf_float+0x1b6>
 800dd0c:	6822      	ldr	r2, [r4, #0]
 800dd0e:	07d2      	lsls	r2, r2, #31
 800dd10:	d501      	bpl.n	800dd16 <_printf_float+0x1ba>
 800dd12:	3302      	adds	r3, #2
 800dd14:	e7f4      	b.n	800dd00 <_printf_float+0x1a4>
 800dd16:	2301      	movs	r3, #1
 800dd18:	e7f2      	b.n	800dd00 <_printf_float+0x1a4>
 800dd1a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800dd1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd20:	4299      	cmp	r1, r3
 800dd22:	db05      	blt.n	800dd30 <_printf_float+0x1d4>
 800dd24:	6823      	ldr	r3, [r4, #0]
 800dd26:	6121      	str	r1, [r4, #16]
 800dd28:	07d8      	lsls	r0, r3, #31
 800dd2a:	d5ea      	bpl.n	800dd02 <_printf_float+0x1a6>
 800dd2c:	1c4b      	adds	r3, r1, #1
 800dd2e:	e7e7      	b.n	800dd00 <_printf_float+0x1a4>
 800dd30:	2900      	cmp	r1, #0
 800dd32:	bfd4      	ite	le
 800dd34:	f1c1 0202 	rsble	r2, r1, #2
 800dd38:	2201      	movgt	r2, #1
 800dd3a:	4413      	add	r3, r2
 800dd3c:	e7e0      	b.n	800dd00 <_printf_float+0x1a4>
 800dd3e:	6823      	ldr	r3, [r4, #0]
 800dd40:	055a      	lsls	r2, r3, #21
 800dd42:	d407      	bmi.n	800dd54 <_printf_float+0x1f8>
 800dd44:	6923      	ldr	r3, [r4, #16]
 800dd46:	4642      	mov	r2, r8
 800dd48:	4631      	mov	r1, r6
 800dd4a:	4628      	mov	r0, r5
 800dd4c:	47b8      	blx	r7
 800dd4e:	3001      	adds	r0, #1
 800dd50:	d12c      	bne.n	800ddac <_printf_float+0x250>
 800dd52:	e764      	b.n	800dc1e <_printf_float+0xc2>
 800dd54:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800dd58:	f240 80e0 	bls.w	800df1c <_printf_float+0x3c0>
 800dd5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dd60:	2200      	movs	r2, #0
 800dd62:	2300      	movs	r3, #0
 800dd64:	f7f2 feb8 	bl	8000ad8 <__aeabi_dcmpeq>
 800dd68:	2800      	cmp	r0, #0
 800dd6a:	d034      	beq.n	800ddd6 <_printf_float+0x27a>
 800dd6c:	4a37      	ldr	r2, [pc, #220]	; (800de4c <_printf_float+0x2f0>)
 800dd6e:	2301      	movs	r3, #1
 800dd70:	4631      	mov	r1, r6
 800dd72:	4628      	mov	r0, r5
 800dd74:	47b8      	blx	r7
 800dd76:	3001      	adds	r0, #1
 800dd78:	f43f af51 	beq.w	800dc1e <_printf_float+0xc2>
 800dd7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dd80:	429a      	cmp	r2, r3
 800dd82:	db02      	blt.n	800dd8a <_printf_float+0x22e>
 800dd84:	6823      	ldr	r3, [r4, #0]
 800dd86:	07d8      	lsls	r0, r3, #31
 800dd88:	d510      	bpl.n	800ddac <_printf_float+0x250>
 800dd8a:	ee18 3a10 	vmov	r3, s16
 800dd8e:	4652      	mov	r2, sl
 800dd90:	4631      	mov	r1, r6
 800dd92:	4628      	mov	r0, r5
 800dd94:	47b8      	blx	r7
 800dd96:	3001      	adds	r0, #1
 800dd98:	f43f af41 	beq.w	800dc1e <_printf_float+0xc2>
 800dd9c:	f04f 0800 	mov.w	r8, #0
 800dda0:	f104 091a 	add.w	r9, r4, #26
 800dda4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dda6:	3b01      	subs	r3, #1
 800dda8:	4543      	cmp	r3, r8
 800ddaa:	dc09      	bgt.n	800ddc0 <_printf_float+0x264>
 800ddac:	6823      	ldr	r3, [r4, #0]
 800ddae:	079b      	lsls	r3, r3, #30
 800ddb0:	f100 8105 	bmi.w	800dfbe <_printf_float+0x462>
 800ddb4:	68e0      	ldr	r0, [r4, #12]
 800ddb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ddb8:	4298      	cmp	r0, r3
 800ddba:	bfb8      	it	lt
 800ddbc:	4618      	movlt	r0, r3
 800ddbe:	e730      	b.n	800dc22 <_printf_float+0xc6>
 800ddc0:	2301      	movs	r3, #1
 800ddc2:	464a      	mov	r2, r9
 800ddc4:	4631      	mov	r1, r6
 800ddc6:	4628      	mov	r0, r5
 800ddc8:	47b8      	blx	r7
 800ddca:	3001      	adds	r0, #1
 800ddcc:	f43f af27 	beq.w	800dc1e <_printf_float+0xc2>
 800ddd0:	f108 0801 	add.w	r8, r8, #1
 800ddd4:	e7e6      	b.n	800dda4 <_printf_float+0x248>
 800ddd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	dc39      	bgt.n	800de50 <_printf_float+0x2f4>
 800dddc:	4a1b      	ldr	r2, [pc, #108]	; (800de4c <_printf_float+0x2f0>)
 800ddde:	2301      	movs	r3, #1
 800dde0:	4631      	mov	r1, r6
 800dde2:	4628      	mov	r0, r5
 800dde4:	47b8      	blx	r7
 800dde6:	3001      	adds	r0, #1
 800dde8:	f43f af19 	beq.w	800dc1e <_printf_float+0xc2>
 800ddec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ddf0:	4313      	orrs	r3, r2
 800ddf2:	d102      	bne.n	800ddfa <_printf_float+0x29e>
 800ddf4:	6823      	ldr	r3, [r4, #0]
 800ddf6:	07d9      	lsls	r1, r3, #31
 800ddf8:	d5d8      	bpl.n	800ddac <_printf_float+0x250>
 800ddfa:	ee18 3a10 	vmov	r3, s16
 800ddfe:	4652      	mov	r2, sl
 800de00:	4631      	mov	r1, r6
 800de02:	4628      	mov	r0, r5
 800de04:	47b8      	blx	r7
 800de06:	3001      	adds	r0, #1
 800de08:	f43f af09 	beq.w	800dc1e <_printf_float+0xc2>
 800de0c:	f04f 0900 	mov.w	r9, #0
 800de10:	f104 0a1a 	add.w	sl, r4, #26
 800de14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de16:	425b      	negs	r3, r3
 800de18:	454b      	cmp	r3, r9
 800de1a:	dc01      	bgt.n	800de20 <_printf_float+0x2c4>
 800de1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de1e:	e792      	b.n	800dd46 <_printf_float+0x1ea>
 800de20:	2301      	movs	r3, #1
 800de22:	4652      	mov	r2, sl
 800de24:	4631      	mov	r1, r6
 800de26:	4628      	mov	r0, r5
 800de28:	47b8      	blx	r7
 800de2a:	3001      	adds	r0, #1
 800de2c:	f43f aef7 	beq.w	800dc1e <_printf_float+0xc2>
 800de30:	f109 0901 	add.w	r9, r9, #1
 800de34:	e7ee      	b.n	800de14 <_printf_float+0x2b8>
 800de36:	bf00      	nop
 800de38:	7fefffff 	.word	0x7fefffff
 800de3c:	08013918 	.word	0x08013918
 800de40:	0801391c 	.word	0x0801391c
 800de44:	08013924 	.word	0x08013924
 800de48:	08013920 	.word	0x08013920
 800de4c:	08013928 	.word	0x08013928
 800de50:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de52:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800de54:	429a      	cmp	r2, r3
 800de56:	bfa8      	it	ge
 800de58:	461a      	movge	r2, r3
 800de5a:	2a00      	cmp	r2, #0
 800de5c:	4691      	mov	r9, r2
 800de5e:	dc37      	bgt.n	800ded0 <_printf_float+0x374>
 800de60:	f04f 0b00 	mov.w	fp, #0
 800de64:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800de68:	f104 021a 	add.w	r2, r4, #26
 800de6c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800de6e:	9305      	str	r3, [sp, #20]
 800de70:	eba3 0309 	sub.w	r3, r3, r9
 800de74:	455b      	cmp	r3, fp
 800de76:	dc33      	bgt.n	800dee0 <_printf_float+0x384>
 800de78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800de7c:	429a      	cmp	r2, r3
 800de7e:	db3b      	blt.n	800def8 <_printf_float+0x39c>
 800de80:	6823      	ldr	r3, [r4, #0]
 800de82:	07da      	lsls	r2, r3, #31
 800de84:	d438      	bmi.n	800def8 <_printf_float+0x39c>
 800de86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de88:	9b05      	ldr	r3, [sp, #20]
 800de8a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800de8c:	1ad3      	subs	r3, r2, r3
 800de8e:	eba2 0901 	sub.w	r9, r2, r1
 800de92:	4599      	cmp	r9, r3
 800de94:	bfa8      	it	ge
 800de96:	4699      	movge	r9, r3
 800de98:	f1b9 0f00 	cmp.w	r9, #0
 800de9c:	dc35      	bgt.n	800df0a <_printf_float+0x3ae>
 800de9e:	f04f 0800 	mov.w	r8, #0
 800dea2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dea6:	f104 0a1a 	add.w	sl, r4, #26
 800deaa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800deae:	1a9b      	subs	r3, r3, r2
 800deb0:	eba3 0309 	sub.w	r3, r3, r9
 800deb4:	4543      	cmp	r3, r8
 800deb6:	f77f af79 	ble.w	800ddac <_printf_float+0x250>
 800deba:	2301      	movs	r3, #1
 800debc:	4652      	mov	r2, sl
 800debe:	4631      	mov	r1, r6
 800dec0:	4628      	mov	r0, r5
 800dec2:	47b8      	blx	r7
 800dec4:	3001      	adds	r0, #1
 800dec6:	f43f aeaa 	beq.w	800dc1e <_printf_float+0xc2>
 800deca:	f108 0801 	add.w	r8, r8, #1
 800dece:	e7ec      	b.n	800deaa <_printf_float+0x34e>
 800ded0:	4613      	mov	r3, r2
 800ded2:	4631      	mov	r1, r6
 800ded4:	4642      	mov	r2, r8
 800ded6:	4628      	mov	r0, r5
 800ded8:	47b8      	blx	r7
 800deda:	3001      	adds	r0, #1
 800dedc:	d1c0      	bne.n	800de60 <_printf_float+0x304>
 800dede:	e69e      	b.n	800dc1e <_printf_float+0xc2>
 800dee0:	2301      	movs	r3, #1
 800dee2:	4631      	mov	r1, r6
 800dee4:	4628      	mov	r0, r5
 800dee6:	9205      	str	r2, [sp, #20]
 800dee8:	47b8      	blx	r7
 800deea:	3001      	adds	r0, #1
 800deec:	f43f ae97 	beq.w	800dc1e <_printf_float+0xc2>
 800def0:	9a05      	ldr	r2, [sp, #20]
 800def2:	f10b 0b01 	add.w	fp, fp, #1
 800def6:	e7b9      	b.n	800de6c <_printf_float+0x310>
 800def8:	ee18 3a10 	vmov	r3, s16
 800defc:	4652      	mov	r2, sl
 800defe:	4631      	mov	r1, r6
 800df00:	4628      	mov	r0, r5
 800df02:	47b8      	blx	r7
 800df04:	3001      	adds	r0, #1
 800df06:	d1be      	bne.n	800de86 <_printf_float+0x32a>
 800df08:	e689      	b.n	800dc1e <_printf_float+0xc2>
 800df0a:	9a05      	ldr	r2, [sp, #20]
 800df0c:	464b      	mov	r3, r9
 800df0e:	4442      	add	r2, r8
 800df10:	4631      	mov	r1, r6
 800df12:	4628      	mov	r0, r5
 800df14:	47b8      	blx	r7
 800df16:	3001      	adds	r0, #1
 800df18:	d1c1      	bne.n	800de9e <_printf_float+0x342>
 800df1a:	e680      	b.n	800dc1e <_printf_float+0xc2>
 800df1c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df1e:	2a01      	cmp	r2, #1
 800df20:	dc01      	bgt.n	800df26 <_printf_float+0x3ca>
 800df22:	07db      	lsls	r3, r3, #31
 800df24:	d538      	bpl.n	800df98 <_printf_float+0x43c>
 800df26:	2301      	movs	r3, #1
 800df28:	4642      	mov	r2, r8
 800df2a:	4631      	mov	r1, r6
 800df2c:	4628      	mov	r0, r5
 800df2e:	47b8      	blx	r7
 800df30:	3001      	adds	r0, #1
 800df32:	f43f ae74 	beq.w	800dc1e <_printf_float+0xc2>
 800df36:	ee18 3a10 	vmov	r3, s16
 800df3a:	4652      	mov	r2, sl
 800df3c:	4631      	mov	r1, r6
 800df3e:	4628      	mov	r0, r5
 800df40:	47b8      	blx	r7
 800df42:	3001      	adds	r0, #1
 800df44:	f43f ae6b 	beq.w	800dc1e <_printf_float+0xc2>
 800df48:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800df4c:	2200      	movs	r2, #0
 800df4e:	2300      	movs	r3, #0
 800df50:	f7f2 fdc2 	bl	8000ad8 <__aeabi_dcmpeq>
 800df54:	b9d8      	cbnz	r0, 800df8e <_printf_float+0x432>
 800df56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df58:	f108 0201 	add.w	r2, r8, #1
 800df5c:	3b01      	subs	r3, #1
 800df5e:	4631      	mov	r1, r6
 800df60:	4628      	mov	r0, r5
 800df62:	47b8      	blx	r7
 800df64:	3001      	adds	r0, #1
 800df66:	d10e      	bne.n	800df86 <_printf_float+0x42a>
 800df68:	e659      	b.n	800dc1e <_printf_float+0xc2>
 800df6a:	2301      	movs	r3, #1
 800df6c:	4652      	mov	r2, sl
 800df6e:	4631      	mov	r1, r6
 800df70:	4628      	mov	r0, r5
 800df72:	47b8      	blx	r7
 800df74:	3001      	adds	r0, #1
 800df76:	f43f ae52 	beq.w	800dc1e <_printf_float+0xc2>
 800df7a:	f108 0801 	add.w	r8, r8, #1
 800df7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df80:	3b01      	subs	r3, #1
 800df82:	4543      	cmp	r3, r8
 800df84:	dcf1      	bgt.n	800df6a <_printf_float+0x40e>
 800df86:	464b      	mov	r3, r9
 800df88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800df8c:	e6dc      	b.n	800dd48 <_printf_float+0x1ec>
 800df8e:	f04f 0800 	mov.w	r8, #0
 800df92:	f104 0a1a 	add.w	sl, r4, #26
 800df96:	e7f2      	b.n	800df7e <_printf_float+0x422>
 800df98:	2301      	movs	r3, #1
 800df9a:	4642      	mov	r2, r8
 800df9c:	e7df      	b.n	800df5e <_printf_float+0x402>
 800df9e:	2301      	movs	r3, #1
 800dfa0:	464a      	mov	r2, r9
 800dfa2:	4631      	mov	r1, r6
 800dfa4:	4628      	mov	r0, r5
 800dfa6:	47b8      	blx	r7
 800dfa8:	3001      	adds	r0, #1
 800dfaa:	f43f ae38 	beq.w	800dc1e <_printf_float+0xc2>
 800dfae:	f108 0801 	add.w	r8, r8, #1
 800dfb2:	68e3      	ldr	r3, [r4, #12]
 800dfb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800dfb6:	1a5b      	subs	r3, r3, r1
 800dfb8:	4543      	cmp	r3, r8
 800dfba:	dcf0      	bgt.n	800df9e <_printf_float+0x442>
 800dfbc:	e6fa      	b.n	800ddb4 <_printf_float+0x258>
 800dfbe:	f04f 0800 	mov.w	r8, #0
 800dfc2:	f104 0919 	add.w	r9, r4, #25
 800dfc6:	e7f4      	b.n	800dfb2 <_printf_float+0x456>

0800dfc8 <_printf_common>:
 800dfc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfcc:	4616      	mov	r6, r2
 800dfce:	4699      	mov	r9, r3
 800dfd0:	688a      	ldr	r2, [r1, #8]
 800dfd2:	690b      	ldr	r3, [r1, #16]
 800dfd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	bfb8      	it	lt
 800dfdc:	4613      	movlt	r3, r2
 800dfde:	6033      	str	r3, [r6, #0]
 800dfe0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dfe4:	4607      	mov	r7, r0
 800dfe6:	460c      	mov	r4, r1
 800dfe8:	b10a      	cbz	r2, 800dfee <_printf_common+0x26>
 800dfea:	3301      	adds	r3, #1
 800dfec:	6033      	str	r3, [r6, #0]
 800dfee:	6823      	ldr	r3, [r4, #0]
 800dff0:	0699      	lsls	r1, r3, #26
 800dff2:	bf42      	ittt	mi
 800dff4:	6833      	ldrmi	r3, [r6, #0]
 800dff6:	3302      	addmi	r3, #2
 800dff8:	6033      	strmi	r3, [r6, #0]
 800dffa:	6825      	ldr	r5, [r4, #0]
 800dffc:	f015 0506 	ands.w	r5, r5, #6
 800e000:	d106      	bne.n	800e010 <_printf_common+0x48>
 800e002:	f104 0a19 	add.w	sl, r4, #25
 800e006:	68e3      	ldr	r3, [r4, #12]
 800e008:	6832      	ldr	r2, [r6, #0]
 800e00a:	1a9b      	subs	r3, r3, r2
 800e00c:	42ab      	cmp	r3, r5
 800e00e:	dc26      	bgt.n	800e05e <_printf_common+0x96>
 800e010:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e014:	1e13      	subs	r3, r2, #0
 800e016:	6822      	ldr	r2, [r4, #0]
 800e018:	bf18      	it	ne
 800e01a:	2301      	movne	r3, #1
 800e01c:	0692      	lsls	r2, r2, #26
 800e01e:	d42b      	bmi.n	800e078 <_printf_common+0xb0>
 800e020:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e024:	4649      	mov	r1, r9
 800e026:	4638      	mov	r0, r7
 800e028:	47c0      	blx	r8
 800e02a:	3001      	adds	r0, #1
 800e02c:	d01e      	beq.n	800e06c <_printf_common+0xa4>
 800e02e:	6823      	ldr	r3, [r4, #0]
 800e030:	68e5      	ldr	r5, [r4, #12]
 800e032:	6832      	ldr	r2, [r6, #0]
 800e034:	f003 0306 	and.w	r3, r3, #6
 800e038:	2b04      	cmp	r3, #4
 800e03a:	bf08      	it	eq
 800e03c:	1aad      	subeq	r5, r5, r2
 800e03e:	68a3      	ldr	r3, [r4, #8]
 800e040:	6922      	ldr	r2, [r4, #16]
 800e042:	bf0c      	ite	eq
 800e044:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e048:	2500      	movne	r5, #0
 800e04a:	4293      	cmp	r3, r2
 800e04c:	bfc4      	itt	gt
 800e04e:	1a9b      	subgt	r3, r3, r2
 800e050:	18ed      	addgt	r5, r5, r3
 800e052:	2600      	movs	r6, #0
 800e054:	341a      	adds	r4, #26
 800e056:	42b5      	cmp	r5, r6
 800e058:	d11a      	bne.n	800e090 <_printf_common+0xc8>
 800e05a:	2000      	movs	r0, #0
 800e05c:	e008      	b.n	800e070 <_printf_common+0xa8>
 800e05e:	2301      	movs	r3, #1
 800e060:	4652      	mov	r2, sl
 800e062:	4649      	mov	r1, r9
 800e064:	4638      	mov	r0, r7
 800e066:	47c0      	blx	r8
 800e068:	3001      	adds	r0, #1
 800e06a:	d103      	bne.n	800e074 <_printf_common+0xac>
 800e06c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e074:	3501      	adds	r5, #1
 800e076:	e7c6      	b.n	800e006 <_printf_common+0x3e>
 800e078:	18e1      	adds	r1, r4, r3
 800e07a:	1c5a      	adds	r2, r3, #1
 800e07c:	2030      	movs	r0, #48	; 0x30
 800e07e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e082:	4422      	add	r2, r4
 800e084:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e088:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e08c:	3302      	adds	r3, #2
 800e08e:	e7c7      	b.n	800e020 <_printf_common+0x58>
 800e090:	2301      	movs	r3, #1
 800e092:	4622      	mov	r2, r4
 800e094:	4649      	mov	r1, r9
 800e096:	4638      	mov	r0, r7
 800e098:	47c0      	blx	r8
 800e09a:	3001      	adds	r0, #1
 800e09c:	d0e6      	beq.n	800e06c <_printf_common+0xa4>
 800e09e:	3601      	adds	r6, #1
 800e0a0:	e7d9      	b.n	800e056 <_printf_common+0x8e>
	...

0800e0a4 <_printf_i>:
 800e0a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e0a8:	460c      	mov	r4, r1
 800e0aa:	4691      	mov	r9, r2
 800e0ac:	7e27      	ldrb	r7, [r4, #24]
 800e0ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e0b0:	2f78      	cmp	r7, #120	; 0x78
 800e0b2:	4680      	mov	r8, r0
 800e0b4:	469a      	mov	sl, r3
 800e0b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e0ba:	d807      	bhi.n	800e0cc <_printf_i+0x28>
 800e0bc:	2f62      	cmp	r7, #98	; 0x62
 800e0be:	d80a      	bhi.n	800e0d6 <_printf_i+0x32>
 800e0c0:	2f00      	cmp	r7, #0
 800e0c2:	f000 80d8 	beq.w	800e276 <_printf_i+0x1d2>
 800e0c6:	2f58      	cmp	r7, #88	; 0x58
 800e0c8:	f000 80a3 	beq.w	800e212 <_printf_i+0x16e>
 800e0cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e0d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e0d4:	e03a      	b.n	800e14c <_printf_i+0xa8>
 800e0d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e0da:	2b15      	cmp	r3, #21
 800e0dc:	d8f6      	bhi.n	800e0cc <_printf_i+0x28>
 800e0de:	a001      	add	r0, pc, #4	; (adr r0, 800e0e4 <_printf_i+0x40>)
 800e0e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e0e4:	0800e13d 	.word	0x0800e13d
 800e0e8:	0800e151 	.word	0x0800e151
 800e0ec:	0800e0cd 	.word	0x0800e0cd
 800e0f0:	0800e0cd 	.word	0x0800e0cd
 800e0f4:	0800e0cd 	.word	0x0800e0cd
 800e0f8:	0800e0cd 	.word	0x0800e0cd
 800e0fc:	0800e151 	.word	0x0800e151
 800e100:	0800e0cd 	.word	0x0800e0cd
 800e104:	0800e0cd 	.word	0x0800e0cd
 800e108:	0800e0cd 	.word	0x0800e0cd
 800e10c:	0800e0cd 	.word	0x0800e0cd
 800e110:	0800e25d 	.word	0x0800e25d
 800e114:	0800e181 	.word	0x0800e181
 800e118:	0800e23f 	.word	0x0800e23f
 800e11c:	0800e0cd 	.word	0x0800e0cd
 800e120:	0800e0cd 	.word	0x0800e0cd
 800e124:	0800e27f 	.word	0x0800e27f
 800e128:	0800e0cd 	.word	0x0800e0cd
 800e12c:	0800e181 	.word	0x0800e181
 800e130:	0800e0cd 	.word	0x0800e0cd
 800e134:	0800e0cd 	.word	0x0800e0cd
 800e138:	0800e247 	.word	0x0800e247
 800e13c:	680b      	ldr	r3, [r1, #0]
 800e13e:	1d1a      	adds	r2, r3, #4
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	600a      	str	r2, [r1, #0]
 800e144:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e148:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e14c:	2301      	movs	r3, #1
 800e14e:	e0a3      	b.n	800e298 <_printf_i+0x1f4>
 800e150:	6825      	ldr	r5, [r4, #0]
 800e152:	6808      	ldr	r0, [r1, #0]
 800e154:	062e      	lsls	r6, r5, #24
 800e156:	f100 0304 	add.w	r3, r0, #4
 800e15a:	d50a      	bpl.n	800e172 <_printf_i+0xce>
 800e15c:	6805      	ldr	r5, [r0, #0]
 800e15e:	600b      	str	r3, [r1, #0]
 800e160:	2d00      	cmp	r5, #0
 800e162:	da03      	bge.n	800e16c <_printf_i+0xc8>
 800e164:	232d      	movs	r3, #45	; 0x2d
 800e166:	426d      	negs	r5, r5
 800e168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e16c:	485e      	ldr	r0, [pc, #376]	; (800e2e8 <_printf_i+0x244>)
 800e16e:	230a      	movs	r3, #10
 800e170:	e019      	b.n	800e1a6 <_printf_i+0x102>
 800e172:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e176:	6805      	ldr	r5, [r0, #0]
 800e178:	600b      	str	r3, [r1, #0]
 800e17a:	bf18      	it	ne
 800e17c:	b22d      	sxthne	r5, r5
 800e17e:	e7ef      	b.n	800e160 <_printf_i+0xbc>
 800e180:	680b      	ldr	r3, [r1, #0]
 800e182:	6825      	ldr	r5, [r4, #0]
 800e184:	1d18      	adds	r0, r3, #4
 800e186:	6008      	str	r0, [r1, #0]
 800e188:	0628      	lsls	r0, r5, #24
 800e18a:	d501      	bpl.n	800e190 <_printf_i+0xec>
 800e18c:	681d      	ldr	r5, [r3, #0]
 800e18e:	e002      	b.n	800e196 <_printf_i+0xf2>
 800e190:	0669      	lsls	r1, r5, #25
 800e192:	d5fb      	bpl.n	800e18c <_printf_i+0xe8>
 800e194:	881d      	ldrh	r5, [r3, #0]
 800e196:	4854      	ldr	r0, [pc, #336]	; (800e2e8 <_printf_i+0x244>)
 800e198:	2f6f      	cmp	r7, #111	; 0x6f
 800e19a:	bf0c      	ite	eq
 800e19c:	2308      	moveq	r3, #8
 800e19e:	230a      	movne	r3, #10
 800e1a0:	2100      	movs	r1, #0
 800e1a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e1a6:	6866      	ldr	r6, [r4, #4]
 800e1a8:	60a6      	str	r6, [r4, #8]
 800e1aa:	2e00      	cmp	r6, #0
 800e1ac:	bfa2      	ittt	ge
 800e1ae:	6821      	ldrge	r1, [r4, #0]
 800e1b0:	f021 0104 	bicge.w	r1, r1, #4
 800e1b4:	6021      	strge	r1, [r4, #0]
 800e1b6:	b90d      	cbnz	r5, 800e1bc <_printf_i+0x118>
 800e1b8:	2e00      	cmp	r6, #0
 800e1ba:	d04d      	beq.n	800e258 <_printf_i+0x1b4>
 800e1bc:	4616      	mov	r6, r2
 800e1be:	fbb5 f1f3 	udiv	r1, r5, r3
 800e1c2:	fb03 5711 	mls	r7, r3, r1, r5
 800e1c6:	5dc7      	ldrb	r7, [r0, r7]
 800e1c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e1cc:	462f      	mov	r7, r5
 800e1ce:	42bb      	cmp	r3, r7
 800e1d0:	460d      	mov	r5, r1
 800e1d2:	d9f4      	bls.n	800e1be <_printf_i+0x11a>
 800e1d4:	2b08      	cmp	r3, #8
 800e1d6:	d10b      	bne.n	800e1f0 <_printf_i+0x14c>
 800e1d8:	6823      	ldr	r3, [r4, #0]
 800e1da:	07df      	lsls	r7, r3, #31
 800e1dc:	d508      	bpl.n	800e1f0 <_printf_i+0x14c>
 800e1de:	6923      	ldr	r3, [r4, #16]
 800e1e0:	6861      	ldr	r1, [r4, #4]
 800e1e2:	4299      	cmp	r1, r3
 800e1e4:	bfde      	ittt	le
 800e1e6:	2330      	movle	r3, #48	; 0x30
 800e1e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e1ec:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800e1f0:	1b92      	subs	r2, r2, r6
 800e1f2:	6122      	str	r2, [r4, #16]
 800e1f4:	f8cd a000 	str.w	sl, [sp]
 800e1f8:	464b      	mov	r3, r9
 800e1fa:	aa03      	add	r2, sp, #12
 800e1fc:	4621      	mov	r1, r4
 800e1fe:	4640      	mov	r0, r8
 800e200:	f7ff fee2 	bl	800dfc8 <_printf_common>
 800e204:	3001      	adds	r0, #1
 800e206:	d14c      	bne.n	800e2a2 <_printf_i+0x1fe>
 800e208:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e20c:	b004      	add	sp, #16
 800e20e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e212:	4835      	ldr	r0, [pc, #212]	; (800e2e8 <_printf_i+0x244>)
 800e214:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e218:	6823      	ldr	r3, [r4, #0]
 800e21a:	680e      	ldr	r6, [r1, #0]
 800e21c:	061f      	lsls	r7, r3, #24
 800e21e:	f856 5b04 	ldr.w	r5, [r6], #4
 800e222:	600e      	str	r6, [r1, #0]
 800e224:	d514      	bpl.n	800e250 <_printf_i+0x1ac>
 800e226:	07d9      	lsls	r1, r3, #31
 800e228:	bf44      	itt	mi
 800e22a:	f043 0320 	orrmi.w	r3, r3, #32
 800e22e:	6023      	strmi	r3, [r4, #0]
 800e230:	b91d      	cbnz	r5, 800e23a <_printf_i+0x196>
 800e232:	6823      	ldr	r3, [r4, #0]
 800e234:	f023 0320 	bic.w	r3, r3, #32
 800e238:	6023      	str	r3, [r4, #0]
 800e23a:	2310      	movs	r3, #16
 800e23c:	e7b0      	b.n	800e1a0 <_printf_i+0xfc>
 800e23e:	6823      	ldr	r3, [r4, #0]
 800e240:	f043 0320 	orr.w	r3, r3, #32
 800e244:	6023      	str	r3, [r4, #0]
 800e246:	2378      	movs	r3, #120	; 0x78
 800e248:	4828      	ldr	r0, [pc, #160]	; (800e2ec <_printf_i+0x248>)
 800e24a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e24e:	e7e3      	b.n	800e218 <_printf_i+0x174>
 800e250:	065e      	lsls	r6, r3, #25
 800e252:	bf48      	it	mi
 800e254:	b2ad      	uxthmi	r5, r5
 800e256:	e7e6      	b.n	800e226 <_printf_i+0x182>
 800e258:	4616      	mov	r6, r2
 800e25a:	e7bb      	b.n	800e1d4 <_printf_i+0x130>
 800e25c:	680b      	ldr	r3, [r1, #0]
 800e25e:	6826      	ldr	r6, [r4, #0]
 800e260:	6960      	ldr	r0, [r4, #20]
 800e262:	1d1d      	adds	r5, r3, #4
 800e264:	600d      	str	r5, [r1, #0]
 800e266:	0635      	lsls	r5, r6, #24
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	d501      	bpl.n	800e270 <_printf_i+0x1cc>
 800e26c:	6018      	str	r0, [r3, #0]
 800e26e:	e002      	b.n	800e276 <_printf_i+0x1d2>
 800e270:	0671      	lsls	r1, r6, #25
 800e272:	d5fb      	bpl.n	800e26c <_printf_i+0x1c8>
 800e274:	8018      	strh	r0, [r3, #0]
 800e276:	2300      	movs	r3, #0
 800e278:	6123      	str	r3, [r4, #16]
 800e27a:	4616      	mov	r6, r2
 800e27c:	e7ba      	b.n	800e1f4 <_printf_i+0x150>
 800e27e:	680b      	ldr	r3, [r1, #0]
 800e280:	1d1a      	adds	r2, r3, #4
 800e282:	600a      	str	r2, [r1, #0]
 800e284:	681e      	ldr	r6, [r3, #0]
 800e286:	6862      	ldr	r2, [r4, #4]
 800e288:	2100      	movs	r1, #0
 800e28a:	4630      	mov	r0, r6
 800e28c:	f7f1 ffb0 	bl	80001f0 <memchr>
 800e290:	b108      	cbz	r0, 800e296 <_printf_i+0x1f2>
 800e292:	1b80      	subs	r0, r0, r6
 800e294:	6060      	str	r0, [r4, #4]
 800e296:	6863      	ldr	r3, [r4, #4]
 800e298:	6123      	str	r3, [r4, #16]
 800e29a:	2300      	movs	r3, #0
 800e29c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e2a0:	e7a8      	b.n	800e1f4 <_printf_i+0x150>
 800e2a2:	6923      	ldr	r3, [r4, #16]
 800e2a4:	4632      	mov	r2, r6
 800e2a6:	4649      	mov	r1, r9
 800e2a8:	4640      	mov	r0, r8
 800e2aa:	47d0      	blx	sl
 800e2ac:	3001      	adds	r0, #1
 800e2ae:	d0ab      	beq.n	800e208 <_printf_i+0x164>
 800e2b0:	6823      	ldr	r3, [r4, #0]
 800e2b2:	079b      	lsls	r3, r3, #30
 800e2b4:	d413      	bmi.n	800e2de <_printf_i+0x23a>
 800e2b6:	68e0      	ldr	r0, [r4, #12]
 800e2b8:	9b03      	ldr	r3, [sp, #12]
 800e2ba:	4298      	cmp	r0, r3
 800e2bc:	bfb8      	it	lt
 800e2be:	4618      	movlt	r0, r3
 800e2c0:	e7a4      	b.n	800e20c <_printf_i+0x168>
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	4632      	mov	r2, r6
 800e2c6:	4649      	mov	r1, r9
 800e2c8:	4640      	mov	r0, r8
 800e2ca:	47d0      	blx	sl
 800e2cc:	3001      	adds	r0, #1
 800e2ce:	d09b      	beq.n	800e208 <_printf_i+0x164>
 800e2d0:	3501      	adds	r5, #1
 800e2d2:	68e3      	ldr	r3, [r4, #12]
 800e2d4:	9903      	ldr	r1, [sp, #12]
 800e2d6:	1a5b      	subs	r3, r3, r1
 800e2d8:	42ab      	cmp	r3, r5
 800e2da:	dcf2      	bgt.n	800e2c2 <_printf_i+0x21e>
 800e2dc:	e7eb      	b.n	800e2b6 <_printf_i+0x212>
 800e2de:	2500      	movs	r5, #0
 800e2e0:	f104 0619 	add.w	r6, r4, #25
 800e2e4:	e7f5      	b.n	800e2d2 <_printf_i+0x22e>
 800e2e6:	bf00      	nop
 800e2e8:	0801392a 	.word	0x0801392a
 800e2ec:	0801393b 	.word	0x0801393b

0800e2f0 <_scanf_float>:
 800e2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2f4:	b087      	sub	sp, #28
 800e2f6:	4617      	mov	r7, r2
 800e2f8:	9303      	str	r3, [sp, #12]
 800e2fa:	688b      	ldr	r3, [r1, #8]
 800e2fc:	1e5a      	subs	r2, r3, #1
 800e2fe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e302:	bf83      	ittte	hi
 800e304:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800e308:	195b      	addhi	r3, r3, r5
 800e30a:	9302      	strhi	r3, [sp, #8]
 800e30c:	2300      	movls	r3, #0
 800e30e:	bf86      	itte	hi
 800e310:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e314:	608b      	strhi	r3, [r1, #8]
 800e316:	9302      	strls	r3, [sp, #8]
 800e318:	680b      	ldr	r3, [r1, #0]
 800e31a:	468b      	mov	fp, r1
 800e31c:	2500      	movs	r5, #0
 800e31e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e322:	f84b 3b1c 	str.w	r3, [fp], #28
 800e326:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e32a:	4680      	mov	r8, r0
 800e32c:	460c      	mov	r4, r1
 800e32e:	465e      	mov	r6, fp
 800e330:	46aa      	mov	sl, r5
 800e332:	46a9      	mov	r9, r5
 800e334:	9501      	str	r5, [sp, #4]
 800e336:	68a2      	ldr	r2, [r4, #8]
 800e338:	b152      	cbz	r2, 800e350 <_scanf_float+0x60>
 800e33a:	683b      	ldr	r3, [r7, #0]
 800e33c:	781b      	ldrb	r3, [r3, #0]
 800e33e:	2b4e      	cmp	r3, #78	; 0x4e
 800e340:	d864      	bhi.n	800e40c <_scanf_float+0x11c>
 800e342:	2b40      	cmp	r3, #64	; 0x40
 800e344:	d83c      	bhi.n	800e3c0 <_scanf_float+0xd0>
 800e346:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800e34a:	b2c8      	uxtb	r0, r1
 800e34c:	280e      	cmp	r0, #14
 800e34e:	d93a      	bls.n	800e3c6 <_scanf_float+0xd6>
 800e350:	f1b9 0f00 	cmp.w	r9, #0
 800e354:	d003      	beq.n	800e35e <_scanf_float+0x6e>
 800e356:	6823      	ldr	r3, [r4, #0]
 800e358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e35c:	6023      	str	r3, [r4, #0]
 800e35e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800e362:	f1ba 0f01 	cmp.w	sl, #1
 800e366:	f200 8113 	bhi.w	800e590 <_scanf_float+0x2a0>
 800e36a:	455e      	cmp	r6, fp
 800e36c:	f200 8105 	bhi.w	800e57a <_scanf_float+0x28a>
 800e370:	2501      	movs	r5, #1
 800e372:	4628      	mov	r0, r5
 800e374:	b007      	add	sp, #28
 800e376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e37a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800e37e:	2a0d      	cmp	r2, #13
 800e380:	d8e6      	bhi.n	800e350 <_scanf_float+0x60>
 800e382:	a101      	add	r1, pc, #4	; (adr r1, 800e388 <_scanf_float+0x98>)
 800e384:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e388:	0800e4c7 	.word	0x0800e4c7
 800e38c:	0800e351 	.word	0x0800e351
 800e390:	0800e351 	.word	0x0800e351
 800e394:	0800e351 	.word	0x0800e351
 800e398:	0800e527 	.word	0x0800e527
 800e39c:	0800e4ff 	.word	0x0800e4ff
 800e3a0:	0800e351 	.word	0x0800e351
 800e3a4:	0800e351 	.word	0x0800e351
 800e3a8:	0800e4d5 	.word	0x0800e4d5
 800e3ac:	0800e351 	.word	0x0800e351
 800e3b0:	0800e351 	.word	0x0800e351
 800e3b4:	0800e351 	.word	0x0800e351
 800e3b8:	0800e351 	.word	0x0800e351
 800e3bc:	0800e48d 	.word	0x0800e48d
 800e3c0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800e3c4:	e7db      	b.n	800e37e <_scanf_float+0x8e>
 800e3c6:	290e      	cmp	r1, #14
 800e3c8:	d8c2      	bhi.n	800e350 <_scanf_float+0x60>
 800e3ca:	a001      	add	r0, pc, #4	; (adr r0, 800e3d0 <_scanf_float+0xe0>)
 800e3cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e3d0:	0800e47f 	.word	0x0800e47f
 800e3d4:	0800e351 	.word	0x0800e351
 800e3d8:	0800e47f 	.word	0x0800e47f
 800e3dc:	0800e513 	.word	0x0800e513
 800e3e0:	0800e351 	.word	0x0800e351
 800e3e4:	0800e42d 	.word	0x0800e42d
 800e3e8:	0800e469 	.word	0x0800e469
 800e3ec:	0800e469 	.word	0x0800e469
 800e3f0:	0800e469 	.word	0x0800e469
 800e3f4:	0800e469 	.word	0x0800e469
 800e3f8:	0800e469 	.word	0x0800e469
 800e3fc:	0800e469 	.word	0x0800e469
 800e400:	0800e469 	.word	0x0800e469
 800e404:	0800e469 	.word	0x0800e469
 800e408:	0800e469 	.word	0x0800e469
 800e40c:	2b6e      	cmp	r3, #110	; 0x6e
 800e40e:	d809      	bhi.n	800e424 <_scanf_float+0x134>
 800e410:	2b60      	cmp	r3, #96	; 0x60
 800e412:	d8b2      	bhi.n	800e37a <_scanf_float+0x8a>
 800e414:	2b54      	cmp	r3, #84	; 0x54
 800e416:	d077      	beq.n	800e508 <_scanf_float+0x218>
 800e418:	2b59      	cmp	r3, #89	; 0x59
 800e41a:	d199      	bne.n	800e350 <_scanf_float+0x60>
 800e41c:	2d07      	cmp	r5, #7
 800e41e:	d197      	bne.n	800e350 <_scanf_float+0x60>
 800e420:	2508      	movs	r5, #8
 800e422:	e029      	b.n	800e478 <_scanf_float+0x188>
 800e424:	2b74      	cmp	r3, #116	; 0x74
 800e426:	d06f      	beq.n	800e508 <_scanf_float+0x218>
 800e428:	2b79      	cmp	r3, #121	; 0x79
 800e42a:	e7f6      	b.n	800e41a <_scanf_float+0x12a>
 800e42c:	6821      	ldr	r1, [r4, #0]
 800e42e:	05c8      	lsls	r0, r1, #23
 800e430:	d51a      	bpl.n	800e468 <_scanf_float+0x178>
 800e432:	9b02      	ldr	r3, [sp, #8]
 800e434:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e438:	6021      	str	r1, [r4, #0]
 800e43a:	f109 0901 	add.w	r9, r9, #1
 800e43e:	b11b      	cbz	r3, 800e448 <_scanf_float+0x158>
 800e440:	3b01      	subs	r3, #1
 800e442:	3201      	adds	r2, #1
 800e444:	9302      	str	r3, [sp, #8]
 800e446:	60a2      	str	r2, [r4, #8]
 800e448:	68a3      	ldr	r3, [r4, #8]
 800e44a:	3b01      	subs	r3, #1
 800e44c:	60a3      	str	r3, [r4, #8]
 800e44e:	6923      	ldr	r3, [r4, #16]
 800e450:	3301      	adds	r3, #1
 800e452:	6123      	str	r3, [r4, #16]
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	3b01      	subs	r3, #1
 800e458:	2b00      	cmp	r3, #0
 800e45a:	607b      	str	r3, [r7, #4]
 800e45c:	f340 8084 	ble.w	800e568 <_scanf_float+0x278>
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	3301      	adds	r3, #1
 800e464:	603b      	str	r3, [r7, #0]
 800e466:	e766      	b.n	800e336 <_scanf_float+0x46>
 800e468:	eb1a 0f05 	cmn.w	sl, r5
 800e46c:	f47f af70 	bne.w	800e350 <_scanf_float+0x60>
 800e470:	6822      	ldr	r2, [r4, #0]
 800e472:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800e476:	6022      	str	r2, [r4, #0]
 800e478:	f806 3b01 	strb.w	r3, [r6], #1
 800e47c:	e7e4      	b.n	800e448 <_scanf_float+0x158>
 800e47e:	6822      	ldr	r2, [r4, #0]
 800e480:	0610      	lsls	r0, r2, #24
 800e482:	f57f af65 	bpl.w	800e350 <_scanf_float+0x60>
 800e486:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e48a:	e7f4      	b.n	800e476 <_scanf_float+0x186>
 800e48c:	f1ba 0f00 	cmp.w	sl, #0
 800e490:	d10e      	bne.n	800e4b0 <_scanf_float+0x1c0>
 800e492:	f1b9 0f00 	cmp.w	r9, #0
 800e496:	d10e      	bne.n	800e4b6 <_scanf_float+0x1c6>
 800e498:	6822      	ldr	r2, [r4, #0]
 800e49a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e49e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e4a2:	d108      	bne.n	800e4b6 <_scanf_float+0x1c6>
 800e4a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e4a8:	6022      	str	r2, [r4, #0]
 800e4aa:	f04f 0a01 	mov.w	sl, #1
 800e4ae:	e7e3      	b.n	800e478 <_scanf_float+0x188>
 800e4b0:	f1ba 0f02 	cmp.w	sl, #2
 800e4b4:	d055      	beq.n	800e562 <_scanf_float+0x272>
 800e4b6:	2d01      	cmp	r5, #1
 800e4b8:	d002      	beq.n	800e4c0 <_scanf_float+0x1d0>
 800e4ba:	2d04      	cmp	r5, #4
 800e4bc:	f47f af48 	bne.w	800e350 <_scanf_float+0x60>
 800e4c0:	3501      	adds	r5, #1
 800e4c2:	b2ed      	uxtb	r5, r5
 800e4c4:	e7d8      	b.n	800e478 <_scanf_float+0x188>
 800e4c6:	f1ba 0f01 	cmp.w	sl, #1
 800e4ca:	f47f af41 	bne.w	800e350 <_scanf_float+0x60>
 800e4ce:	f04f 0a02 	mov.w	sl, #2
 800e4d2:	e7d1      	b.n	800e478 <_scanf_float+0x188>
 800e4d4:	b97d      	cbnz	r5, 800e4f6 <_scanf_float+0x206>
 800e4d6:	f1b9 0f00 	cmp.w	r9, #0
 800e4da:	f47f af3c 	bne.w	800e356 <_scanf_float+0x66>
 800e4de:	6822      	ldr	r2, [r4, #0]
 800e4e0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800e4e4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800e4e8:	f47f af39 	bne.w	800e35e <_scanf_float+0x6e>
 800e4ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e4f0:	6022      	str	r2, [r4, #0]
 800e4f2:	2501      	movs	r5, #1
 800e4f4:	e7c0      	b.n	800e478 <_scanf_float+0x188>
 800e4f6:	2d03      	cmp	r5, #3
 800e4f8:	d0e2      	beq.n	800e4c0 <_scanf_float+0x1d0>
 800e4fa:	2d05      	cmp	r5, #5
 800e4fc:	e7de      	b.n	800e4bc <_scanf_float+0x1cc>
 800e4fe:	2d02      	cmp	r5, #2
 800e500:	f47f af26 	bne.w	800e350 <_scanf_float+0x60>
 800e504:	2503      	movs	r5, #3
 800e506:	e7b7      	b.n	800e478 <_scanf_float+0x188>
 800e508:	2d06      	cmp	r5, #6
 800e50a:	f47f af21 	bne.w	800e350 <_scanf_float+0x60>
 800e50e:	2507      	movs	r5, #7
 800e510:	e7b2      	b.n	800e478 <_scanf_float+0x188>
 800e512:	6822      	ldr	r2, [r4, #0]
 800e514:	0591      	lsls	r1, r2, #22
 800e516:	f57f af1b 	bpl.w	800e350 <_scanf_float+0x60>
 800e51a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800e51e:	6022      	str	r2, [r4, #0]
 800e520:	f8cd 9004 	str.w	r9, [sp, #4]
 800e524:	e7a8      	b.n	800e478 <_scanf_float+0x188>
 800e526:	6822      	ldr	r2, [r4, #0]
 800e528:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800e52c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e530:	d006      	beq.n	800e540 <_scanf_float+0x250>
 800e532:	0550      	lsls	r0, r2, #21
 800e534:	f57f af0c 	bpl.w	800e350 <_scanf_float+0x60>
 800e538:	f1b9 0f00 	cmp.w	r9, #0
 800e53c:	f43f af0f 	beq.w	800e35e <_scanf_float+0x6e>
 800e540:	0591      	lsls	r1, r2, #22
 800e542:	bf58      	it	pl
 800e544:	9901      	ldrpl	r1, [sp, #4]
 800e546:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800e54a:	bf58      	it	pl
 800e54c:	eba9 0101 	subpl.w	r1, r9, r1
 800e550:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800e554:	bf58      	it	pl
 800e556:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e55a:	6022      	str	r2, [r4, #0]
 800e55c:	f04f 0900 	mov.w	r9, #0
 800e560:	e78a      	b.n	800e478 <_scanf_float+0x188>
 800e562:	f04f 0a03 	mov.w	sl, #3
 800e566:	e787      	b.n	800e478 <_scanf_float+0x188>
 800e568:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e56c:	4639      	mov	r1, r7
 800e56e:	4640      	mov	r0, r8
 800e570:	4798      	blx	r3
 800e572:	2800      	cmp	r0, #0
 800e574:	f43f aedf 	beq.w	800e336 <_scanf_float+0x46>
 800e578:	e6ea      	b.n	800e350 <_scanf_float+0x60>
 800e57a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e57e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e582:	463a      	mov	r2, r7
 800e584:	4640      	mov	r0, r8
 800e586:	4798      	blx	r3
 800e588:	6923      	ldr	r3, [r4, #16]
 800e58a:	3b01      	subs	r3, #1
 800e58c:	6123      	str	r3, [r4, #16]
 800e58e:	e6ec      	b.n	800e36a <_scanf_float+0x7a>
 800e590:	1e6b      	subs	r3, r5, #1
 800e592:	2b06      	cmp	r3, #6
 800e594:	d825      	bhi.n	800e5e2 <_scanf_float+0x2f2>
 800e596:	2d02      	cmp	r5, #2
 800e598:	d836      	bhi.n	800e608 <_scanf_float+0x318>
 800e59a:	455e      	cmp	r6, fp
 800e59c:	f67f aee8 	bls.w	800e370 <_scanf_float+0x80>
 800e5a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e5a4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e5a8:	463a      	mov	r2, r7
 800e5aa:	4640      	mov	r0, r8
 800e5ac:	4798      	blx	r3
 800e5ae:	6923      	ldr	r3, [r4, #16]
 800e5b0:	3b01      	subs	r3, #1
 800e5b2:	6123      	str	r3, [r4, #16]
 800e5b4:	e7f1      	b.n	800e59a <_scanf_float+0x2aa>
 800e5b6:	9802      	ldr	r0, [sp, #8]
 800e5b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e5bc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800e5c0:	9002      	str	r0, [sp, #8]
 800e5c2:	463a      	mov	r2, r7
 800e5c4:	4640      	mov	r0, r8
 800e5c6:	4798      	blx	r3
 800e5c8:	6923      	ldr	r3, [r4, #16]
 800e5ca:	3b01      	subs	r3, #1
 800e5cc:	6123      	str	r3, [r4, #16]
 800e5ce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800e5d2:	fa5f fa8a 	uxtb.w	sl, sl
 800e5d6:	f1ba 0f02 	cmp.w	sl, #2
 800e5da:	d1ec      	bne.n	800e5b6 <_scanf_float+0x2c6>
 800e5dc:	3d03      	subs	r5, #3
 800e5de:	b2ed      	uxtb	r5, r5
 800e5e0:	1b76      	subs	r6, r6, r5
 800e5e2:	6823      	ldr	r3, [r4, #0]
 800e5e4:	05da      	lsls	r2, r3, #23
 800e5e6:	d52f      	bpl.n	800e648 <_scanf_float+0x358>
 800e5e8:	055b      	lsls	r3, r3, #21
 800e5ea:	d510      	bpl.n	800e60e <_scanf_float+0x31e>
 800e5ec:	455e      	cmp	r6, fp
 800e5ee:	f67f aebf 	bls.w	800e370 <_scanf_float+0x80>
 800e5f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e5f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e5fa:	463a      	mov	r2, r7
 800e5fc:	4640      	mov	r0, r8
 800e5fe:	4798      	blx	r3
 800e600:	6923      	ldr	r3, [r4, #16]
 800e602:	3b01      	subs	r3, #1
 800e604:	6123      	str	r3, [r4, #16]
 800e606:	e7f1      	b.n	800e5ec <_scanf_float+0x2fc>
 800e608:	46aa      	mov	sl, r5
 800e60a:	9602      	str	r6, [sp, #8]
 800e60c:	e7df      	b.n	800e5ce <_scanf_float+0x2de>
 800e60e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e612:	6923      	ldr	r3, [r4, #16]
 800e614:	2965      	cmp	r1, #101	; 0x65
 800e616:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800e61a:	f106 35ff 	add.w	r5, r6, #4294967295	; 0xffffffff
 800e61e:	6123      	str	r3, [r4, #16]
 800e620:	d00c      	beq.n	800e63c <_scanf_float+0x34c>
 800e622:	2945      	cmp	r1, #69	; 0x45
 800e624:	d00a      	beq.n	800e63c <_scanf_float+0x34c>
 800e626:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e62a:	463a      	mov	r2, r7
 800e62c:	4640      	mov	r0, r8
 800e62e:	4798      	blx	r3
 800e630:	6923      	ldr	r3, [r4, #16]
 800e632:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e636:	3b01      	subs	r3, #1
 800e638:	1eb5      	subs	r5, r6, #2
 800e63a:	6123      	str	r3, [r4, #16]
 800e63c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e640:	463a      	mov	r2, r7
 800e642:	4640      	mov	r0, r8
 800e644:	4798      	blx	r3
 800e646:	462e      	mov	r6, r5
 800e648:	6825      	ldr	r5, [r4, #0]
 800e64a:	f015 0510 	ands.w	r5, r5, #16
 800e64e:	d158      	bne.n	800e702 <_scanf_float+0x412>
 800e650:	7035      	strb	r5, [r6, #0]
 800e652:	6823      	ldr	r3, [r4, #0]
 800e654:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e65c:	d11c      	bne.n	800e698 <_scanf_float+0x3a8>
 800e65e:	9b01      	ldr	r3, [sp, #4]
 800e660:	454b      	cmp	r3, r9
 800e662:	eba3 0209 	sub.w	r2, r3, r9
 800e666:	d124      	bne.n	800e6b2 <_scanf_float+0x3c2>
 800e668:	2200      	movs	r2, #0
 800e66a:	4659      	mov	r1, fp
 800e66c:	4640      	mov	r0, r8
 800e66e:	f000 ff51 	bl	800f514 <_strtod_r>
 800e672:	9b03      	ldr	r3, [sp, #12]
 800e674:	6821      	ldr	r1, [r4, #0]
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	f011 0f02 	tst.w	r1, #2
 800e67c:	ec57 6b10 	vmov	r6, r7, d0
 800e680:	f103 0204 	add.w	r2, r3, #4
 800e684:	d020      	beq.n	800e6c8 <_scanf_float+0x3d8>
 800e686:	9903      	ldr	r1, [sp, #12]
 800e688:	600a      	str	r2, [r1, #0]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	e9c3 6700 	strd	r6, r7, [r3]
 800e690:	68e3      	ldr	r3, [r4, #12]
 800e692:	3301      	adds	r3, #1
 800e694:	60e3      	str	r3, [r4, #12]
 800e696:	e66c      	b.n	800e372 <_scanf_float+0x82>
 800e698:	9b04      	ldr	r3, [sp, #16]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d0e4      	beq.n	800e668 <_scanf_float+0x378>
 800e69e:	9905      	ldr	r1, [sp, #20]
 800e6a0:	230a      	movs	r3, #10
 800e6a2:	462a      	mov	r2, r5
 800e6a4:	3101      	adds	r1, #1
 800e6a6:	4640      	mov	r0, r8
 800e6a8:	f001 f81a 	bl	800f6e0 <_strtol_r>
 800e6ac:	9b04      	ldr	r3, [sp, #16]
 800e6ae:	9e05      	ldr	r6, [sp, #20]
 800e6b0:	1ac2      	subs	r2, r0, r3
 800e6b2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e6b6:	429e      	cmp	r6, r3
 800e6b8:	bf28      	it	cs
 800e6ba:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800e6be:	4912      	ldr	r1, [pc, #72]	; (800e708 <_scanf_float+0x418>)
 800e6c0:	4630      	mov	r0, r6
 800e6c2:	f000 f8c9 	bl	800e858 <siprintf>
 800e6c6:	e7cf      	b.n	800e668 <_scanf_float+0x378>
 800e6c8:	f011 0f04 	tst.w	r1, #4
 800e6cc:	9903      	ldr	r1, [sp, #12]
 800e6ce:	600a      	str	r2, [r1, #0]
 800e6d0:	d1db      	bne.n	800e68a <_scanf_float+0x39a>
 800e6d2:	f8d3 8000 	ldr.w	r8, [r3]
 800e6d6:	ee10 2a10 	vmov	r2, s0
 800e6da:	ee10 0a10 	vmov	r0, s0
 800e6de:	463b      	mov	r3, r7
 800e6e0:	4639      	mov	r1, r7
 800e6e2:	f7f2 fa2b 	bl	8000b3c <__aeabi_dcmpun>
 800e6e6:	b128      	cbz	r0, 800e6f4 <_scanf_float+0x404>
 800e6e8:	4808      	ldr	r0, [pc, #32]	; (800e70c <_scanf_float+0x41c>)
 800e6ea:	f000 f8af 	bl	800e84c <nanf>
 800e6ee:	ed88 0a00 	vstr	s0, [r8]
 800e6f2:	e7cd      	b.n	800e690 <_scanf_float+0x3a0>
 800e6f4:	4630      	mov	r0, r6
 800e6f6:	4639      	mov	r1, r7
 800e6f8:	f7f2 fa7e 	bl	8000bf8 <__aeabi_d2f>
 800e6fc:	f8c8 0000 	str.w	r0, [r8]
 800e700:	e7c6      	b.n	800e690 <_scanf_float+0x3a0>
 800e702:	2500      	movs	r5, #0
 800e704:	e635      	b.n	800e372 <_scanf_float+0x82>
 800e706:	bf00      	nop
 800e708:	0801394c 	.word	0x0801394c
 800e70c:	08013a5b 	.word	0x08013a5b

0800e710 <iprintf>:
 800e710:	b40f      	push	{r0, r1, r2, r3}
 800e712:	4b0a      	ldr	r3, [pc, #40]	; (800e73c <iprintf+0x2c>)
 800e714:	b513      	push	{r0, r1, r4, lr}
 800e716:	681c      	ldr	r4, [r3, #0]
 800e718:	b124      	cbz	r4, 800e724 <iprintf+0x14>
 800e71a:	69a3      	ldr	r3, [r4, #24]
 800e71c:	b913      	cbnz	r3, 800e724 <iprintf+0x14>
 800e71e:	4620      	mov	r0, r4
 800e720:	f002 f85c 	bl	80107dc <__sinit>
 800e724:	ab05      	add	r3, sp, #20
 800e726:	9a04      	ldr	r2, [sp, #16]
 800e728:	68a1      	ldr	r1, [r4, #8]
 800e72a:	9301      	str	r3, [sp, #4]
 800e72c:	4620      	mov	r0, r4
 800e72e:	f003 fb5b 	bl	8011de8 <_vfiprintf_r>
 800e732:	b002      	add	sp, #8
 800e734:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e738:	b004      	add	sp, #16
 800e73a:	4770      	bx	lr
 800e73c:	20000044 	.word	0x20000044

0800e740 <_puts_r>:
 800e740:	b570      	push	{r4, r5, r6, lr}
 800e742:	460e      	mov	r6, r1
 800e744:	4605      	mov	r5, r0
 800e746:	b118      	cbz	r0, 800e750 <_puts_r+0x10>
 800e748:	6983      	ldr	r3, [r0, #24]
 800e74a:	b90b      	cbnz	r3, 800e750 <_puts_r+0x10>
 800e74c:	f002 f846 	bl	80107dc <__sinit>
 800e750:	69ab      	ldr	r3, [r5, #24]
 800e752:	68ac      	ldr	r4, [r5, #8]
 800e754:	b913      	cbnz	r3, 800e75c <_puts_r+0x1c>
 800e756:	4628      	mov	r0, r5
 800e758:	f002 f840 	bl	80107dc <__sinit>
 800e75c:	4b2c      	ldr	r3, [pc, #176]	; (800e810 <_puts_r+0xd0>)
 800e75e:	429c      	cmp	r4, r3
 800e760:	d120      	bne.n	800e7a4 <_puts_r+0x64>
 800e762:	686c      	ldr	r4, [r5, #4]
 800e764:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e766:	07db      	lsls	r3, r3, #31
 800e768:	d405      	bmi.n	800e776 <_puts_r+0x36>
 800e76a:	89a3      	ldrh	r3, [r4, #12]
 800e76c:	0598      	lsls	r0, r3, #22
 800e76e:	d402      	bmi.n	800e776 <_puts_r+0x36>
 800e770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e772:	f002 fc56 	bl	8011022 <__retarget_lock_acquire_recursive>
 800e776:	89a3      	ldrh	r3, [r4, #12]
 800e778:	0719      	lsls	r1, r3, #28
 800e77a:	d51d      	bpl.n	800e7b8 <_puts_r+0x78>
 800e77c:	6923      	ldr	r3, [r4, #16]
 800e77e:	b1db      	cbz	r3, 800e7b8 <_puts_r+0x78>
 800e780:	3e01      	subs	r6, #1
 800e782:	68a3      	ldr	r3, [r4, #8]
 800e784:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e788:	3b01      	subs	r3, #1
 800e78a:	60a3      	str	r3, [r4, #8]
 800e78c:	bb39      	cbnz	r1, 800e7de <_puts_r+0x9e>
 800e78e:	2b00      	cmp	r3, #0
 800e790:	da38      	bge.n	800e804 <_puts_r+0xc4>
 800e792:	4622      	mov	r2, r4
 800e794:	210a      	movs	r1, #10
 800e796:	4628      	mov	r0, r5
 800e798:	f000 ffae 	bl	800f6f8 <__swbuf_r>
 800e79c:	3001      	adds	r0, #1
 800e79e:	d011      	beq.n	800e7c4 <_puts_r+0x84>
 800e7a0:	250a      	movs	r5, #10
 800e7a2:	e011      	b.n	800e7c8 <_puts_r+0x88>
 800e7a4:	4b1b      	ldr	r3, [pc, #108]	; (800e814 <_puts_r+0xd4>)
 800e7a6:	429c      	cmp	r4, r3
 800e7a8:	d101      	bne.n	800e7ae <_puts_r+0x6e>
 800e7aa:	68ac      	ldr	r4, [r5, #8]
 800e7ac:	e7da      	b.n	800e764 <_puts_r+0x24>
 800e7ae:	4b1a      	ldr	r3, [pc, #104]	; (800e818 <_puts_r+0xd8>)
 800e7b0:	429c      	cmp	r4, r3
 800e7b2:	bf08      	it	eq
 800e7b4:	68ec      	ldreq	r4, [r5, #12]
 800e7b6:	e7d5      	b.n	800e764 <_puts_r+0x24>
 800e7b8:	4621      	mov	r1, r4
 800e7ba:	4628      	mov	r0, r5
 800e7bc:	f000 ffee 	bl	800f79c <__swsetup_r>
 800e7c0:	2800      	cmp	r0, #0
 800e7c2:	d0dd      	beq.n	800e780 <_puts_r+0x40>
 800e7c4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800e7c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e7ca:	07da      	lsls	r2, r3, #31
 800e7cc:	d405      	bmi.n	800e7da <_puts_r+0x9a>
 800e7ce:	89a3      	ldrh	r3, [r4, #12]
 800e7d0:	059b      	lsls	r3, r3, #22
 800e7d2:	d402      	bmi.n	800e7da <_puts_r+0x9a>
 800e7d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7d6:	f002 fc25 	bl	8011024 <__retarget_lock_release_recursive>
 800e7da:	4628      	mov	r0, r5
 800e7dc:	bd70      	pop	{r4, r5, r6, pc}
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	da04      	bge.n	800e7ec <_puts_r+0xac>
 800e7e2:	69a2      	ldr	r2, [r4, #24]
 800e7e4:	429a      	cmp	r2, r3
 800e7e6:	dc06      	bgt.n	800e7f6 <_puts_r+0xb6>
 800e7e8:	290a      	cmp	r1, #10
 800e7ea:	d004      	beq.n	800e7f6 <_puts_r+0xb6>
 800e7ec:	6823      	ldr	r3, [r4, #0]
 800e7ee:	1c5a      	adds	r2, r3, #1
 800e7f0:	6022      	str	r2, [r4, #0]
 800e7f2:	7019      	strb	r1, [r3, #0]
 800e7f4:	e7c5      	b.n	800e782 <_puts_r+0x42>
 800e7f6:	4622      	mov	r2, r4
 800e7f8:	4628      	mov	r0, r5
 800e7fa:	f000 ff7d 	bl	800f6f8 <__swbuf_r>
 800e7fe:	3001      	adds	r0, #1
 800e800:	d1bf      	bne.n	800e782 <_puts_r+0x42>
 800e802:	e7df      	b.n	800e7c4 <_puts_r+0x84>
 800e804:	6823      	ldr	r3, [r4, #0]
 800e806:	250a      	movs	r5, #10
 800e808:	1c5a      	adds	r2, r3, #1
 800e80a:	6022      	str	r2, [r4, #0]
 800e80c:	701d      	strb	r5, [r3, #0]
 800e80e:	e7db      	b.n	800e7c8 <_puts_r+0x88>
 800e810:	08013bfc 	.word	0x08013bfc
 800e814:	08013c1c 	.word	0x08013c1c
 800e818:	08013bdc 	.word	0x08013bdc

0800e81c <puts>:
 800e81c:	4b02      	ldr	r3, [pc, #8]	; (800e828 <puts+0xc>)
 800e81e:	4601      	mov	r1, r0
 800e820:	6818      	ldr	r0, [r3, #0]
 800e822:	f7ff bf8d 	b.w	800e740 <_puts_r>
 800e826:	bf00      	nop
 800e828:	20000044 	.word	0x20000044

0800e82c <_sbrk_r>:
 800e82c:	b538      	push	{r3, r4, r5, lr}
 800e82e:	4d06      	ldr	r5, [pc, #24]	; (800e848 <_sbrk_r+0x1c>)
 800e830:	2300      	movs	r3, #0
 800e832:	4604      	mov	r4, r0
 800e834:	4608      	mov	r0, r1
 800e836:	602b      	str	r3, [r5, #0]
 800e838:	f7f7 fde8 	bl	800640c <_sbrk>
 800e83c:	1c43      	adds	r3, r0, #1
 800e83e:	d102      	bne.n	800e846 <_sbrk_r+0x1a>
 800e840:	682b      	ldr	r3, [r5, #0]
 800e842:	b103      	cbz	r3, 800e846 <_sbrk_r+0x1a>
 800e844:	6023      	str	r3, [r4, #0]
 800e846:	bd38      	pop	{r3, r4, r5, pc}
 800e848:	20001aec 	.word	0x20001aec

0800e84c <nanf>:
 800e84c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e854 <nanf+0x8>
 800e850:	4770      	bx	lr
 800e852:	bf00      	nop
 800e854:	7fc00000 	.word	0x7fc00000

0800e858 <siprintf>:
 800e858:	b40e      	push	{r1, r2, r3}
 800e85a:	b500      	push	{lr}
 800e85c:	b09c      	sub	sp, #112	; 0x70
 800e85e:	ab1d      	add	r3, sp, #116	; 0x74
 800e860:	9002      	str	r0, [sp, #8]
 800e862:	9006      	str	r0, [sp, #24]
 800e864:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e868:	4809      	ldr	r0, [pc, #36]	; (800e890 <siprintf+0x38>)
 800e86a:	9107      	str	r1, [sp, #28]
 800e86c:	9104      	str	r1, [sp, #16]
 800e86e:	4909      	ldr	r1, [pc, #36]	; (800e894 <siprintf+0x3c>)
 800e870:	f853 2b04 	ldr.w	r2, [r3], #4
 800e874:	9105      	str	r1, [sp, #20]
 800e876:	6800      	ldr	r0, [r0, #0]
 800e878:	9301      	str	r3, [sp, #4]
 800e87a:	a902      	add	r1, sp, #8
 800e87c:	f003 f98a 	bl	8011b94 <_svfiprintf_r>
 800e880:	9b02      	ldr	r3, [sp, #8]
 800e882:	2200      	movs	r2, #0
 800e884:	701a      	strb	r2, [r3, #0]
 800e886:	b01c      	add	sp, #112	; 0x70
 800e888:	f85d eb04 	ldr.w	lr, [sp], #4
 800e88c:	b003      	add	sp, #12
 800e88e:	4770      	bx	lr
 800e890:	20000044 	.word	0x20000044
 800e894:	ffff0208 	.word	0xffff0208

0800e898 <strstr>:
 800e898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e89a:	780c      	ldrb	r4, [r1, #0]
 800e89c:	b164      	cbz	r4, 800e8b8 <strstr+0x20>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	781a      	ldrb	r2, [r3, #0]
 800e8a2:	4618      	mov	r0, r3
 800e8a4:	1c5e      	adds	r6, r3, #1
 800e8a6:	b90a      	cbnz	r2, 800e8ac <strstr+0x14>
 800e8a8:	4610      	mov	r0, r2
 800e8aa:	e005      	b.n	800e8b8 <strstr+0x20>
 800e8ac:	4294      	cmp	r4, r2
 800e8ae:	d108      	bne.n	800e8c2 <strstr+0x2a>
 800e8b0:	460d      	mov	r5, r1
 800e8b2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 800e8b6:	b902      	cbnz	r2, 800e8ba <strstr+0x22>
 800e8b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8ba:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800e8be:	4297      	cmp	r7, r2
 800e8c0:	d0f7      	beq.n	800e8b2 <strstr+0x1a>
 800e8c2:	4633      	mov	r3, r6
 800e8c4:	e7ec      	b.n	800e8a0 <strstr+0x8>

0800e8c6 <sulp>:
 800e8c6:	b570      	push	{r4, r5, r6, lr}
 800e8c8:	4604      	mov	r4, r0
 800e8ca:	460d      	mov	r5, r1
 800e8cc:	ec45 4b10 	vmov	d0, r4, r5
 800e8d0:	4616      	mov	r6, r2
 800e8d2:	f002 ffa5 	bl	8011820 <__ulp>
 800e8d6:	ec51 0b10 	vmov	r0, r1, d0
 800e8da:	b17e      	cbz	r6, 800e8fc <sulp+0x36>
 800e8dc:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e8e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	dd09      	ble.n	800e8fc <sulp+0x36>
 800e8e8:	051b      	lsls	r3, r3, #20
 800e8ea:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e8ee:	2400      	movs	r4, #0
 800e8f0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e8f4:	4622      	mov	r2, r4
 800e8f6:	462b      	mov	r3, r5
 800e8f8:	f7f1 fe86 	bl	8000608 <__aeabi_dmul>
 800e8fc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e900 <_strtod_l>:
 800e900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e904:	b0a3      	sub	sp, #140	; 0x8c
 800e906:	461f      	mov	r7, r3
 800e908:	2300      	movs	r3, #0
 800e90a:	931e      	str	r3, [sp, #120]	; 0x78
 800e90c:	4ba4      	ldr	r3, [pc, #656]	; (800eba0 <_strtod_l+0x2a0>)
 800e90e:	9219      	str	r2, [sp, #100]	; 0x64
 800e910:	681b      	ldr	r3, [r3, #0]
 800e912:	9307      	str	r3, [sp, #28]
 800e914:	4604      	mov	r4, r0
 800e916:	4618      	mov	r0, r3
 800e918:	4688      	mov	r8, r1
 800e91a:	f7f1 fc61 	bl	80001e0 <strlen>
 800e91e:	f04f 0a00 	mov.w	sl, #0
 800e922:	4605      	mov	r5, r0
 800e924:	f04f 0b00 	mov.w	fp, #0
 800e928:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e92c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800e92e:	781a      	ldrb	r2, [r3, #0]
 800e930:	2a2b      	cmp	r2, #43	; 0x2b
 800e932:	d04c      	beq.n	800e9ce <_strtod_l+0xce>
 800e934:	d839      	bhi.n	800e9aa <_strtod_l+0xaa>
 800e936:	2a0d      	cmp	r2, #13
 800e938:	d832      	bhi.n	800e9a0 <_strtod_l+0xa0>
 800e93a:	2a08      	cmp	r2, #8
 800e93c:	d832      	bhi.n	800e9a4 <_strtod_l+0xa4>
 800e93e:	2a00      	cmp	r2, #0
 800e940:	d03c      	beq.n	800e9bc <_strtod_l+0xbc>
 800e942:	2300      	movs	r3, #0
 800e944:	930e      	str	r3, [sp, #56]	; 0x38
 800e946:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800e948:	7833      	ldrb	r3, [r6, #0]
 800e94a:	2b30      	cmp	r3, #48	; 0x30
 800e94c:	f040 80b4 	bne.w	800eab8 <_strtod_l+0x1b8>
 800e950:	7873      	ldrb	r3, [r6, #1]
 800e952:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e956:	2b58      	cmp	r3, #88	; 0x58
 800e958:	d16c      	bne.n	800ea34 <_strtod_l+0x134>
 800e95a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e95c:	9301      	str	r3, [sp, #4]
 800e95e:	ab1e      	add	r3, sp, #120	; 0x78
 800e960:	9702      	str	r7, [sp, #8]
 800e962:	9300      	str	r3, [sp, #0]
 800e964:	4a8f      	ldr	r2, [pc, #572]	; (800eba4 <_strtod_l+0x2a4>)
 800e966:	ab1f      	add	r3, sp, #124	; 0x7c
 800e968:	a91d      	add	r1, sp, #116	; 0x74
 800e96a:	4620      	mov	r0, r4
 800e96c:	f002 f84c 	bl	8010a08 <__gethex>
 800e970:	f010 0707 	ands.w	r7, r0, #7
 800e974:	4605      	mov	r5, r0
 800e976:	d005      	beq.n	800e984 <_strtod_l+0x84>
 800e978:	2f06      	cmp	r7, #6
 800e97a:	d12a      	bne.n	800e9d2 <_strtod_l+0xd2>
 800e97c:	3601      	adds	r6, #1
 800e97e:	2300      	movs	r3, #0
 800e980:	961d      	str	r6, [sp, #116]	; 0x74
 800e982:	930e      	str	r3, [sp, #56]	; 0x38
 800e984:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e986:	2b00      	cmp	r3, #0
 800e988:	f040 8596 	bne.w	800f4b8 <_strtod_l+0xbb8>
 800e98c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e98e:	b1db      	cbz	r3, 800e9c8 <_strtod_l+0xc8>
 800e990:	4652      	mov	r2, sl
 800e992:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e996:	ec43 2b10 	vmov	d0, r2, r3
 800e99a:	b023      	add	sp, #140	; 0x8c
 800e99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9a0:	2a20      	cmp	r2, #32
 800e9a2:	d1ce      	bne.n	800e942 <_strtod_l+0x42>
 800e9a4:	3301      	adds	r3, #1
 800e9a6:	931d      	str	r3, [sp, #116]	; 0x74
 800e9a8:	e7c0      	b.n	800e92c <_strtod_l+0x2c>
 800e9aa:	2a2d      	cmp	r2, #45	; 0x2d
 800e9ac:	d1c9      	bne.n	800e942 <_strtod_l+0x42>
 800e9ae:	2201      	movs	r2, #1
 800e9b0:	920e      	str	r2, [sp, #56]	; 0x38
 800e9b2:	1c5a      	adds	r2, r3, #1
 800e9b4:	921d      	str	r2, [sp, #116]	; 0x74
 800e9b6:	785b      	ldrb	r3, [r3, #1]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d1c4      	bne.n	800e946 <_strtod_l+0x46>
 800e9bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800e9be:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	f040 8576 	bne.w	800f4b4 <_strtod_l+0xbb4>
 800e9c8:	4652      	mov	r2, sl
 800e9ca:	465b      	mov	r3, fp
 800e9cc:	e7e3      	b.n	800e996 <_strtod_l+0x96>
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	e7ee      	b.n	800e9b0 <_strtod_l+0xb0>
 800e9d2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e9d4:	b13a      	cbz	r2, 800e9e6 <_strtod_l+0xe6>
 800e9d6:	2135      	movs	r1, #53	; 0x35
 800e9d8:	a820      	add	r0, sp, #128	; 0x80
 800e9da:	f003 f82c 	bl	8011a36 <__copybits>
 800e9de:	991e      	ldr	r1, [sp, #120]	; 0x78
 800e9e0:	4620      	mov	r0, r4
 800e9e2:	f002 fbf1 	bl	80111c8 <_Bfree>
 800e9e6:	3f01      	subs	r7, #1
 800e9e8:	2f05      	cmp	r7, #5
 800e9ea:	d807      	bhi.n	800e9fc <_strtod_l+0xfc>
 800e9ec:	e8df f007 	tbb	[pc, r7]
 800e9f0:	1d180b0e 	.word	0x1d180b0e
 800e9f4:	030e      	.short	0x030e
 800e9f6:	f04f 0b00 	mov.w	fp, #0
 800e9fa:	46da      	mov	sl, fp
 800e9fc:	0728      	lsls	r0, r5, #28
 800e9fe:	d5c1      	bpl.n	800e984 <_strtod_l+0x84>
 800ea00:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ea04:	e7be      	b.n	800e984 <_strtod_l+0x84>
 800ea06:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800ea0a:	e7f7      	b.n	800e9fc <_strtod_l+0xfc>
 800ea0c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800ea10:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800ea12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ea16:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ea1a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ea1e:	e7ed      	b.n	800e9fc <_strtod_l+0xfc>
 800ea20:	f8df b184 	ldr.w	fp, [pc, #388]	; 800eba8 <_strtod_l+0x2a8>
 800ea24:	f04f 0a00 	mov.w	sl, #0
 800ea28:	e7e8      	b.n	800e9fc <_strtod_l+0xfc>
 800ea2a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ea2e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ea32:	e7e3      	b.n	800e9fc <_strtod_l+0xfc>
 800ea34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ea36:	1c5a      	adds	r2, r3, #1
 800ea38:	921d      	str	r2, [sp, #116]	; 0x74
 800ea3a:	785b      	ldrb	r3, [r3, #1]
 800ea3c:	2b30      	cmp	r3, #48	; 0x30
 800ea3e:	d0f9      	beq.n	800ea34 <_strtod_l+0x134>
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d09f      	beq.n	800e984 <_strtod_l+0x84>
 800ea44:	2301      	movs	r3, #1
 800ea46:	f04f 0900 	mov.w	r9, #0
 800ea4a:	9304      	str	r3, [sp, #16]
 800ea4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ea4e:	930a      	str	r3, [sp, #40]	; 0x28
 800ea50:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ea54:	464f      	mov	r7, r9
 800ea56:	220a      	movs	r2, #10
 800ea58:	981d      	ldr	r0, [sp, #116]	; 0x74
 800ea5a:	7806      	ldrb	r6, [r0, #0]
 800ea5c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ea60:	b2d9      	uxtb	r1, r3
 800ea62:	2909      	cmp	r1, #9
 800ea64:	d92a      	bls.n	800eabc <_strtod_l+0x1bc>
 800ea66:	9907      	ldr	r1, [sp, #28]
 800ea68:	462a      	mov	r2, r5
 800ea6a:	f003 fb38 	bl	80120de <strncmp>
 800ea6e:	b398      	cbz	r0, 800ead8 <_strtod_l+0x1d8>
 800ea70:	2000      	movs	r0, #0
 800ea72:	4633      	mov	r3, r6
 800ea74:	463d      	mov	r5, r7
 800ea76:	9007      	str	r0, [sp, #28]
 800ea78:	4602      	mov	r2, r0
 800ea7a:	2b65      	cmp	r3, #101	; 0x65
 800ea7c:	d001      	beq.n	800ea82 <_strtod_l+0x182>
 800ea7e:	2b45      	cmp	r3, #69	; 0x45
 800ea80:	d118      	bne.n	800eab4 <_strtod_l+0x1b4>
 800ea82:	b91d      	cbnz	r5, 800ea8c <_strtod_l+0x18c>
 800ea84:	9b04      	ldr	r3, [sp, #16]
 800ea86:	4303      	orrs	r3, r0
 800ea88:	d098      	beq.n	800e9bc <_strtod_l+0xbc>
 800ea8a:	2500      	movs	r5, #0
 800ea8c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800ea90:	f108 0301 	add.w	r3, r8, #1
 800ea94:	931d      	str	r3, [sp, #116]	; 0x74
 800ea96:	f898 3001 	ldrb.w	r3, [r8, #1]
 800ea9a:	2b2b      	cmp	r3, #43	; 0x2b
 800ea9c:	d075      	beq.n	800eb8a <_strtod_l+0x28a>
 800ea9e:	2b2d      	cmp	r3, #45	; 0x2d
 800eaa0:	d07b      	beq.n	800eb9a <_strtod_l+0x29a>
 800eaa2:	f04f 0c00 	mov.w	ip, #0
 800eaa6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800eaaa:	2909      	cmp	r1, #9
 800eaac:	f240 8082 	bls.w	800ebb4 <_strtod_l+0x2b4>
 800eab0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800eab4:	2600      	movs	r6, #0
 800eab6:	e09d      	b.n	800ebf4 <_strtod_l+0x2f4>
 800eab8:	2300      	movs	r3, #0
 800eaba:	e7c4      	b.n	800ea46 <_strtod_l+0x146>
 800eabc:	2f08      	cmp	r7, #8
 800eabe:	bfd8      	it	le
 800eac0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800eac2:	f100 0001 	add.w	r0, r0, #1
 800eac6:	bfda      	itte	le
 800eac8:	fb02 3301 	mlale	r3, r2, r1, r3
 800eacc:	9309      	strle	r3, [sp, #36]	; 0x24
 800eace:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ead2:	3701      	adds	r7, #1
 800ead4:	901d      	str	r0, [sp, #116]	; 0x74
 800ead6:	e7bf      	b.n	800ea58 <_strtod_l+0x158>
 800ead8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800eada:	195a      	adds	r2, r3, r5
 800eadc:	921d      	str	r2, [sp, #116]	; 0x74
 800eade:	5d5b      	ldrb	r3, [r3, r5]
 800eae0:	2f00      	cmp	r7, #0
 800eae2:	d037      	beq.n	800eb54 <_strtod_l+0x254>
 800eae4:	9007      	str	r0, [sp, #28]
 800eae6:	463d      	mov	r5, r7
 800eae8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800eaec:	2a09      	cmp	r2, #9
 800eaee:	d912      	bls.n	800eb16 <_strtod_l+0x216>
 800eaf0:	2201      	movs	r2, #1
 800eaf2:	e7c2      	b.n	800ea7a <_strtod_l+0x17a>
 800eaf4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800eaf6:	1c5a      	adds	r2, r3, #1
 800eaf8:	921d      	str	r2, [sp, #116]	; 0x74
 800eafa:	785b      	ldrb	r3, [r3, #1]
 800eafc:	3001      	adds	r0, #1
 800eafe:	2b30      	cmp	r3, #48	; 0x30
 800eb00:	d0f8      	beq.n	800eaf4 <_strtod_l+0x1f4>
 800eb02:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800eb06:	2a08      	cmp	r2, #8
 800eb08:	f200 84db 	bhi.w	800f4c2 <_strtod_l+0xbc2>
 800eb0c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800eb0e:	9007      	str	r0, [sp, #28]
 800eb10:	2000      	movs	r0, #0
 800eb12:	920a      	str	r2, [sp, #40]	; 0x28
 800eb14:	4605      	mov	r5, r0
 800eb16:	3b30      	subs	r3, #48	; 0x30
 800eb18:	f100 0201 	add.w	r2, r0, #1
 800eb1c:	d014      	beq.n	800eb48 <_strtod_l+0x248>
 800eb1e:	9907      	ldr	r1, [sp, #28]
 800eb20:	4411      	add	r1, r2
 800eb22:	9107      	str	r1, [sp, #28]
 800eb24:	462a      	mov	r2, r5
 800eb26:	eb00 0e05 	add.w	lr, r0, r5
 800eb2a:	210a      	movs	r1, #10
 800eb2c:	4572      	cmp	r2, lr
 800eb2e:	d113      	bne.n	800eb58 <_strtod_l+0x258>
 800eb30:	182a      	adds	r2, r5, r0
 800eb32:	2a08      	cmp	r2, #8
 800eb34:	f105 0501 	add.w	r5, r5, #1
 800eb38:	4405      	add	r5, r0
 800eb3a:	dc1c      	bgt.n	800eb76 <_strtod_l+0x276>
 800eb3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800eb3e:	220a      	movs	r2, #10
 800eb40:	fb02 3301 	mla	r3, r2, r1, r3
 800eb44:	9309      	str	r3, [sp, #36]	; 0x24
 800eb46:	2200      	movs	r2, #0
 800eb48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800eb4a:	1c59      	adds	r1, r3, #1
 800eb4c:	911d      	str	r1, [sp, #116]	; 0x74
 800eb4e:	785b      	ldrb	r3, [r3, #1]
 800eb50:	4610      	mov	r0, r2
 800eb52:	e7c9      	b.n	800eae8 <_strtod_l+0x1e8>
 800eb54:	4638      	mov	r0, r7
 800eb56:	e7d2      	b.n	800eafe <_strtod_l+0x1fe>
 800eb58:	2a08      	cmp	r2, #8
 800eb5a:	dc04      	bgt.n	800eb66 <_strtod_l+0x266>
 800eb5c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800eb5e:	434e      	muls	r6, r1
 800eb60:	9609      	str	r6, [sp, #36]	; 0x24
 800eb62:	3201      	adds	r2, #1
 800eb64:	e7e2      	b.n	800eb2c <_strtod_l+0x22c>
 800eb66:	f102 0c01 	add.w	ip, r2, #1
 800eb6a:	f1bc 0f10 	cmp.w	ip, #16
 800eb6e:	bfd8      	it	le
 800eb70:	fb01 f909 	mulle.w	r9, r1, r9
 800eb74:	e7f5      	b.n	800eb62 <_strtod_l+0x262>
 800eb76:	2d10      	cmp	r5, #16
 800eb78:	bfdc      	itt	le
 800eb7a:	220a      	movle	r2, #10
 800eb7c:	fb02 3909 	mlale	r9, r2, r9, r3
 800eb80:	e7e1      	b.n	800eb46 <_strtod_l+0x246>
 800eb82:	2300      	movs	r3, #0
 800eb84:	9307      	str	r3, [sp, #28]
 800eb86:	2201      	movs	r2, #1
 800eb88:	e77c      	b.n	800ea84 <_strtod_l+0x184>
 800eb8a:	f04f 0c00 	mov.w	ip, #0
 800eb8e:	f108 0302 	add.w	r3, r8, #2
 800eb92:	931d      	str	r3, [sp, #116]	; 0x74
 800eb94:	f898 3002 	ldrb.w	r3, [r8, #2]
 800eb98:	e785      	b.n	800eaa6 <_strtod_l+0x1a6>
 800eb9a:	f04f 0c01 	mov.w	ip, #1
 800eb9e:	e7f6      	b.n	800eb8e <_strtod_l+0x28e>
 800eba0:	08013ca8 	.word	0x08013ca8
 800eba4:	08013954 	.word	0x08013954
 800eba8:	7ff00000 	.word	0x7ff00000
 800ebac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ebae:	1c59      	adds	r1, r3, #1
 800ebb0:	911d      	str	r1, [sp, #116]	; 0x74
 800ebb2:	785b      	ldrb	r3, [r3, #1]
 800ebb4:	2b30      	cmp	r3, #48	; 0x30
 800ebb6:	d0f9      	beq.n	800ebac <_strtod_l+0x2ac>
 800ebb8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800ebbc:	2908      	cmp	r1, #8
 800ebbe:	f63f af79 	bhi.w	800eab4 <_strtod_l+0x1b4>
 800ebc2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800ebc6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ebc8:	9308      	str	r3, [sp, #32]
 800ebca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ebcc:	1c59      	adds	r1, r3, #1
 800ebce:	911d      	str	r1, [sp, #116]	; 0x74
 800ebd0:	785b      	ldrb	r3, [r3, #1]
 800ebd2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800ebd6:	2e09      	cmp	r6, #9
 800ebd8:	d937      	bls.n	800ec4a <_strtod_l+0x34a>
 800ebda:	9e08      	ldr	r6, [sp, #32]
 800ebdc:	1b89      	subs	r1, r1, r6
 800ebde:	2908      	cmp	r1, #8
 800ebe0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ebe4:	dc02      	bgt.n	800ebec <_strtod_l+0x2ec>
 800ebe6:	4576      	cmp	r6, lr
 800ebe8:	bfa8      	it	ge
 800ebea:	4676      	movge	r6, lr
 800ebec:	f1bc 0f00 	cmp.w	ip, #0
 800ebf0:	d000      	beq.n	800ebf4 <_strtod_l+0x2f4>
 800ebf2:	4276      	negs	r6, r6
 800ebf4:	2d00      	cmp	r5, #0
 800ebf6:	d14f      	bne.n	800ec98 <_strtod_l+0x398>
 800ebf8:	9904      	ldr	r1, [sp, #16]
 800ebfa:	4301      	orrs	r1, r0
 800ebfc:	f47f aec2 	bne.w	800e984 <_strtod_l+0x84>
 800ec00:	2a00      	cmp	r2, #0
 800ec02:	f47f aedb 	bne.w	800e9bc <_strtod_l+0xbc>
 800ec06:	2b69      	cmp	r3, #105	; 0x69
 800ec08:	d027      	beq.n	800ec5a <_strtod_l+0x35a>
 800ec0a:	dc24      	bgt.n	800ec56 <_strtod_l+0x356>
 800ec0c:	2b49      	cmp	r3, #73	; 0x49
 800ec0e:	d024      	beq.n	800ec5a <_strtod_l+0x35a>
 800ec10:	2b4e      	cmp	r3, #78	; 0x4e
 800ec12:	f47f aed3 	bne.w	800e9bc <_strtod_l+0xbc>
 800ec16:	499e      	ldr	r1, [pc, #632]	; (800ee90 <_strtod_l+0x590>)
 800ec18:	a81d      	add	r0, sp, #116	; 0x74
 800ec1a:	f002 f94d 	bl	8010eb8 <__match>
 800ec1e:	2800      	cmp	r0, #0
 800ec20:	f43f aecc 	beq.w	800e9bc <_strtod_l+0xbc>
 800ec24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ec26:	781b      	ldrb	r3, [r3, #0]
 800ec28:	2b28      	cmp	r3, #40	; 0x28
 800ec2a:	d12d      	bne.n	800ec88 <_strtod_l+0x388>
 800ec2c:	4999      	ldr	r1, [pc, #612]	; (800ee94 <_strtod_l+0x594>)
 800ec2e:	aa20      	add	r2, sp, #128	; 0x80
 800ec30:	a81d      	add	r0, sp, #116	; 0x74
 800ec32:	f002 f955 	bl	8010ee0 <__hexnan>
 800ec36:	2805      	cmp	r0, #5
 800ec38:	d126      	bne.n	800ec88 <_strtod_l+0x388>
 800ec3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ec3c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800ec40:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ec44:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800ec48:	e69c      	b.n	800e984 <_strtod_l+0x84>
 800ec4a:	210a      	movs	r1, #10
 800ec4c:	fb01 3e0e 	mla	lr, r1, lr, r3
 800ec50:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800ec54:	e7b9      	b.n	800ebca <_strtod_l+0x2ca>
 800ec56:	2b6e      	cmp	r3, #110	; 0x6e
 800ec58:	e7db      	b.n	800ec12 <_strtod_l+0x312>
 800ec5a:	498f      	ldr	r1, [pc, #572]	; (800ee98 <_strtod_l+0x598>)
 800ec5c:	a81d      	add	r0, sp, #116	; 0x74
 800ec5e:	f002 f92b 	bl	8010eb8 <__match>
 800ec62:	2800      	cmp	r0, #0
 800ec64:	f43f aeaa 	beq.w	800e9bc <_strtod_l+0xbc>
 800ec68:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ec6a:	498c      	ldr	r1, [pc, #560]	; (800ee9c <_strtod_l+0x59c>)
 800ec6c:	3b01      	subs	r3, #1
 800ec6e:	a81d      	add	r0, sp, #116	; 0x74
 800ec70:	931d      	str	r3, [sp, #116]	; 0x74
 800ec72:	f002 f921 	bl	8010eb8 <__match>
 800ec76:	b910      	cbnz	r0, 800ec7e <_strtod_l+0x37e>
 800ec78:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ec7a:	3301      	adds	r3, #1
 800ec7c:	931d      	str	r3, [sp, #116]	; 0x74
 800ec7e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800eeac <_strtod_l+0x5ac>
 800ec82:	f04f 0a00 	mov.w	sl, #0
 800ec86:	e67d      	b.n	800e984 <_strtod_l+0x84>
 800ec88:	4885      	ldr	r0, [pc, #532]	; (800eea0 <_strtod_l+0x5a0>)
 800ec8a:	f003 f9dd 	bl	8012048 <nan>
 800ec8e:	ed8d 0b04 	vstr	d0, [sp, #16]
 800ec92:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800ec96:	e675      	b.n	800e984 <_strtod_l+0x84>
 800ec98:	9b07      	ldr	r3, [sp, #28]
 800ec9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec9c:	1af3      	subs	r3, r6, r3
 800ec9e:	2f00      	cmp	r7, #0
 800eca0:	bf08      	it	eq
 800eca2:	462f      	moveq	r7, r5
 800eca4:	2d10      	cmp	r5, #16
 800eca6:	9308      	str	r3, [sp, #32]
 800eca8:	46a8      	mov	r8, r5
 800ecaa:	bfa8      	it	ge
 800ecac:	f04f 0810 	movge.w	r8, #16
 800ecb0:	f7f1 fc30 	bl	8000514 <__aeabi_ui2d>
 800ecb4:	2d09      	cmp	r5, #9
 800ecb6:	4682      	mov	sl, r0
 800ecb8:	468b      	mov	fp, r1
 800ecba:	dd13      	ble.n	800ece4 <_strtod_l+0x3e4>
 800ecbc:	4b79      	ldr	r3, [pc, #484]	; (800eea4 <_strtod_l+0x5a4>)
 800ecbe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ecc2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800ecc6:	f7f1 fc9f 	bl	8000608 <__aeabi_dmul>
 800ecca:	4682      	mov	sl, r0
 800eccc:	4648      	mov	r0, r9
 800ecce:	468b      	mov	fp, r1
 800ecd0:	f7f1 fc20 	bl	8000514 <__aeabi_ui2d>
 800ecd4:	4602      	mov	r2, r0
 800ecd6:	460b      	mov	r3, r1
 800ecd8:	4650      	mov	r0, sl
 800ecda:	4659      	mov	r1, fp
 800ecdc:	f7f1 fade 	bl	800029c <__adddf3>
 800ece0:	4682      	mov	sl, r0
 800ece2:	468b      	mov	fp, r1
 800ece4:	2d0f      	cmp	r5, #15
 800ece6:	dc38      	bgt.n	800ed5a <_strtod_l+0x45a>
 800ece8:	9b08      	ldr	r3, [sp, #32]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	f43f ae4a 	beq.w	800e984 <_strtod_l+0x84>
 800ecf0:	dd24      	ble.n	800ed3c <_strtod_l+0x43c>
 800ecf2:	2b16      	cmp	r3, #22
 800ecf4:	dc0b      	bgt.n	800ed0e <_strtod_l+0x40e>
 800ecf6:	4d6b      	ldr	r5, [pc, #428]	; (800eea4 <_strtod_l+0x5a4>)
 800ecf8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800ecfc:	e9d5 0100 	ldrd	r0, r1, [r5]
 800ed00:	4652      	mov	r2, sl
 800ed02:	465b      	mov	r3, fp
 800ed04:	f7f1 fc80 	bl	8000608 <__aeabi_dmul>
 800ed08:	4682      	mov	sl, r0
 800ed0a:	468b      	mov	fp, r1
 800ed0c:	e63a      	b.n	800e984 <_strtod_l+0x84>
 800ed0e:	9a08      	ldr	r2, [sp, #32]
 800ed10:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800ed14:	4293      	cmp	r3, r2
 800ed16:	db20      	blt.n	800ed5a <_strtod_l+0x45a>
 800ed18:	4c62      	ldr	r4, [pc, #392]	; (800eea4 <_strtod_l+0x5a4>)
 800ed1a:	f1c5 050f 	rsb	r5, r5, #15
 800ed1e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ed22:	4652      	mov	r2, sl
 800ed24:	465b      	mov	r3, fp
 800ed26:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed2a:	f7f1 fc6d 	bl	8000608 <__aeabi_dmul>
 800ed2e:	9b08      	ldr	r3, [sp, #32]
 800ed30:	1b5d      	subs	r5, r3, r5
 800ed32:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ed36:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ed3a:	e7e3      	b.n	800ed04 <_strtod_l+0x404>
 800ed3c:	9b08      	ldr	r3, [sp, #32]
 800ed3e:	3316      	adds	r3, #22
 800ed40:	db0b      	blt.n	800ed5a <_strtod_l+0x45a>
 800ed42:	9b07      	ldr	r3, [sp, #28]
 800ed44:	4a57      	ldr	r2, [pc, #348]	; (800eea4 <_strtod_l+0x5a4>)
 800ed46:	1b9e      	subs	r6, r3, r6
 800ed48:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800ed4c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ed50:	4650      	mov	r0, sl
 800ed52:	4659      	mov	r1, fp
 800ed54:	f7f1 fd82 	bl	800085c <__aeabi_ddiv>
 800ed58:	e7d6      	b.n	800ed08 <_strtod_l+0x408>
 800ed5a:	9b08      	ldr	r3, [sp, #32]
 800ed5c:	eba5 0808 	sub.w	r8, r5, r8
 800ed60:	4498      	add	r8, r3
 800ed62:	f1b8 0f00 	cmp.w	r8, #0
 800ed66:	dd71      	ble.n	800ee4c <_strtod_l+0x54c>
 800ed68:	f018 030f 	ands.w	r3, r8, #15
 800ed6c:	d00a      	beq.n	800ed84 <_strtod_l+0x484>
 800ed6e:	494d      	ldr	r1, [pc, #308]	; (800eea4 <_strtod_l+0x5a4>)
 800ed70:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ed74:	4652      	mov	r2, sl
 800ed76:	465b      	mov	r3, fp
 800ed78:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed7c:	f7f1 fc44 	bl	8000608 <__aeabi_dmul>
 800ed80:	4682      	mov	sl, r0
 800ed82:	468b      	mov	fp, r1
 800ed84:	f038 080f 	bics.w	r8, r8, #15
 800ed88:	d04d      	beq.n	800ee26 <_strtod_l+0x526>
 800ed8a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800ed8e:	dd22      	ble.n	800edd6 <_strtod_l+0x4d6>
 800ed90:	2500      	movs	r5, #0
 800ed92:	462e      	mov	r6, r5
 800ed94:	9509      	str	r5, [sp, #36]	; 0x24
 800ed96:	9507      	str	r5, [sp, #28]
 800ed98:	2322      	movs	r3, #34	; 0x22
 800ed9a:	f8df b110 	ldr.w	fp, [pc, #272]	; 800eeac <_strtod_l+0x5ac>
 800ed9e:	6023      	str	r3, [r4, #0]
 800eda0:	f04f 0a00 	mov.w	sl, #0
 800eda4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	f43f adec 	beq.w	800e984 <_strtod_l+0x84>
 800edac:	991e      	ldr	r1, [sp, #120]	; 0x78
 800edae:	4620      	mov	r0, r4
 800edb0:	f002 fa0a 	bl	80111c8 <_Bfree>
 800edb4:	9907      	ldr	r1, [sp, #28]
 800edb6:	4620      	mov	r0, r4
 800edb8:	f002 fa06 	bl	80111c8 <_Bfree>
 800edbc:	4631      	mov	r1, r6
 800edbe:	4620      	mov	r0, r4
 800edc0:	f002 fa02 	bl	80111c8 <_Bfree>
 800edc4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800edc6:	4620      	mov	r0, r4
 800edc8:	f002 f9fe 	bl	80111c8 <_Bfree>
 800edcc:	4629      	mov	r1, r5
 800edce:	4620      	mov	r0, r4
 800edd0:	f002 f9fa 	bl	80111c8 <_Bfree>
 800edd4:	e5d6      	b.n	800e984 <_strtod_l+0x84>
 800edd6:	2300      	movs	r3, #0
 800edd8:	ea4f 1828 	mov.w	r8, r8, asr #4
 800eddc:	4650      	mov	r0, sl
 800edde:	4659      	mov	r1, fp
 800ede0:	4699      	mov	r9, r3
 800ede2:	f1b8 0f01 	cmp.w	r8, #1
 800ede6:	dc21      	bgt.n	800ee2c <_strtod_l+0x52c>
 800ede8:	b10b      	cbz	r3, 800edee <_strtod_l+0x4ee>
 800edea:	4682      	mov	sl, r0
 800edec:	468b      	mov	fp, r1
 800edee:	4b2e      	ldr	r3, [pc, #184]	; (800eea8 <_strtod_l+0x5a8>)
 800edf0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800edf4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800edf8:	4652      	mov	r2, sl
 800edfa:	465b      	mov	r3, fp
 800edfc:	e9d9 0100 	ldrd	r0, r1, [r9]
 800ee00:	f7f1 fc02 	bl	8000608 <__aeabi_dmul>
 800ee04:	4b29      	ldr	r3, [pc, #164]	; (800eeac <_strtod_l+0x5ac>)
 800ee06:	460a      	mov	r2, r1
 800ee08:	400b      	ands	r3, r1
 800ee0a:	4929      	ldr	r1, [pc, #164]	; (800eeb0 <_strtod_l+0x5b0>)
 800ee0c:	428b      	cmp	r3, r1
 800ee0e:	4682      	mov	sl, r0
 800ee10:	d8be      	bhi.n	800ed90 <_strtod_l+0x490>
 800ee12:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800ee16:	428b      	cmp	r3, r1
 800ee18:	bf86      	itte	hi
 800ee1a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800eeb4 <_strtod_l+0x5b4>
 800ee1e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800ee22:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800ee26:	2300      	movs	r3, #0
 800ee28:	9304      	str	r3, [sp, #16]
 800ee2a:	e081      	b.n	800ef30 <_strtod_l+0x630>
 800ee2c:	f018 0f01 	tst.w	r8, #1
 800ee30:	d007      	beq.n	800ee42 <_strtod_l+0x542>
 800ee32:	4b1d      	ldr	r3, [pc, #116]	; (800eea8 <_strtod_l+0x5a8>)
 800ee34:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800ee38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee3c:	f7f1 fbe4 	bl	8000608 <__aeabi_dmul>
 800ee40:	2301      	movs	r3, #1
 800ee42:	f109 0901 	add.w	r9, r9, #1
 800ee46:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ee4a:	e7ca      	b.n	800ede2 <_strtod_l+0x4e2>
 800ee4c:	d0eb      	beq.n	800ee26 <_strtod_l+0x526>
 800ee4e:	f1c8 0800 	rsb	r8, r8, #0
 800ee52:	f018 020f 	ands.w	r2, r8, #15
 800ee56:	d00a      	beq.n	800ee6e <_strtod_l+0x56e>
 800ee58:	4b12      	ldr	r3, [pc, #72]	; (800eea4 <_strtod_l+0x5a4>)
 800ee5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ee5e:	4650      	mov	r0, sl
 800ee60:	4659      	mov	r1, fp
 800ee62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee66:	f7f1 fcf9 	bl	800085c <__aeabi_ddiv>
 800ee6a:	4682      	mov	sl, r0
 800ee6c:	468b      	mov	fp, r1
 800ee6e:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ee72:	d0d8      	beq.n	800ee26 <_strtod_l+0x526>
 800ee74:	f1b8 0f1f 	cmp.w	r8, #31
 800ee78:	dd1e      	ble.n	800eeb8 <_strtod_l+0x5b8>
 800ee7a:	2500      	movs	r5, #0
 800ee7c:	462e      	mov	r6, r5
 800ee7e:	9509      	str	r5, [sp, #36]	; 0x24
 800ee80:	9507      	str	r5, [sp, #28]
 800ee82:	2322      	movs	r3, #34	; 0x22
 800ee84:	f04f 0a00 	mov.w	sl, #0
 800ee88:	f04f 0b00 	mov.w	fp, #0
 800ee8c:	6023      	str	r3, [r4, #0]
 800ee8e:	e789      	b.n	800eda4 <_strtod_l+0x4a4>
 800ee90:	08013925 	.word	0x08013925
 800ee94:	08013968 	.word	0x08013968
 800ee98:	0801391d 	.word	0x0801391d
 800ee9c:	08013b60 	.word	0x08013b60
 800eea0:	08013a5b 	.word	0x08013a5b
 800eea4:	08013d48 	.word	0x08013d48
 800eea8:	08013d20 	.word	0x08013d20
 800eeac:	7ff00000 	.word	0x7ff00000
 800eeb0:	7ca00000 	.word	0x7ca00000
 800eeb4:	7fefffff 	.word	0x7fefffff
 800eeb8:	f018 0310 	ands.w	r3, r8, #16
 800eebc:	bf18      	it	ne
 800eebe:	236a      	movne	r3, #106	; 0x6a
 800eec0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800f278 <_strtod_l+0x978>
 800eec4:	9304      	str	r3, [sp, #16]
 800eec6:	4650      	mov	r0, sl
 800eec8:	4659      	mov	r1, fp
 800eeca:	2300      	movs	r3, #0
 800eecc:	f018 0f01 	tst.w	r8, #1
 800eed0:	d004      	beq.n	800eedc <_strtod_l+0x5dc>
 800eed2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800eed6:	f7f1 fb97 	bl	8000608 <__aeabi_dmul>
 800eeda:	2301      	movs	r3, #1
 800eedc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800eee0:	f109 0908 	add.w	r9, r9, #8
 800eee4:	d1f2      	bne.n	800eecc <_strtod_l+0x5cc>
 800eee6:	b10b      	cbz	r3, 800eeec <_strtod_l+0x5ec>
 800eee8:	4682      	mov	sl, r0
 800eeea:	468b      	mov	fp, r1
 800eeec:	9b04      	ldr	r3, [sp, #16]
 800eeee:	b1bb      	cbz	r3, 800ef20 <_strtod_l+0x620>
 800eef0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800eef4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	4659      	mov	r1, fp
 800eefc:	dd10      	ble.n	800ef20 <_strtod_l+0x620>
 800eefe:	2b1f      	cmp	r3, #31
 800ef00:	f340 8128 	ble.w	800f154 <_strtod_l+0x854>
 800ef04:	2b34      	cmp	r3, #52	; 0x34
 800ef06:	bfde      	ittt	le
 800ef08:	3b20      	suble	r3, #32
 800ef0a:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800ef0e:	fa02 f303 	lslle.w	r3, r2, r3
 800ef12:	f04f 0a00 	mov.w	sl, #0
 800ef16:	bfcc      	ite	gt
 800ef18:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ef1c:	ea03 0b01 	andle.w	fp, r3, r1
 800ef20:	2200      	movs	r2, #0
 800ef22:	2300      	movs	r3, #0
 800ef24:	4650      	mov	r0, sl
 800ef26:	4659      	mov	r1, fp
 800ef28:	f7f1 fdd6 	bl	8000ad8 <__aeabi_dcmpeq>
 800ef2c:	2800      	cmp	r0, #0
 800ef2e:	d1a4      	bne.n	800ee7a <_strtod_l+0x57a>
 800ef30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef32:	9300      	str	r3, [sp, #0]
 800ef34:	990a      	ldr	r1, [sp, #40]	; 0x28
 800ef36:	462b      	mov	r3, r5
 800ef38:	463a      	mov	r2, r7
 800ef3a:	4620      	mov	r0, r4
 800ef3c:	f002 f9b0 	bl	80112a0 <__s2b>
 800ef40:	9009      	str	r0, [sp, #36]	; 0x24
 800ef42:	2800      	cmp	r0, #0
 800ef44:	f43f af24 	beq.w	800ed90 <_strtod_l+0x490>
 800ef48:	9b07      	ldr	r3, [sp, #28]
 800ef4a:	1b9e      	subs	r6, r3, r6
 800ef4c:	9b08      	ldr	r3, [sp, #32]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	bfb4      	ite	lt
 800ef52:	4633      	movlt	r3, r6
 800ef54:	2300      	movge	r3, #0
 800ef56:	9310      	str	r3, [sp, #64]	; 0x40
 800ef58:	9b08      	ldr	r3, [sp, #32]
 800ef5a:	2500      	movs	r5, #0
 800ef5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800ef60:	9318      	str	r3, [sp, #96]	; 0x60
 800ef62:	462e      	mov	r6, r5
 800ef64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef66:	4620      	mov	r0, r4
 800ef68:	6859      	ldr	r1, [r3, #4]
 800ef6a:	f002 f8ed 	bl	8011148 <_Balloc>
 800ef6e:	9007      	str	r0, [sp, #28]
 800ef70:	2800      	cmp	r0, #0
 800ef72:	f43f af11 	beq.w	800ed98 <_strtod_l+0x498>
 800ef76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef78:	691a      	ldr	r2, [r3, #16]
 800ef7a:	3202      	adds	r2, #2
 800ef7c:	f103 010c 	add.w	r1, r3, #12
 800ef80:	0092      	lsls	r2, r2, #2
 800ef82:	300c      	adds	r0, #12
 800ef84:	f002 f8c6 	bl	8011114 <memcpy>
 800ef88:	ec4b ab10 	vmov	d0, sl, fp
 800ef8c:	aa20      	add	r2, sp, #128	; 0x80
 800ef8e:	a91f      	add	r1, sp, #124	; 0x7c
 800ef90:	4620      	mov	r0, r4
 800ef92:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800ef96:	f002 fcbf 	bl	8011918 <__d2b>
 800ef9a:	901e      	str	r0, [sp, #120]	; 0x78
 800ef9c:	2800      	cmp	r0, #0
 800ef9e:	f43f aefb 	beq.w	800ed98 <_strtod_l+0x498>
 800efa2:	2101      	movs	r1, #1
 800efa4:	4620      	mov	r0, r4
 800efa6:	f002 fa15 	bl	80113d4 <__i2b>
 800efaa:	4606      	mov	r6, r0
 800efac:	2800      	cmp	r0, #0
 800efae:	f43f aef3 	beq.w	800ed98 <_strtod_l+0x498>
 800efb2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800efb4:	9904      	ldr	r1, [sp, #16]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	bfab      	itete	ge
 800efba:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800efbc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800efbe:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800efc0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800efc4:	bfac      	ite	ge
 800efc6:	eb03 0902 	addge.w	r9, r3, r2
 800efca:	1ad7      	sublt	r7, r2, r3
 800efcc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800efce:	eba3 0801 	sub.w	r8, r3, r1
 800efd2:	4490      	add	r8, r2
 800efd4:	4ba3      	ldr	r3, [pc, #652]	; (800f264 <_strtod_l+0x964>)
 800efd6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800efda:	4598      	cmp	r8, r3
 800efdc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800efe0:	f280 80cc 	bge.w	800f17c <_strtod_l+0x87c>
 800efe4:	eba3 0308 	sub.w	r3, r3, r8
 800efe8:	2b1f      	cmp	r3, #31
 800efea:	eba2 0203 	sub.w	r2, r2, r3
 800efee:	f04f 0101 	mov.w	r1, #1
 800eff2:	f300 80b6 	bgt.w	800f162 <_strtod_l+0x862>
 800eff6:	fa01 f303 	lsl.w	r3, r1, r3
 800effa:	9311      	str	r3, [sp, #68]	; 0x44
 800effc:	2300      	movs	r3, #0
 800effe:	930c      	str	r3, [sp, #48]	; 0x30
 800f000:	eb09 0802 	add.w	r8, r9, r2
 800f004:	9b04      	ldr	r3, [sp, #16]
 800f006:	45c1      	cmp	r9, r8
 800f008:	4417      	add	r7, r2
 800f00a:	441f      	add	r7, r3
 800f00c:	464b      	mov	r3, r9
 800f00e:	bfa8      	it	ge
 800f010:	4643      	movge	r3, r8
 800f012:	42bb      	cmp	r3, r7
 800f014:	bfa8      	it	ge
 800f016:	463b      	movge	r3, r7
 800f018:	2b00      	cmp	r3, #0
 800f01a:	bfc2      	ittt	gt
 800f01c:	eba8 0803 	subgt.w	r8, r8, r3
 800f020:	1aff      	subgt	r7, r7, r3
 800f022:	eba9 0903 	subgt.w	r9, r9, r3
 800f026:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f028:	2b00      	cmp	r3, #0
 800f02a:	dd17      	ble.n	800f05c <_strtod_l+0x75c>
 800f02c:	4631      	mov	r1, r6
 800f02e:	461a      	mov	r2, r3
 800f030:	4620      	mov	r0, r4
 800f032:	f002 fa8b 	bl	801154c <__pow5mult>
 800f036:	4606      	mov	r6, r0
 800f038:	2800      	cmp	r0, #0
 800f03a:	f43f aead 	beq.w	800ed98 <_strtod_l+0x498>
 800f03e:	4601      	mov	r1, r0
 800f040:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800f042:	4620      	mov	r0, r4
 800f044:	f002 f9dc 	bl	8011400 <__multiply>
 800f048:	900f      	str	r0, [sp, #60]	; 0x3c
 800f04a:	2800      	cmp	r0, #0
 800f04c:	f43f aea4 	beq.w	800ed98 <_strtod_l+0x498>
 800f050:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f052:	4620      	mov	r0, r4
 800f054:	f002 f8b8 	bl	80111c8 <_Bfree>
 800f058:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f05a:	931e      	str	r3, [sp, #120]	; 0x78
 800f05c:	f1b8 0f00 	cmp.w	r8, #0
 800f060:	f300 8091 	bgt.w	800f186 <_strtod_l+0x886>
 800f064:	9b08      	ldr	r3, [sp, #32]
 800f066:	2b00      	cmp	r3, #0
 800f068:	dd08      	ble.n	800f07c <_strtod_l+0x77c>
 800f06a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f06c:	9907      	ldr	r1, [sp, #28]
 800f06e:	4620      	mov	r0, r4
 800f070:	f002 fa6c 	bl	801154c <__pow5mult>
 800f074:	9007      	str	r0, [sp, #28]
 800f076:	2800      	cmp	r0, #0
 800f078:	f43f ae8e 	beq.w	800ed98 <_strtod_l+0x498>
 800f07c:	2f00      	cmp	r7, #0
 800f07e:	dd08      	ble.n	800f092 <_strtod_l+0x792>
 800f080:	9907      	ldr	r1, [sp, #28]
 800f082:	463a      	mov	r2, r7
 800f084:	4620      	mov	r0, r4
 800f086:	f002 fabb 	bl	8011600 <__lshift>
 800f08a:	9007      	str	r0, [sp, #28]
 800f08c:	2800      	cmp	r0, #0
 800f08e:	f43f ae83 	beq.w	800ed98 <_strtod_l+0x498>
 800f092:	f1b9 0f00 	cmp.w	r9, #0
 800f096:	dd08      	ble.n	800f0aa <_strtod_l+0x7aa>
 800f098:	4631      	mov	r1, r6
 800f09a:	464a      	mov	r2, r9
 800f09c:	4620      	mov	r0, r4
 800f09e:	f002 faaf 	bl	8011600 <__lshift>
 800f0a2:	4606      	mov	r6, r0
 800f0a4:	2800      	cmp	r0, #0
 800f0a6:	f43f ae77 	beq.w	800ed98 <_strtod_l+0x498>
 800f0aa:	9a07      	ldr	r2, [sp, #28]
 800f0ac:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f0ae:	4620      	mov	r0, r4
 800f0b0:	f002 fb2e 	bl	8011710 <__mdiff>
 800f0b4:	4605      	mov	r5, r0
 800f0b6:	2800      	cmp	r0, #0
 800f0b8:	f43f ae6e 	beq.w	800ed98 <_strtod_l+0x498>
 800f0bc:	68c3      	ldr	r3, [r0, #12]
 800f0be:	930f      	str	r3, [sp, #60]	; 0x3c
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	60c3      	str	r3, [r0, #12]
 800f0c4:	4631      	mov	r1, r6
 800f0c6:	f002 fb07 	bl	80116d8 <__mcmp>
 800f0ca:	2800      	cmp	r0, #0
 800f0cc:	da65      	bge.n	800f19a <_strtod_l+0x89a>
 800f0ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f0d0:	ea53 030a 	orrs.w	r3, r3, sl
 800f0d4:	f040 8087 	bne.w	800f1e6 <_strtod_l+0x8e6>
 800f0d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	f040 8082 	bne.w	800f1e6 <_strtod_l+0x8e6>
 800f0e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f0e6:	0d1b      	lsrs	r3, r3, #20
 800f0e8:	051b      	lsls	r3, r3, #20
 800f0ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f0ee:	d97a      	bls.n	800f1e6 <_strtod_l+0x8e6>
 800f0f0:	696b      	ldr	r3, [r5, #20]
 800f0f2:	b913      	cbnz	r3, 800f0fa <_strtod_l+0x7fa>
 800f0f4:	692b      	ldr	r3, [r5, #16]
 800f0f6:	2b01      	cmp	r3, #1
 800f0f8:	dd75      	ble.n	800f1e6 <_strtod_l+0x8e6>
 800f0fa:	4629      	mov	r1, r5
 800f0fc:	2201      	movs	r2, #1
 800f0fe:	4620      	mov	r0, r4
 800f100:	f002 fa7e 	bl	8011600 <__lshift>
 800f104:	4631      	mov	r1, r6
 800f106:	4605      	mov	r5, r0
 800f108:	f002 fae6 	bl	80116d8 <__mcmp>
 800f10c:	2800      	cmp	r0, #0
 800f10e:	dd6a      	ble.n	800f1e6 <_strtod_l+0x8e6>
 800f110:	9904      	ldr	r1, [sp, #16]
 800f112:	4a55      	ldr	r2, [pc, #340]	; (800f268 <_strtod_l+0x968>)
 800f114:	465b      	mov	r3, fp
 800f116:	2900      	cmp	r1, #0
 800f118:	f000 8085 	beq.w	800f226 <_strtod_l+0x926>
 800f11c:	ea02 010b 	and.w	r1, r2, fp
 800f120:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f124:	dc7f      	bgt.n	800f226 <_strtod_l+0x926>
 800f126:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f12a:	f77f aeaa 	ble.w	800ee82 <_strtod_l+0x582>
 800f12e:	4a4f      	ldr	r2, [pc, #316]	; (800f26c <_strtod_l+0x96c>)
 800f130:	2300      	movs	r3, #0
 800f132:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800f136:	4650      	mov	r0, sl
 800f138:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800f13c:	4659      	mov	r1, fp
 800f13e:	f7f1 fa63 	bl	8000608 <__aeabi_dmul>
 800f142:	460b      	mov	r3, r1
 800f144:	4303      	orrs	r3, r0
 800f146:	bf08      	it	eq
 800f148:	2322      	moveq	r3, #34	; 0x22
 800f14a:	4682      	mov	sl, r0
 800f14c:	468b      	mov	fp, r1
 800f14e:	bf08      	it	eq
 800f150:	6023      	streq	r3, [r4, #0]
 800f152:	e62b      	b.n	800edac <_strtod_l+0x4ac>
 800f154:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f158:	fa02 f303 	lsl.w	r3, r2, r3
 800f15c:	ea03 0a0a 	and.w	sl, r3, sl
 800f160:	e6de      	b.n	800ef20 <_strtod_l+0x620>
 800f162:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f166:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f16a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f16e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f172:	fa01 f308 	lsl.w	r3, r1, r8
 800f176:	930c      	str	r3, [sp, #48]	; 0x30
 800f178:	9111      	str	r1, [sp, #68]	; 0x44
 800f17a:	e741      	b.n	800f000 <_strtod_l+0x700>
 800f17c:	2300      	movs	r3, #0
 800f17e:	930c      	str	r3, [sp, #48]	; 0x30
 800f180:	2301      	movs	r3, #1
 800f182:	9311      	str	r3, [sp, #68]	; 0x44
 800f184:	e73c      	b.n	800f000 <_strtod_l+0x700>
 800f186:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f188:	4642      	mov	r2, r8
 800f18a:	4620      	mov	r0, r4
 800f18c:	f002 fa38 	bl	8011600 <__lshift>
 800f190:	901e      	str	r0, [sp, #120]	; 0x78
 800f192:	2800      	cmp	r0, #0
 800f194:	f47f af66 	bne.w	800f064 <_strtod_l+0x764>
 800f198:	e5fe      	b.n	800ed98 <_strtod_l+0x498>
 800f19a:	465f      	mov	r7, fp
 800f19c:	d16e      	bne.n	800f27c <_strtod_l+0x97c>
 800f19e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f1a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f1a4:	b342      	cbz	r2, 800f1f8 <_strtod_l+0x8f8>
 800f1a6:	4a32      	ldr	r2, [pc, #200]	; (800f270 <_strtod_l+0x970>)
 800f1a8:	4293      	cmp	r3, r2
 800f1aa:	d128      	bne.n	800f1fe <_strtod_l+0x8fe>
 800f1ac:	9b04      	ldr	r3, [sp, #16]
 800f1ae:	4650      	mov	r0, sl
 800f1b0:	b1eb      	cbz	r3, 800f1ee <_strtod_l+0x8ee>
 800f1b2:	4a2d      	ldr	r2, [pc, #180]	; (800f268 <_strtod_l+0x968>)
 800f1b4:	403a      	ands	r2, r7
 800f1b6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800f1ba:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800f1be:	d819      	bhi.n	800f1f4 <_strtod_l+0x8f4>
 800f1c0:	0d12      	lsrs	r2, r2, #20
 800f1c2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f1c6:	fa01 f303 	lsl.w	r3, r1, r3
 800f1ca:	4298      	cmp	r0, r3
 800f1cc:	d117      	bne.n	800f1fe <_strtod_l+0x8fe>
 800f1ce:	4b29      	ldr	r3, [pc, #164]	; (800f274 <_strtod_l+0x974>)
 800f1d0:	429f      	cmp	r7, r3
 800f1d2:	d102      	bne.n	800f1da <_strtod_l+0x8da>
 800f1d4:	3001      	adds	r0, #1
 800f1d6:	f43f addf 	beq.w	800ed98 <_strtod_l+0x498>
 800f1da:	4b23      	ldr	r3, [pc, #140]	; (800f268 <_strtod_l+0x968>)
 800f1dc:	403b      	ands	r3, r7
 800f1de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f1e2:	f04f 0a00 	mov.w	sl, #0
 800f1e6:	9b04      	ldr	r3, [sp, #16]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d1a0      	bne.n	800f12e <_strtod_l+0x82e>
 800f1ec:	e5de      	b.n	800edac <_strtod_l+0x4ac>
 800f1ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f1f2:	e7ea      	b.n	800f1ca <_strtod_l+0x8ca>
 800f1f4:	460b      	mov	r3, r1
 800f1f6:	e7e8      	b.n	800f1ca <_strtod_l+0x8ca>
 800f1f8:	ea53 030a 	orrs.w	r3, r3, sl
 800f1fc:	d088      	beq.n	800f110 <_strtod_l+0x810>
 800f1fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f200:	b1db      	cbz	r3, 800f23a <_strtod_l+0x93a>
 800f202:	423b      	tst	r3, r7
 800f204:	d0ef      	beq.n	800f1e6 <_strtod_l+0x8e6>
 800f206:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f208:	9a04      	ldr	r2, [sp, #16]
 800f20a:	4650      	mov	r0, sl
 800f20c:	4659      	mov	r1, fp
 800f20e:	b1c3      	cbz	r3, 800f242 <_strtod_l+0x942>
 800f210:	f7ff fb59 	bl	800e8c6 <sulp>
 800f214:	4602      	mov	r2, r0
 800f216:	460b      	mov	r3, r1
 800f218:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f21c:	f7f1 f83e 	bl	800029c <__adddf3>
 800f220:	4682      	mov	sl, r0
 800f222:	468b      	mov	fp, r1
 800f224:	e7df      	b.n	800f1e6 <_strtod_l+0x8e6>
 800f226:	4013      	ands	r3, r2
 800f228:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f22c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f230:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f234:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800f238:	e7d5      	b.n	800f1e6 <_strtod_l+0x8e6>
 800f23a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f23c:	ea13 0f0a 	tst.w	r3, sl
 800f240:	e7e0      	b.n	800f204 <_strtod_l+0x904>
 800f242:	f7ff fb40 	bl	800e8c6 <sulp>
 800f246:	4602      	mov	r2, r0
 800f248:	460b      	mov	r3, r1
 800f24a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800f24e:	f7f1 f823 	bl	8000298 <__aeabi_dsub>
 800f252:	2200      	movs	r2, #0
 800f254:	2300      	movs	r3, #0
 800f256:	4682      	mov	sl, r0
 800f258:	468b      	mov	fp, r1
 800f25a:	f7f1 fc3d 	bl	8000ad8 <__aeabi_dcmpeq>
 800f25e:	2800      	cmp	r0, #0
 800f260:	d0c1      	beq.n	800f1e6 <_strtod_l+0x8e6>
 800f262:	e60e      	b.n	800ee82 <_strtod_l+0x582>
 800f264:	fffffc02 	.word	0xfffffc02
 800f268:	7ff00000 	.word	0x7ff00000
 800f26c:	39500000 	.word	0x39500000
 800f270:	000fffff 	.word	0x000fffff
 800f274:	7fefffff 	.word	0x7fefffff
 800f278:	08013980 	.word	0x08013980
 800f27c:	4631      	mov	r1, r6
 800f27e:	4628      	mov	r0, r5
 800f280:	f002 fba6 	bl	80119d0 <__ratio>
 800f284:	ec59 8b10 	vmov	r8, r9, d0
 800f288:	ee10 0a10 	vmov	r0, s0
 800f28c:	2200      	movs	r2, #0
 800f28e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f292:	4649      	mov	r1, r9
 800f294:	f7f1 fc34 	bl	8000b00 <__aeabi_dcmple>
 800f298:	2800      	cmp	r0, #0
 800f29a:	d07c      	beq.n	800f396 <_strtod_l+0xa96>
 800f29c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d04c      	beq.n	800f33c <_strtod_l+0xa3c>
 800f2a2:	4b95      	ldr	r3, [pc, #596]	; (800f4f8 <_strtod_l+0xbf8>)
 800f2a4:	2200      	movs	r2, #0
 800f2a6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f2aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f4f8 <_strtod_l+0xbf8>
 800f2ae:	f04f 0800 	mov.w	r8, #0
 800f2b2:	4b92      	ldr	r3, [pc, #584]	; (800f4fc <_strtod_l+0xbfc>)
 800f2b4:	403b      	ands	r3, r7
 800f2b6:	9311      	str	r3, [sp, #68]	; 0x44
 800f2b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f2ba:	4b91      	ldr	r3, [pc, #580]	; (800f500 <_strtod_l+0xc00>)
 800f2bc:	429a      	cmp	r2, r3
 800f2be:	f040 80b2 	bne.w	800f426 <_strtod_l+0xb26>
 800f2c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f2c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f2ca:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800f2ce:	ec4b ab10 	vmov	d0, sl, fp
 800f2d2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800f2d6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f2da:	f002 faa1 	bl	8011820 <__ulp>
 800f2de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f2e2:	ec53 2b10 	vmov	r2, r3, d0
 800f2e6:	f7f1 f98f 	bl	8000608 <__aeabi_dmul>
 800f2ea:	4652      	mov	r2, sl
 800f2ec:	465b      	mov	r3, fp
 800f2ee:	f7f0 ffd5 	bl	800029c <__adddf3>
 800f2f2:	460b      	mov	r3, r1
 800f2f4:	4981      	ldr	r1, [pc, #516]	; (800f4fc <_strtod_l+0xbfc>)
 800f2f6:	4a83      	ldr	r2, [pc, #524]	; (800f504 <_strtod_l+0xc04>)
 800f2f8:	4019      	ands	r1, r3
 800f2fa:	4291      	cmp	r1, r2
 800f2fc:	4682      	mov	sl, r0
 800f2fe:	d95e      	bls.n	800f3be <_strtod_l+0xabe>
 800f300:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f302:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f306:	4293      	cmp	r3, r2
 800f308:	d103      	bne.n	800f312 <_strtod_l+0xa12>
 800f30a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f30c:	3301      	adds	r3, #1
 800f30e:	f43f ad43 	beq.w	800ed98 <_strtod_l+0x498>
 800f312:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800f510 <_strtod_l+0xc10>
 800f316:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800f31a:	991e      	ldr	r1, [sp, #120]	; 0x78
 800f31c:	4620      	mov	r0, r4
 800f31e:	f001 ff53 	bl	80111c8 <_Bfree>
 800f322:	9907      	ldr	r1, [sp, #28]
 800f324:	4620      	mov	r0, r4
 800f326:	f001 ff4f 	bl	80111c8 <_Bfree>
 800f32a:	4631      	mov	r1, r6
 800f32c:	4620      	mov	r0, r4
 800f32e:	f001 ff4b 	bl	80111c8 <_Bfree>
 800f332:	4629      	mov	r1, r5
 800f334:	4620      	mov	r0, r4
 800f336:	f001 ff47 	bl	80111c8 <_Bfree>
 800f33a:	e613      	b.n	800ef64 <_strtod_l+0x664>
 800f33c:	f1ba 0f00 	cmp.w	sl, #0
 800f340:	d11b      	bne.n	800f37a <_strtod_l+0xa7a>
 800f342:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f346:	b9f3      	cbnz	r3, 800f386 <_strtod_l+0xa86>
 800f348:	4b6b      	ldr	r3, [pc, #428]	; (800f4f8 <_strtod_l+0xbf8>)
 800f34a:	2200      	movs	r2, #0
 800f34c:	4640      	mov	r0, r8
 800f34e:	4649      	mov	r1, r9
 800f350:	f7f1 fbcc 	bl	8000aec <__aeabi_dcmplt>
 800f354:	b9d0      	cbnz	r0, 800f38c <_strtod_l+0xa8c>
 800f356:	4640      	mov	r0, r8
 800f358:	4649      	mov	r1, r9
 800f35a:	4b6b      	ldr	r3, [pc, #428]	; (800f508 <_strtod_l+0xc08>)
 800f35c:	2200      	movs	r2, #0
 800f35e:	f7f1 f953 	bl	8000608 <__aeabi_dmul>
 800f362:	4680      	mov	r8, r0
 800f364:	4689      	mov	r9, r1
 800f366:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f36a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800f36e:	931b      	str	r3, [sp, #108]	; 0x6c
 800f370:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800f374:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f378:	e79b      	b.n	800f2b2 <_strtod_l+0x9b2>
 800f37a:	f1ba 0f01 	cmp.w	sl, #1
 800f37e:	d102      	bne.n	800f386 <_strtod_l+0xa86>
 800f380:	2f00      	cmp	r7, #0
 800f382:	f43f ad7e 	beq.w	800ee82 <_strtod_l+0x582>
 800f386:	4b61      	ldr	r3, [pc, #388]	; (800f50c <_strtod_l+0xc0c>)
 800f388:	2200      	movs	r2, #0
 800f38a:	e78c      	b.n	800f2a6 <_strtod_l+0x9a6>
 800f38c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800f508 <_strtod_l+0xc08>
 800f390:	f04f 0800 	mov.w	r8, #0
 800f394:	e7e7      	b.n	800f366 <_strtod_l+0xa66>
 800f396:	4b5c      	ldr	r3, [pc, #368]	; (800f508 <_strtod_l+0xc08>)
 800f398:	4640      	mov	r0, r8
 800f39a:	4649      	mov	r1, r9
 800f39c:	2200      	movs	r2, #0
 800f39e:	f7f1 f933 	bl	8000608 <__aeabi_dmul>
 800f3a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f3a4:	4680      	mov	r8, r0
 800f3a6:	4689      	mov	r9, r1
 800f3a8:	b933      	cbnz	r3, 800f3b8 <_strtod_l+0xab8>
 800f3aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f3ae:	9012      	str	r0, [sp, #72]	; 0x48
 800f3b0:	9313      	str	r3, [sp, #76]	; 0x4c
 800f3b2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800f3b6:	e7dd      	b.n	800f374 <_strtod_l+0xa74>
 800f3b8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800f3bc:	e7f9      	b.n	800f3b2 <_strtod_l+0xab2>
 800f3be:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f3c2:	9b04      	ldr	r3, [sp, #16]
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d1a8      	bne.n	800f31a <_strtod_l+0xa1a>
 800f3c8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f3cc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f3ce:	0d1b      	lsrs	r3, r3, #20
 800f3d0:	051b      	lsls	r3, r3, #20
 800f3d2:	429a      	cmp	r2, r3
 800f3d4:	d1a1      	bne.n	800f31a <_strtod_l+0xa1a>
 800f3d6:	4640      	mov	r0, r8
 800f3d8:	4649      	mov	r1, r9
 800f3da:	f7f1 fd83 	bl	8000ee4 <__aeabi_d2lz>
 800f3de:	f7f1 f8e5 	bl	80005ac <__aeabi_l2d>
 800f3e2:	4602      	mov	r2, r0
 800f3e4:	460b      	mov	r3, r1
 800f3e6:	4640      	mov	r0, r8
 800f3e8:	4649      	mov	r1, r9
 800f3ea:	f7f0 ff55 	bl	8000298 <__aeabi_dsub>
 800f3ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f3f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f3f4:	ea43 030a 	orr.w	r3, r3, sl
 800f3f8:	4313      	orrs	r3, r2
 800f3fa:	4680      	mov	r8, r0
 800f3fc:	4689      	mov	r9, r1
 800f3fe:	d053      	beq.n	800f4a8 <_strtod_l+0xba8>
 800f400:	a335      	add	r3, pc, #212	; (adr r3, 800f4d8 <_strtod_l+0xbd8>)
 800f402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f406:	f7f1 fb71 	bl	8000aec <__aeabi_dcmplt>
 800f40a:	2800      	cmp	r0, #0
 800f40c:	f47f acce 	bne.w	800edac <_strtod_l+0x4ac>
 800f410:	a333      	add	r3, pc, #204	; (adr r3, 800f4e0 <_strtod_l+0xbe0>)
 800f412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f416:	4640      	mov	r0, r8
 800f418:	4649      	mov	r1, r9
 800f41a:	f7f1 fb85 	bl	8000b28 <__aeabi_dcmpgt>
 800f41e:	2800      	cmp	r0, #0
 800f420:	f43f af7b 	beq.w	800f31a <_strtod_l+0xa1a>
 800f424:	e4c2      	b.n	800edac <_strtod_l+0x4ac>
 800f426:	9b04      	ldr	r3, [sp, #16]
 800f428:	b333      	cbz	r3, 800f478 <_strtod_l+0xb78>
 800f42a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f42c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f430:	d822      	bhi.n	800f478 <_strtod_l+0xb78>
 800f432:	a32d      	add	r3, pc, #180	; (adr r3, 800f4e8 <_strtod_l+0xbe8>)
 800f434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f438:	4640      	mov	r0, r8
 800f43a:	4649      	mov	r1, r9
 800f43c:	f7f1 fb60 	bl	8000b00 <__aeabi_dcmple>
 800f440:	b1a0      	cbz	r0, 800f46c <_strtod_l+0xb6c>
 800f442:	4649      	mov	r1, r9
 800f444:	4640      	mov	r0, r8
 800f446:	f7f1 fbb7 	bl	8000bb8 <__aeabi_d2uiz>
 800f44a:	2801      	cmp	r0, #1
 800f44c:	bf38      	it	cc
 800f44e:	2001      	movcc	r0, #1
 800f450:	f7f1 f860 	bl	8000514 <__aeabi_ui2d>
 800f454:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f456:	4680      	mov	r8, r0
 800f458:	4689      	mov	r9, r1
 800f45a:	bb13      	cbnz	r3, 800f4a2 <_strtod_l+0xba2>
 800f45c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f460:	9014      	str	r0, [sp, #80]	; 0x50
 800f462:	9315      	str	r3, [sp, #84]	; 0x54
 800f464:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f468:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800f46c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f46e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f470:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f474:	1a9b      	subs	r3, r3, r2
 800f476:	930d      	str	r3, [sp, #52]	; 0x34
 800f478:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f47c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f480:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f484:	f002 f9cc 	bl	8011820 <__ulp>
 800f488:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f48c:	ec53 2b10 	vmov	r2, r3, d0
 800f490:	f7f1 f8ba 	bl	8000608 <__aeabi_dmul>
 800f494:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f498:	f7f0 ff00 	bl	800029c <__adddf3>
 800f49c:	4682      	mov	sl, r0
 800f49e:	468b      	mov	fp, r1
 800f4a0:	e78f      	b.n	800f3c2 <_strtod_l+0xac2>
 800f4a2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800f4a6:	e7dd      	b.n	800f464 <_strtod_l+0xb64>
 800f4a8:	a311      	add	r3, pc, #68	; (adr r3, 800f4f0 <_strtod_l+0xbf0>)
 800f4aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ae:	f7f1 fb1d 	bl	8000aec <__aeabi_dcmplt>
 800f4b2:	e7b4      	b.n	800f41e <_strtod_l+0xb1e>
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	930e      	str	r3, [sp, #56]	; 0x38
 800f4b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800f4ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800f4bc:	6013      	str	r3, [r2, #0]
 800f4be:	f7ff ba65 	b.w	800e98c <_strtod_l+0x8c>
 800f4c2:	2b65      	cmp	r3, #101	; 0x65
 800f4c4:	f43f ab5d 	beq.w	800eb82 <_strtod_l+0x282>
 800f4c8:	2b45      	cmp	r3, #69	; 0x45
 800f4ca:	f43f ab5a 	beq.w	800eb82 <_strtod_l+0x282>
 800f4ce:	2201      	movs	r2, #1
 800f4d0:	f7ff bb92 	b.w	800ebf8 <_strtod_l+0x2f8>
 800f4d4:	f3af 8000 	nop.w
 800f4d8:	94a03595 	.word	0x94a03595
 800f4dc:	3fdfffff 	.word	0x3fdfffff
 800f4e0:	35afe535 	.word	0x35afe535
 800f4e4:	3fe00000 	.word	0x3fe00000
 800f4e8:	ffc00000 	.word	0xffc00000
 800f4ec:	41dfffff 	.word	0x41dfffff
 800f4f0:	94a03595 	.word	0x94a03595
 800f4f4:	3fcfffff 	.word	0x3fcfffff
 800f4f8:	3ff00000 	.word	0x3ff00000
 800f4fc:	7ff00000 	.word	0x7ff00000
 800f500:	7fe00000 	.word	0x7fe00000
 800f504:	7c9fffff 	.word	0x7c9fffff
 800f508:	3fe00000 	.word	0x3fe00000
 800f50c:	bff00000 	.word	0xbff00000
 800f510:	7fefffff 	.word	0x7fefffff

0800f514 <_strtod_r>:
 800f514:	4b01      	ldr	r3, [pc, #4]	; (800f51c <_strtod_r+0x8>)
 800f516:	f7ff b9f3 	b.w	800e900 <_strtod_l>
 800f51a:	bf00      	nop
 800f51c:	200000ac 	.word	0x200000ac

0800f520 <strtok>:
 800f520:	4b16      	ldr	r3, [pc, #88]	; (800f57c <strtok+0x5c>)
 800f522:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f524:	681e      	ldr	r6, [r3, #0]
 800f526:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800f528:	4605      	mov	r5, r0
 800f52a:	b9fc      	cbnz	r4, 800f56c <strtok+0x4c>
 800f52c:	2050      	movs	r0, #80	; 0x50
 800f52e:	9101      	str	r1, [sp, #4]
 800f530:	f7fe f9ba 	bl	800d8a8 <malloc>
 800f534:	9901      	ldr	r1, [sp, #4]
 800f536:	65b0      	str	r0, [r6, #88]	; 0x58
 800f538:	4602      	mov	r2, r0
 800f53a:	b920      	cbnz	r0, 800f546 <strtok+0x26>
 800f53c:	4b10      	ldr	r3, [pc, #64]	; (800f580 <strtok+0x60>)
 800f53e:	4811      	ldr	r0, [pc, #68]	; (800f584 <strtok+0x64>)
 800f540:	2157      	movs	r1, #87	; 0x57
 800f542:	f000 f999 	bl	800f878 <__assert_func>
 800f546:	e9c0 4400 	strd	r4, r4, [r0]
 800f54a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f54e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f552:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800f556:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800f55a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800f55e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800f562:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800f566:	6184      	str	r4, [r0, #24]
 800f568:	7704      	strb	r4, [r0, #28]
 800f56a:	6244      	str	r4, [r0, #36]	; 0x24
 800f56c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800f56e:	2301      	movs	r3, #1
 800f570:	4628      	mov	r0, r5
 800f572:	b002      	add	sp, #8
 800f574:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f578:	f000 b806 	b.w	800f588 <__strtok_r>
 800f57c:	20000044 	.word	0x20000044
 800f580:	080139a8 	.word	0x080139a8
 800f584:	080139bf 	.word	0x080139bf

0800f588 <__strtok_r>:
 800f588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f58a:	b908      	cbnz	r0, 800f590 <__strtok_r+0x8>
 800f58c:	6810      	ldr	r0, [r2, #0]
 800f58e:	b188      	cbz	r0, 800f5b4 <__strtok_r+0x2c>
 800f590:	4604      	mov	r4, r0
 800f592:	4620      	mov	r0, r4
 800f594:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f598:	460f      	mov	r7, r1
 800f59a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f59e:	b91e      	cbnz	r6, 800f5a8 <__strtok_r+0x20>
 800f5a0:	b965      	cbnz	r5, 800f5bc <__strtok_r+0x34>
 800f5a2:	6015      	str	r5, [r2, #0]
 800f5a4:	4628      	mov	r0, r5
 800f5a6:	e005      	b.n	800f5b4 <__strtok_r+0x2c>
 800f5a8:	42b5      	cmp	r5, r6
 800f5aa:	d1f6      	bne.n	800f59a <__strtok_r+0x12>
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d1f0      	bne.n	800f592 <__strtok_r+0xa>
 800f5b0:	6014      	str	r4, [r2, #0]
 800f5b2:	7003      	strb	r3, [r0, #0]
 800f5b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f5b6:	461c      	mov	r4, r3
 800f5b8:	e00c      	b.n	800f5d4 <__strtok_r+0x4c>
 800f5ba:	b915      	cbnz	r5, 800f5c2 <__strtok_r+0x3a>
 800f5bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f5c0:	460e      	mov	r6, r1
 800f5c2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f5c6:	42ab      	cmp	r3, r5
 800f5c8:	d1f7      	bne.n	800f5ba <__strtok_r+0x32>
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d0f3      	beq.n	800f5b6 <__strtok_r+0x2e>
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f5d4:	6014      	str	r4, [r2, #0]
 800f5d6:	e7ed      	b.n	800f5b4 <__strtok_r+0x2c>

0800f5d8 <_strtol_l.isra.0>:
 800f5d8:	2b01      	cmp	r3, #1
 800f5da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f5de:	d001      	beq.n	800f5e4 <_strtol_l.isra.0+0xc>
 800f5e0:	2b24      	cmp	r3, #36	; 0x24
 800f5e2:	d906      	bls.n	800f5f2 <_strtol_l.isra.0+0x1a>
 800f5e4:	f7fe f92e 	bl	800d844 <__errno>
 800f5e8:	2316      	movs	r3, #22
 800f5ea:	6003      	str	r3, [r0, #0]
 800f5ec:	2000      	movs	r0, #0
 800f5ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5f2:	4f3a      	ldr	r7, [pc, #232]	; (800f6dc <_strtol_l.isra.0+0x104>)
 800f5f4:	468e      	mov	lr, r1
 800f5f6:	4676      	mov	r6, lr
 800f5f8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f5fc:	5de5      	ldrb	r5, [r4, r7]
 800f5fe:	f015 0508 	ands.w	r5, r5, #8
 800f602:	d1f8      	bne.n	800f5f6 <_strtol_l.isra.0+0x1e>
 800f604:	2c2d      	cmp	r4, #45	; 0x2d
 800f606:	d134      	bne.n	800f672 <_strtol_l.isra.0+0x9a>
 800f608:	f89e 4000 	ldrb.w	r4, [lr]
 800f60c:	f04f 0801 	mov.w	r8, #1
 800f610:	f106 0e02 	add.w	lr, r6, #2
 800f614:	2b00      	cmp	r3, #0
 800f616:	d05c      	beq.n	800f6d2 <_strtol_l.isra.0+0xfa>
 800f618:	2b10      	cmp	r3, #16
 800f61a:	d10c      	bne.n	800f636 <_strtol_l.isra.0+0x5e>
 800f61c:	2c30      	cmp	r4, #48	; 0x30
 800f61e:	d10a      	bne.n	800f636 <_strtol_l.isra.0+0x5e>
 800f620:	f89e 4000 	ldrb.w	r4, [lr]
 800f624:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f628:	2c58      	cmp	r4, #88	; 0x58
 800f62a:	d14d      	bne.n	800f6c8 <_strtol_l.isra.0+0xf0>
 800f62c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800f630:	2310      	movs	r3, #16
 800f632:	f10e 0e02 	add.w	lr, lr, #2
 800f636:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800f63a:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800f63e:	2600      	movs	r6, #0
 800f640:	fbbc f9f3 	udiv	r9, ip, r3
 800f644:	4635      	mov	r5, r6
 800f646:	fb03 ca19 	mls	sl, r3, r9, ip
 800f64a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800f64e:	2f09      	cmp	r7, #9
 800f650:	d818      	bhi.n	800f684 <_strtol_l.isra.0+0xac>
 800f652:	463c      	mov	r4, r7
 800f654:	42a3      	cmp	r3, r4
 800f656:	dd24      	ble.n	800f6a2 <_strtol_l.isra.0+0xca>
 800f658:	2e00      	cmp	r6, #0
 800f65a:	db1f      	blt.n	800f69c <_strtol_l.isra.0+0xc4>
 800f65c:	45a9      	cmp	r9, r5
 800f65e:	d31d      	bcc.n	800f69c <_strtol_l.isra.0+0xc4>
 800f660:	d101      	bne.n	800f666 <_strtol_l.isra.0+0x8e>
 800f662:	45a2      	cmp	sl, r4
 800f664:	db1a      	blt.n	800f69c <_strtol_l.isra.0+0xc4>
 800f666:	fb05 4503 	mla	r5, r5, r3, r4
 800f66a:	2601      	movs	r6, #1
 800f66c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800f670:	e7eb      	b.n	800f64a <_strtol_l.isra.0+0x72>
 800f672:	2c2b      	cmp	r4, #43	; 0x2b
 800f674:	bf08      	it	eq
 800f676:	f89e 4000 	ldrbeq.w	r4, [lr]
 800f67a:	46a8      	mov	r8, r5
 800f67c:	bf08      	it	eq
 800f67e:	f106 0e02 	addeq.w	lr, r6, #2
 800f682:	e7c7      	b.n	800f614 <_strtol_l.isra.0+0x3c>
 800f684:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800f688:	2f19      	cmp	r7, #25
 800f68a:	d801      	bhi.n	800f690 <_strtol_l.isra.0+0xb8>
 800f68c:	3c37      	subs	r4, #55	; 0x37
 800f68e:	e7e1      	b.n	800f654 <_strtol_l.isra.0+0x7c>
 800f690:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800f694:	2f19      	cmp	r7, #25
 800f696:	d804      	bhi.n	800f6a2 <_strtol_l.isra.0+0xca>
 800f698:	3c57      	subs	r4, #87	; 0x57
 800f69a:	e7db      	b.n	800f654 <_strtol_l.isra.0+0x7c>
 800f69c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800f6a0:	e7e4      	b.n	800f66c <_strtol_l.isra.0+0x94>
 800f6a2:	2e00      	cmp	r6, #0
 800f6a4:	da05      	bge.n	800f6b2 <_strtol_l.isra.0+0xda>
 800f6a6:	2322      	movs	r3, #34	; 0x22
 800f6a8:	6003      	str	r3, [r0, #0]
 800f6aa:	4665      	mov	r5, ip
 800f6ac:	b942      	cbnz	r2, 800f6c0 <_strtol_l.isra.0+0xe8>
 800f6ae:	4628      	mov	r0, r5
 800f6b0:	e79d      	b.n	800f5ee <_strtol_l.isra.0+0x16>
 800f6b2:	f1b8 0f00 	cmp.w	r8, #0
 800f6b6:	d000      	beq.n	800f6ba <_strtol_l.isra.0+0xe2>
 800f6b8:	426d      	negs	r5, r5
 800f6ba:	2a00      	cmp	r2, #0
 800f6bc:	d0f7      	beq.n	800f6ae <_strtol_l.isra.0+0xd6>
 800f6be:	b10e      	cbz	r6, 800f6c4 <_strtol_l.isra.0+0xec>
 800f6c0:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 800f6c4:	6011      	str	r1, [r2, #0]
 800f6c6:	e7f2      	b.n	800f6ae <_strtol_l.isra.0+0xd6>
 800f6c8:	2430      	movs	r4, #48	; 0x30
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d1b3      	bne.n	800f636 <_strtol_l.isra.0+0x5e>
 800f6ce:	2308      	movs	r3, #8
 800f6d0:	e7b1      	b.n	800f636 <_strtol_l.isra.0+0x5e>
 800f6d2:	2c30      	cmp	r4, #48	; 0x30
 800f6d4:	d0a4      	beq.n	800f620 <_strtol_l.isra.0+0x48>
 800f6d6:	230a      	movs	r3, #10
 800f6d8:	e7ad      	b.n	800f636 <_strtol_l.isra.0+0x5e>
 800f6da:	bf00      	nop
 800f6dc:	08013a5d 	.word	0x08013a5d

0800f6e0 <_strtol_r>:
 800f6e0:	f7ff bf7a 	b.w	800f5d8 <_strtol_l.isra.0>

0800f6e4 <strtol>:
 800f6e4:	4613      	mov	r3, r2
 800f6e6:	460a      	mov	r2, r1
 800f6e8:	4601      	mov	r1, r0
 800f6ea:	4802      	ldr	r0, [pc, #8]	; (800f6f4 <strtol+0x10>)
 800f6ec:	6800      	ldr	r0, [r0, #0]
 800f6ee:	f7ff bf73 	b.w	800f5d8 <_strtol_l.isra.0>
 800f6f2:	bf00      	nop
 800f6f4:	20000044 	.word	0x20000044

0800f6f8 <__swbuf_r>:
 800f6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6fa:	460e      	mov	r6, r1
 800f6fc:	4614      	mov	r4, r2
 800f6fe:	4605      	mov	r5, r0
 800f700:	b118      	cbz	r0, 800f70a <__swbuf_r+0x12>
 800f702:	6983      	ldr	r3, [r0, #24]
 800f704:	b90b      	cbnz	r3, 800f70a <__swbuf_r+0x12>
 800f706:	f001 f869 	bl	80107dc <__sinit>
 800f70a:	4b21      	ldr	r3, [pc, #132]	; (800f790 <__swbuf_r+0x98>)
 800f70c:	429c      	cmp	r4, r3
 800f70e:	d12b      	bne.n	800f768 <__swbuf_r+0x70>
 800f710:	686c      	ldr	r4, [r5, #4]
 800f712:	69a3      	ldr	r3, [r4, #24]
 800f714:	60a3      	str	r3, [r4, #8]
 800f716:	89a3      	ldrh	r3, [r4, #12]
 800f718:	071a      	lsls	r2, r3, #28
 800f71a:	d52f      	bpl.n	800f77c <__swbuf_r+0x84>
 800f71c:	6923      	ldr	r3, [r4, #16]
 800f71e:	b36b      	cbz	r3, 800f77c <__swbuf_r+0x84>
 800f720:	6923      	ldr	r3, [r4, #16]
 800f722:	6820      	ldr	r0, [r4, #0]
 800f724:	1ac0      	subs	r0, r0, r3
 800f726:	6963      	ldr	r3, [r4, #20]
 800f728:	b2f6      	uxtb	r6, r6
 800f72a:	4283      	cmp	r3, r0
 800f72c:	4637      	mov	r7, r6
 800f72e:	dc04      	bgt.n	800f73a <__swbuf_r+0x42>
 800f730:	4621      	mov	r1, r4
 800f732:	4628      	mov	r0, r5
 800f734:	f000 ffbe 	bl	80106b4 <_fflush_r>
 800f738:	bb30      	cbnz	r0, 800f788 <__swbuf_r+0x90>
 800f73a:	68a3      	ldr	r3, [r4, #8]
 800f73c:	3b01      	subs	r3, #1
 800f73e:	60a3      	str	r3, [r4, #8]
 800f740:	6823      	ldr	r3, [r4, #0]
 800f742:	1c5a      	adds	r2, r3, #1
 800f744:	6022      	str	r2, [r4, #0]
 800f746:	701e      	strb	r6, [r3, #0]
 800f748:	6963      	ldr	r3, [r4, #20]
 800f74a:	3001      	adds	r0, #1
 800f74c:	4283      	cmp	r3, r0
 800f74e:	d004      	beq.n	800f75a <__swbuf_r+0x62>
 800f750:	89a3      	ldrh	r3, [r4, #12]
 800f752:	07db      	lsls	r3, r3, #31
 800f754:	d506      	bpl.n	800f764 <__swbuf_r+0x6c>
 800f756:	2e0a      	cmp	r6, #10
 800f758:	d104      	bne.n	800f764 <__swbuf_r+0x6c>
 800f75a:	4621      	mov	r1, r4
 800f75c:	4628      	mov	r0, r5
 800f75e:	f000 ffa9 	bl	80106b4 <_fflush_r>
 800f762:	b988      	cbnz	r0, 800f788 <__swbuf_r+0x90>
 800f764:	4638      	mov	r0, r7
 800f766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f768:	4b0a      	ldr	r3, [pc, #40]	; (800f794 <__swbuf_r+0x9c>)
 800f76a:	429c      	cmp	r4, r3
 800f76c:	d101      	bne.n	800f772 <__swbuf_r+0x7a>
 800f76e:	68ac      	ldr	r4, [r5, #8]
 800f770:	e7cf      	b.n	800f712 <__swbuf_r+0x1a>
 800f772:	4b09      	ldr	r3, [pc, #36]	; (800f798 <__swbuf_r+0xa0>)
 800f774:	429c      	cmp	r4, r3
 800f776:	bf08      	it	eq
 800f778:	68ec      	ldreq	r4, [r5, #12]
 800f77a:	e7ca      	b.n	800f712 <__swbuf_r+0x1a>
 800f77c:	4621      	mov	r1, r4
 800f77e:	4628      	mov	r0, r5
 800f780:	f000 f80c 	bl	800f79c <__swsetup_r>
 800f784:	2800      	cmp	r0, #0
 800f786:	d0cb      	beq.n	800f720 <__swbuf_r+0x28>
 800f788:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f78c:	e7ea      	b.n	800f764 <__swbuf_r+0x6c>
 800f78e:	bf00      	nop
 800f790:	08013bfc 	.word	0x08013bfc
 800f794:	08013c1c 	.word	0x08013c1c
 800f798:	08013bdc 	.word	0x08013bdc

0800f79c <__swsetup_r>:
 800f79c:	4b32      	ldr	r3, [pc, #200]	; (800f868 <__swsetup_r+0xcc>)
 800f79e:	b570      	push	{r4, r5, r6, lr}
 800f7a0:	681d      	ldr	r5, [r3, #0]
 800f7a2:	4606      	mov	r6, r0
 800f7a4:	460c      	mov	r4, r1
 800f7a6:	b125      	cbz	r5, 800f7b2 <__swsetup_r+0x16>
 800f7a8:	69ab      	ldr	r3, [r5, #24]
 800f7aa:	b913      	cbnz	r3, 800f7b2 <__swsetup_r+0x16>
 800f7ac:	4628      	mov	r0, r5
 800f7ae:	f001 f815 	bl	80107dc <__sinit>
 800f7b2:	4b2e      	ldr	r3, [pc, #184]	; (800f86c <__swsetup_r+0xd0>)
 800f7b4:	429c      	cmp	r4, r3
 800f7b6:	d10f      	bne.n	800f7d8 <__swsetup_r+0x3c>
 800f7b8:	686c      	ldr	r4, [r5, #4]
 800f7ba:	89a3      	ldrh	r3, [r4, #12]
 800f7bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f7c0:	0719      	lsls	r1, r3, #28
 800f7c2:	d42c      	bmi.n	800f81e <__swsetup_r+0x82>
 800f7c4:	06dd      	lsls	r5, r3, #27
 800f7c6:	d411      	bmi.n	800f7ec <__swsetup_r+0x50>
 800f7c8:	2309      	movs	r3, #9
 800f7ca:	6033      	str	r3, [r6, #0]
 800f7cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f7d0:	81a3      	strh	r3, [r4, #12]
 800f7d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f7d6:	e03e      	b.n	800f856 <__swsetup_r+0xba>
 800f7d8:	4b25      	ldr	r3, [pc, #148]	; (800f870 <__swsetup_r+0xd4>)
 800f7da:	429c      	cmp	r4, r3
 800f7dc:	d101      	bne.n	800f7e2 <__swsetup_r+0x46>
 800f7de:	68ac      	ldr	r4, [r5, #8]
 800f7e0:	e7eb      	b.n	800f7ba <__swsetup_r+0x1e>
 800f7e2:	4b24      	ldr	r3, [pc, #144]	; (800f874 <__swsetup_r+0xd8>)
 800f7e4:	429c      	cmp	r4, r3
 800f7e6:	bf08      	it	eq
 800f7e8:	68ec      	ldreq	r4, [r5, #12]
 800f7ea:	e7e6      	b.n	800f7ba <__swsetup_r+0x1e>
 800f7ec:	0758      	lsls	r0, r3, #29
 800f7ee:	d512      	bpl.n	800f816 <__swsetup_r+0x7a>
 800f7f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f7f2:	b141      	cbz	r1, 800f806 <__swsetup_r+0x6a>
 800f7f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f7f8:	4299      	cmp	r1, r3
 800f7fa:	d002      	beq.n	800f802 <__swsetup_r+0x66>
 800f7fc:	4630      	mov	r0, r6
 800f7fe:	f7fe f863 	bl	800d8c8 <_free_r>
 800f802:	2300      	movs	r3, #0
 800f804:	6363      	str	r3, [r4, #52]	; 0x34
 800f806:	89a3      	ldrh	r3, [r4, #12]
 800f808:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f80c:	81a3      	strh	r3, [r4, #12]
 800f80e:	2300      	movs	r3, #0
 800f810:	6063      	str	r3, [r4, #4]
 800f812:	6923      	ldr	r3, [r4, #16]
 800f814:	6023      	str	r3, [r4, #0]
 800f816:	89a3      	ldrh	r3, [r4, #12]
 800f818:	f043 0308 	orr.w	r3, r3, #8
 800f81c:	81a3      	strh	r3, [r4, #12]
 800f81e:	6923      	ldr	r3, [r4, #16]
 800f820:	b94b      	cbnz	r3, 800f836 <__swsetup_r+0x9a>
 800f822:	89a3      	ldrh	r3, [r4, #12]
 800f824:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f82c:	d003      	beq.n	800f836 <__swsetup_r+0x9a>
 800f82e:	4621      	mov	r1, r4
 800f830:	4630      	mov	r0, r6
 800f832:	f001 fc1d 	bl	8011070 <__smakebuf_r>
 800f836:	89a0      	ldrh	r0, [r4, #12]
 800f838:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f83c:	f010 0301 	ands.w	r3, r0, #1
 800f840:	d00a      	beq.n	800f858 <__swsetup_r+0xbc>
 800f842:	2300      	movs	r3, #0
 800f844:	60a3      	str	r3, [r4, #8]
 800f846:	6963      	ldr	r3, [r4, #20]
 800f848:	425b      	negs	r3, r3
 800f84a:	61a3      	str	r3, [r4, #24]
 800f84c:	6923      	ldr	r3, [r4, #16]
 800f84e:	b943      	cbnz	r3, 800f862 <__swsetup_r+0xc6>
 800f850:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f854:	d1ba      	bne.n	800f7cc <__swsetup_r+0x30>
 800f856:	bd70      	pop	{r4, r5, r6, pc}
 800f858:	0781      	lsls	r1, r0, #30
 800f85a:	bf58      	it	pl
 800f85c:	6963      	ldrpl	r3, [r4, #20]
 800f85e:	60a3      	str	r3, [r4, #8]
 800f860:	e7f4      	b.n	800f84c <__swsetup_r+0xb0>
 800f862:	2000      	movs	r0, #0
 800f864:	e7f7      	b.n	800f856 <__swsetup_r+0xba>
 800f866:	bf00      	nop
 800f868:	20000044 	.word	0x20000044
 800f86c:	08013bfc 	.word	0x08013bfc
 800f870:	08013c1c 	.word	0x08013c1c
 800f874:	08013bdc 	.word	0x08013bdc

0800f878 <__assert_func>:
 800f878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f87a:	4614      	mov	r4, r2
 800f87c:	461a      	mov	r2, r3
 800f87e:	4b09      	ldr	r3, [pc, #36]	; (800f8a4 <__assert_func+0x2c>)
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	4605      	mov	r5, r0
 800f884:	68d8      	ldr	r0, [r3, #12]
 800f886:	b14c      	cbz	r4, 800f89c <__assert_func+0x24>
 800f888:	4b07      	ldr	r3, [pc, #28]	; (800f8a8 <__assert_func+0x30>)
 800f88a:	9100      	str	r1, [sp, #0]
 800f88c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f890:	4906      	ldr	r1, [pc, #24]	; (800f8ac <__assert_func+0x34>)
 800f892:	462b      	mov	r3, r5
 800f894:	f001 f820 	bl	80108d8 <fiprintf>
 800f898:	f002 fc52 	bl	8012140 <abort>
 800f89c:	4b04      	ldr	r3, [pc, #16]	; (800f8b0 <__assert_func+0x38>)
 800f89e:	461c      	mov	r4, r3
 800f8a0:	e7f3      	b.n	800f88a <__assert_func+0x12>
 800f8a2:	bf00      	nop
 800f8a4:	20000044 	.word	0x20000044
 800f8a8:	08013a20 	.word	0x08013a20
 800f8ac:	08013a2d 	.word	0x08013a2d
 800f8b0:	08013a5b 	.word	0x08013a5b

0800f8b4 <quorem>:
 800f8b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8b8:	6903      	ldr	r3, [r0, #16]
 800f8ba:	690c      	ldr	r4, [r1, #16]
 800f8bc:	42a3      	cmp	r3, r4
 800f8be:	4607      	mov	r7, r0
 800f8c0:	f2c0 8081 	blt.w	800f9c6 <quorem+0x112>
 800f8c4:	3c01      	subs	r4, #1
 800f8c6:	f101 0814 	add.w	r8, r1, #20
 800f8ca:	f100 0514 	add.w	r5, r0, #20
 800f8ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f8d2:	9301      	str	r3, [sp, #4]
 800f8d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f8d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f8dc:	3301      	adds	r3, #1
 800f8de:	429a      	cmp	r2, r3
 800f8e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f8e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f8e8:	fbb2 f6f3 	udiv	r6, r2, r3
 800f8ec:	d331      	bcc.n	800f952 <quorem+0x9e>
 800f8ee:	f04f 0e00 	mov.w	lr, #0
 800f8f2:	4640      	mov	r0, r8
 800f8f4:	46ac      	mov	ip, r5
 800f8f6:	46f2      	mov	sl, lr
 800f8f8:	f850 2b04 	ldr.w	r2, [r0], #4
 800f8fc:	b293      	uxth	r3, r2
 800f8fe:	fb06 e303 	mla	r3, r6, r3, lr
 800f902:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800f906:	b29b      	uxth	r3, r3
 800f908:	ebaa 0303 	sub.w	r3, sl, r3
 800f90c:	0c12      	lsrs	r2, r2, #16
 800f90e:	f8dc a000 	ldr.w	sl, [ip]
 800f912:	fb06 e202 	mla	r2, r6, r2, lr
 800f916:	fa13 f38a 	uxtah	r3, r3, sl
 800f91a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f91e:	fa1f fa82 	uxth.w	sl, r2
 800f922:	f8dc 2000 	ldr.w	r2, [ip]
 800f926:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800f92a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f92e:	b29b      	uxth	r3, r3
 800f930:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f934:	4581      	cmp	r9, r0
 800f936:	f84c 3b04 	str.w	r3, [ip], #4
 800f93a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f93e:	d2db      	bcs.n	800f8f8 <quorem+0x44>
 800f940:	f855 300b 	ldr.w	r3, [r5, fp]
 800f944:	b92b      	cbnz	r3, 800f952 <quorem+0x9e>
 800f946:	9b01      	ldr	r3, [sp, #4]
 800f948:	3b04      	subs	r3, #4
 800f94a:	429d      	cmp	r5, r3
 800f94c:	461a      	mov	r2, r3
 800f94e:	d32e      	bcc.n	800f9ae <quorem+0xfa>
 800f950:	613c      	str	r4, [r7, #16]
 800f952:	4638      	mov	r0, r7
 800f954:	f001 fec0 	bl	80116d8 <__mcmp>
 800f958:	2800      	cmp	r0, #0
 800f95a:	db24      	blt.n	800f9a6 <quorem+0xf2>
 800f95c:	3601      	adds	r6, #1
 800f95e:	4628      	mov	r0, r5
 800f960:	f04f 0c00 	mov.w	ip, #0
 800f964:	f858 2b04 	ldr.w	r2, [r8], #4
 800f968:	f8d0 e000 	ldr.w	lr, [r0]
 800f96c:	b293      	uxth	r3, r2
 800f96e:	ebac 0303 	sub.w	r3, ip, r3
 800f972:	0c12      	lsrs	r2, r2, #16
 800f974:	fa13 f38e 	uxtah	r3, r3, lr
 800f978:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f97c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f980:	b29b      	uxth	r3, r3
 800f982:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f986:	45c1      	cmp	r9, r8
 800f988:	f840 3b04 	str.w	r3, [r0], #4
 800f98c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f990:	d2e8      	bcs.n	800f964 <quorem+0xb0>
 800f992:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f996:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f99a:	b922      	cbnz	r2, 800f9a6 <quorem+0xf2>
 800f99c:	3b04      	subs	r3, #4
 800f99e:	429d      	cmp	r5, r3
 800f9a0:	461a      	mov	r2, r3
 800f9a2:	d30a      	bcc.n	800f9ba <quorem+0x106>
 800f9a4:	613c      	str	r4, [r7, #16]
 800f9a6:	4630      	mov	r0, r6
 800f9a8:	b003      	add	sp, #12
 800f9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9ae:	6812      	ldr	r2, [r2, #0]
 800f9b0:	3b04      	subs	r3, #4
 800f9b2:	2a00      	cmp	r2, #0
 800f9b4:	d1cc      	bne.n	800f950 <quorem+0x9c>
 800f9b6:	3c01      	subs	r4, #1
 800f9b8:	e7c7      	b.n	800f94a <quorem+0x96>
 800f9ba:	6812      	ldr	r2, [r2, #0]
 800f9bc:	3b04      	subs	r3, #4
 800f9be:	2a00      	cmp	r2, #0
 800f9c0:	d1f0      	bne.n	800f9a4 <quorem+0xf0>
 800f9c2:	3c01      	subs	r4, #1
 800f9c4:	e7eb      	b.n	800f99e <quorem+0xea>
 800f9c6:	2000      	movs	r0, #0
 800f9c8:	e7ee      	b.n	800f9a8 <quorem+0xf4>
 800f9ca:	0000      	movs	r0, r0
 800f9cc:	0000      	movs	r0, r0
	...

0800f9d0 <_dtoa_r>:
 800f9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9d4:	ed2d 8b02 	vpush	{d8}
 800f9d8:	ec57 6b10 	vmov	r6, r7, d0
 800f9dc:	b095      	sub	sp, #84	; 0x54
 800f9de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f9e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f9e4:	9105      	str	r1, [sp, #20]
 800f9e6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800f9ea:	4604      	mov	r4, r0
 800f9ec:	9209      	str	r2, [sp, #36]	; 0x24
 800f9ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800f9f0:	b975      	cbnz	r5, 800fa10 <_dtoa_r+0x40>
 800f9f2:	2010      	movs	r0, #16
 800f9f4:	f7fd ff58 	bl	800d8a8 <malloc>
 800f9f8:	4602      	mov	r2, r0
 800f9fa:	6260      	str	r0, [r4, #36]	; 0x24
 800f9fc:	b920      	cbnz	r0, 800fa08 <_dtoa_r+0x38>
 800f9fe:	4bb2      	ldr	r3, [pc, #712]	; (800fcc8 <_dtoa_r+0x2f8>)
 800fa00:	21ea      	movs	r1, #234	; 0xea
 800fa02:	48b2      	ldr	r0, [pc, #712]	; (800fccc <_dtoa_r+0x2fc>)
 800fa04:	f7ff ff38 	bl	800f878 <__assert_func>
 800fa08:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fa0c:	6005      	str	r5, [r0, #0]
 800fa0e:	60c5      	str	r5, [r0, #12]
 800fa10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa12:	6819      	ldr	r1, [r3, #0]
 800fa14:	b151      	cbz	r1, 800fa2c <_dtoa_r+0x5c>
 800fa16:	685a      	ldr	r2, [r3, #4]
 800fa18:	604a      	str	r2, [r1, #4]
 800fa1a:	2301      	movs	r3, #1
 800fa1c:	4093      	lsls	r3, r2
 800fa1e:	608b      	str	r3, [r1, #8]
 800fa20:	4620      	mov	r0, r4
 800fa22:	f001 fbd1 	bl	80111c8 <_Bfree>
 800fa26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa28:	2200      	movs	r2, #0
 800fa2a:	601a      	str	r2, [r3, #0]
 800fa2c:	1e3b      	subs	r3, r7, #0
 800fa2e:	bfb9      	ittee	lt
 800fa30:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fa34:	9303      	strlt	r3, [sp, #12]
 800fa36:	2300      	movge	r3, #0
 800fa38:	f8c8 3000 	strge.w	r3, [r8]
 800fa3c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800fa40:	4ba3      	ldr	r3, [pc, #652]	; (800fcd0 <_dtoa_r+0x300>)
 800fa42:	bfbc      	itt	lt
 800fa44:	2201      	movlt	r2, #1
 800fa46:	f8c8 2000 	strlt.w	r2, [r8]
 800fa4a:	ea33 0309 	bics.w	r3, r3, r9
 800fa4e:	d11b      	bne.n	800fa88 <_dtoa_r+0xb8>
 800fa50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800fa52:	f242 730f 	movw	r3, #9999	; 0x270f
 800fa56:	6013      	str	r3, [r2, #0]
 800fa58:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fa5c:	4333      	orrs	r3, r6
 800fa5e:	f000 857a 	beq.w	8010556 <_dtoa_r+0xb86>
 800fa62:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fa64:	b963      	cbnz	r3, 800fa80 <_dtoa_r+0xb0>
 800fa66:	4b9b      	ldr	r3, [pc, #620]	; (800fcd4 <_dtoa_r+0x304>)
 800fa68:	e024      	b.n	800fab4 <_dtoa_r+0xe4>
 800fa6a:	4b9b      	ldr	r3, [pc, #620]	; (800fcd8 <_dtoa_r+0x308>)
 800fa6c:	9300      	str	r3, [sp, #0]
 800fa6e:	3308      	adds	r3, #8
 800fa70:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fa72:	6013      	str	r3, [r2, #0]
 800fa74:	9800      	ldr	r0, [sp, #0]
 800fa76:	b015      	add	sp, #84	; 0x54
 800fa78:	ecbd 8b02 	vpop	{d8}
 800fa7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa80:	4b94      	ldr	r3, [pc, #592]	; (800fcd4 <_dtoa_r+0x304>)
 800fa82:	9300      	str	r3, [sp, #0]
 800fa84:	3303      	adds	r3, #3
 800fa86:	e7f3      	b.n	800fa70 <_dtoa_r+0xa0>
 800fa88:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	ec51 0b17 	vmov	r0, r1, d7
 800fa92:	2300      	movs	r3, #0
 800fa94:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800fa98:	f7f1 f81e 	bl	8000ad8 <__aeabi_dcmpeq>
 800fa9c:	4680      	mov	r8, r0
 800fa9e:	b158      	cbz	r0, 800fab8 <_dtoa_r+0xe8>
 800faa0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800faa2:	2301      	movs	r3, #1
 800faa4:	6013      	str	r3, [r2, #0]
 800faa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	f000 8551 	beq.w	8010550 <_dtoa_r+0xb80>
 800faae:	488b      	ldr	r0, [pc, #556]	; (800fcdc <_dtoa_r+0x30c>)
 800fab0:	6018      	str	r0, [r3, #0]
 800fab2:	1e43      	subs	r3, r0, #1
 800fab4:	9300      	str	r3, [sp, #0]
 800fab6:	e7dd      	b.n	800fa74 <_dtoa_r+0xa4>
 800fab8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800fabc:	aa12      	add	r2, sp, #72	; 0x48
 800fabe:	a913      	add	r1, sp, #76	; 0x4c
 800fac0:	4620      	mov	r0, r4
 800fac2:	f001 ff29 	bl	8011918 <__d2b>
 800fac6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800faca:	4683      	mov	fp, r0
 800facc:	2d00      	cmp	r5, #0
 800face:	d07c      	beq.n	800fbca <_dtoa_r+0x1fa>
 800fad0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fad2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800fad6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fada:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800fade:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fae2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fae6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800faea:	4b7d      	ldr	r3, [pc, #500]	; (800fce0 <_dtoa_r+0x310>)
 800faec:	2200      	movs	r2, #0
 800faee:	4630      	mov	r0, r6
 800faf0:	4639      	mov	r1, r7
 800faf2:	f7f0 fbd1 	bl	8000298 <__aeabi_dsub>
 800faf6:	a36e      	add	r3, pc, #440	; (adr r3, 800fcb0 <_dtoa_r+0x2e0>)
 800faf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fafc:	f7f0 fd84 	bl	8000608 <__aeabi_dmul>
 800fb00:	a36d      	add	r3, pc, #436	; (adr r3, 800fcb8 <_dtoa_r+0x2e8>)
 800fb02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb06:	f7f0 fbc9 	bl	800029c <__adddf3>
 800fb0a:	4606      	mov	r6, r0
 800fb0c:	4628      	mov	r0, r5
 800fb0e:	460f      	mov	r7, r1
 800fb10:	f7f0 fd10 	bl	8000534 <__aeabi_i2d>
 800fb14:	a36a      	add	r3, pc, #424	; (adr r3, 800fcc0 <_dtoa_r+0x2f0>)
 800fb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb1a:	f7f0 fd75 	bl	8000608 <__aeabi_dmul>
 800fb1e:	4602      	mov	r2, r0
 800fb20:	460b      	mov	r3, r1
 800fb22:	4630      	mov	r0, r6
 800fb24:	4639      	mov	r1, r7
 800fb26:	f7f0 fbb9 	bl	800029c <__adddf3>
 800fb2a:	4606      	mov	r6, r0
 800fb2c:	460f      	mov	r7, r1
 800fb2e:	f7f1 f81b 	bl	8000b68 <__aeabi_d2iz>
 800fb32:	2200      	movs	r2, #0
 800fb34:	4682      	mov	sl, r0
 800fb36:	2300      	movs	r3, #0
 800fb38:	4630      	mov	r0, r6
 800fb3a:	4639      	mov	r1, r7
 800fb3c:	f7f0 ffd6 	bl	8000aec <__aeabi_dcmplt>
 800fb40:	b148      	cbz	r0, 800fb56 <_dtoa_r+0x186>
 800fb42:	4650      	mov	r0, sl
 800fb44:	f7f0 fcf6 	bl	8000534 <__aeabi_i2d>
 800fb48:	4632      	mov	r2, r6
 800fb4a:	463b      	mov	r3, r7
 800fb4c:	f7f0 ffc4 	bl	8000ad8 <__aeabi_dcmpeq>
 800fb50:	b908      	cbnz	r0, 800fb56 <_dtoa_r+0x186>
 800fb52:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800fb56:	f1ba 0f16 	cmp.w	sl, #22
 800fb5a:	d854      	bhi.n	800fc06 <_dtoa_r+0x236>
 800fb5c:	4b61      	ldr	r3, [pc, #388]	; (800fce4 <_dtoa_r+0x314>)
 800fb5e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fb62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fb6a:	f7f0 ffbf 	bl	8000aec <__aeabi_dcmplt>
 800fb6e:	2800      	cmp	r0, #0
 800fb70:	d04b      	beq.n	800fc0a <_dtoa_r+0x23a>
 800fb72:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800fb76:	2300      	movs	r3, #0
 800fb78:	930e      	str	r3, [sp, #56]	; 0x38
 800fb7a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fb7c:	1b5d      	subs	r5, r3, r5
 800fb7e:	1e6b      	subs	r3, r5, #1
 800fb80:	9304      	str	r3, [sp, #16]
 800fb82:	bf43      	ittte	mi
 800fb84:	2300      	movmi	r3, #0
 800fb86:	f1c5 0801 	rsbmi	r8, r5, #1
 800fb8a:	9304      	strmi	r3, [sp, #16]
 800fb8c:	f04f 0800 	movpl.w	r8, #0
 800fb90:	f1ba 0f00 	cmp.w	sl, #0
 800fb94:	db3b      	blt.n	800fc0e <_dtoa_r+0x23e>
 800fb96:	9b04      	ldr	r3, [sp, #16]
 800fb98:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800fb9c:	4453      	add	r3, sl
 800fb9e:	9304      	str	r3, [sp, #16]
 800fba0:	2300      	movs	r3, #0
 800fba2:	9306      	str	r3, [sp, #24]
 800fba4:	9b05      	ldr	r3, [sp, #20]
 800fba6:	2b09      	cmp	r3, #9
 800fba8:	d869      	bhi.n	800fc7e <_dtoa_r+0x2ae>
 800fbaa:	2b05      	cmp	r3, #5
 800fbac:	bfc4      	itt	gt
 800fbae:	3b04      	subgt	r3, #4
 800fbb0:	9305      	strgt	r3, [sp, #20]
 800fbb2:	9b05      	ldr	r3, [sp, #20]
 800fbb4:	f1a3 0302 	sub.w	r3, r3, #2
 800fbb8:	bfcc      	ite	gt
 800fbba:	2500      	movgt	r5, #0
 800fbbc:	2501      	movle	r5, #1
 800fbbe:	2b03      	cmp	r3, #3
 800fbc0:	d869      	bhi.n	800fc96 <_dtoa_r+0x2c6>
 800fbc2:	e8df f003 	tbb	[pc, r3]
 800fbc6:	4e2c      	.short	0x4e2c
 800fbc8:	5a4c      	.short	0x5a4c
 800fbca:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800fbce:	441d      	add	r5, r3
 800fbd0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fbd4:	2b20      	cmp	r3, #32
 800fbd6:	bfc1      	itttt	gt
 800fbd8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fbdc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800fbe0:	fa09 f303 	lslgt.w	r3, r9, r3
 800fbe4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800fbe8:	bfda      	itte	le
 800fbea:	f1c3 0320 	rsble	r3, r3, #32
 800fbee:	fa06 f003 	lslle.w	r0, r6, r3
 800fbf2:	4318      	orrgt	r0, r3
 800fbf4:	f7f0 fc8e 	bl	8000514 <__aeabi_ui2d>
 800fbf8:	2301      	movs	r3, #1
 800fbfa:	4606      	mov	r6, r0
 800fbfc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800fc00:	3d01      	subs	r5, #1
 800fc02:	9310      	str	r3, [sp, #64]	; 0x40
 800fc04:	e771      	b.n	800faea <_dtoa_r+0x11a>
 800fc06:	2301      	movs	r3, #1
 800fc08:	e7b6      	b.n	800fb78 <_dtoa_r+0x1a8>
 800fc0a:	900e      	str	r0, [sp, #56]	; 0x38
 800fc0c:	e7b5      	b.n	800fb7a <_dtoa_r+0x1aa>
 800fc0e:	f1ca 0300 	rsb	r3, sl, #0
 800fc12:	9306      	str	r3, [sp, #24]
 800fc14:	2300      	movs	r3, #0
 800fc16:	eba8 080a 	sub.w	r8, r8, sl
 800fc1a:	930d      	str	r3, [sp, #52]	; 0x34
 800fc1c:	e7c2      	b.n	800fba4 <_dtoa_r+0x1d4>
 800fc1e:	2300      	movs	r3, #0
 800fc20:	9308      	str	r3, [sp, #32]
 800fc22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	dc39      	bgt.n	800fc9c <_dtoa_r+0x2cc>
 800fc28:	f04f 0901 	mov.w	r9, #1
 800fc2c:	f8cd 9004 	str.w	r9, [sp, #4]
 800fc30:	464b      	mov	r3, r9
 800fc32:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800fc36:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800fc38:	2200      	movs	r2, #0
 800fc3a:	6042      	str	r2, [r0, #4]
 800fc3c:	2204      	movs	r2, #4
 800fc3e:	f102 0614 	add.w	r6, r2, #20
 800fc42:	429e      	cmp	r6, r3
 800fc44:	6841      	ldr	r1, [r0, #4]
 800fc46:	d92f      	bls.n	800fca8 <_dtoa_r+0x2d8>
 800fc48:	4620      	mov	r0, r4
 800fc4a:	f001 fa7d 	bl	8011148 <_Balloc>
 800fc4e:	9000      	str	r0, [sp, #0]
 800fc50:	2800      	cmp	r0, #0
 800fc52:	d14b      	bne.n	800fcec <_dtoa_r+0x31c>
 800fc54:	4b24      	ldr	r3, [pc, #144]	; (800fce8 <_dtoa_r+0x318>)
 800fc56:	4602      	mov	r2, r0
 800fc58:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800fc5c:	e6d1      	b.n	800fa02 <_dtoa_r+0x32>
 800fc5e:	2301      	movs	r3, #1
 800fc60:	e7de      	b.n	800fc20 <_dtoa_r+0x250>
 800fc62:	2300      	movs	r3, #0
 800fc64:	9308      	str	r3, [sp, #32]
 800fc66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc68:	eb0a 0903 	add.w	r9, sl, r3
 800fc6c:	f109 0301 	add.w	r3, r9, #1
 800fc70:	2b01      	cmp	r3, #1
 800fc72:	9301      	str	r3, [sp, #4]
 800fc74:	bfb8      	it	lt
 800fc76:	2301      	movlt	r3, #1
 800fc78:	e7dd      	b.n	800fc36 <_dtoa_r+0x266>
 800fc7a:	2301      	movs	r3, #1
 800fc7c:	e7f2      	b.n	800fc64 <_dtoa_r+0x294>
 800fc7e:	2501      	movs	r5, #1
 800fc80:	2300      	movs	r3, #0
 800fc82:	9305      	str	r3, [sp, #20]
 800fc84:	9508      	str	r5, [sp, #32]
 800fc86:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	f8cd 9004 	str.w	r9, [sp, #4]
 800fc90:	2312      	movs	r3, #18
 800fc92:	9209      	str	r2, [sp, #36]	; 0x24
 800fc94:	e7cf      	b.n	800fc36 <_dtoa_r+0x266>
 800fc96:	2301      	movs	r3, #1
 800fc98:	9308      	str	r3, [sp, #32]
 800fc9a:	e7f4      	b.n	800fc86 <_dtoa_r+0x2b6>
 800fc9c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800fca0:	f8cd 9004 	str.w	r9, [sp, #4]
 800fca4:	464b      	mov	r3, r9
 800fca6:	e7c6      	b.n	800fc36 <_dtoa_r+0x266>
 800fca8:	3101      	adds	r1, #1
 800fcaa:	6041      	str	r1, [r0, #4]
 800fcac:	0052      	lsls	r2, r2, #1
 800fcae:	e7c6      	b.n	800fc3e <_dtoa_r+0x26e>
 800fcb0:	636f4361 	.word	0x636f4361
 800fcb4:	3fd287a7 	.word	0x3fd287a7
 800fcb8:	8b60c8b3 	.word	0x8b60c8b3
 800fcbc:	3fc68a28 	.word	0x3fc68a28
 800fcc0:	509f79fb 	.word	0x509f79fb
 800fcc4:	3fd34413 	.word	0x3fd34413
 800fcc8:	080139a8 	.word	0x080139a8
 800fccc:	08013b6a 	.word	0x08013b6a
 800fcd0:	7ff00000 	.word	0x7ff00000
 800fcd4:	08013b66 	.word	0x08013b66
 800fcd8:	08013b5d 	.word	0x08013b5d
 800fcdc:	08013929 	.word	0x08013929
 800fce0:	3ff80000 	.word	0x3ff80000
 800fce4:	08013d48 	.word	0x08013d48
 800fce8:	08013bc9 	.word	0x08013bc9
 800fcec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fcee:	9a00      	ldr	r2, [sp, #0]
 800fcf0:	601a      	str	r2, [r3, #0]
 800fcf2:	9b01      	ldr	r3, [sp, #4]
 800fcf4:	2b0e      	cmp	r3, #14
 800fcf6:	f200 80ad 	bhi.w	800fe54 <_dtoa_r+0x484>
 800fcfa:	2d00      	cmp	r5, #0
 800fcfc:	f000 80aa 	beq.w	800fe54 <_dtoa_r+0x484>
 800fd00:	f1ba 0f00 	cmp.w	sl, #0
 800fd04:	dd36      	ble.n	800fd74 <_dtoa_r+0x3a4>
 800fd06:	4ac3      	ldr	r2, [pc, #780]	; (8010014 <_dtoa_r+0x644>)
 800fd08:	f00a 030f 	and.w	r3, sl, #15
 800fd0c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800fd10:	ed93 7b00 	vldr	d7, [r3]
 800fd14:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800fd18:	ea4f 172a 	mov.w	r7, sl, asr #4
 800fd1c:	eeb0 8a47 	vmov.f32	s16, s14
 800fd20:	eef0 8a67 	vmov.f32	s17, s15
 800fd24:	d016      	beq.n	800fd54 <_dtoa_r+0x384>
 800fd26:	4bbc      	ldr	r3, [pc, #752]	; (8010018 <_dtoa_r+0x648>)
 800fd28:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fd2c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fd30:	f7f0 fd94 	bl	800085c <__aeabi_ddiv>
 800fd34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd38:	f007 070f 	and.w	r7, r7, #15
 800fd3c:	2503      	movs	r5, #3
 800fd3e:	4eb6      	ldr	r6, [pc, #728]	; (8010018 <_dtoa_r+0x648>)
 800fd40:	b957      	cbnz	r7, 800fd58 <_dtoa_r+0x388>
 800fd42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd46:	ec53 2b18 	vmov	r2, r3, d8
 800fd4a:	f7f0 fd87 	bl	800085c <__aeabi_ddiv>
 800fd4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd52:	e029      	b.n	800fda8 <_dtoa_r+0x3d8>
 800fd54:	2502      	movs	r5, #2
 800fd56:	e7f2      	b.n	800fd3e <_dtoa_r+0x36e>
 800fd58:	07f9      	lsls	r1, r7, #31
 800fd5a:	d508      	bpl.n	800fd6e <_dtoa_r+0x39e>
 800fd5c:	ec51 0b18 	vmov	r0, r1, d8
 800fd60:	e9d6 2300 	ldrd	r2, r3, [r6]
 800fd64:	f7f0 fc50 	bl	8000608 <__aeabi_dmul>
 800fd68:	ec41 0b18 	vmov	d8, r0, r1
 800fd6c:	3501      	adds	r5, #1
 800fd6e:	107f      	asrs	r7, r7, #1
 800fd70:	3608      	adds	r6, #8
 800fd72:	e7e5      	b.n	800fd40 <_dtoa_r+0x370>
 800fd74:	f000 80a6 	beq.w	800fec4 <_dtoa_r+0x4f4>
 800fd78:	f1ca 0600 	rsb	r6, sl, #0
 800fd7c:	4ba5      	ldr	r3, [pc, #660]	; (8010014 <_dtoa_r+0x644>)
 800fd7e:	4fa6      	ldr	r7, [pc, #664]	; (8010018 <_dtoa_r+0x648>)
 800fd80:	f006 020f 	and.w	r2, r6, #15
 800fd84:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd8c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800fd90:	f7f0 fc3a 	bl	8000608 <__aeabi_dmul>
 800fd94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd98:	1136      	asrs	r6, r6, #4
 800fd9a:	2300      	movs	r3, #0
 800fd9c:	2502      	movs	r5, #2
 800fd9e:	2e00      	cmp	r6, #0
 800fda0:	f040 8085 	bne.w	800feae <_dtoa_r+0x4de>
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d1d2      	bne.n	800fd4e <_dtoa_r+0x37e>
 800fda8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	f000 808c 	beq.w	800fec8 <_dtoa_r+0x4f8>
 800fdb0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fdb4:	4b99      	ldr	r3, [pc, #612]	; (801001c <_dtoa_r+0x64c>)
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	4630      	mov	r0, r6
 800fdba:	4639      	mov	r1, r7
 800fdbc:	f7f0 fe96 	bl	8000aec <__aeabi_dcmplt>
 800fdc0:	2800      	cmp	r0, #0
 800fdc2:	f000 8081 	beq.w	800fec8 <_dtoa_r+0x4f8>
 800fdc6:	9b01      	ldr	r3, [sp, #4]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d07d      	beq.n	800fec8 <_dtoa_r+0x4f8>
 800fdcc:	f1b9 0f00 	cmp.w	r9, #0
 800fdd0:	dd3c      	ble.n	800fe4c <_dtoa_r+0x47c>
 800fdd2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800fdd6:	9307      	str	r3, [sp, #28]
 800fdd8:	2200      	movs	r2, #0
 800fdda:	4b91      	ldr	r3, [pc, #580]	; (8010020 <_dtoa_r+0x650>)
 800fddc:	4630      	mov	r0, r6
 800fdde:	4639      	mov	r1, r7
 800fde0:	f7f0 fc12 	bl	8000608 <__aeabi_dmul>
 800fde4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fde8:	3501      	adds	r5, #1
 800fdea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800fdee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fdf2:	4628      	mov	r0, r5
 800fdf4:	f7f0 fb9e 	bl	8000534 <__aeabi_i2d>
 800fdf8:	4632      	mov	r2, r6
 800fdfa:	463b      	mov	r3, r7
 800fdfc:	f7f0 fc04 	bl	8000608 <__aeabi_dmul>
 800fe00:	4b88      	ldr	r3, [pc, #544]	; (8010024 <_dtoa_r+0x654>)
 800fe02:	2200      	movs	r2, #0
 800fe04:	f7f0 fa4a 	bl	800029c <__adddf3>
 800fe08:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800fe0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fe10:	9303      	str	r3, [sp, #12]
 800fe12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d15c      	bne.n	800fed2 <_dtoa_r+0x502>
 800fe18:	4b83      	ldr	r3, [pc, #524]	; (8010028 <_dtoa_r+0x658>)
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	4630      	mov	r0, r6
 800fe1e:	4639      	mov	r1, r7
 800fe20:	f7f0 fa3a 	bl	8000298 <__aeabi_dsub>
 800fe24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fe28:	4606      	mov	r6, r0
 800fe2a:	460f      	mov	r7, r1
 800fe2c:	f7f0 fe7c 	bl	8000b28 <__aeabi_dcmpgt>
 800fe30:	2800      	cmp	r0, #0
 800fe32:	f040 8296 	bne.w	8010362 <_dtoa_r+0x992>
 800fe36:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800fe3a:	4630      	mov	r0, r6
 800fe3c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fe40:	4639      	mov	r1, r7
 800fe42:	f7f0 fe53 	bl	8000aec <__aeabi_dcmplt>
 800fe46:	2800      	cmp	r0, #0
 800fe48:	f040 8288 	bne.w	801035c <_dtoa_r+0x98c>
 800fe4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800fe50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fe54:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fe56:	2b00      	cmp	r3, #0
 800fe58:	f2c0 8158 	blt.w	801010c <_dtoa_r+0x73c>
 800fe5c:	f1ba 0f0e 	cmp.w	sl, #14
 800fe60:	f300 8154 	bgt.w	801010c <_dtoa_r+0x73c>
 800fe64:	4b6b      	ldr	r3, [pc, #428]	; (8010014 <_dtoa_r+0x644>)
 800fe66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fe6a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800fe6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	f280 80e3 	bge.w	801003c <_dtoa_r+0x66c>
 800fe76:	9b01      	ldr	r3, [sp, #4]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	f300 80df 	bgt.w	801003c <_dtoa_r+0x66c>
 800fe7e:	f040 826d 	bne.w	801035c <_dtoa_r+0x98c>
 800fe82:	4b69      	ldr	r3, [pc, #420]	; (8010028 <_dtoa_r+0x658>)
 800fe84:	2200      	movs	r2, #0
 800fe86:	4640      	mov	r0, r8
 800fe88:	4649      	mov	r1, r9
 800fe8a:	f7f0 fbbd 	bl	8000608 <__aeabi_dmul>
 800fe8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fe92:	f7f0 fe3f 	bl	8000b14 <__aeabi_dcmpge>
 800fe96:	9e01      	ldr	r6, [sp, #4]
 800fe98:	4637      	mov	r7, r6
 800fe9a:	2800      	cmp	r0, #0
 800fe9c:	f040 8243 	bne.w	8010326 <_dtoa_r+0x956>
 800fea0:	9d00      	ldr	r5, [sp, #0]
 800fea2:	2331      	movs	r3, #49	; 0x31
 800fea4:	f805 3b01 	strb.w	r3, [r5], #1
 800fea8:	f10a 0a01 	add.w	sl, sl, #1
 800feac:	e23f      	b.n	801032e <_dtoa_r+0x95e>
 800feae:	07f2      	lsls	r2, r6, #31
 800feb0:	d505      	bpl.n	800febe <_dtoa_r+0x4ee>
 800feb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800feb6:	f7f0 fba7 	bl	8000608 <__aeabi_dmul>
 800feba:	3501      	adds	r5, #1
 800febc:	2301      	movs	r3, #1
 800febe:	1076      	asrs	r6, r6, #1
 800fec0:	3708      	adds	r7, #8
 800fec2:	e76c      	b.n	800fd9e <_dtoa_r+0x3ce>
 800fec4:	2502      	movs	r5, #2
 800fec6:	e76f      	b.n	800fda8 <_dtoa_r+0x3d8>
 800fec8:	9b01      	ldr	r3, [sp, #4]
 800feca:	f8cd a01c 	str.w	sl, [sp, #28]
 800fece:	930c      	str	r3, [sp, #48]	; 0x30
 800fed0:	e78d      	b.n	800fdee <_dtoa_r+0x41e>
 800fed2:	9900      	ldr	r1, [sp, #0]
 800fed4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800fed6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fed8:	4b4e      	ldr	r3, [pc, #312]	; (8010014 <_dtoa_r+0x644>)
 800feda:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fede:	4401      	add	r1, r0
 800fee0:	9102      	str	r1, [sp, #8]
 800fee2:	9908      	ldr	r1, [sp, #32]
 800fee4:	eeb0 8a47 	vmov.f32	s16, s14
 800fee8:	eef0 8a67 	vmov.f32	s17, s15
 800feec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fef0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fef4:	2900      	cmp	r1, #0
 800fef6:	d045      	beq.n	800ff84 <_dtoa_r+0x5b4>
 800fef8:	494c      	ldr	r1, [pc, #304]	; (801002c <_dtoa_r+0x65c>)
 800fefa:	2000      	movs	r0, #0
 800fefc:	f7f0 fcae 	bl	800085c <__aeabi_ddiv>
 800ff00:	ec53 2b18 	vmov	r2, r3, d8
 800ff04:	f7f0 f9c8 	bl	8000298 <__aeabi_dsub>
 800ff08:	9d00      	ldr	r5, [sp, #0]
 800ff0a:	ec41 0b18 	vmov	d8, r0, r1
 800ff0e:	4639      	mov	r1, r7
 800ff10:	4630      	mov	r0, r6
 800ff12:	f7f0 fe29 	bl	8000b68 <__aeabi_d2iz>
 800ff16:	900c      	str	r0, [sp, #48]	; 0x30
 800ff18:	f7f0 fb0c 	bl	8000534 <__aeabi_i2d>
 800ff1c:	4602      	mov	r2, r0
 800ff1e:	460b      	mov	r3, r1
 800ff20:	4630      	mov	r0, r6
 800ff22:	4639      	mov	r1, r7
 800ff24:	f7f0 f9b8 	bl	8000298 <__aeabi_dsub>
 800ff28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ff2a:	3330      	adds	r3, #48	; 0x30
 800ff2c:	f805 3b01 	strb.w	r3, [r5], #1
 800ff30:	ec53 2b18 	vmov	r2, r3, d8
 800ff34:	4606      	mov	r6, r0
 800ff36:	460f      	mov	r7, r1
 800ff38:	f7f0 fdd8 	bl	8000aec <__aeabi_dcmplt>
 800ff3c:	2800      	cmp	r0, #0
 800ff3e:	d165      	bne.n	801000c <_dtoa_r+0x63c>
 800ff40:	4632      	mov	r2, r6
 800ff42:	463b      	mov	r3, r7
 800ff44:	4935      	ldr	r1, [pc, #212]	; (801001c <_dtoa_r+0x64c>)
 800ff46:	2000      	movs	r0, #0
 800ff48:	f7f0 f9a6 	bl	8000298 <__aeabi_dsub>
 800ff4c:	ec53 2b18 	vmov	r2, r3, d8
 800ff50:	f7f0 fdcc 	bl	8000aec <__aeabi_dcmplt>
 800ff54:	2800      	cmp	r0, #0
 800ff56:	f040 80b9 	bne.w	80100cc <_dtoa_r+0x6fc>
 800ff5a:	9b02      	ldr	r3, [sp, #8]
 800ff5c:	429d      	cmp	r5, r3
 800ff5e:	f43f af75 	beq.w	800fe4c <_dtoa_r+0x47c>
 800ff62:	4b2f      	ldr	r3, [pc, #188]	; (8010020 <_dtoa_r+0x650>)
 800ff64:	ec51 0b18 	vmov	r0, r1, d8
 800ff68:	2200      	movs	r2, #0
 800ff6a:	f7f0 fb4d 	bl	8000608 <__aeabi_dmul>
 800ff6e:	4b2c      	ldr	r3, [pc, #176]	; (8010020 <_dtoa_r+0x650>)
 800ff70:	ec41 0b18 	vmov	d8, r0, r1
 800ff74:	2200      	movs	r2, #0
 800ff76:	4630      	mov	r0, r6
 800ff78:	4639      	mov	r1, r7
 800ff7a:	f7f0 fb45 	bl	8000608 <__aeabi_dmul>
 800ff7e:	4606      	mov	r6, r0
 800ff80:	460f      	mov	r7, r1
 800ff82:	e7c4      	b.n	800ff0e <_dtoa_r+0x53e>
 800ff84:	ec51 0b17 	vmov	r0, r1, d7
 800ff88:	f7f0 fb3e 	bl	8000608 <__aeabi_dmul>
 800ff8c:	9b02      	ldr	r3, [sp, #8]
 800ff8e:	9d00      	ldr	r5, [sp, #0]
 800ff90:	930c      	str	r3, [sp, #48]	; 0x30
 800ff92:	ec41 0b18 	vmov	d8, r0, r1
 800ff96:	4639      	mov	r1, r7
 800ff98:	4630      	mov	r0, r6
 800ff9a:	f7f0 fde5 	bl	8000b68 <__aeabi_d2iz>
 800ff9e:	9011      	str	r0, [sp, #68]	; 0x44
 800ffa0:	f7f0 fac8 	bl	8000534 <__aeabi_i2d>
 800ffa4:	4602      	mov	r2, r0
 800ffa6:	460b      	mov	r3, r1
 800ffa8:	4630      	mov	r0, r6
 800ffaa:	4639      	mov	r1, r7
 800ffac:	f7f0 f974 	bl	8000298 <__aeabi_dsub>
 800ffb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ffb2:	3330      	adds	r3, #48	; 0x30
 800ffb4:	f805 3b01 	strb.w	r3, [r5], #1
 800ffb8:	9b02      	ldr	r3, [sp, #8]
 800ffba:	429d      	cmp	r5, r3
 800ffbc:	4606      	mov	r6, r0
 800ffbe:	460f      	mov	r7, r1
 800ffc0:	f04f 0200 	mov.w	r2, #0
 800ffc4:	d134      	bne.n	8010030 <_dtoa_r+0x660>
 800ffc6:	4b19      	ldr	r3, [pc, #100]	; (801002c <_dtoa_r+0x65c>)
 800ffc8:	ec51 0b18 	vmov	r0, r1, d8
 800ffcc:	f7f0 f966 	bl	800029c <__adddf3>
 800ffd0:	4602      	mov	r2, r0
 800ffd2:	460b      	mov	r3, r1
 800ffd4:	4630      	mov	r0, r6
 800ffd6:	4639      	mov	r1, r7
 800ffd8:	f7f0 fda6 	bl	8000b28 <__aeabi_dcmpgt>
 800ffdc:	2800      	cmp	r0, #0
 800ffde:	d175      	bne.n	80100cc <_dtoa_r+0x6fc>
 800ffe0:	ec53 2b18 	vmov	r2, r3, d8
 800ffe4:	4911      	ldr	r1, [pc, #68]	; (801002c <_dtoa_r+0x65c>)
 800ffe6:	2000      	movs	r0, #0
 800ffe8:	f7f0 f956 	bl	8000298 <__aeabi_dsub>
 800ffec:	4602      	mov	r2, r0
 800ffee:	460b      	mov	r3, r1
 800fff0:	4630      	mov	r0, r6
 800fff2:	4639      	mov	r1, r7
 800fff4:	f7f0 fd7a 	bl	8000aec <__aeabi_dcmplt>
 800fff8:	2800      	cmp	r0, #0
 800fffa:	f43f af27 	beq.w	800fe4c <_dtoa_r+0x47c>
 800fffe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010000:	1e6b      	subs	r3, r5, #1
 8010002:	930c      	str	r3, [sp, #48]	; 0x30
 8010004:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010008:	2b30      	cmp	r3, #48	; 0x30
 801000a:	d0f8      	beq.n	800fffe <_dtoa_r+0x62e>
 801000c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010010:	e04a      	b.n	80100a8 <_dtoa_r+0x6d8>
 8010012:	bf00      	nop
 8010014:	08013d48 	.word	0x08013d48
 8010018:	08013d20 	.word	0x08013d20
 801001c:	3ff00000 	.word	0x3ff00000
 8010020:	40240000 	.word	0x40240000
 8010024:	401c0000 	.word	0x401c0000
 8010028:	40140000 	.word	0x40140000
 801002c:	3fe00000 	.word	0x3fe00000
 8010030:	4baf      	ldr	r3, [pc, #700]	; (80102f0 <_dtoa_r+0x920>)
 8010032:	f7f0 fae9 	bl	8000608 <__aeabi_dmul>
 8010036:	4606      	mov	r6, r0
 8010038:	460f      	mov	r7, r1
 801003a:	e7ac      	b.n	800ff96 <_dtoa_r+0x5c6>
 801003c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8010040:	9d00      	ldr	r5, [sp, #0]
 8010042:	4642      	mov	r2, r8
 8010044:	464b      	mov	r3, r9
 8010046:	4630      	mov	r0, r6
 8010048:	4639      	mov	r1, r7
 801004a:	f7f0 fc07 	bl	800085c <__aeabi_ddiv>
 801004e:	f7f0 fd8b 	bl	8000b68 <__aeabi_d2iz>
 8010052:	9002      	str	r0, [sp, #8]
 8010054:	f7f0 fa6e 	bl	8000534 <__aeabi_i2d>
 8010058:	4642      	mov	r2, r8
 801005a:	464b      	mov	r3, r9
 801005c:	f7f0 fad4 	bl	8000608 <__aeabi_dmul>
 8010060:	4602      	mov	r2, r0
 8010062:	460b      	mov	r3, r1
 8010064:	4630      	mov	r0, r6
 8010066:	4639      	mov	r1, r7
 8010068:	f7f0 f916 	bl	8000298 <__aeabi_dsub>
 801006c:	9e02      	ldr	r6, [sp, #8]
 801006e:	9f01      	ldr	r7, [sp, #4]
 8010070:	3630      	adds	r6, #48	; 0x30
 8010072:	f805 6b01 	strb.w	r6, [r5], #1
 8010076:	9e00      	ldr	r6, [sp, #0]
 8010078:	1bae      	subs	r6, r5, r6
 801007a:	42b7      	cmp	r7, r6
 801007c:	4602      	mov	r2, r0
 801007e:	460b      	mov	r3, r1
 8010080:	d137      	bne.n	80100f2 <_dtoa_r+0x722>
 8010082:	f7f0 f90b 	bl	800029c <__adddf3>
 8010086:	4642      	mov	r2, r8
 8010088:	464b      	mov	r3, r9
 801008a:	4606      	mov	r6, r0
 801008c:	460f      	mov	r7, r1
 801008e:	f7f0 fd4b 	bl	8000b28 <__aeabi_dcmpgt>
 8010092:	b9c8      	cbnz	r0, 80100c8 <_dtoa_r+0x6f8>
 8010094:	4642      	mov	r2, r8
 8010096:	464b      	mov	r3, r9
 8010098:	4630      	mov	r0, r6
 801009a:	4639      	mov	r1, r7
 801009c:	f7f0 fd1c 	bl	8000ad8 <__aeabi_dcmpeq>
 80100a0:	b110      	cbz	r0, 80100a8 <_dtoa_r+0x6d8>
 80100a2:	9b02      	ldr	r3, [sp, #8]
 80100a4:	07d9      	lsls	r1, r3, #31
 80100a6:	d40f      	bmi.n	80100c8 <_dtoa_r+0x6f8>
 80100a8:	4620      	mov	r0, r4
 80100aa:	4659      	mov	r1, fp
 80100ac:	f001 f88c 	bl	80111c8 <_Bfree>
 80100b0:	2300      	movs	r3, #0
 80100b2:	702b      	strb	r3, [r5, #0]
 80100b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80100b6:	f10a 0001 	add.w	r0, sl, #1
 80100ba:	6018      	str	r0, [r3, #0]
 80100bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80100be:	2b00      	cmp	r3, #0
 80100c0:	f43f acd8 	beq.w	800fa74 <_dtoa_r+0xa4>
 80100c4:	601d      	str	r5, [r3, #0]
 80100c6:	e4d5      	b.n	800fa74 <_dtoa_r+0xa4>
 80100c8:	f8cd a01c 	str.w	sl, [sp, #28]
 80100cc:	462b      	mov	r3, r5
 80100ce:	461d      	mov	r5, r3
 80100d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80100d4:	2a39      	cmp	r2, #57	; 0x39
 80100d6:	d108      	bne.n	80100ea <_dtoa_r+0x71a>
 80100d8:	9a00      	ldr	r2, [sp, #0]
 80100da:	429a      	cmp	r2, r3
 80100dc:	d1f7      	bne.n	80100ce <_dtoa_r+0x6fe>
 80100de:	9a07      	ldr	r2, [sp, #28]
 80100e0:	9900      	ldr	r1, [sp, #0]
 80100e2:	3201      	adds	r2, #1
 80100e4:	9207      	str	r2, [sp, #28]
 80100e6:	2230      	movs	r2, #48	; 0x30
 80100e8:	700a      	strb	r2, [r1, #0]
 80100ea:	781a      	ldrb	r2, [r3, #0]
 80100ec:	3201      	adds	r2, #1
 80100ee:	701a      	strb	r2, [r3, #0]
 80100f0:	e78c      	b.n	801000c <_dtoa_r+0x63c>
 80100f2:	4b7f      	ldr	r3, [pc, #508]	; (80102f0 <_dtoa_r+0x920>)
 80100f4:	2200      	movs	r2, #0
 80100f6:	f7f0 fa87 	bl	8000608 <__aeabi_dmul>
 80100fa:	2200      	movs	r2, #0
 80100fc:	2300      	movs	r3, #0
 80100fe:	4606      	mov	r6, r0
 8010100:	460f      	mov	r7, r1
 8010102:	f7f0 fce9 	bl	8000ad8 <__aeabi_dcmpeq>
 8010106:	2800      	cmp	r0, #0
 8010108:	d09b      	beq.n	8010042 <_dtoa_r+0x672>
 801010a:	e7cd      	b.n	80100a8 <_dtoa_r+0x6d8>
 801010c:	9a08      	ldr	r2, [sp, #32]
 801010e:	2a00      	cmp	r2, #0
 8010110:	f000 80c4 	beq.w	801029c <_dtoa_r+0x8cc>
 8010114:	9a05      	ldr	r2, [sp, #20]
 8010116:	2a01      	cmp	r2, #1
 8010118:	f300 80a8 	bgt.w	801026c <_dtoa_r+0x89c>
 801011c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801011e:	2a00      	cmp	r2, #0
 8010120:	f000 80a0 	beq.w	8010264 <_dtoa_r+0x894>
 8010124:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010128:	9e06      	ldr	r6, [sp, #24]
 801012a:	4645      	mov	r5, r8
 801012c:	9a04      	ldr	r2, [sp, #16]
 801012e:	2101      	movs	r1, #1
 8010130:	441a      	add	r2, r3
 8010132:	4620      	mov	r0, r4
 8010134:	4498      	add	r8, r3
 8010136:	9204      	str	r2, [sp, #16]
 8010138:	f001 f94c 	bl	80113d4 <__i2b>
 801013c:	4607      	mov	r7, r0
 801013e:	2d00      	cmp	r5, #0
 8010140:	dd0b      	ble.n	801015a <_dtoa_r+0x78a>
 8010142:	9b04      	ldr	r3, [sp, #16]
 8010144:	2b00      	cmp	r3, #0
 8010146:	dd08      	ble.n	801015a <_dtoa_r+0x78a>
 8010148:	42ab      	cmp	r3, r5
 801014a:	9a04      	ldr	r2, [sp, #16]
 801014c:	bfa8      	it	ge
 801014e:	462b      	movge	r3, r5
 8010150:	eba8 0803 	sub.w	r8, r8, r3
 8010154:	1aed      	subs	r5, r5, r3
 8010156:	1ad3      	subs	r3, r2, r3
 8010158:	9304      	str	r3, [sp, #16]
 801015a:	9b06      	ldr	r3, [sp, #24]
 801015c:	b1fb      	cbz	r3, 801019e <_dtoa_r+0x7ce>
 801015e:	9b08      	ldr	r3, [sp, #32]
 8010160:	2b00      	cmp	r3, #0
 8010162:	f000 809f 	beq.w	80102a4 <_dtoa_r+0x8d4>
 8010166:	2e00      	cmp	r6, #0
 8010168:	dd11      	ble.n	801018e <_dtoa_r+0x7be>
 801016a:	4639      	mov	r1, r7
 801016c:	4632      	mov	r2, r6
 801016e:	4620      	mov	r0, r4
 8010170:	f001 f9ec 	bl	801154c <__pow5mult>
 8010174:	465a      	mov	r2, fp
 8010176:	4601      	mov	r1, r0
 8010178:	4607      	mov	r7, r0
 801017a:	4620      	mov	r0, r4
 801017c:	f001 f940 	bl	8011400 <__multiply>
 8010180:	4659      	mov	r1, fp
 8010182:	9007      	str	r0, [sp, #28]
 8010184:	4620      	mov	r0, r4
 8010186:	f001 f81f 	bl	80111c8 <_Bfree>
 801018a:	9b07      	ldr	r3, [sp, #28]
 801018c:	469b      	mov	fp, r3
 801018e:	9b06      	ldr	r3, [sp, #24]
 8010190:	1b9a      	subs	r2, r3, r6
 8010192:	d004      	beq.n	801019e <_dtoa_r+0x7ce>
 8010194:	4659      	mov	r1, fp
 8010196:	4620      	mov	r0, r4
 8010198:	f001 f9d8 	bl	801154c <__pow5mult>
 801019c:	4683      	mov	fp, r0
 801019e:	2101      	movs	r1, #1
 80101a0:	4620      	mov	r0, r4
 80101a2:	f001 f917 	bl	80113d4 <__i2b>
 80101a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	4606      	mov	r6, r0
 80101ac:	dd7c      	ble.n	80102a8 <_dtoa_r+0x8d8>
 80101ae:	461a      	mov	r2, r3
 80101b0:	4601      	mov	r1, r0
 80101b2:	4620      	mov	r0, r4
 80101b4:	f001 f9ca 	bl	801154c <__pow5mult>
 80101b8:	9b05      	ldr	r3, [sp, #20]
 80101ba:	2b01      	cmp	r3, #1
 80101bc:	4606      	mov	r6, r0
 80101be:	dd76      	ble.n	80102ae <_dtoa_r+0x8de>
 80101c0:	2300      	movs	r3, #0
 80101c2:	9306      	str	r3, [sp, #24]
 80101c4:	6933      	ldr	r3, [r6, #16]
 80101c6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80101ca:	6918      	ldr	r0, [r3, #16]
 80101cc:	f001 f8b2 	bl	8011334 <__hi0bits>
 80101d0:	f1c0 0020 	rsb	r0, r0, #32
 80101d4:	9b04      	ldr	r3, [sp, #16]
 80101d6:	4418      	add	r0, r3
 80101d8:	f010 001f 	ands.w	r0, r0, #31
 80101dc:	f000 8086 	beq.w	80102ec <_dtoa_r+0x91c>
 80101e0:	f1c0 0320 	rsb	r3, r0, #32
 80101e4:	2b04      	cmp	r3, #4
 80101e6:	dd7f      	ble.n	80102e8 <_dtoa_r+0x918>
 80101e8:	f1c0 001c 	rsb	r0, r0, #28
 80101ec:	9b04      	ldr	r3, [sp, #16]
 80101ee:	4403      	add	r3, r0
 80101f0:	4480      	add	r8, r0
 80101f2:	4405      	add	r5, r0
 80101f4:	9304      	str	r3, [sp, #16]
 80101f6:	f1b8 0f00 	cmp.w	r8, #0
 80101fa:	dd05      	ble.n	8010208 <_dtoa_r+0x838>
 80101fc:	4659      	mov	r1, fp
 80101fe:	4642      	mov	r2, r8
 8010200:	4620      	mov	r0, r4
 8010202:	f001 f9fd 	bl	8011600 <__lshift>
 8010206:	4683      	mov	fp, r0
 8010208:	9b04      	ldr	r3, [sp, #16]
 801020a:	2b00      	cmp	r3, #0
 801020c:	dd05      	ble.n	801021a <_dtoa_r+0x84a>
 801020e:	4631      	mov	r1, r6
 8010210:	461a      	mov	r2, r3
 8010212:	4620      	mov	r0, r4
 8010214:	f001 f9f4 	bl	8011600 <__lshift>
 8010218:	4606      	mov	r6, r0
 801021a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801021c:	2b00      	cmp	r3, #0
 801021e:	d069      	beq.n	80102f4 <_dtoa_r+0x924>
 8010220:	4631      	mov	r1, r6
 8010222:	4658      	mov	r0, fp
 8010224:	f001 fa58 	bl	80116d8 <__mcmp>
 8010228:	2800      	cmp	r0, #0
 801022a:	da63      	bge.n	80102f4 <_dtoa_r+0x924>
 801022c:	2300      	movs	r3, #0
 801022e:	4659      	mov	r1, fp
 8010230:	220a      	movs	r2, #10
 8010232:	4620      	mov	r0, r4
 8010234:	f000 ffea 	bl	801120c <__multadd>
 8010238:	9b08      	ldr	r3, [sp, #32]
 801023a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801023e:	4683      	mov	fp, r0
 8010240:	2b00      	cmp	r3, #0
 8010242:	f000 818f 	beq.w	8010564 <_dtoa_r+0xb94>
 8010246:	4639      	mov	r1, r7
 8010248:	2300      	movs	r3, #0
 801024a:	220a      	movs	r2, #10
 801024c:	4620      	mov	r0, r4
 801024e:	f000 ffdd 	bl	801120c <__multadd>
 8010252:	f1b9 0f00 	cmp.w	r9, #0
 8010256:	4607      	mov	r7, r0
 8010258:	f300 808e 	bgt.w	8010378 <_dtoa_r+0x9a8>
 801025c:	9b05      	ldr	r3, [sp, #20]
 801025e:	2b02      	cmp	r3, #2
 8010260:	dc50      	bgt.n	8010304 <_dtoa_r+0x934>
 8010262:	e089      	b.n	8010378 <_dtoa_r+0x9a8>
 8010264:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8010266:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801026a:	e75d      	b.n	8010128 <_dtoa_r+0x758>
 801026c:	9b01      	ldr	r3, [sp, #4]
 801026e:	1e5e      	subs	r6, r3, #1
 8010270:	9b06      	ldr	r3, [sp, #24]
 8010272:	42b3      	cmp	r3, r6
 8010274:	bfbf      	itttt	lt
 8010276:	9b06      	ldrlt	r3, [sp, #24]
 8010278:	9606      	strlt	r6, [sp, #24]
 801027a:	1af2      	sublt	r2, r6, r3
 801027c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801027e:	bfb6      	itet	lt
 8010280:	189b      	addlt	r3, r3, r2
 8010282:	1b9e      	subge	r6, r3, r6
 8010284:	930d      	strlt	r3, [sp, #52]	; 0x34
 8010286:	9b01      	ldr	r3, [sp, #4]
 8010288:	bfb8      	it	lt
 801028a:	2600      	movlt	r6, #0
 801028c:	2b00      	cmp	r3, #0
 801028e:	bfb5      	itete	lt
 8010290:	eba8 0503 	sublt.w	r5, r8, r3
 8010294:	9b01      	ldrge	r3, [sp, #4]
 8010296:	2300      	movlt	r3, #0
 8010298:	4645      	movge	r5, r8
 801029a:	e747      	b.n	801012c <_dtoa_r+0x75c>
 801029c:	9e06      	ldr	r6, [sp, #24]
 801029e:	9f08      	ldr	r7, [sp, #32]
 80102a0:	4645      	mov	r5, r8
 80102a2:	e74c      	b.n	801013e <_dtoa_r+0x76e>
 80102a4:	9a06      	ldr	r2, [sp, #24]
 80102a6:	e775      	b.n	8010194 <_dtoa_r+0x7c4>
 80102a8:	9b05      	ldr	r3, [sp, #20]
 80102aa:	2b01      	cmp	r3, #1
 80102ac:	dc18      	bgt.n	80102e0 <_dtoa_r+0x910>
 80102ae:	9b02      	ldr	r3, [sp, #8]
 80102b0:	b9b3      	cbnz	r3, 80102e0 <_dtoa_r+0x910>
 80102b2:	9b03      	ldr	r3, [sp, #12]
 80102b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80102b8:	b9a3      	cbnz	r3, 80102e4 <_dtoa_r+0x914>
 80102ba:	9b03      	ldr	r3, [sp, #12]
 80102bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80102c0:	0d1b      	lsrs	r3, r3, #20
 80102c2:	051b      	lsls	r3, r3, #20
 80102c4:	b12b      	cbz	r3, 80102d2 <_dtoa_r+0x902>
 80102c6:	9b04      	ldr	r3, [sp, #16]
 80102c8:	3301      	adds	r3, #1
 80102ca:	9304      	str	r3, [sp, #16]
 80102cc:	f108 0801 	add.w	r8, r8, #1
 80102d0:	2301      	movs	r3, #1
 80102d2:	9306      	str	r3, [sp, #24]
 80102d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	f47f af74 	bne.w	80101c4 <_dtoa_r+0x7f4>
 80102dc:	2001      	movs	r0, #1
 80102de:	e779      	b.n	80101d4 <_dtoa_r+0x804>
 80102e0:	2300      	movs	r3, #0
 80102e2:	e7f6      	b.n	80102d2 <_dtoa_r+0x902>
 80102e4:	9b02      	ldr	r3, [sp, #8]
 80102e6:	e7f4      	b.n	80102d2 <_dtoa_r+0x902>
 80102e8:	d085      	beq.n	80101f6 <_dtoa_r+0x826>
 80102ea:	4618      	mov	r0, r3
 80102ec:	301c      	adds	r0, #28
 80102ee:	e77d      	b.n	80101ec <_dtoa_r+0x81c>
 80102f0:	40240000 	.word	0x40240000
 80102f4:	9b01      	ldr	r3, [sp, #4]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	dc38      	bgt.n	801036c <_dtoa_r+0x99c>
 80102fa:	9b05      	ldr	r3, [sp, #20]
 80102fc:	2b02      	cmp	r3, #2
 80102fe:	dd35      	ble.n	801036c <_dtoa_r+0x99c>
 8010300:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010304:	f1b9 0f00 	cmp.w	r9, #0
 8010308:	d10d      	bne.n	8010326 <_dtoa_r+0x956>
 801030a:	4631      	mov	r1, r6
 801030c:	464b      	mov	r3, r9
 801030e:	2205      	movs	r2, #5
 8010310:	4620      	mov	r0, r4
 8010312:	f000 ff7b 	bl	801120c <__multadd>
 8010316:	4601      	mov	r1, r0
 8010318:	4606      	mov	r6, r0
 801031a:	4658      	mov	r0, fp
 801031c:	f001 f9dc 	bl	80116d8 <__mcmp>
 8010320:	2800      	cmp	r0, #0
 8010322:	f73f adbd 	bgt.w	800fea0 <_dtoa_r+0x4d0>
 8010326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010328:	9d00      	ldr	r5, [sp, #0]
 801032a:	ea6f 0a03 	mvn.w	sl, r3
 801032e:	f04f 0800 	mov.w	r8, #0
 8010332:	4631      	mov	r1, r6
 8010334:	4620      	mov	r0, r4
 8010336:	f000 ff47 	bl	80111c8 <_Bfree>
 801033a:	2f00      	cmp	r7, #0
 801033c:	f43f aeb4 	beq.w	80100a8 <_dtoa_r+0x6d8>
 8010340:	f1b8 0f00 	cmp.w	r8, #0
 8010344:	d005      	beq.n	8010352 <_dtoa_r+0x982>
 8010346:	45b8      	cmp	r8, r7
 8010348:	d003      	beq.n	8010352 <_dtoa_r+0x982>
 801034a:	4641      	mov	r1, r8
 801034c:	4620      	mov	r0, r4
 801034e:	f000 ff3b 	bl	80111c8 <_Bfree>
 8010352:	4639      	mov	r1, r7
 8010354:	4620      	mov	r0, r4
 8010356:	f000 ff37 	bl	80111c8 <_Bfree>
 801035a:	e6a5      	b.n	80100a8 <_dtoa_r+0x6d8>
 801035c:	2600      	movs	r6, #0
 801035e:	4637      	mov	r7, r6
 8010360:	e7e1      	b.n	8010326 <_dtoa_r+0x956>
 8010362:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8010364:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8010368:	4637      	mov	r7, r6
 801036a:	e599      	b.n	800fea0 <_dtoa_r+0x4d0>
 801036c:	9b08      	ldr	r3, [sp, #32]
 801036e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8010372:	2b00      	cmp	r3, #0
 8010374:	f000 80fd 	beq.w	8010572 <_dtoa_r+0xba2>
 8010378:	2d00      	cmp	r5, #0
 801037a:	dd05      	ble.n	8010388 <_dtoa_r+0x9b8>
 801037c:	4639      	mov	r1, r7
 801037e:	462a      	mov	r2, r5
 8010380:	4620      	mov	r0, r4
 8010382:	f001 f93d 	bl	8011600 <__lshift>
 8010386:	4607      	mov	r7, r0
 8010388:	9b06      	ldr	r3, [sp, #24]
 801038a:	2b00      	cmp	r3, #0
 801038c:	d05c      	beq.n	8010448 <_dtoa_r+0xa78>
 801038e:	6879      	ldr	r1, [r7, #4]
 8010390:	4620      	mov	r0, r4
 8010392:	f000 fed9 	bl	8011148 <_Balloc>
 8010396:	4605      	mov	r5, r0
 8010398:	b928      	cbnz	r0, 80103a6 <_dtoa_r+0x9d6>
 801039a:	4b80      	ldr	r3, [pc, #512]	; (801059c <_dtoa_r+0xbcc>)
 801039c:	4602      	mov	r2, r0
 801039e:	f240 21ea 	movw	r1, #746	; 0x2ea
 80103a2:	f7ff bb2e 	b.w	800fa02 <_dtoa_r+0x32>
 80103a6:	693a      	ldr	r2, [r7, #16]
 80103a8:	3202      	adds	r2, #2
 80103aa:	0092      	lsls	r2, r2, #2
 80103ac:	f107 010c 	add.w	r1, r7, #12
 80103b0:	300c      	adds	r0, #12
 80103b2:	f000 feaf 	bl	8011114 <memcpy>
 80103b6:	2201      	movs	r2, #1
 80103b8:	4629      	mov	r1, r5
 80103ba:	4620      	mov	r0, r4
 80103bc:	f001 f920 	bl	8011600 <__lshift>
 80103c0:	9b00      	ldr	r3, [sp, #0]
 80103c2:	3301      	adds	r3, #1
 80103c4:	9301      	str	r3, [sp, #4]
 80103c6:	9b00      	ldr	r3, [sp, #0]
 80103c8:	444b      	add	r3, r9
 80103ca:	9307      	str	r3, [sp, #28]
 80103cc:	9b02      	ldr	r3, [sp, #8]
 80103ce:	f003 0301 	and.w	r3, r3, #1
 80103d2:	46b8      	mov	r8, r7
 80103d4:	9306      	str	r3, [sp, #24]
 80103d6:	4607      	mov	r7, r0
 80103d8:	9b01      	ldr	r3, [sp, #4]
 80103da:	4631      	mov	r1, r6
 80103dc:	3b01      	subs	r3, #1
 80103de:	4658      	mov	r0, fp
 80103e0:	9302      	str	r3, [sp, #8]
 80103e2:	f7ff fa67 	bl	800f8b4 <quorem>
 80103e6:	4603      	mov	r3, r0
 80103e8:	3330      	adds	r3, #48	; 0x30
 80103ea:	9004      	str	r0, [sp, #16]
 80103ec:	4641      	mov	r1, r8
 80103ee:	4658      	mov	r0, fp
 80103f0:	9308      	str	r3, [sp, #32]
 80103f2:	f001 f971 	bl	80116d8 <__mcmp>
 80103f6:	463a      	mov	r2, r7
 80103f8:	4681      	mov	r9, r0
 80103fa:	4631      	mov	r1, r6
 80103fc:	4620      	mov	r0, r4
 80103fe:	f001 f987 	bl	8011710 <__mdiff>
 8010402:	68c2      	ldr	r2, [r0, #12]
 8010404:	9b08      	ldr	r3, [sp, #32]
 8010406:	4605      	mov	r5, r0
 8010408:	bb02      	cbnz	r2, 801044c <_dtoa_r+0xa7c>
 801040a:	4601      	mov	r1, r0
 801040c:	4658      	mov	r0, fp
 801040e:	f001 f963 	bl	80116d8 <__mcmp>
 8010412:	9b08      	ldr	r3, [sp, #32]
 8010414:	4602      	mov	r2, r0
 8010416:	4629      	mov	r1, r5
 8010418:	4620      	mov	r0, r4
 801041a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801041e:	f000 fed3 	bl	80111c8 <_Bfree>
 8010422:	9b05      	ldr	r3, [sp, #20]
 8010424:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010426:	9d01      	ldr	r5, [sp, #4]
 8010428:	ea43 0102 	orr.w	r1, r3, r2
 801042c:	9b06      	ldr	r3, [sp, #24]
 801042e:	430b      	orrs	r3, r1
 8010430:	9b08      	ldr	r3, [sp, #32]
 8010432:	d10d      	bne.n	8010450 <_dtoa_r+0xa80>
 8010434:	2b39      	cmp	r3, #57	; 0x39
 8010436:	d029      	beq.n	801048c <_dtoa_r+0xabc>
 8010438:	f1b9 0f00 	cmp.w	r9, #0
 801043c:	dd01      	ble.n	8010442 <_dtoa_r+0xa72>
 801043e:	9b04      	ldr	r3, [sp, #16]
 8010440:	3331      	adds	r3, #49	; 0x31
 8010442:	9a02      	ldr	r2, [sp, #8]
 8010444:	7013      	strb	r3, [r2, #0]
 8010446:	e774      	b.n	8010332 <_dtoa_r+0x962>
 8010448:	4638      	mov	r0, r7
 801044a:	e7b9      	b.n	80103c0 <_dtoa_r+0x9f0>
 801044c:	2201      	movs	r2, #1
 801044e:	e7e2      	b.n	8010416 <_dtoa_r+0xa46>
 8010450:	f1b9 0f00 	cmp.w	r9, #0
 8010454:	db06      	blt.n	8010464 <_dtoa_r+0xa94>
 8010456:	9905      	ldr	r1, [sp, #20]
 8010458:	ea41 0909 	orr.w	r9, r1, r9
 801045c:	9906      	ldr	r1, [sp, #24]
 801045e:	ea59 0101 	orrs.w	r1, r9, r1
 8010462:	d120      	bne.n	80104a6 <_dtoa_r+0xad6>
 8010464:	2a00      	cmp	r2, #0
 8010466:	ddec      	ble.n	8010442 <_dtoa_r+0xa72>
 8010468:	4659      	mov	r1, fp
 801046a:	2201      	movs	r2, #1
 801046c:	4620      	mov	r0, r4
 801046e:	9301      	str	r3, [sp, #4]
 8010470:	f001 f8c6 	bl	8011600 <__lshift>
 8010474:	4631      	mov	r1, r6
 8010476:	4683      	mov	fp, r0
 8010478:	f001 f92e 	bl	80116d8 <__mcmp>
 801047c:	2800      	cmp	r0, #0
 801047e:	9b01      	ldr	r3, [sp, #4]
 8010480:	dc02      	bgt.n	8010488 <_dtoa_r+0xab8>
 8010482:	d1de      	bne.n	8010442 <_dtoa_r+0xa72>
 8010484:	07da      	lsls	r2, r3, #31
 8010486:	d5dc      	bpl.n	8010442 <_dtoa_r+0xa72>
 8010488:	2b39      	cmp	r3, #57	; 0x39
 801048a:	d1d8      	bne.n	801043e <_dtoa_r+0xa6e>
 801048c:	9a02      	ldr	r2, [sp, #8]
 801048e:	2339      	movs	r3, #57	; 0x39
 8010490:	7013      	strb	r3, [r2, #0]
 8010492:	462b      	mov	r3, r5
 8010494:	461d      	mov	r5, r3
 8010496:	3b01      	subs	r3, #1
 8010498:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801049c:	2a39      	cmp	r2, #57	; 0x39
 801049e:	d050      	beq.n	8010542 <_dtoa_r+0xb72>
 80104a0:	3201      	adds	r2, #1
 80104a2:	701a      	strb	r2, [r3, #0]
 80104a4:	e745      	b.n	8010332 <_dtoa_r+0x962>
 80104a6:	2a00      	cmp	r2, #0
 80104a8:	dd03      	ble.n	80104b2 <_dtoa_r+0xae2>
 80104aa:	2b39      	cmp	r3, #57	; 0x39
 80104ac:	d0ee      	beq.n	801048c <_dtoa_r+0xabc>
 80104ae:	3301      	adds	r3, #1
 80104b0:	e7c7      	b.n	8010442 <_dtoa_r+0xa72>
 80104b2:	9a01      	ldr	r2, [sp, #4]
 80104b4:	9907      	ldr	r1, [sp, #28]
 80104b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80104ba:	428a      	cmp	r2, r1
 80104bc:	d02a      	beq.n	8010514 <_dtoa_r+0xb44>
 80104be:	4659      	mov	r1, fp
 80104c0:	2300      	movs	r3, #0
 80104c2:	220a      	movs	r2, #10
 80104c4:	4620      	mov	r0, r4
 80104c6:	f000 fea1 	bl	801120c <__multadd>
 80104ca:	45b8      	cmp	r8, r7
 80104cc:	4683      	mov	fp, r0
 80104ce:	f04f 0300 	mov.w	r3, #0
 80104d2:	f04f 020a 	mov.w	r2, #10
 80104d6:	4641      	mov	r1, r8
 80104d8:	4620      	mov	r0, r4
 80104da:	d107      	bne.n	80104ec <_dtoa_r+0xb1c>
 80104dc:	f000 fe96 	bl	801120c <__multadd>
 80104e0:	4680      	mov	r8, r0
 80104e2:	4607      	mov	r7, r0
 80104e4:	9b01      	ldr	r3, [sp, #4]
 80104e6:	3301      	adds	r3, #1
 80104e8:	9301      	str	r3, [sp, #4]
 80104ea:	e775      	b.n	80103d8 <_dtoa_r+0xa08>
 80104ec:	f000 fe8e 	bl	801120c <__multadd>
 80104f0:	4639      	mov	r1, r7
 80104f2:	4680      	mov	r8, r0
 80104f4:	2300      	movs	r3, #0
 80104f6:	220a      	movs	r2, #10
 80104f8:	4620      	mov	r0, r4
 80104fa:	f000 fe87 	bl	801120c <__multadd>
 80104fe:	4607      	mov	r7, r0
 8010500:	e7f0      	b.n	80104e4 <_dtoa_r+0xb14>
 8010502:	f1b9 0f00 	cmp.w	r9, #0
 8010506:	9a00      	ldr	r2, [sp, #0]
 8010508:	bfcc      	ite	gt
 801050a:	464d      	movgt	r5, r9
 801050c:	2501      	movle	r5, #1
 801050e:	4415      	add	r5, r2
 8010510:	f04f 0800 	mov.w	r8, #0
 8010514:	4659      	mov	r1, fp
 8010516:	2201      	movs	r2, #1
 8010518:	4620      	mov	r0, r4
 801051a:	9301      	str	r3, [sp, #4]
 801051c:	f001 f870 	bl	8011600 <__lshift>
 8010520:	4631      	mov	r1, r6
 8010522:	4683      	mov	fp, r0
 8010524:	f001 f8d8 	bl	80116d8 <__mcmp>
 8010528:	2800      	cmp	r0, #0
 801052a:	dcb2      	bgt.n	8010492 <_dtoa_r+0xac2>
 801052c:	d102      	bne.n	8010534 <_dtoa_r+0xb64>
 801052e:	9b01      	ldr	r3, [sp, #4]
 8010530:	07db      	lsls	r3, r3, #31
 8010532:	d4ae      	bmi.n	8010492 <_dtoa_r+0xac2>
 8010534:	462b      	mov	r3, r5
 8010536:	461d      	mov	r5, r3
 8010538:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801053c:	2a30      	cmp	r2, #48	; 0x30
 801053e:	d0fa      	beq.n	8010536 <_dtoa_r+0xb66>
 8010540:	e6f7      	b.n	8010332 <_dtoa_r+0x962>
 8010542:	9a00      	ldr	r2, [sp, #0]
 8010544:	429a      	cmp	r2, r3
 8010546:	d1a5      	bne.n	8010494 <_dtoa_r+0xac4>
 8010548:	f10a 0a01 	add.w	sl, sl, #1
 801054c:	2331      	movs	r3, #49	; 0x31
 801054e:	e779      	b.n	8010444 <_dtoa_r+0xa74>
 8010550:	4b13      	ldr	r3, [pc, #76]	; (80105a0 <_dtoa_r+0xbd0>)
 8010552:	f7ff baaf 	b.w	800fab4 <_dtoa_r+0xe4>
 8010556:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8010558:	2b00      	cmp	r3, #0
 801055a:	f47f aa86 	bne.w	800fa6a <_dtoa_r+0x9a>
 801055e:	4b11      	ldr	r3, [pc, #68]	; (80105a4 <_dtoa_r+0xbd4>)
 8010560:	f7ff baa8 	b.w	800fab4 <_dtoa_r+0xe4>
 8010564:	f1b9 0f00 	cmp.w	r9, #0
 8010568:	dc03      	bgt.n	8010572 <_dtoa_r+0xba2>
 801056a:	9b05      	ldr	r3, [sp, #20]
 801056c:	2b02      	cmp	r3, #2
 801056e:	f73f aec9 	bgt.w	8010304 <_dtoa_r+0x934>
 8010572:	9d00      	ldr	r5, [sp, #0]
 8010574:	4631      	mov	r1, r6
 8010576:	4658      	mov	r0, fp
 8010578:	f7ff f99c 	bl	800f8b4 <quorem>
 801057c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8010580:	f805 3b01 	strb.w	r3, [r5], #1
 8010584:	9a00      	ldr	r2, [sp, #0]
 8010586:	1aaa      	subs	r2, r5, r2
 8010588:	4591      	cmp	r9, r2
 801058a:	ddba      	ble.n	8010502 <_dtoa_r+0xb32>
 801058c:	4659      	mov	r1, fp
 801058e:	2300      	movs	r3, #0
 8010590:	220a      	movs	r2, #10
 8010592:	4620      	mov	r0, r4
 8010594:	f000 fe3a 	bl	801120c <__multadd>
 8010598:	4683      	mov	fp, r0
 801059a:	e7eb      	b.n	8010574 <_dtoa_r+0xba4>
 801059c:	08013bc9 	.word	0x08013bc9
 80105a0:	08013928 	.word	0x08013928
 80105a4:	08013b5d 	.word	0x08013b5d

080105a8 <__sflush_r>:
 80105a8:	898a      	ldrh	r2, [r1, #12]
 80105aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105ae:	4605      	mov	r5, r0
 80105b0:	0710      	lsls	r0, r2, #28
 80105b2:	460c      	mov	r4, r1
 80105b4:	d458      	bmi.n	8010668 <__sflush_r+0xc0>
 80105b6:	684b      	ldr	r3, [r1, #4]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	dc05      	bgt.n	80105c8 <__sflush_r+0x20>
 80105bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80105be:	2b00      	cmp	r3, #0
 80105c0:	dc02      	bgt.n	80105c8 <__sflush_r+0x20>
 80105c2:	2000      	movs	r0, #0
 80105c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80105c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80105ca:	2e00      	cmp	r6, #0
 80105cc:	d0f9      	beq.n	80105c2 <__sflush_r+0x1a>
 80105ce:	2300      	movs	r3, #0
 80105d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80105d4:	682f      	ldr	r7, [r5, #0]
 80105d6:	602b      	str	r3, [r5, #0]
 80105d8:	d032      	beq.n	8010640 <__sflush_r+0x98>
 80105da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80105dc:	89a3      	ldrh	r3, [r4, #12]
 80105de:	075a      	lsls	r2, r3, #29
 80105e0:	d505      	bpl.n	80105ee <__sflush_r+0x46>
 80105e2:	6863      	ldr	r3, [r4, #4]
 80105e4:	1ac0      	subs	r0, r0, r3
 80105e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80105e8:	b10b      	cbz	r3, 80105ee <__sflush_r+0x46>
 80105ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80105ec:	1ac0      	subs	r0, r0, r3
 80105ee:	2300      	movs	r3, #0
 80105f0:	4602      	mov	r2, r0
 80105f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80105f4:	6a21      	ldr	r1, [r4, #32]
 80105f6:	4628      	mov	r0, r5
 80105f8:	47b0      	blx	r6
 80105fa:	1c43      	adds	r3, r0, #1
 80105fc:	89a3      	ldrh	r3, [r4, #12]
 80105fe:	d106      	bne.n	801060e <__sflush_r+0x66>
 8010600:	6829      	ldr	r1, [r5, #0]
 8010602:	291d      	cmp	r1, #29
 8010604:	d82c      	bhi.n	8010660 <__sflush_r+0xb8>
 8010606:	4a2a      	ldr	r2, [pc, #168]	; (80106b0 <__sflush_r+0x108>)
 8010608:	40ca      	lsrs	r2, r1
 801060a:	07d6      	lsls	r6, r2, #31
 801060c:	d528      	bpl.n	8010660 <__sflush_r+0xb8>
 801060e:	2200      	movs	r2, #0
 8010610:	6062      	str	r2, [r4, #4]
 8010612:	04d9      	lsls	r1, r3, #19
 8010614:	6922      	ldr	r2, [r4, #16]
 8010616:	6022      	str	r2, [r4, #0]
 8010618:	d504      	bpl.n	8010624 <__sflush_r+0x7c>
 801061a:	1c42      	adds	r2, r0, #1
 801061c:	d101      	bne.n	8010622 <__sflush_r+0x7a>
 801061e:	682b      	ldr	r3, [r5, #0]
 8010620:	b903      	cbnz	r3, 8010624 <__sflush_r+0x7c>
 8010622:	6560      	str	r0, [r4, #84]	; 0x54
 8010624:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010626:	602f      	str	r7, [r5, #0]
 8010628:	2900      	cmp	r1, #0
 801062a:	d0ca      	beq.n	80105c2 <__sflush_r+0x1a>
 801062c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010630:	4299      	cmp	r1, r3
 8010632:	d002      	beq.n	801063a <__sflush_r+0x92>
 8010634:	4628      	mov	r0, r5
 8010636:	f7fd f947 	bl	800d8c8 <_free_r>
 801063a:	2000      	movs	r0, #0
 801063c:	6360      	str	r0, [r4, #52]	; 0x34
 801063e:	e7c1      	b.n	80105c4 <__sflush_r+0x1c>
 8010640:	6a21      	ldr	r1, [r4, #32]
 8010642:	2301      	movs	r3, #1
 8010644:	4628      	mov	r0, r5
 8010646:	47b0      	blx	r6
 8010648:	1c41      	adds	r1, r0, #1
 801064a:	d1c7      	bne.n	80105dc <__sflush_r+0x34>
 801064c:	682b      	ldr	r3, [r5, #0]
 801064e:	2b00      	cmp	r3, #0
 8010650:	d0c4      	beq.n	80105dc <__sflush_r+0x34>
 8010652:	2b1d      	cmp	r3, #29
 8010654:	d001      	beq.n	801065a <__sflush_r+0xb2>
 8010656:	2b16      	cmp	r3, #22
 8010658:	d101      	bne.n	801065e <__sflush_r+0xb6>
 801065a:	602f      	str	r7, [r5, #0]
 801065c:	e7b1      	b.n	80105c2 <__sflush_r+0x1a>
 801065e:	89a3      	ldrh	r3, [r4, #12]
 8010660:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010664:	81a3      	strh	r3, [r4, #12]
 8010666:	e7ad      	b.n	80105c4 <__sflush_r+0x1c>
 8010668:	690f      	ldr	r7, [r1, #16]
 801066a:	2f00      	cmp	r7, #0
 801066c:	d0a9      	beq.n	80105c2 <__sflush_r+0x1a>
 801066e:	0793      	lsls	r3, r2, #30
 8010670:	680e      	ldr	r6, [r1, #0]
 8010672:	bf08      	it	eq
 8010674:	694b      	ldreq	r3, [r1, #20]
 8010676:	600f      	str	r7, [r1, #0]
 8010678:	bf18      	it	ne
 801067a:	2300      	movne	r3, #0
 801067c:	eba6 0807 	sub.w	r8, r6, r7
 8010680:	608b      	str	r3, [r1, #8]
 8010682:	f1b8 0f00 	cmp.w	r8, #0
 8010686:	dd9c      	ble.n	80105c2 <__sflush_r+0x1a>
 8010688:	6a21      	ldr	r1, [r4, #32]
 801068a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801068c:	4643      	mov	r3, r8
 801068e:	463a      	mov	r2, r7
 8010690:	4628      	mov	r0, r5
 8010692:	47b0      	blx	r6
 8010694:	2800      	cmp	r0, #0
 8010696:	dc06      	bgt.n	80106a6 <__sflush_r+0xfe>
 8010698:	89a3      	ldrh	r3, [r4, #12]
 801069a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801069e:	81a3      	strh	r3, [r4, #12]
 80106a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80106a4:	e78e      	b.n	80105c4 <__sflush_r+0x1c>
 80106a6:	4407      	add	r7, r0
 80106a8:	eba8 0800 	sub.w	r8, r8, r0
 80106ac:	e7e9      	b.n	8010682 <__sflush_r+0xda>
 80106ae:	bf00      	nop
 80106b0:	20400001 	.word	0x20400001

080106b4 <_fflush_r>:
 80106b4:	b538      	push	{r3, r4, r5, lr}
 80106b6:	690b      	ldr	r3, [r1, #16]
 80106b8:	4605      	mov	r5, r0
 80106ba:	460c      	mov	r4, r1
 80106bc:	b913      	cbnz	r3, 80106c4 <_fflush_r+0x10>
 80106be:	2500      	movs	r5, #0
 80106c0:	4628      	mov	r0, r5
 80106c2:	bd38      	pop	{r3, r4, r5, pc}
 80106c4:	b118      	cbz	r0, 80106ce <_fflush_r+0x1a>
 80106c6:	6983      	ldr	r3, [r0, #24]
 80106c8:	b90b      	cbnz	r3, 80106ce <_fflush_r+0x1a>
 80106ca:	f000 f887 	bl	80107dc <__sinit>
 80106ce:	4b14      	ldr	r3, [pc, #80]	; (8010720 <_fflush_r+0x6c>)
 80106d0:	429c      	cmp	r4, r3
 80106d2:	d11b      	bne.n	801070c <_fflush_r+0x58>
 80106d4:	686c      	ldr	r4, [r5, #4]
 80106d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d0ef      	beq.n	80106be <_fflush_r+0xa>
 80106de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80106e0:	07d0      	lsls	r0, r2, #31
 80106e2:	d404      	bmi.n	80106ee <_fflush_r+0x3a>
 80106e4:	0599      	lsls	r1, r3, #22
 80106e6:	d402      	bmi.n	80106ee <_fflush_r+0x3a>
 80106e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80106ea:	f000 fc9a 	bl	8011022 <__retarget_lock_acquire_recursive>
 80106ee:	4628      	mov	r0, r5
 80106f0:	4621      	mov	r1, r4
 80106f2:	f7ff ff59 	bl	80105a8 <__sflush_r>
 80106f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80106f8:	07da      	lsls	r2, r3, #31
 80106fa:	4605      	mov	r5, r0
 80106fc:	d4e0      	bmi.n	80106c0 <_fflush_r+0xc>
 80106fe:	89a3      	ldrh	r3, [r4, #12]
 8010700:	059b      	lsls	r3, r3, #22
 8010702:	d4dd      	bmi.n	80106c0 <_fflush_r+0xc>
 8010704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010706:	f000 fc8d 	bl	8011024 <__retarget_lock_release_recursive>
 801070a:	e7d9      	b.n	80106c0 <_fflush_r+0xc>
 801070c:	4b05      	ldr	r3, [pc, #20]	; (8010724 <_fflush_r+0x70>)
 801070e:	429c      	cmp	r4, r3
 8010710:	d101      	bne.n	8010716 <_fflush_r+0x62>
 8010712:	68ac      	ldr	r4, [r5, #8]
 8010714:	e7df      	b.n	80106d6 <_fflush_r+0x22>
 8010716:	4b04      	ldr	r3, [pc, #16]	; (8010728 <_fflush_r+0x74>)
 8010718:	429c      	cmp	r4, r3
 801071a:	bf08      	it	eq
 801071c:	68ec      	ldreq	r4, [r5, #12]
 801071e:	e7da      	b.n	80106d6 <_fflush_r+0x22>
 8010720:	08013bfc 	.word	0x08013bfc
 8010724:	08013c1c 	.word	0x08013c1c
 8010728:	08013bdc 	.word	0x08013bdc

0801072c <std>:
 801072c:	2300      	movs	r3, #0
 801072e:	b510      	push	{r4, lr}
 8010730:	4604      	mov	r4, r0
 8010732:	e9c0 3300 	strd	r3, r3, [r0]
 8010736:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801073a:	6083      	str	r3, [r0, #8]
 801073c:	8181      	strh	r1, [r0, #12]
 801073e:	6643      	str	r3, [r0, #100]	; 0x64
 8010740:	81c2      	strh	r2, [r0, #14]
 8010742:	6183      	str	r3, [r0, #24]
 8010744:	4619      	mov	r1, r3
 8010746:	2208      	movs	r2, #8
 8010748:	305c      	adds	r0, #92	; 0x5c
 801074a:	f7fd f8b5 	bl	800d8b8 <memset>
 801074e:	4b05      	ldr	r3, [pc, #20]	; (8010764 <std+0x38>)
 8010750:	6263      	str	r3, [r4, #36]	; 0x24
 8010752:	4b05      	ldr	r3, [pc, #20]	; (8010768 <std+0x3c>)
 8010754:	62a3      	str	r3, [r4, #40]	; 0x28
 8010756:	4b05      	ldr	r3, [pc, #20]	; (801076c <std+0x40>)
 8010758:	62e3      	str	r3, [r4, #44]	; 0x2c
 801075a:	4b05      	ldr	r3, [pc, #20]	; (8010770 <std+0x44>)
 801075c:	6224      	str	r4, [r4, #32]
 801075e:	6323      	str	r3, [r4, #48]	; 0x30
 8010760:	bd10      	pop	{r4, pc}
 8010762:	bf00      	nop
 8010764:	08012059 	.word	0x08012059
 8010768:	0801207b 	.word	0x0801207b
 801076c:	080120b3 	.word	0x080120b3
 8010770:	080120d7 	.word	0x080120d7

08010774 <_cleanup_r>:
 8010774:	4901      	ldr	r1, [pc, #4]	; (801077c <_cleanup_r+0x8>)
 8010776:	f000 b8c1 	b.w	80108fc <_fwalk_reent>
 801077a:	bf00      	nop
 801077c:	080106b5 	.word	0x080106b5

08010780 <__sfmoreglue>:
 8010780:	b570      	push	{r4, r5, r6, lr}
 8010782:	1e4a      	subs	r2, r1, #1
 8010784:	2568      	movs	r5, #104	; 0x68
 8010786:	4355      	muls	r5, r2
 8010788:	460e      	mov	r6, r1
 801078a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801078e:	f7fd f8eb 	bl	800d968 <_malloc_r>
 8010792:	4604      	mov	r4, r0
 8010794:	b140      	cbz	r0, 80107a8 <__sfmoreglue+0x28>
 8010796:	2100      	movs	r1, #0
 8010798:	e9c0 1600 	strd	r1, r6, [r0]
 801079c:	300c      	adds	r0, #12
 801079e:	60a0      	str	r0, [r4, #8]
 80107a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80107a4:	f7fd f888 	bl	800d8b8 <memset>
 80107a8:	4620      	mov	r0, r4
 80107aa:	bd70      	pop	{r4, r5, r6, pc}

080107ac <__sfp_lock_acquire>:
 80107ac:	4801      	ldr	r0, [pc, #4]	; (80107b4 <__sfp_lock_acquire+0x8>)
 80107ae:	f000 bc38 	b.w	8011022 <__retarget_lock_acquire_recursive>
 80107b2:	bf00      	nop
 80107b4:	20001ae8 	.word	0x20001ae8

080107b8 <__sfp_lock_release>:
 80107b8:	4801      	ldr	r0, [pc, #4]	; (80107c0 <__sfp_lock_release+0x8>)
 80107ba:	f000 bc33 	b.w	8011024 <__retarget_lock_release_recursive>
 80107be:	bf00      	nop
 80107c0:	20001ae8 	.word	0x20001ae8

080107c4 <__sinit_lock_acquire>:
 80107c4:	4801      	ldr	r0, [pc, #4]	; (80107cc <__sinit_lock_acquire+0x8>)
 80107c6:	f000 bc2c 	b.w	8011022 <__retarget_lock_acquire_recursive>
 80107ca:	bf00      	nop
 80107cc:	20001ae3 	.word	0x20001ae3

080107d0 <__sinit_lock_release>:
 80107d0:	4801      	ldr	r0, [pc, #4]	; (80107d8 <__sinit_lock_release+0x8>)
 80107d2:	f000 bc27 	b.w	8011024 <__retarget_lock_release_recursive>
 80107d6:	bf00      	nop
 80107d8:	20001ae3 	.word	0x20001ae3

080107dc <__sinit>:
 80107dc:	b510      	push	{r4, lr}
 80107de:	4604      	mov	r4, r0
 80107e0:	f7ff fff0 	bl	80107c4 <__sinit_lock_acquire>
 80107e4:	69a3      	ldr	r3, [r4, #24]
 80107e6:	b11b      	cbz	r3, 80107f0 <__sinit+0x14>
 80107e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80107ec:	f7ff bff0 	b.w	80107d0 <__sinit_lock_release>
 80107f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80107f4:	6523      	str	r3, [r4, #80]	; 0x50
 80107f6:	4b13      	ldr	r3, [pc, #76]	; (8010844 <__sinit+0x68>)
 80107f8:	4a13      	ldr	r2, [pc, #76]	; (8010848 <__sinit+0x6c>)
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80107fe:	42a3      	cmp	r3, r4
 8010800:	bf04      	itt	eq
 8010802:	2301      	moveq	r3, #1
 8010804:	61a3      	streq	r3, [r4, #24]
 8010806:	4620      	mov	r0, r4
 8010808:	f000 f820 	bl	801084c <__sfp>
 801080c:	6060      	str	r0, [r4, #4]
 801080e:	4620      	mov	r0, r4
 8010810:	f000 f81c 	bl	801084c <__sfp>
 8010814:	60a0      	str	r0, [r4, #8]
 8010816:	4620      	mov	r0, r4
 8010818:	f000 f818 	bl	801084c <__sfp>
 801081c:	2200      	movs	r2, #0
 801081e:	60e0      	str	r0, [r4, #12]
 8010820:	2104      	movs	r1, #4
 8010822:	6860      	ldr	r0, [r4, #4]
 8010824:	f7ff ff82 	bl	801072c <std>
 8010828:	68a0      	ldr	r0, [r4, #8]
 801082a:	2201      	movs	r2, #1
 801082c:	2109      	movs	r1, #9
 801082e:	f7ff ff7d 	bl	801072c <std>
 8010832:	68e0      	ldr	r0, [r4, #12]
 8010834:	2202      	movs	r2, #2
 8010836:	2112      	movs	r1, #18
 8010838:	f7ff ff78 	bl	801072c <std>
 801083c:	2301      	movs	r3, #1
 801083e:	61a3      	str	r3, [r4, #24]
 8010840:	e7d2      	b.n	80107e8 <__sinit+0xc>
 8010842:	bf00      	nop
 8010844:	08013914 	.word	0x08013914
 8010848:	08010775 	.word	0x08010775

0801084c <__sfp>:
 801084c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801084e:	4607      	mov	r7, r0
 8010850:	f7ff ffac 	bl	80107ac <__sfp_lock_acquire>
 8010854:	4b1e      	ldr	r3, [pc, #120]	; (80108d0 <__sfp+0x84>)
 8010856:	681e      	ldr	r6, [r3, #0]
 8010858:	69b3      	ldr	r3, [r6, #24]
 801085a:	b913      	cbnz	r3, 8010862 <__sfp+0x16>
 801085c:	4630      	mov	r0, r6
 801085e:	f7ff ffbd 	bl	80107dc <__sinit>
 8010862:	3648      	adds	r6, #72	; 0x48
 8010864:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010868:	3b01      	subs	r3, #1
 801086a:	d503      	bpl.n	8010874 <__sfp+0x28>
 801086c:	6833      	ldr	r3, [r6, #0]
 801086e:	b30b      	cbz	r3, 80108b4 <__sfp+0x68>
 8010870:	6836      	ldr	r6, [r6, #0]
 8010872:	e7f7      	b.n	8010864 <__sfp+0x18>
 8010874:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010878:	b9d5      	cbnz	r5, 80108b0 <__sfp+0x64>
 801087a:	4b16      	ldr	r3, [pc, #88]	; (80108d4 <__sfp+0x88>)
 801087c:	60e3      	str	r3, [r4, #12]
 801087e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010882:	6665      	str	r5, [r4, #100]	; 0x64
 8010884:	f000 fbcc 	bl	8011020 <__retarget_lock_init_recursive>
 8010888:	f7ff ff96 	bl	80107b8 <__sfp_lock_release>
 801088c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010890:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010894:	6025      	str	r5, [r4, #0]
 8010896:	61a5      	str	r5, [r4, #24]
 8010898:	2208      	movs	r2, #8
 801089a:	4629      	mov	r1, r5
 801089c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80108a0:	f7fd f80a 	bl	800d8b8 <memset>
 80108a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80108a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80108ac:	4620      	mov	r0, r4
 80108ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80108b0:	3468      	adds	r4, #104	; 0x68
 80108b2:	e7d9      	b.n	8010868 <__sfp+0x1c>
 80108b4:	2104      	movs	r1, #4
 80108b6:	4638      	mov	r0, r7
 80108b8:	f7ff ff62 	bl	8010780 <__sfmoreglue>
 80108bc:	4604      	mov	r4, r0
 80108be:	6030      	str	r0, [r6, #0]
 80108c0:	2800      	cmp	r0, #0
 80108c2:	d1d5      	bne.n	8010870 <__sfp+0x24>
 80108c4:	f7ff ff78 	bl	80107b8 <__sfp_lock_release>
 80108c8:	230c      	movs	r3, #12
 80108ca:	603b      	str	r3, [r7, #0]
 80108cc:	e7ee      	b.n	80108ac <__sfp+0x60>
 80108ce:	bf00      	nop
 80108d0:	08013914 	.word	0x08013914
 80108d4:	ffff0001 	.word	0xffff0001

080108d8 <fiprintf>:
 80108d8:	b40e      	push	{r1, r2, r3}
 80108da:	b503      	push	{r0, r1, lr}
 80108dc:	4601      	mov	r1, r0
 80108de:	ab03      	add	r3, sp, #12
 80108e0:	4805      	ldr	r0, [pc, #20]	; (80108f8 <fiprintf+0x20>)
 80108e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80108e6:	6800      	ldr	r0, [r0, #0]
 80108e8:	9301      	str	r3, [sp, #4]
 80108ea:	f001 fa7d 	bl	8011de8 <_vfiprintf_r>
 80108ee:	b002      	add	sp, #8
 80108f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80108f4:	b003      	add	sp, #12
 80108f6:	4770      	bx	lr
 80108f8:	20000044 	.word	0x20000044

080108fc <_fwalk_reent>:
 80108fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010900:	4606      	mov	r6, r0
 8010902:	4688      	mov	r8, r1
 8010904:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010908:	2700      	movs	r7, #0
 801090a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801090e:	f1b9 0901 	subs.w	r9, r9, #1
 8010912:	d505      	bpl.n	8010920 <_fwalk_reent+0x24>
 8010914:	6824      	ldr	r4, [r4, #0]
 8010916:	2c00      	cmp	r4, #0
 8010918:	d1f7      	bne.n	801090a <_fwalk_reent+0xe>
 801091a:	4638      	mov	r0, r7
 801091c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010920:	89ab      	ldrh	r3, [r5, #12]
 8010922:	2b01      	cmp	r3, #1
 8010924:	d907      	bls.n	8010936 <_fwalk_reent+0x3a>
 8010926:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801092a:	3301      	adds	r3, #1
 801092c:	d003      	beq.n	8010936 <_fwalk_reent+0x3a>
 801092e:	4629      	mov	r1, r5
 8010930:	4630      	mov	r0, r6
 8010932:	47c0      	blx	r8
 8010934:	4307      	orrs	r7, r0
 8010936:	3568      	adds	r5, #104	; 0x68
 8010938:	e7e9      	b.n	801090e <_fwalk_reent+0x12>

0801093a <rshift>:
 801093a:	6903      	ldr	r3, [r0, #16]
 801093c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010944:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010948:	f100 0414 	add.w	r4, r0, #20
 801094c:	dd45      	ble.n	80109da <rshift+0xa0>
 801094e:	f011 011f 	ands.w	r1, r1, #31
 8010952:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010956:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801095a:	d10c      	bne.n	8010976 <rshift+0x3c>
 801095c:	f100 0710 	add.w	r7, r0, #16
 8010960:	4629      	mov	r1, r5
 8010962:	42b1      	cmp	r1, r6
 8010964:	d334      	bcc.n	80109d0 <rshift+0x96>
 8010966:	1a9b      	subs	r3, r3, r2
 8010968:	009b      	lsls	r3, r3, #2
 801096a:	1eea      	subs	r2, r5, #3
 801096c:	4296      	cmp	r6, r2
 801096e:	bf38      	it	cc
 8010970:	2300      	movcc	r3, #0
 8010972:	4423      	add	r3, r4
 8010974:	e015      	b.n	80109a2 <rshift+0x68>
 8010976:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801097a:	f1c1 0820 	rsb	r8, r1, #32
 801097e:	40cf      	lsrs	r7, r1
 8010980:	f105 0e04 	add.w	lr, r5, #4
 8010984:	46a1      	mov	r9, r4
 8010986:	4576      	cmp	r6, lr
 8010988:	46f4      	mov	ip, lr
 801098a:	d815      	bhi.n	80109b8 <rshift+0x7e>
 801098c:	1a9b      	subs	r3, r3, r2
 801098e:	009a      	lsls	r2, r3, #2
 8010990:	3a04      	subs	r2, #4
 8010992:	3501      	adds	r5, #1
 8010994:	42ae      	cmp	r6, r5
 8010996:	bf38      	it	cc
 8010998:	2200      	movcc	r2, #0
 801099a:	18a3      	adds	r3, r4, r2
 801099c:	50a7      	str	r7, [r4, r2]
 801099e:	b107      	cbz	r7, 80109a2 <rshift+0x68>
 80109a0:	3304      	adds	r3, #4
 80109a2:	1b1a      	subs	r2, r3, r4
 80109a4:	42a3      	cmp	r3, r4
 80109a6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80109aa:	bf08      	it	eq
 80109ac:	2300      	moveq	r3, #0
 80109ae:	6102      	str	r2, [r0, #16]
 80109b0:	bf08      	it	eq
 80109b2:	6143      	streq	r3, [r0, #20]
 80109b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80109b8:	f8dc c000 	ldr.w	ip, [ip]
 80109bc:	fa0c fc08 	lsl.w	ip, ip, r8
 80109c0:	ea4c 0707 	orr.w	r7, ip, r7
 80109c4:	f849 7b04 	str.w	r7, [r9], #4
 80109c8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80109cc:	40cf      	lsrs	r7, r1
 80109ce:	e7da      	b.n	8010986 <rshift+0x4c>
 80109d0:	f851 cb04 	ldr.w	ip, [r1], #4
 80109d4:	f847 cf04 	str.w	ip, [r7, #4]!
 80109d8:	e7c3      	b.n	8010962 <rshift+0x28>
 80109da:	4623      	mov	r3, r4
 80109dc:	e7e1      	b.n	80109a2 <rshift+0x68>

080109de <__hexdig_fun>:
 80109de:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80109e2:	2b09      	cmp	r3, #9
 80109e4:	d802      	bhi.n	80109ec <__hexdig_fun+0xe>
 80109e6:	3820      	subs	r0, #32
 80109e8:	b2c0      	uxtb	r0, r0
 80109ea:	4770      	bx	lr
 80109ec:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80109f0:	2b05      	cmp	r3, #5
 80109f2:	d801      	bhi.n	80109f8 <__hexdig_fun+0x1a>
 80109f4:	3847      	subs	r0, #71	; 0x47
 80109f6:	e7f7      	b.n	80109e8 <__hexdig_fun+0xa>
 80109f8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80109fc:	2b05      	cmp	r3, #5
 80109fe:	d801      	bhi.n	8010a04 <__hexdig_fun+0x26>
 8010a00:	3827      	subs	r0, #39	; 0x27
 8010a02:	e7f1      	b.n	80109e8 <__hexdig_fun+0xa>
 8010a04:	2000      	movs	r0, #0
 8010a06:	4770      	bx	lr

08010a08 <__gethex>:
 8010a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a0c:	ed2d 8b02 	vpush	{d8}
 8010a10:	b089      	sub	sp, #36	; 0x24
 8010a12:	ee08 0a10 	vmov	s16, r0
 8010a16:	9304      	str	r3, [sp, #16]
 8010a18:	4bbc      	ldr	r3, [pc, #752]	; (8010d0c <__gethex+0x304>)
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	9301      	str	r3, [sp, #4]
 8010a1e:	4618      	mov	r0, r3
 8010a20:	468b      	mov	fp, r1
 8010a22:	4690      	mov	r8, r2
 8010a24:	f7ef fbdc 	bl	80001e0 <strlen>
 8010a28:	9b01      	ldr	r3, [sp, #4]
 8010a2a:	f8db 2000 	ldr.w	r2, [fp]
 8010a2e:	4403      	add	r3, r0
 8010a30:	4682      	mov	sl, r0
 8010a32:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010a36:	9305      	str	r3, [sp, #20]
 8010a38:	1c93      	adds	r3, r2, #2
 8010a3a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010a3e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010a42:	32fe      	adds	r2, #254	; 0xfe
 8010a44:	18d1      	adds	r1, r2, r3
 8010a46:	461f      	mov	r7, r3
 8010a48:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010a4c:	9100      	str	r1, [sp, #0]
 8010a4e:	2830      	cmp	r0, #48	; 0x30
 8010a50:	d0f8      	beq.n	8010a44 <__gethex+0x3c>
 8010a52:	f7ff ffc4 	bl	80109de <__hexdig_fun>
 8010a56:	4604      	mov	r4, r0
 8010a58:	2800      	cmp	r0, #0
 8010a5a:	d13a      	bne.n	8010ad2 <__gethex+0xca>
 8010a5c:	9901      	ldr	r1, [sp, #4]
 8010a5e:	4652      	mov	r2, sl
 8010a60:	4638      	mov	r0, r7
 8010a62:	f001 fb3c 	bl	80120de <strncmp>
 8010a66:	4605      	mov	r5, r0
 8010a68:	2800      	cmp	r0, #0
 8010a6a:	d168      	bne.n	8010b3e <__gethex+0x136>
 8010a6c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010a70:	eb07 060a 	add.w	r6, r7, sl
 8010a74:	f7ff ffb3 	bl	80109de <__hexdig_fun>
 8010a78:	2800      	cmp	r0, #0
 8010a7a:	d062      	beq.n	8010b42 <__gethex+0x13a>
 8010a7c:	4633      	mov	r3, r6
 8010a7e:	7818      	ldrb	r0, [r3, #0]
 8010a80:	2830      	cmp	r0, #48	; 0x30
 8010a82:	461f      	mov	r7, r3
 8010a84:	f103 0301 	add.w	r3, r3, #1
 8010a88:	d0f9      	beq.n	8010a7e <__gethex+0x76>
 8010a8a:	f7ff ffa8 	bl	80109de <__hexdig_fun>
 8010a8e:	2301      	movs	r3, #1
 8010a90:	fab0 f480 	clz	r4, r0
 8010a94:	0964      	lsrs	r4, r4, #5
 8010a96:	4635      	mov	r5, r6
 8010a98:	9300      	str	r3, [sp, #0]
 8010a9a:	463a      	mov	r2, r7
 8010a9c:	4616      	mov	r6, r2
 8010a9e:	3201      	adds	r2, #1
 8010aa0:	7830      	ldrb	r0, [r6, #0]
 8010aa2:	f7ff ff9c 	bl	80109de <__hexdig_fun>
 8010aa6:	2800      	cmp	r0, #0
 8010aa8:	d1f8      	bne.n	8010a9c <__gethex+0x94>
 8010aaa:	9901      	ldr	r1, [sp, #4]
 8010aac:	4652      	mov	r2, sl
 8010aae:	4630      	mov	r0, r6
 8010ab0:	f001 fb15 	bl	80120de <strncmp>
 8010ab4:	b980      	cbnz	r0, 8010ad8 <__gethex+0xd0>
 8010ab6:	b94d      	cbnz	r5, 8010acc <__gethex+0xc4>
 8010ab8:	eb06 050a 	add.w	r5, r6, sl
 8010abc:	462a      	mov	r2, r5
 8010abe:	4616      	mov	r6, r2
 8010ac0:	3201      	adds	r2, #1
 8010ac2:	7830      	ldrb	r0, [r6, #0]
 8010ac4:	f7ff ff8b 	bl	80109de <__hexdig_fun>
 8010ac8:	2800      	cmp	r0, #0
 8010aca:	d1f8      	bne.n	8010abe <__gethex+0xb6>
 8010acc:	1bad      	subs	r5, r5, r6
 8010ace:	00ad      	lsls	r5, r5, #2
 8010ad0:	e004      	b.n	8010adc <__gethex+0xd4>
 8010ad2:	2400      	movs	r4, #0
 8010ad4:	4625      	mov	r5, r4
 8010ad6:	e7e0      	b.n	8010a9a <__gethex+0x92>
 8010ad8:	2d00      	cmp	r5, #0
 8010ada:	d1f7      	bne.n	8010acc <__gethex+0xc4>
 8010adc:	7833      	ldrb	r3, [r6, #0]
 8010ade:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010ae2:	2b50      	cmp	r3, #80	; 0x50
 8010ae4:	d13b      	bne.n	8010b5e <__gethex+0x156>
 8010ae6:	7873      	ldrb	r3, [r6, #1]
 8010ae8:	2b2b      	cmp	r3, #43	; 0x2b
 8010aea:	d02c      	beq.n	8010b46 <__gethex+0x13e>
 8010aec:	2b2d      	cmp	r3, #45	; 0x2d
 8010aee:	d02e      	beq.n	8010b4e <__gethex+0x146>
 8010af0:	1c71      	adds	r1, r6, #1
 8010af2:	f04f 0900 	mov.w	r9, #0
 8010af6:	7808      	ldrb	r0, [r1, #0]
 8010af8:	f7ff ff71 	bl	80109de <__hexdig_fun>
 8010afc:	1e43      	subs	r3, r0, #1
 8010afe:	b2db      	uxtb	r3, r3
 8010b00:	2b18      	cmp	r3, #24
 8010b02:	d82c      	bhi.n	8010b5e <__gethex+0x156>
 8010b04:	f1a0 0210 	sub.w	r2, r0, #16
 8010b08:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010b0c:	f7ff ff67 	bl	80109de <__hexdig_fun>
 8010b10:	1e43      	subs	r3, r0, #1
 8010b12:	b2db      	uxtb	r3, r3
 8010b14:	2b18      	cmp	r3, #24
 8010b16:	d91d      	bls.n	8010b54 <__gethex+0x14c>
 8010b18:	f1b9 0f00 	cmp.w	r9, #0
 8010b1c:	d000      	beq.n	8010b20 <__gethex+0x118>
 8010b1e:	4252      	negs	r2, r2
 8010b20:	4415      	add	r5, r2
 8010b22:	f8cb 1000 	str.w	r1, [fp]
 8010b26:	b1e4      	cbz	r4, 8010b62 <__gethex+0x15a>
 8010b28:	9b00      	ldr	r3, [sp, #0]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	bf14      	ite	ne
 8010b2e:	2700      	movne	r7, #0
 8010b30:	2706      	moveq	r7, #6
 8010b32:	4638      	mov	r0, r7
 8010b34:	b009      	add	sp, #36	; 0x24
 8010b36:	ecbd 8b02 	vpop	{d8}
 8010b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b3e:	463e      	mov	r6, r7
 8010b40:	4625      	mov	r5, r4
 8010b42:	2401      	movs	r4, #1
 8010b44:	e7ca      	b.n	8010adc <__gethex+0xd4>
 8010b46:	f04f 0900 	mov.w	r9, #0
 8010b4a:	1cb1      	adds	r1, r6, #2
 8010b4c:	e7d3      	b.n	8010af6 <__gethex+0xee>
 8010b4e:	f04f 0901 	mov.w	r9, #1
 8010b52:	e7fa      	b.n	8010b4a <__gethex+0x142>
 8010b54:	230a      	movs	r3, #10
 8010b56:	fb03 0202 	mla	r2, r3, r2, r0
 8010b5a:	3a10      	subs	r2, #16
 8010b5c:	e7d4      	b.n	8010b08 <__gethex+0x100>
 8010b5e:	4631      	mov	r1, r6
 8010b60:	e7df      	b.n	8010b22 <__gethex+0x11a>
 8010b62:	1bf3      	subs	r3, r6, r7
 8010b64:	3b01      	subs	r3, #1
 8010b66:	4621      	mov	r1, r4
 8010b68:	2b07      	cmp	r3, #7
 8010b6a:	dc0b      	bgt.n	8010b84 <__gethex+0x17c>
 8010b6c:	ee18 0a10 	vmov	r0, s16
 8010b70:	f000 faea 	bl	8011148 <_Balloc>
 8010b74:	4604      	mov	r4, r0
 8010b76:	b940      	cbnz	r0, 8010b8a <__gethex+0x182>
 8010b78:	4b65      	ldr	r3, [pc, #404]	; (8010d10 <__gethex+0x308>)
 8010b7a:	4602      	mov	r2, r0
 8010b7c:	21de      	movs	r1, #222	; 0xde
 8010b7e:	4865      	ldr	r0, [pc, #404]	; (8010d14 <__gethex+0x30c>)
 8010b80:	f7fe fe7a 	bl	800f878 <__assert_func>
 8010b84:	3101      	adds	r1, #1
 8010b86:	105b      	asrs	r3, r3, #1
 8010b88:	e7ee      	b.n	8010b68 <__gethex+0x160>
 8010b8a:	f100 0914 	add.w	r9, r0, #20
 8010b8e:	f04f 0b00 	mov.w	fp, #0
 8010b92:	f1ca 0301 	rsb	r3, sl, #1
 8010b96:	f8cd 9008 	str.w	r9, [sp, #8]
 8010b9a:	f8cd b000 	str.w	fp, [sp]
 8010b9e:	9306      	str	r3, [sp, #24]
 8010ba0:	42b7      	cmp	r7, r6
 8010ba2:	d340      	bcc.n	8010c26 <__gethex+0x21e>
 8010ba4:	9802      	ldr	r0, [sp, #8]
 8010ba6:	9b00      	ldr	r3, [sp, #0]
 8010ba8:	f840 3b04 	str.w	r3, [r0], #4
 8010bac:	eba0 0009 	sub.w	r0, r0, r9
 8010bb0:	1080      	asrs	r0, r0, #2
 8010bb2:	0146      	lsls	r6, r0, #5
 8010bb4:	6120      	str	r0, [r4, #16]
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	f000 fbbc 	bl	8011334 <__hi0bits>
 8010bbc:	1a30      	subs	r0, r6, r0
 8010bbe:	f8d8 6000 	ldr.w	r6, [r8]
 8010bc2:	42b0      	cmp	r0, r6
 8010bc4:	dd63      	ble.n	8010c8e <__gethex+0x286>
 8010bc6:	1b87      	subs	r7, r0, r6
 8010bc8:	4639      	mov	r1, r7
 8010bca:	4620      	mov	r0, r4
 8010bcc:	f000 ff56 	bl	8011a7c <__any_on>
 8010bd0:	4682      	mov	sl, r0
 8010bd2:	b1a8      	cbz	r0, 8010c00 <__gethex+0x1f8>
 8010bd4:	1e7b      	subs	r3, r7, #1
 8010bd6:	1159      	asrs	r1, r3, #5
 8010bd8:	f003 021f 	and.w	r2, r3, #31
 8010bdc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010be0:	f04f 0a01 	mov.w	sl, #1
 8010be4:	fa0a f202 	lsl.w	r2, sl, r2
 8010be8:	420a      	tst	r2, r1
 8010bea:	d009      	beq.n	8010c00 <__gethex+0x1f8>
 8010bec:	4553      	cmp	r3, sl
 8010bee:	dd05      	ble.n	8010bfc <__gethex+0x1f4>
 8010bf0:	1eb9      	subs	r1, r7, #2
 8010bf2:	4620      	mov	r0, r4
 8010bf4:	f000 ff42 	bl	8011a7c <__any_on>
 8010bf8:	2800      	cmp	r0, #0
 8010bfa:	d145      	bne.n	8010c88 <__gethex+0x280>
 8010bfc:	f04f 0a02 	mov.w	sl, #2
 8010c00:	4639      	mov	r1, r7
 8010c02:	4620      	mov	r0, r4
 8010c04:	f7ff fe99 	bl	801093a <rshift>
 8010c08:	443d      	add	r5, r7
 8010c0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010c0e:	42ab      	cmp	r3, r5
 8010c10:	da4c      	bge.n	8010cac <__gethex+0x2a4>
 8010c12:	ee18 0a10 	vmov	r0, s16
 8010c16:	4621      	mov	r1, r4
 8010c18:	f000 fad6 	bl	80111c8 <_Bfree>
 8010c1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010c1e:	2300      	movs	r3, #0
 8010c20:	6013      	str	r3, [r2, #0]
 8010c22:	27a3      	movs	r7, #163	; 0xa3
 8010c24:	e785      	b.n	8010b32 <__gethex+0x12a>
 8010c26:	1e73      	subs	r3, r6, #1
 8010c28:	9a05      	ldr	r2, [sp, #20]
 8010c2a:	9303      	str	r3, [sp, #12]
 8010c2c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010c30:	4293      	cmp	r3, r2
 8010c32:	d019      	beq.n	8010c68 <__gethex+0x260>
 8010c34:	f1bb 0f20 	cmp.w	fp, #32
 8010c38:	d107      	bne.n	8010c4a <__gethex+0x242>
 8010c3a:	9b02      	ldr	r3, [sp, #8]
 8010c3c:	9a00      	ldr	r2, [sp, #0]
 8010c3e:	f843 2b04 	str.w	r2, [r3], #4
 8010c42:	9302      	str	r3, [sp, #8]
 8010c44:	2300      	movs	r3, #0
 8010c46:	9300      	str	r3, [sp, #0]
 8010c48:	469b      	mov	fp, r3
 8010c4a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010c4e:	f7ff fec6 	bl	80109de <__hexdig_fun>
 8010c52:	9b00      	ldr	r3, [sp, #0]
 8010c54:	f000 000f 	and.w	r0, r0, #15
 8010c58:	fa00 f00b 	lsl.w	r0, r0, fp
 8010c5c:	4303      	orrs	r3, r0
 8010c5e:	9300      	str	r3, [sp, #0]
 8010c60:	f10b 0b04 	add.w	fp, fp, #4
 8010c64:	9b03      	ldr	r3, [sp, #12]
 8010c66:	e00d      	b.n	8010c84 <__gethex+0x27c>
 8010c68:	9b03      	ldr	r3, [sp, #12]
 8010c6a:	9a06      	ldr	r2, [sp, #24]
 8010c6c:	4413      	add	r3, r2
 8010c6e:	42bb      	cmp	r3, r7
 8010c70:	d3e0      	bcc.n	8010c34 <__gethex+0x22c>
 8010c72:	4618      	mov	r0, r3
 8010c74:	9901      	ldr	r1, [sp, #4]
 8010c76:	9307      	str	r3, [sp, #28]
 8010c78:	4652      	mov	r2, sl
 8010c7a:	f001 fa30 	bl	80120de <strncmp>
 8010c7e:	9b07      	ldr	r3, [sp, #28]
 8010c80:	2800      	cmp	r0, #0
 8010c82:	d1d7      	bne.n	8010c34 <__gethex+0x22c>
 8010c84:	461e      	mov	r6, r3
 8010c86:	e78b      	b.n	8010ba0 <__gethex+0x198>
 8010c88:	f04f 0a03 	mov.w	sl, #3
 8010c8c:	e7b8      	b.n	8010c00 <__gethex+0x1f8>
 8010c8e:	da0a      	bge.n	8010ca6 <__gethex+0x29e>
 8010c90:	1a37      	subs	r7, r6, r0
 8010c92:	4621      	mov	r1, r4
 8010c94:	ee18 0a10 	vmov	r0, s16
 8010c98:	463a      	mov	r2, r7
 8010c9a:	f000 fcb1 	bl	8011600 <__lshift>
 8010c9e:	1bed      	subs	r5, r5, r7
 8010ca0:	4604      	mov	r4, r0
 8010ca2:	f100 0914 	add.w	r9, r0, #20
 8010ca6:	f04f 0a00 	mov.w	sl, #0
 8010caa:	e7ae      	b.n	8010c0a <__gethex+0x202>
 8010cac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010cb0:	42a8      	cmp	r0, r5
 8010cb2:	dd72      	ble.n	8010d9a <__gethex+0x392>
 8010cb4:	1b45      	subs	r5, r0, r5
 8010cb6:	42ae      	cmp	r6, r5
 8010cb8:	dc36      	bgt.n	8010d28 <__gethex+0x320>
 8010cba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010cbe:	2b02      	cmp	r3, #2
 8010cc0:	d02a      	beq.n	8010d18 <__gethex+0x310>
 8010cc2:	2b03      	cmp	r3, #3
 8010cc4:	d02c      	beq.n	8010d20 <__gethex+0x318>
 8010cc6:	2b01      	cmp	r3, #1
 8010cc8:	d115      	bne.n	8010cf6 <__gethex+0x2ee>
 8010cca:	42ae      	cmp	r6, r5
 8010ccc:	d113      	bne.n	8010cf6 <__gethex+0x2ee>
 8010cce:	2e01      	cmp	r6, #1
 8010cd0:	d10b      	bne.n	8010cea <__gethex+0x2e2>
 8010cd2:	9a04      	ldr	r2, [sp, #16]
 8010cd4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8010cd8:	6013      	str	r3, [r2, #0]
 8010cda:	2301      	movs	r3, #1
 8010cdc:	6123      	str	r3, [r4, #16]
 8010cde:	f8c9 3000 	str.w	r3, [r9]
 8010ce2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010ce4:	2762      	movs	r7, #98	; 0x62
 8010ce6:	601c      	str	r4, [r3, #0]
 8010ce8:	e723      	b.n	8010b32 <__gethex+0x12a>
 8010cea:	1e71      	subs	r1, r6, #1
 8010cec:	4620      	mov	r0, r4
 8010cee:	f000 fec5 	bl	8011a7c <__any_on>
 8010cf2:	2800      	cmp	r0, #0
 8010cf4:	d1ed      	bne.n	8010cd2 <__gethex+0x2ca>
 8010cf6:	ee18 0a10 	vmov	r0, s16
 8010cfa:	4621      	mov	r1, r4
 8010cfc:	f000 fa64 	bl	80111c8 <_Bfree>
 8010d00:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010d02:	2300      	movs	r3, #0
 8010d04:	6013      	str	r3, [r2, #0]
 8010d06:	2750      	movs	r7, #80	; 0x50
 8010d08:	e713      	b.n	8010b32 <__gethex+0x12a>
 8010d0a:	bf00      	nop
 8010d0c:	08013ca8 	.word	0x08013ca8
 8010d10:	08013bc9 	.word	0x08013bc9
 8010d14:	08013c3c 	.word	0x08013c3c
 8010d18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d1eb      	bne.n	8010cf6 <__gethex+0x2ee>
 8010d1e:	e7d8      	b.n	8010cd2 <__gethex+0x2ca>
 8010d20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d1d5      	bne.n	8010cd2 <__gethex+0x2ca>
 8010d26:	e7e6      	b.n	8010cf6 <__gethex+0x2ee>
 8010d28:	1e6f      	subs	r7, r5, #1
 8010d2a:	f1ba 0f00 	cmp.w	sl, #0
 8010d2e:	d131      	bne.n	8010d94 <__gethex+0x38c>
 8010d30:	b127      	cbz	r7, 8010d3c <__gethex+0x334>
 8010d32:	4639      	mov	r1, r7
 8010d34:	4620      	mov	r0, r4
 8010d36:	f000 fea1 	bl	8011a7c <__any_on>
 8010d3a:	4682      	mov	sl, r0
 8010d3c:	117b      	asrs	r3, r7, #5
 8010d3e:	2101      	movs	r1, #1
 8010d40:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8010d44:	f007 071f 	and.w	r7, r7, #31
 8010d48:	fa01 f707 	lsl.w	r7, r1, r7
 8010d4c:	421f      	tst	r7, r3
 8010d4e:	4629      	mov	r1, r5
 8010d50:	4620      	mov	r0, r4
 8010d52:	bf18      	it	ne
 8010d54:	f04a 0a02 	orrne.w	sl, sl, #2
 8010d58:	1b76      	subs	r6, r6, r5
 8010d5a:	f7ff fdee 	bl	801093a <rshift>
 8010d5e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8010d62:	2702      	movs	r7, #2
 8010d64:	f1ba 0f00 	cmp.w	sl, #0
 8010d68:	d048      	beq.n	8010dfc <__gethex+0x3f4>
 8010d6a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010d6e:	2b02      	cmp	r3, #2
 8010d70:	d015      	beq.n	8010d9e <__gethex+0x396>
 8010d72:	2b03      	cmp	r3, #3
 8010d74:	d017      	beq.n	8010da6 <__gethex+0x39e>
 8010d76:	2b01      	cmp	r3, #1
 8010d78:	d109      	bne.n	8010d8e <__gethex+0x386>
 8010d7a:	f01a 0f02 	tst.w	sl, #2
 8010d7e:	d006      	beq.n	8010d8e <__gethex+0x386>
 8010d80:	f8d9 0000 	ldr.w	r0, [r9]
 8010d84:	ea4a 0a00 	orr.w	sl, sl, r0
 8010d88:	f01a 0f01 	tst.w	sl, #1
 8010d8c:	d10e      	bne.n	8010dac <__gethex+0x3a4>
 8010d8e:	f047 0710 	orr.w	r7, r7, #16
 8010d92:	e033      	b.n	8010dfc <__gethex+0x3f4>
 8010d94:	f04f 0a01 	mov.w	sl, #1
 8010d98:	e7d0      	b.n	8010d3c <__gethex+0x334>
 8010d9a:	2701      	movs	r7, #1
 8010d9c:	e7e2      	b.n	8010d64 <__gethex+0x35c>
 8010d9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010da0:	f1c3 0301 	rsb	r3, r3, #1
 8010da4:	9315      	str	r3, [sp, #84]	; 0x54
 8010da6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d0f0      	beq.n	8010d8e <__gethex+0x386>
 8010dac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8010db0:	f104 0314 	add.w	r3, r4, #20
 8010db4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8010db8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8010dbc:	f04f 0c00 	mov.w	ip, #0
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010dc6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8010dca:	d01c      	beq.n	8010e06 <__gethex+0x3fe>
 8010dcc:	3201      	adds	r2, #1
 8010dce:	6002      	str	r2, [r0, #0]
 8010dd0:	2f02      	cmp	r7, #2
 8010dd2:	f104 0314 	add.w	r3, r4, #20
 8010dd6:	d13f      	bne.n	8010e58 <__gethex+0x450>
 8010dd8:	f8d8 2000 	ldr.w	r2, [r8]
 8010ddc:	3a01      	subs	r2, #1
 8010dde:	42b2      	cmp	r2, r6
 8010de0:	d10a      	bne.n	8010df8 <__gethex+0x3f0>
 8010de2:	1171      	asrs	r1, r6, #5
 8010de4:	2201      	movs	r2, #1
 8010de6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8010dea:	f006 061f 	and.w	r6, r6, #31
 8010dee:	fa02 f606 	lsl.w	r6, r2, r6
 8010df2:	421e      	tst	r6, r3
 8010df4:	bf18      	it	ne
 8010df6:	4617      	movne	r7, r2
 8010df8:	f047 0720 	orr.w	r7, r7, #32
 8010dfc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8010dfe:	601c      	str	r4, [r3, #0]
 8010e00:	9b04      	ldr	r3, [sp, #16]
 8010e02:	601d      	str	r5, [r3, #0]
 8010e04:	e695      	b.n	8010b32 <__gethex+0x12a>
 8010e06:	4299      	cmp	r1, r3
 8010e08:	f843 cc04 	str.w	ip, [r3, #-4]
 8010e0c:	d8d8      	bhi.n	8010dc0 <__gethex+0x3b8>
 8010e0e:	68a3      	ldr	r3, [r4, #8]
 8010e10:	459b      	cmp	fp, r3
 8010e12:	db19      	blt.n	8010e48 <__gethex+0x440>
 8010e14:	6861      	ldr	r1, [r4, #4]
 8010e16:	ee18 0a10 	vmov	r0, s16
 8010e1a:	3101      	adds	r1, #1
 8010e1c:	f000 f994 	bl	8011148 <_Balloc>
 8010e20:	4681      	mov	r9, r0
 8010e22:	b918      	cbnz	r0, 8010e2c <__gethex+0x424>
 8010e24:	4b1a      	ldr	r3, [pc, #104]	; (8010e90 <__gethex+0x488>)
 8010e26:	4602      	mov	r2, r0
 8010e28:	2184      	movs	r1, #132	; 0x84
 8010e2a:	e6a8      	b.n	8010b7e <__gethex+0x176>
 8010e2c:	6922      	ldr	r2, [r4, #16]
 8010e2e:	3202      	adds	r2, #2
 8010e30:	f104 010c 	add.w	r1, r4, #12
 8010e34:	0092      	lsls	r2, r2, #2
 8010e36:	300c      	adds	r0, #12
 8010e38:	f000 f96c 	bl	8011114 <memcpy>
 8010e3c:	4621      	mov	r1, r4
 8010e3e:	ee18 0a10 	vmov	r0, s16
 8010e42:	f000 f9c1 	bl	80111c8 <_Bfree>
 8010e46:	464c      	mov	r4, r9
 8010e48:	6923      	ldr	r3, [r4, #16]
 8010e4a:	1c5a      	adds	r2, r3, #1
 8010e4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010e50:	6122      	str	r2, [r4, #16]
 8010e52:	2201      	movs	r2, #1
 8010e54:	615a      	str	r2, [r3, #20]
 8010e56:	e7bb      	b.n	8010dd0 <__gethex+0x3c8>
 8010e58:	6922      	ldr	r2, [r4, #16]
 8010e5a:	455a      	cmp	r2, fp
 8010e5c:	dd0b      	ble.n	8010e76 <__gethex+0x46e>
 8010e5e:	2101      	movs	r1, #1
 8010e60:	4620      	mov	r0, r4
 8010e62:	f7ff fd6a 	bl	801093a <rshift>
 8010e66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010e6a:	3501      	adds	r5, #1
 8010e6c:	42ab      	cmp	r3, r5
 8010e6e:	f6ff aed0 	blt.w	8010c12 <__gethex+0x20a>
 8010e72:	2701      	movs	r7, #1
 8010e74:	e7c0      	b.n	8010df8 <__gethex+0x3f0>
 8010e76:	f016 061f 	ands.w	r6, r6, #31
 8010e7a:	d0fa      	beq.n	8010e72 <__gethex+0x46a>
 8010e7c:	449a      	add	sl, r3
 8010e7e:	f1c6 0620 	rsb	r6, r6, #32
 8010e82:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8010e86:	f000 fa55 	bl	8011334 <__hi0bits>
 8010e8a:	42b0      	cmp	r0, r6
 8010e8c:	dbe7      	blt.n	8010e5e <__gethex+0x456>
 8010e8e:	e7f0      	b.n	8010e72 <__gethex+0x46a>
 8010e90:	08013bc9 	.word	0x08013bc9

08010e94 <L_shift>:
 8010e94:	f1c2 0208 	rsb	r2, r2, #8
 8010e98:	0092      	lsls	r2, r2, #2
 8010e9a:	b570      	push	{r4, r5, r6, lr}
 8010e9c:	f1c2 0620 	rsb	r6, r2, #32
 8010ea0:	6843      	ldr	r3, [r0, #4]
 8010ea2:	6804      	ldr	r4, [r0, #0]
 8010ea4:	fa03 f506 	lsl.w	r5, r3, r6
 8010ea8:	432c      	orrs	r4, r5
 8010eaa:	40d3      	lsrs	r3, r2
 8010eac:	6004      	str	r4, [r0, #0]
 8010eae:	f840 3f04 	str.w	r3, [r0, #4]!
 8010eb2:	4288      	cmp	r0, r1
 8010eb4:	d3f4      	bcc.n	8010ea0 <L_shift+0xc>
 8010eb6:	bd70      	pop	{r4, r5, r6, pc}

08010eb8 <__match>:
 8010eb8:	b530      	push	{r4, r5, lr}
 8010eba:	6803      	ldr	r3, [r0, #0]
 8010ebc:	3301      	adds	r3, #1
 8010ebe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010ec2:	b914      	cbnz	r4, 8010eca <__match+0x12>
 8010ec4:	6003      	str	r3, [r0, #0]
 8010ec6:	2001      	movs	r0, #1
 8010ec8:	bd30      	pop	{r4, r5, pc}
 8010eca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ece:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010ed2:	2d19      	cmp	r5, #25
 8010ed4:	bf98      	it	ls
 8010ed6:	3220      	addls	r2, #32
 8010ed8:	42a2      	cmp	r2, r4
 8010eda:	d0f0      	beq.n	8010ebe <__match+0x6>
 8010edc:	2000      	movs	r0, #0
 8010ede:	e7f3      	b.n	8010ec8 <__match+0x10>

08010ee0 <__hexnan>:
 8010ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ee4:	680b      	ldr	r3, [r1, #0]
 8010ee6:	6801      	ldr	r1, [r0, #0]
 8010ee8:	115e      	asrs	r6, r3, #5
 8010eea:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8010eee:	f013 031f 	ands.w	r3, r3, #31
 8010ef2:	b087      	sub	sp, #28
 8010ef4:	bf18      	it	ne
 8010ef6:	3604      	addne	r6, #4
 8010ef8:	2500      	movs	r5, #0
 8010efa:	1f37      	subs	r7, r6, #4
 8010efc:	4682      	mov	sl, r0
 8010efe:	4690      	mov	r8, r2
 8010f00:	9301      	str	r3, [sp, #4]
 8010f02:	f846 5c04 	str.w	r5, [r6, #-4]
 8010f06:	46b9      	mov	r9, r7
 8010f08:	463c      	mov	r4, r7
 8010f0a:	9502      	str	r5, [sp, #8]
 8010f0c:	46ab      	mov	fp, r5
 8010f0e:	784a      	ldrb	r2, [r1, #1]
 8010f10:	1c4b      	adds	r3, r1, #1
 8010f12:	9303      	str	r3, [sp, #12]
 8010f14:	b342      	cbz	r2, 8010f68 <__hexnan+0x88>
 8010f16:	4610      	mov	r0, r2
 8010f18:	9105      	str	r1, [sp, #20]
 8010f1a:	9204      	str	r2, [sp, #16]
 8010f1c:	f7ff fd5f 	bl	80109de <__hexdig_fun>
 8010f20:	2800      	cmp	r0, #0
 8010f22:	d14f      	bne.n	8010fc4 <__hexnan+0xe4>
 8010f24:	9a04      	ldr	r2, [sp, #16]
 8010f26:	9905      	ldr	r1, [sp, #20]
 8010f28:	2a20      	cmp	r2, #32
 8010f2a:	d818      	bhi.n	8010f5e <__hexnan+0x7e>
 8010f2c:	9b02      	ldr	r3, [sp, #8]
 8010f2e:	459b      	cmp	fp, r3
 8010f30:	dd13      	ble.n	8010f5a <__hexnan+0x7a>
 8010f32:	454c      	cmp	r4, r9
 8010f34:	d206      	bcs.n	8010f44 <__hexnan+0x64>
 8010f36:	2d07      	cmp	r5, #7
 8010f38:	dc04      	bgt.n	8010f44 <__hexnan+0x64>
 8010f3a:	462a      	mov	r2, r5
 8010f3c:	4649      	mov	r1, r9
 8010f3e:	4620      	mov	r0, r4
 8010f40:	f7ff ffa8 	bl	8010e94 <L_shift>
 8010f44:	4544      	cmp	r4, r8
 8010f46:	d950      	bls.n	8010fea <__hexnan+0x10a>
 8010f48:	2300      	movs	r3, #0
 8010f4a:	f1a4 0904 	sub.w	r9, r4, #4
 8010f4e:	f844 3c04 	str.w	r3, [r4, #-4]
 8010f52:	f8cd b008 	str.w	fp, [sp, #8]
 8010f56:	464c      	mov	r4, r9
 8010f58:	461d      	mov	r5, r3
 8010f5a:	9903      	ldr	r1, [sp, #12]
 8010f5c:	e7d7      	b.n	8010f0e <__hexnan+0x2e>
 8010f5e:	2a29      	cmp	r2, #41	; 0x29
 8010f60:	d156      	bne.n	8011010 <__hexnan+0x130>
 8010f62:	3102      	adds	r1, #2
 8010f64:	f8ca 1000 	str.w	r1, [sl]
 8010f68:	f1bb 0f00 	cmp.w	fp, #0
 8010f6c:	d050      	beq.n	8011010 <__hexnan+0x130>
 8010f6e:	454c      	cmp	r4, r9
 8010f70:	d206      	bcs.n	8010f80 <__hexnan+0xa0>
 8010f72:	2d07      	cmp	r5, #7
 8010f74:	dc04      	bgt.n	8010f80 <__hexnan+0xa0>
 8010f76:	462a      	mov	r2, r5
 8010f78:	4649      	mov	r1, r9
 8010f7a:	4620      	mov	r0, r4
 8010f7c:	f7ff ff8a 	bl	8010e94 <L_shift>
 8010f80:	4544      	cmp	r4, r8
 8010f82:	d934      	bls.n	8010fee <__hexnan+0x10e>
 8010f84:	f1a8 0204 	sub.w	r2, r8, #4
 8010f88:	4623      	mov	r3, r4
 8010f8a:	f853 1b04 	ldr.w	r1, [r3], #4
 8010f8e:	f842 1f04 	str.w	r1, [r2, #4]!
 8010f92:	429f      	cmp	r7, r3
 8010f94:	d2f9      	bcs.n	8010f8a <__hexnan+0xaa>
 8010f96:	1b3b      	subs	r3, r7, r4
 8010f98:	f023 0303 	bic.w	r3, r3, #3
 8010f9c:	3304      	adds	r3, #4
 8010f9e:	3401      	adds	r4, #1
 8010fa0:	3e03      	subs	r6, #3
 8010fa2:	42b4      	cmp	r4, r6
 8010fa4:	bf88      	it	hi
 8010fa6:	2304      	movhi	r3, #4
 8010fa8:	4443      	add	r3, r8
 8010faa:	2200      	movs	r2, #0
 8010fac:	f843 2b04 	str.w	r2, [r3], #4
 8010fb0:	429f      	cmp	r7, r3
 8010fb2:	d2fb      	bcs.n	8010fac <__hexnan+0xcc>
 8010fb4:	683b      	ldr	r3, [r7, #0]
 8010fb6:	b91b      	cbnz	r3, 8010fc0 <__hexnan+0xe0>
 8010fb8:	4547      	cmp	r7, r8
 8010fba:	d127      	bne.n	801100c <__hexnan+0x12c>
 8010fbc:	2301      	movs	r3, #1
 8010fbe:	603b      	str	r3, [r7, #0]
 8010fc0:	2005      	movs	r0, #5
 8010fc2:	e026      	b.n	8011012 <__hexnan+0x132>
 8010fc4:	3501      	adds	r5, #1
 8010fc6:	2d08      	cmp	r5, #8
 8010fc8:	f10b 0b01 	add.w	fp, fp, #1
 8010fcc:	dd06      	ble.n	8010fdc <__hexnan+0xfc>
 8010fce:	4544      	cmp	r4, r8
 8010fd0:	d9c3      	bls.n	8010f5a <__hexnan+0x7a>
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	f844 3c04 	str.w	r3, [r4, #-4]
 8010fd8:	2501      	movs	r5, #1
 8010fda:	3c04      	subs	r4, #4
 8010fdc:	6822      	ldr	r2, [r4, #0]
 8010fde:	f000 000f 	and.w	r0, r0, #15
 8010fe2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8010fe6:	6022      	str	r2, [r4, #0]
 8010fe8:	e7b7      	b.n	8010f5a <__hexnan+0x7a>
 8010fea:	2508      	movs	r5, #8
 8010fec:	e7b5      	b.n	8010f5a <__hexnan+0x7a>
 8010fee:	9b01      	ldr	r3, [sp, #4]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d0df      	beq.n	8010fb4 <__hexnan+0xd4>
 8010ff4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010ff8:	f1c3 0320 	rsb	r3, r3, #32
 8010ffc:	fa22 f303 	lsr.w	r3, r2, r3
 8011000:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011004:	401a      	ands	r2, r3
 8011006:	f846 2c04 	str.w	r2, [r6, #-4]
 801100a:	e7d3      	b.n	8010fb4 <__hexnan+0xd4>
 801100c:	3f04      	subs	r7, #4
 801100e:	e7d1      	b.n	8010fb4 <__hexnan+0xd4>
 8011010:	2004      	movs	r0, #4
 8011012:	b007      	add	sp, #28
 8011014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011018 <_localeconv_r>:
 8011018:	4800      	ldr	r0, [pc, #0]	; (801101c <_localeconv_r+0x4>)
 801101a:	4770      	bx	lr
 801101c:	2000019c 	.word	0x2000019c

08011020 <__retarget_lock_init_recursive>:
 8011020:	4770      	bx	lr

08011022 <__retarget_lock_acquire_recursive>:
 8011022:	4770      	bx	lr

08011024 <__retarget_lock_release_recursive>:
 8011024:	4770      	bx	lr

08011026 <__swhatbuf_r>:
 8011026:	b570      	push	{r4, r5, r6, lr}
 8011028:	460e      	mov	r6, r1
 801102a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801102e:	2900      	cmp	r1, #0
 8011030:	b096      	sub	sp, #88	; 0x58
 8011032:	4614      	mov	r4, r2
 8011034:	461d      	mov	r5, r3
 8011036:	da07      	bge.n	8011048 <__swhatbuf_r+0x22>
 8011038:	2300      	movs	r3, #0
 801103a:	602b      	str	r3, [r5, #0]
 801103c:	89b3      	ldrh	r3, [r6, #12]
 801103e:	061a      	lsls	r2, r3, #24
 8011040:	d410      	bmi.n	8011064 <__swhatbuf_r+0x3e>
 8011042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011046:	e00e      	b.n	8011066 <__swhatbuf_r+0x40>
 8011048:	466a      	mov	r2, sp
 801104a:	f001 f891 	bl	8012170 <_fstat_r>
 801104e:	2800      	cmp	r0, #0
 8011050:	dbf2      	blt.n	8011038 <__swhatbuf_r+0x12>
 8011052:	9a01      	ldr	r2, [sp, #4]
 8011054:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011058:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801105c:	425a      	negs	r2, r3
 801105e:	415a      	adcs	r2, r3
 8011060:	602a      	str	r2, [r5, #0]
 8011062:	e7ee      	b.n	8011042 <__swhatbuf_r+0x1c>
 8011064:	2340      	movs	r3, #64	; 0x40
 8011066:	2000      	movs	r0, #0
 8011068:	6023      	str	r3, [r4, #0]
 801106a:	b016      	add	sp, #88	; 0x58
 801106c:	bd70      	pop	{r4, r5, r6, pc}
	...

08011070 <__smakebuf_r>:
 8011070:	898b      	ldrh	r3, [r1, #12]
 8011072:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011074:	079d      	lsls	r5, r3, #30
 8011076:	4606      	mov	r6, r0
 8011078:	460c      	mov	r4, r1
 801107a:	d507      	bpl.n	801108c <__smakebuf_r+0x1c>
 801107c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011080:	6023      	str	r3, [r4, #0]
 8011082:	6123      	str	r3, [r4, #16]
 8011084:	2301      	movs	r3, #1
 8011086:	6163      	str	r3, [r4, #20]
 8011088:	b002      	add	sp, #8
 801108a:	bd70      	pop	{r4, r5, r6, pc}
 801108c:	ab01      	add	r3, sp, #4
 801108e:	466a      	mov	r2, sp
 8011090:	f7ff ffc9 	bl	8011026 <__swhatbuf_r>
 8011094:	9900      	ldr	r1, [sp, #0]
 8011096:	4605      	mov	r5, r0
 8011098:	4630      	mov	r0, r6
 801109a:	f7fc fc65 	bl	800d968 <_malloc_r>
 801109e:	b948      	cbnz	r0, 80110b4 <__smakebuf_r+0x44>
 80110a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110a4:	059a      	lsls	r2, r3, #22
 80110a6:	d4ef      	bmi.n	8011088 <__smakebuf_r+0x18>
 80110a8:	f023 0303 	bic.w	r3, r3, #3
 80110ac:	f043 0302 	orr.w	r3, r3, #2
 80110b0:	81a3      	strh	r3, [r4, #12]
 80110b2:	e7e3      	b.n	801107c <__smakebuf_r+0xc>
 80110b4:	4b0d      	ldr	r3, [pc, #52]	; (80110ec <__smakebuf_r+0x7c>)
 80110b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80110b8:	89a3      	ldrh	r3, [r4, #12]
 80110ba:	6020      	str	r0, [r4, #0]
 80110bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110c0:	81a3      	strh	r3, [r4, #12]
 80110c2:	9b00      	ldr	r3, [sp, #0]
 80110c4:	6163      	str	r3, [r4, #20]
 80110c6:	9b01      	ldr	r3, [sp, #4]
 80110c8:	6120      	str	r0, [r4, #16]
 80110ca:	b15b      	cbz	r3, 80110e4 <__smakebuf_r+0x74>
 80110cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80110d0:	4630      	mov	r0, r6
 80110d2:	f001 f85f 	bl	8012194 <_isatty_r>
 80110d6:	b128      	cbz	r0, 80110e4 <__smakebuf_r+0x74>
 80110d8:	89a3      	ldrh	r3, [r4, #12]
 80110da:	f023 0303 	bic.w	r3, r3, #3
 80110de:	f043 0301 	orr.w	r3, r3, #1
 80110e2:	81a3      	strh	r3, [r4, #12]
 80110e4:	89a0      	ldrh	r0, [r4, #12]
 80110e6:	4305      	orrs	r5, r0
 80110e8:	81a5      	strh	r5, [r4, #12]
 80110ea:	e7cd      	b.n	8011088 <__smakebuf_r+0x18>
 80110ec:	08010775 	.word	0x08010775

080110f0 <__ascii_mbtowc>:
 80110f0:	b082      	sub	sp, #8
 80110f2:	b901      	cbnz	r1, 80110f6 <__ascii_mbtowc+0x6>
 80110f4:	a901      	add	r1, sp, #4
 80110f6:	b142      	cbz	r2, 801110a <__ascii_mbtowc+0x1a>
 80110f8:	b14b      	cbz	r3, 801110e <__ascii_mbtowc+0x1e>
 80110fa:	7813      	ldrb	r3, [r2, #0]
 80110fc:	600b      	str	r3, [r1, #0]
 80110fe:	7812      	ldrb	r2, [r2, #0]
 8011100:	1e10      	subs	r0, r2, #0
 8011102:	bf18      	it	ne
 8011104:	2001      	movne	r0, #1
 8011106:	b002      	add	sp, #8
 8011108:	4770      	bx	lr
 801110a:	4610      	mov	r0, r2
 801110c:	e7fb      	b.n	8011106 <__ascii_mbtowc+0x16>
 801110e:	f06f 0001 	mvn.w	r0, #1
 8011112:	e7f8      	b.n	8011106 <__ascii_mbtowc+0x16>

08011114 <memcpy>:
 8011114:	440a      	add	r2, r1
 8011116:	4291      	cmp	r1, r2
 8011118:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801111c:	d100      	bne.n	8011120 <memcpy+0xc>
 801111e:	4770      	bx	lr
 8011120:	b510      	push	{r4, lr}
 8011122:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011126:	f803 4f01 	strb.w	r4, [r3, #1]!
 801112a:	4291      	cmp	r1, r2
 801112c:	d1f9      	bne.n	8011122 <memcpy+0xe>
 801112e:	bd10      	pop	{r4, pc}

08011130 <__malloc_lock>:
 8011130:	4801      	ldr	r0, [pc, #4]	; (8011138 <__malloc_lock+0x8>)
 8011132:	f7ff bf76 	b.w	8011022 <__retarget_lock_acquire_recursive>
 8011136:	bf00      	nop
 8011138:	20001ae4 	.word	0x20001ae4

0801113c <__malloc_unlock>:
 801113c:	4801      	ldr	r0, [pc, #4]	; (8011144 <__malloc_unlock+0x8>)
 801113e:	f7ff bf71 	b.w	8011024 <__retarget_lock_release_recursive>
 8011142:	bf00      	nop
 8011144:	20001ae4 	.word	0x20001ae4

08011148 <_Balloc>:
 8011148:	b570      	push	{r4, r5, r6, lr}
 801114a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801114c:	4604      	mov	r4, r0
 801114e:	460d      	mov	r5, r1
 8011150:	b976      	cbnz	r6, 8011170 <_Balloc+0x28>
 8011152:	2010      	movs	r0, #16
 8011154:	f7fc fba8 	bl	800d8a8 <malloc>
 8011158:	4602      	mov	r2, r0
 801115a:	6260      	str	r0, [r4, #36]	; 0x24
 801115c:	b920      	cbnz	r0, 8011168 <_Balloc+0x20>
 801115e:	4b18      	ldr	r3, [pc, #96]	; (80111c0 <_Balloc+0x78>)
 8011160:	4818      	ldr	r0, [pc, #96]	; (80111c4 <_Balloc+0x7c>)
 8011162:	2166      	movs	r1, #102	; 0x66
 8011164:	f7fe fb88 	bl	800f878 <__assert_func>
 8011168:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801116c:	6006      	str	r6, [r0, #0]
 801116e:	60c6      	str	r6, [r0, #12]
 8011170:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011172:	68f3      	ldr	r3, [r6, #12]
 8011174:	b183      	cbz	r3, 8011198 <_Balloc+0x50>
 8011176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011178:	68db      	ldr	r3, [r3, #12]
 801117a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801117e:	b9b8      	cbnz	r0, 80111b0 <_Balloc+0x68>
 8011180:	2101      	movs	r1, #1
 8011182:	fa01 f605 	lsl.w	r6, r1, r5
 8011186:	1d72      	adds	r2, r6, #5
 8011188:	0092      	lsls	r2, r2, #2
 801118a:	4620      	mov	r0, r4
 801118c:	f000 fc97 	bl	8011abe <_calloc_r>
 8011190:	b160      	cbz	r0, 80111ac <_Balloc+0x64>
 8011192:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8011196:	e00e      	b.n	80111b6 <_Balloc+0x6e>
 8011198:	2221      	movs	r2, #33	; 0x21
 801119a:	2104      	movs	r1, #4
 801119c:	4620      	mov	r0, r4
 801119e:	f000 fc8e 	bl	8011abe <_calloc_r>
 80111a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80111a4:	60f0      	str	r0, [r6, #12]
 80111a6:	68db      	ldr	r3, [r3, #12]
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d1e4      	bne.n	8011176 <_Balloc+0x2e>
 80111ac:	2000      	movs	r0, #0
 80111ae:	bd70      	pop	{r4, r5, r6, pc}
 80111b0:	6802      	ldr	r2, [r0, #0]
 80111b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80111b6:	2300      	movs	r3, #0
 80111b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80111bc:	e7f7      	b.n	80111ae <_Balloc+0x66>
 80111be:	bf00      	nop
 80111c0:	080139a8 	.word	0x080139a8
 80111c4:	08013cbc 	.word	0x08013cbc

080111c8 <_Bfree>:
 80111c8:	b570      	push	{r4, r5, r6, lr}
 80111ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80111cc:	4605      	mov	r5, r0
 80111ce:	460c      	mov	r4, r1
 80111d0:	b976      	cbnz	r6, 80111f0 <_Bfree+0x28>
 80111d2:	2010      	movs	r0, #16
 80111d4:	f7fc fb68 	bl	800d8a8 <malloc>
 80111d8:	4602      	mov	r2, r0
 80111da:	6268      	str	r0, [r5, #36]	; 0x24
 80111dc:	b920      	cbnz	r0, 80111e8 <_Bfree+0x20>
 80111de:	4b09      	ldr	r3, [pc, #36]	; (8011204 <_Bfree+0x3c>)
 80111e0:	4809      	ldr	r0, [pc, #36]	; (8011208 <_Bfree+0x40>)
 80111e2:	218a      	movs	r1, #138	; 0x8a
 80111e4:	f7fe fb48 	bl	800f878 <__assert_func>
 80111e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80111ec:	6006      	str	r6, [r0, #0]
 80111ee:	60c6      	str	r6, [r0, #12]
 80111f0:	b13c      	cbz	r4, 8011202 <_Bfree+0x3a>
 80111f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80111f4:	6862      	ldr	r2, [r4, #4]
 80111f6:	68db      	ldr	r3, [r3, #12]
 80111f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80111fc:	6021      	str	r1, [r4, #0]
 80111fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011202:	bd70      	pop	{r4, r5, r6, pc}
 8011204:	080139a8 	.word	0x080139a8
 8011208:	08013cbc 	.word	0x08013cbc

0801120c <__multadd>:
 801120c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011210:	690e      	ldr	r6, [r1, #16]
 8011212:	4607      	mov	r7, r0
 8011214:	4698      	mov	r8, r3
 8011216:	460c      	mov	r4, r1
 8011218:	f101 0014 	add.w	r0, r1, #20
 801121c:	2300      	movs	r3, #0
 801121e:	6805      	ldr	r5, [r0, #0]
 8011220:	b2a9      	uxth	r1, r5
 8011222:	fb02 8101 	mla	r1, r2, r1, r8
 8011226:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 801122a:	0c2d      	lsrs	r5, r5, #16
 801122c:	fb02 c505 	mla	r5, r2, r5, ip
 8011230:	b289      	uxth	r1, r1
 8011232:	3301      	adds	r3, #1
 8011234:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8011238:	429e      	cmp	r6, r3
 801123a:	f840 1b04 	str.w	r1, [r0], #4
 801123e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8011242:	dcec      	bgt.n	801121e <__multadd+0x12>
 8011244:	f1b8 0f00 	cmp.w	r8, #0
 8011248:	d022      	beq.n	8011290 <__multadd+0x84>
 801124a:	68a3      	ldr	r3, [r4, #8]
 801124c:	42b3      	cmp	r3, r6
 801124e:	dc19      	bgt.n	8011284 <__multadd+0x78>
 8011250:	6861      	ldr	r1, [r4, #4]
 8011252:	4638      	mov	r0, r7
 8011254:	3101      	adds	r1, #1
 8011256:	f7ff ff77 	bl	8011148 <_Balloc>
 801125a:	4605      	mov	r5, r0
 801125c:	b928      	cbnz	r0, 801126a <__multadd+0x5e>
 801125e:	4602      	mov	r2, r0
 8011260:	4b0d      	ldr	r3, [pc, #52]	; (8011298 <__multadd+0x8c>)
 8011262:	480e      	ldr	r0, [pc, #56]	; (801129c <__multadd+0x90>)
 8011264:	21b5      	movs	r1, #181	; 0xb5
 8011266:	f7fe fb07 	bl	800f878 <__assert_func>
 801126a:	6922      	ldr	r2, [r4, #16]
 801126c:	3202      	adds	r2, #2
 801126e:	f104 010c 	add.w	r1, r4, #12
 8011272:	0092      	lsls	r2, r2, #2
 8011274:	300c      	adds	r0, #12
 8011276:	f7ff ff4d 	bl	8011114 <memcpy>
 801127a:	4621      	mov	r1, r4
 801127c:	4638      	mov	r0, r7
 801127e:	f7ff ffa3 	bl	80111c8 <_Bfree>
 8011282:	462c      	mov	r4, r5
 8011284:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8011288:	3601      	adds	r6, #1
 801128a:	f8c3 8014 	str.w	r8, [r3, #20]
 801128e:	6126      	str	r6, [r4, #16]
 8011290:	4620      	mov	r0, r4
 8011292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011296:	bf00      	nop
 8011298:	08013bc9 	.word	0x08013bc9
 801129c:	08013cbc 	.word	0x08013cbc

080112a0 <__s2b>:
 80112a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112a4:	460c      	mov	r4, r1
 80112a6:	4615      	mov	r5, r2
 80112a8:	461f      	mov	r7, r3
 80112aa:	2209      	movs	r2, #9
 80112ac:	3308      	adds	r3, #8
 80112ae:	4606      	mov	r6, r0
 80112b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80112b4:	2100      	movs	r1, #0
 80112b6:	2201      	movs	r2, #1
 80112b8:	429a      	cmp	r2, r3
 80112ba:	db09      	blt.n	80112d0 <__s2b+0x30>
 80112bc:	4630      	mov	r0, r6
 80112be:	f7ff ff43 	bl	8011148 <_Balloc>
 80112c2:	b940      	cbnz	r0, 80112d6 <__s2b+0x36>
 80112c4:	4602      	mov	r2, r0
 80112c6:	4b19      	ldr	r3, [pc, #100]	; (801132c <__s2b+0x8c>)
 80112c8:	4819      	ldr	r0, [pc, #100]	; (8011330 <__s2b+0x90>)
 80112ca:	21ce      	movs	r1, #206	; 0xce
 80112cc:	f7fe fad4 	bl	800f878 <__assert_func>
 80112d0:	0052      	lsls	r2, r2, #1
 80112d2:	3101      	adds	r1, #1
 80112d4:	e7f0      	b.n	80112b8 <__s2b+0x18>
 80112d6:	9b08      	ldr	r3, [sp, #32]
 80112d8:	6143      	str	r3, [r0, #20]
 80112da:	2d09      	cmp	r5, #9
 80112dc:	f04f 0301 	mov.w	r3, #1
 80112e0:	6103      	str	r3, [r0, #16]
 80112e2:	dd16      	ble.n	8011312 <__s2b+0x72>
 80112e4:	f104 0909 	add.w	r9, r4, #9
 80112e8:	46c8      	mov	r8, r9
 80112ea:	442c      	add	r4, r5
 80112ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 80112f0:	4601      	mov	r1, r0
 80112f2:	3b30      	subs	r3, #48	; 0x30
 80112f4:	220a      	movs	r2, #10
 80112f6:	4630      	mov	r0, r6
 80112f8:	f7ff ff88 	bl	801120c <__multadd>
 80112fc:	45a0      	cmp	r8, r4
 80112fe:	d1f5      	bne.n	80112ec <__s2b+0x4c>
 8011300:	f1a5 0408 	sub.w	r4, r5, #8
 8011304:	444c      	add	r4, r9
 8011306:	1b2d      	subs	r5, r5, r4
 8011308:	1963      	adds	r3, r4, r5
 801130a:	42bb      	cmp	r3, r7
 801130c:	db04      	blt.n	8011318 <__s2b+0x78>
 801130e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011312:	340a      	adds	r4, #10
 8011314:	2509      	movs	r5, #9
 8011316:	e7f6      	b.n	8011306 <__s2b+0x66>
 8011318:	f814 3b01 	ldrb.w	r3, [r4], #1
 801131c:	4601      	mov	r1, r0
 801131e:	3b30      	subs	r3, #48	; 0x30
 8011320:	220a      	movs	r2, #10
 8011322:	4630      	mov	r0, r6
 8011324:	f7ff ff72 	bl	801120c <__multadd>
 8011328:	e7ee      	b.n	8011308 <__s2b+0x68>
 801132a:	bf00      	nop
 801132c:	08013bc9 	.word	0x08013bc9
 8011330:	08013cbc 	.word	0x08013cbc

08011334 <__hi0bits>:
 8011334:	0c03      	lsrs	r3, r0, #16
 8011336:	041b      	lsls	r3, r3, #16
 8011338:	b9d3      	cbnz	r3, 8011370 <__hi0bits+0x3c>
 801133a:	0400      	lsls	r0, r0, #16
 801133c:	2310      	movs	r3, #16
 801133e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8011342:	bf04      	itt	eq
 8011344:	0200      	lsleq	r0, r0, #8
 8011346:	3308      	addeq	r3, #8
 8011348:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801134c:	bf04      	itt	eq
 801134e:	0100      	lsleq	r0, r0, #4
 8011350:	3304      	addeq	r3, #4
 8011352:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011356:	bf04      	itt	eq
 8011358:	0080      	lsleq	r0, r0, #2
 801135a:	3302      	addeq	r3, #2
 801135c:	2800      	cmp	r0, #0
 801135e:	db05      	blt.n	801136c <__hi0bits+0x38>
 8011360:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011364:	f103 0301 	add.w	r3, r3, #1
 8011368:	bf08      	it	eq
 801136a:	2320      	moveq	r3, #32
 801136c:	4618      	mov	r0, r3
 801136e:	4770      	bx	lr
 8011370:	2300      	movs	r3, #0
 8011372:	e7e4      	b.n	801133e <__hi0bits+0xa>

08011374 <__lo0bits>:
 8011374:	6803      	ldr	r3, [r0, #0]
 8011376:	f013 0207 	ands.w	r2, r3, #7
 801137a:	4601      	mov	r1, r0
 801137c:	d00b      	beq.n	8011396 <__lo0bits+0x22>
 801137e:	07da      	lsls	r2, r3, #31
 8011380:	d424      	bmi.n	80113cc <__lo0bits+0x58>
 8011382:	0798      	lsls	r0, r3, #30
 8011384:	bf49      	itett	mi
 8011386:	085b      	lsrmi	r3, r3, #1
 8011388:	089b      	lsrpl	r3, r3, #2
 801138a:	2001      	movmi	r0, #1
 801138c:	600b      	strmi	r3, [r1, #0]
 801138e:	bf5c      	itt	pl
 8011390:	600b      	strpl	r3, [r1, #0]
 8011392:	2002      	movpl	r0, #2
 8011394:	4770      	bx	lr
 8011396:	b298      	uxth	r0, r3
 8011398:	b9b0      	cbnz	r0, 80113c8 <__lo0bits+0x54>
 801139a:	0c1b      	lsrs	r3, r3, #16
 801139c:	2010      	movs	r0, #16
 801139e:	f013 0fff 	tst.w	r3, #255	; 0xff
 80113a2:	bf04      	itt	eq
 80113a4:	0a1b      	lsreq	r3, r3, #8
 80113a6:	3008      	addeq	r0, #8
 80113a8:	071a      	lsls	r2, r3, #28
 80113aa:	bf04      	itt	eq
 80113ac:	091b      	lsreq	r3, r3, #4
 80113ae:	3004      	addeq	r0, #4
 80113b0:	079a      	lsls	r2, r3, #30
 80113b2:	bf04      	itt	eq
 80113b4:	089b      	lsreq	r3, r3, #2
 80113b6:	3002      	addeq	r0, #2
 80113b8:	07da      	lsls	r2, r3, #31
 80113ba:	d403      	bmi.n	80113c4 <__lo0bits+0x50>
 80113bc:	085b      	lsrs	r3, r3, #1
 80113be:	f100 0001 	add.w	r0, r0, #1
 80113c2:	d005      	beq.n	80113d0 <__lo0bits+0x5c>
 80113c4:	600b      	str	r3, [r1, #0]
 80113c6:	4770      	bx	lr
 80113c8:	4610      	mov	r0, r2
 80113ca:	e7e8      	b.n	801139e <__lo0bits+0x2a>
 80113cc:	2000      	movs	r0, #0
 80113ce:	4770      	bx	lr
 80113d0:	2020      	movs	r0, #32
 80113d2:	4770      	bx	lr

080113d4 <__i2b>:
 80113d4:	b510      	push	{r4, lr}
 80113d6:	460c      	mov	r4, r1
 80113d8:	2101      	movs	r1, #1
 80113da:	f7ff feb5 	bl	8011148 <_Balloc>
 80113de:	4602      	mov	r2, r0
 80113e0:	b928      	cbnz	r0, 80113ee <__i2b+0x1a>
 80113e2:	4b05      	ldr	r3, [pc, #20]	; (80113f8 <__i2b+0x24>)
 80113e4:	4805      	ldr	r0, [pc, #20]	; (80113fc <__i2b+0x28>)
 80113e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80113ea:	f7fe fa45 	bl	800f878 <__assert_func>
 80113ee:	2301      	movs	r3, #1
 80113f0:	6144      	str	r4, [r0, #20]
 80113f2:	6103      	str	r3, [r0, #16]
 80113f4:	bd10      	pop	{r4, pc}
 80113f6:	bf00      	nop
 80113f8:	08013bc9 	.word	0x08013bc9
 80113fc:	08013cbc 	.word	0x08013cbc

08011400 <__multiply>:
 8011400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011404:	4614      	mov	r4, r2
 8011406:	690a      	ldr	r2, [r1, #16]
 8011408:	6923      	ldr	r3, [r4, #16]
 801140a:	429a      	cmp	r2, r3
 801140c:	bfb8      	it	lt
 801140e:	460b      	movlt	r3, r1
 8011410:	460d      	mov	r5, r1
 8011412:	bfbc      	itt	lt
 8011414:	4625      	movlt	r5, r4
 8011416:	461c      	movlt	r4, r3
 8011418:	f8d5 a010 	ldr.w	sl, [r5, #16]
 801141c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8011420:	68ab      	ldr	r3, [r5, #8]
 8011422:	6869      	ldr	r1, [r5, #4]
 8011424:	eb0a 0709 	add.w	r7, sl, r9
 8011428:	42bb      	cmp	r3, r7
 801142a:	b085      	sub	sp, #20
 801142c:	bfb8      	it	lt
 801142e:	3101      	addlt	r1, #1
 8011430:	f7ff fe8a 	bl	8011148 <_Balloc>
 8011434:	b930      	cbnz	r0, 8011444 <__multiply+0x44>
 8011436:	4602      	mov	r2, r0
 8011438:	4b42      	ldr	r3, [pc, #264]	; (8011544 <__multiply+0x144>)
 801143a:	4843      	ldr	r0, [pc, #268]	; (8011548 <__multiply+0x148>)
 801143c:	f240 115d 	movw	r1, #349	; 0x15d
 8011440:	f7fe fa1a 	bl	800f878 <__assert_func>
 8011444:	f100 0614 	add.w	r6, r0, #20
 8011448:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 801144c:	4633      	mov	r3, r6
 801144e:	2200      	movs	r2, #0
 8011450:	4543      	cmp	r3, r8
 8011452:	d31e      	bcc.n	8011492 <__multiply+0x92>
 8011454:	f105 0c14 	add.w	ip, r5, #20
 8011458:	f104 0314 	add.w	r3, r4, #20
 801145c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8011460:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8011464:	9202      	str	r2, [sp, #8]
 8011466:	ebac 0205 	sub.w	r2, ip, r5
 801146a:	3a15      	subs	r2, #21
 801146c:	f022 0203 	bic.w	r2, r2, #3
 8011470:	3204      	adds	r2, #4
 8011472:	f105 0115 	add.w	r1, r5, #21
 8011476:	458c      	cmp	ip, r1
 8011478:	bf38      	it	cc
 801147a:	2204      	movcc	r2, #4
 801147c:	9201      	str	r2, [sp, #4]
 801147e:	9a02      	ldr	r2, [sp, #8]
 8011480:	9303      	str	r3, [sp, #12]
 8011482:	429a      	cmp	r2, r3
 8011484:	d808      	bhi.n	8011498 <__multiply+0x98>
 8011486:	2f00      	cmp	r7, #0
 8011488:	dc55      	bgt.n	8011536 <__multiply+0x136>
 801148a:	6107      	str	r7, [r0, #16]
 801148c:	b005      	add	sp, #20
 801148e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011492:	f843 2b04 	str.w	r2, [r3], #4
 8011496:	e7db      	b.n	8011450 <__multiply+0x50>
 8011498:	f8b3 a000 	ldrh.w	sl, [r3]
 801149c:	f1ba 0f00 	cmp.w	sl, #0
 80114a0:	d020      	beq.n	80114e4 <__multiply+0xe4>
 80114a2:	f105 0e14 	add.w	lr, r5, #20
 80114a6:	46b1      	mov	r9, r6
 80114a8:	2200      	movs	r2, #0
 80114aa:	f85e 4b04 	ldr.w	r4, [lr], #4
 80114ae:	f8d9 b000 	ldr.w	fp, [r9]
 80114b2:	b2a1      	uxth	r1, r4
 80114b4:	fa1f fb8b 	uxth.w	fp, fp
 80114b8:	fb0a b101 	mla	r1, sl, r1, fp
 80114bc:	4411      	add	r1, r2
 80114be:	f8d9 2000 	ldr.w	r2, [r9]
 80114c2:	0c24      	lsrs	r4, r4, #16
 80114c4:	0c12      	lsrs	r2, r2, #16
 80114c6:	fb0a 2404 	mla	r4, sl, r4, r2
 80114ca:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80114ce:	b289      	uxth	r1, r1
 80114d0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80114d4:	45f4      	cmp	ip, lr
 80114d6:	f849 1b04 	str.w	r1, [r9], #4
 80114da:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80114de:	d8e4      	bhi.n	80114aa <__multiply+0xaa>
 80114e0:	9901      	ldr	r1, [sp, #4]
 80114e2:	5072      	str	r2, [r6, r1]
 80114e4:	9a03      	ldr	r2, [sp, #12]
 80114e6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80114ea:	3304      	adds	r3, #4
 80114ec:	f1b9 0f00 	cmp.w	r9, #0
 80114f0:	d01f      	beq.n	8011532 <__multiply+0x132>
 80114f2:	6834      	ldr	r4, [r6, #0]
 80114f4:	f105 0114 	add.w	r1, r5, #20
 80114f8:	46b6      	mov	lr, r6
 80114fa:	f04f 0a00 	mov.w	sl, #0
 80114fe:	880a      	ldrh	r2, [r1, #0]
 8011500:	f8be b002 	ldrh.w	fp, [lr, #2]
 8011504:	fb09 b202 	mla	r2, r9, r2, fp
 8011508:	4492      	add	sl, r2
 801150a:	b2a4      	uxth	r4, r4
 801150c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8011510:	f84e 4b04 	str.w	r4, [lr], #4
 8011514:	f851 4b04 	ldr.w	r4, [r1], #4
 8011518:	f8be 2000 	ldrh.w	r2, [lr]
 801151c:	0c24      	lsrs	r4, r4, #16
 801151e:	fb09 2404 	mla	r4, r9, r4, r2
 8011522:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8011526:	458c      	cmp	ip, r1
 8011528:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801152c:	d8e7      	bhi.n	80114fe <__multiply+0xfe>
 801152e:	9a01      	ldr	r2, [sp, #4]
 8011530:	50b4      	str	r4, [r6, r2]
 8011532:	3604      	adds	r6, #4
 8011534:	e7a3      	b.n	801147e <__multiply+0x7e>
 8011536:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801153a:	2b00      	cmp	r3, #0
 801153c:	d1a5      	bne.n	801148a <__multiply+0x8a>
 801153e:	3f01      	subs	r7, #1
 8011540:	e7a1      	b.n	8011486 <__multiply+0x86>
 8011542:	bf00      	nop
 8011544:	08013bc9 	.word	0x08013bc9
 8011548:	08013cbc 	.word	0x08013cbc

0801154c <__pow5mult>:
 801154c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011550:	4615      	mov	r5, r2
 8011552:	f012 0203 	ands.w	r2, r2, #3
 8011556:	4606      	mov	r6, r0
 8011558:	460f      	mov	r7, r1
 801155a:	d007      	beq.n	801156c <__pow5mult+0x20>
 801155c:	4c25      	ldr	r4, [pc, #148]	; (80115f4 <__pow5mult+0xa8>)
 801155e:	3a01      	subs	r2, #1
 8011560:	2300      	movs	r3, #0
 8011562:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011566:	f7ff fe51 	bl	801120c <__multadd>
 801156a:	4607      	mov	r7, r0
 801156c:	10ad      	asrs	r5, r5, #2
 801156e:	d03d      	beq.n	80115ec <__pow5mult+0xa0>
 8011570:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011572:	b97c      	cbnz	r4, 8011594 <__pow5mult+0x48>
 8011574:	2010      	movs	r0, #16
 8011576:	f7fc f997 	bl	800d8a8 <malloc>
 801157a:	4602      	mov	r2, r0
 801157c:	6270      	str	r0, [r6, #36]	; 0x24
 801157e:	b928      	cbnz	r0, 801158c <__pow5mult+0x40>
 8011580:	4b1d      	ldr	r3, [pc, #116]	; (80115f8 <__pow5mult+0xac>)
 8011582:	481e      	ldr	r0, [pc, #120]	; (80115fc <__pow5mult+0xb0>)
 8011584:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8011588:	f7fe f976 	bl	800f878 <__assert_func>
 801158c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011590:	6004      	str	r4, [r0, #0]
 8011592:	60c4      	str	r4, [r0, #12]
 8011594:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8011598:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801159c:	b94c      	cbnz	r4, 80115b2 <__pow5mult+0x66>
 801159e:	f240 2171 	movw	r1, #625	; 0x271
 80115a2:	4630      	mov	r0, r6
 80115a4:	f7ff ff16 	bl	80113d4 <__i2b>
 80115a8:	2300      	movs	r3, #0
 80115aa:	f8c8 0008 	str.w	r0, [r8, #8]
 80115ae:	4604      	mov	r4, r0
 80115b0:	6003      	str	r3, [r0, #0]
 80115b2:	f04f 0900 	mov.w	r9, #0
 80115b6:	07eb      	lsls	r3, r5, #31
 80115b8:	d50a      	bpl.n	80115d0 <__pow5mult+0x84>
 80115ba:	4639      	mov	r1, r7
 80115bc:	4622      	mov	r2, r4
 80115be:	4630      	mov	r0, r6
 80115c0:	f7ff ff1e 	bl	8011400 <__multiply>
 80115c4:	4639      	mov	r1, r7
 80115c6:	4680      	mov	r8, r0
 80115c8:	4630      	mov	r0, r6
 80115ca:	f7ff fdfd 	bl	80111c8 <_Bfree>
 80115ce:	4647      	mov	r7, r8
 80115d0:	106d      	asrs	r5, r5, #1
 80115d2:	d00b      	beq.n	80115ec <__pow5mult+0xa0>
 80115d4:	6820      	ldr	r0, [r4, #0]
 80115d6:	b938      	cbnz	r0, 80115e8 <__pow5mult+0x9c>
 80115d8:	4622      	mov	r2, r4
 80115da:	4621      	mov	r1, r4
 80115dc:	4630      	mov	r0, r6
 80115de:	f7ff ff0f 	bl	8011400 <__multiply>
 80115e2:	6020      	str	r0, [r4, #0]
 80115e4:	f8c0 9000 	str.w	r9, [r0]
 80115e8:	4604      	mov	r4, r0
 80115ea:	e7e4      	b.n	80115b6 <__pow5mult+0x6a>
 80115ec:	4638      	mov	r0, r7
 80115ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80115f2:	bf00      	nop
 80115f4:	08013e10 	.word	0x08013e10
 80115f8:	080139a8 	.word	0x080139a8
 80115fc:	08013cbc 	.word	0x08013cbc

08011600 <__lshift>:
 8011600:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011604:	460c      	mov	r4, r1
 8011606:	6849      	ldr	r1, [r1, #4]
 8011608:	6923      	ldr	r3, [r4, #16]
 801160a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801160e:	68a3      	ldr	r3, [r4, #8]
 8011610:	4607      	mov	r7, r0
 8011612:	4691      	mov	r9, r2
 8011614:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8011618:	f108 0601 	add.w	r6, r8, #1
 801161c:	42b3      	cmp	r3, r6
 801161e:	db0b      	blt.n	8011638 <__lshift+0x38>
 8011620:	4638      	mov	r0, r7
 8011622:	f7ff fd91 	bl	8011148 <_Balloc>
 8011626:	4605      	mov	r5, r0
 8011628:	b948      	cbnz	r0, 801163e <__lshift+0x3e>
 801162a:	4602      	mov	r2, r0
 801162c:	4b28      	ldr	r3, [pc, #160]	; (80116d0 <__lshift+0xd0>)
 801162e:	4829      	ldr	r0, [pc, #164]	; (80116d4 <__lshift+0xd4>)
 8011630:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011634:	f7fe f920 	bl	800f878 <__assert_func>
 8011638:	3101      	adds	r1, #1
 801163a:	005b      	lsls	r3, r3, #1
 801163c:	e7ee      	b.n	801161c <__lshift+0x1c>
 801163e:	2300      	movs	r3, #0
 8011640:	f100 0114 	add.w	r1, r0, #20
 8011644:	f100 0210 	add.w	r2, r0, #16
 8011648:	4618      	mov	r0, r3
 801164a:	4553      	cmp	r3, sl
 801164c:	db33      	blt.n	80116b6 <__lshift+0xb6>
 801164e:	6920      	ldr	r0, [r4, #16]
 8011650:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011654:	f104 0314 	add.w	r3, r4, #20
 8011658:	f019 091f 	ands.w	r9, r9, #31
 801165c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011660:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011664:	d02b      	beq.n	80116be <__lshift+0xbe>
 8011666:	f1c9 0e20 	rsb	lr, r9, #32
 801166a:	468a      	mov	sl, r1
 801166c:	2200      	movs	r2, #0
 801166e:	6818      	ldr	r0, [r3, #0]
 8011670:	fa00 f009 	lsl.w	r0, r0, r9
 8011674:	4302      	orrs	r2, r0
 8011676:	f84a 2b04 	str.w	r2, [sl], #4
 801167a:	f853 2b04 	ldr.w	r2, [r3], #4
 801167e:	459c      	cmp	ip, r3
 8011680:	fa22 f20e 	lsr.w	r2, r2, lr
 8011684:	d8f3      	bhi.n	801166e <__lshift+0x6e>
 8011686:	ebac 0304 	sub.w	r3, ip, r4
 801168a:	3b15      	subs	r3, #21
 801168c:	f023 0303 	bic.w	r3, r3, #3
 8011690:	3304      	adds	r3, #4
 8011692:	f104 0015 	add.w	r0, r4, #21
 8011696:	4584      	cmp	ip, r0
 8011698:	bf38      	it	cc
 801169a:	2304      	movcc	r3, #4
 801169c:	50ca      	str	r2, [r1, r3]
 801169e:	b10a      	cbz	r2, 80116a4 <__lshift+0xa4>
 80116a0:	f108 0602 	add.w	r6, r8, #2
 80116a4:	3e01      	subs	r6, #1
 80116a6:	4638      	mov	r0, r7
 80116a8:	612e      	str	r6, [r5, #16]
 80116aa:	4621      	mov	r1, r4
 80116ac:	f7ff fd8c 	bl	80111c8 <_Bfree>
 80116b0:	4628      	mov	r0, r5
 80116b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116b6:	f842 0f04 	str.w	r0, [r2, #4]!
 80116ba:	3301      	adds	r3, #1
 80116bc:	e7c5      	b.n	801164a <__lshift+0x4a>
 80116be:	3904      	subs	r1, #4
 80116c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80116c4:	f841 2f04 	str.w	r2, [r1, #4]!
 80116c8:	459c      	cmp	ip, r3
 80116ca:	d8f9      	bhi.n	80116c0 <__lshift+0xc0>
 80116cc:	e7ea      	b.n	80116a4 <__lshift+0xa4>
 80116ce:	bf00      	nop
 80116d0:	08013bc9 	.word	0x08013bc9
 80116d4:	08013cbc 	.word	0x08013cbc

080116d8 <__mcmp>:
 80116d8:	b530      	push	{r4, r5, lr}
 80116da:	6902      	ldr	r2, [r0, #16]
 80116dc:	690c      	ldr	r4, [r1, #16]
 80116de:	1b12      	subs	r2, r2, r4
 80116e0:	d10e      	bne.n	8011700 <__mcmp+0x28>
 80116e2:	f100 0314 	add.w	r3, r0, #20
 80116e6:	3114      	adds	r1, #20
 80116e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80116ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80116f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80116f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80116f8:	42a5      	cmp	r5, r4
 80116fa:	d003      	beq.n	8011704 <__mcmp+0x2c>
 80116fc:	d305      	bcc.n	801170a <__mcmp+0x32>
 80116fe:	2201      	movs	r2, #1
 8011700:	4610      	mov	r0, r2
 8011702:	bd30      	pop	{r4, r5, pc}
 8011704:	4283      	cmp	r3, r0
 8011706:	d3f3      	bcc.n	80116f0 <__mcmp+0x18>
 8011708:	e7fa      	b.n	8011700 <__mcmp+0x28>
 801170a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801170e:	e7f7      	b.n	8011700 <__mcmp+0x28>

08011710 <__mdiff>:
 8011710:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011714:	460c      	mov	r4, r1
 8011716:	4606      	mov	r6, r0
 8011718:	4611      	mov	r1, r2
 801171a:	4620      	mov	r0, r4
 801171c:	4617      	mov	r7, r2
 801171e:	f7ff ffdb 	bl	80116d8 <__mcmp>
 8011722:	1e05      	subs	r5, r0, #0
 8011724:	d110      	bne.n	8011748 <__mdiff+0x38>
 8011726:	4629      	mov	r1, r5
 8011728:	4630      	mov	r0, r6
 801172a:	f7ff fd0d 	bl	8011148 <_Balloc>
 801172e:	b930      	cbnz	r0, 801173e <__mdiff+0x2e>
 8011730:	4b39      	ldr	r3, [pc, #228]	; (8011818 <__mdiff+0x108>)
 8011732:	4602      	mov	r2, r0
 8011734:	f240 2132 	movw	r1, #562	; 0x232
 8011738:	4838      	ldr	r0, [pc, #224]	; (801181c <__mdiff+0x10c>)
 801173a:	f7fe f89d 	bl	800f878 <__assert_func>
 801173e:	2301      	movs	r3, #1
 8011740:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011744:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011748:	bfa4      	itt	ge
 801174a:	463b      	movge	r3, r7
 801174c:	4627      	movge	r7, r4
 801174e:	4630      	mov	r0, r6
 8011750:	6879      	ldr	r1, [r7, #4]
 8011752:	bfa6      	itte	ge
 8011754:	461c      	movge	r4, r3
 8011756:	2500      	movge	r5, #0
 8011758:	2501      	movlt	r5, #1
 801175a:	f7ff fcf5 	bl	8011148 <_Balloc>
 801175e:	b920      	cbnz	r0, 801176a <__mdiff+0x5a>
 8011760:	4b2d      	ldr	r3, [pc, #180]	; (8011818 <__mdiff+0x108>)
 8011762:	4602      	mov	r2, r0
 8011764:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011768:	e7e6      	b.n	8011738 <__mdiff+0x28>
 801176a:	693e      	ldr	r6, [r7, #16]
 801176c:	60c5      	str	r5, [r0, #12]
 801176e:	6925      	ldr	r5, [r4, #16]
 8011770:	f107 0114 	add.w	r1, r7, #20
 8011774:	f104 0914 	add.w	r9, r4, #20
 8011778:	f100 0e14 	add.w	lr, r0, #20
 801177c:	f107 0210 	add.w	r2, r7, #16
 8011780:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8011784:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8011788:	46f2      	mov	sl, lr
 801178a:	2700      	movs	r7, #0
 801178c:	f859 3b04 	ldr.w	r3, [r9], #4
 8011790:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011794:	fa1f f883 	uxth.w	r8, r3
 8011798:	fa17 f78b 	uxtah	r7, r7, fp
 801179c:	0c1b      	lsrs	r3, r3, #16
 801179e:	eba7 0808 	sub.w	r8, r7, r8
 80117a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80117a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80117aa:	fa1f f888 	uxth.w	r8, r8
 80117ae:	141f      	asrs	r7, r3, #16
 80117b0:	454d      	cmp	r5, r9
 80117b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80117b6:	f84a 3b04 	str.w	r3, [sl], #4
 80117ba:	d8e7      	bhi.n	801178c <__mdiff+0x7c>
 80117bc:	1b2b      	subs	r3, r5, r4
 80117be:	3b15      	subs	r3, #21
 80117c0:	f023 0303 	bic.w	r3, r3, #3
 80117c4:	3304      	adds	r3, #4
 80117c6:	3415      	adds	r4, #21
 80117c8:	42a5      	cmp	r5, r4
 80117ca:	bf38      	it	cc
 80117cc:	2304      	movcc	r3, #4
 80117ce:	4419      	add	r1, r3
 80117d0:	4473      	add	r3, lr
 80117d2:	469e      	mov	lr, r3
 80117d4:	460d      	mov	r5, r1
 80117d6:	4565      	cmp	r5, ip
 80117d8:	d30e      	bcc.n	80117f8 <__mdiff+0xe8>
 80117da:	f10c 0203 	add.w	r2, ip, #3
 80117de:	1a52      	subs	r2, r2, r1
 80117e0:	f022 0203 	bic.w	r2, r2, #3
 80117e4:	3903      	subs	r1, #3
 80117e6:	458c      	cmp	ip, r1
 80117e8:	bf38      	it	cc
 80117ea:	2200      	movcc	r2, #0
 80117ec:	441a      	add	r2, r3
 80117ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80117f2:	b17b      	cbz	r3, 8011814 <__mdiff+0x104>
 80117f4:	6106      	str	r6, [r0, #16]
 80117f6:	e7a5      	b.n	8011744 <__mdiff+0x34>
 80117f8:	f855 8b04 	ldr.w	r8, [r5], #4
 80117fc:	fa17 f488 	uxtah	r4, r7, r8
 8011800:	1422      	asrs	r2, r4, #16
 8011802:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8011806:	b2a4      	uxth	r4, r4
 8011808:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801180c:	f84e 4b04 	str.w	r4, [lr], #4
 8011810:	1417      	asrs	r7, r2, #16
 8011812:	e7e0      	b.n	80117d6 <__mdiff+0xc6>
 8011814:	3e01      	subs	r6, #1
 8011816:	e7ea      	b.n	80117ee <__mdiff+0xde>
 8011818:	08013bc9 	.word	0x08013bc9
 801181c:	08013cbc 	.word	0x08013cbc

08011820 <__ulp>:
 8011820:	b082      	sub	sp, #8
 8011822:	ed8d 0b00 	vstr	d0, [sp]
 8011826:	9b01      	ldr	r3, [sp, #4]
 8011828:	4912      	ldr	r1, [pc, #72]	; (8011874 <__ulp+0x54>)
 801182a:	4019      	ands	r1, r3
 801182c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011830:	2900      	cmp	r1, #0
 8011832:	dd05      	ble.n	8011840 <__ulp+0x20>
 8011834:	2200      	movs	r2, #0
 8011836:	460b      	mov	r3, r1
 8011838:	ec43 2b10 	vmov	d0, r2, r3
 801183c:	b002      	add	sp, #8
 801183e:	4770      	bx	lr
 8011840:	4249      	negs	r1, r1
 8011842:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011846:	ea4f 5021 	mov.w	r0, r1, asr #20
 801184a:	f04f 0200 	mov.w	r2, #0
 801184e:	f04f 0300 	mov.w	r3, #0
 8011852:	da04      	bge.n	801185e <__ulp+0x3e>
 8011854:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011858:	fa41 f300 	asr.w	r3, r1, r0
 801185c:	e7ec      	b.n	8011838 <__ulp+0x18>
 801185e:	f1a0 0114 	sub.w	r1, r0, #20
 8011862:	291e      	cmp	r1, #30
 8011864:	bfda      	itte	le
 8011866:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801186a:	fa20 f101 	lsrle.w	r1, r0, r1
 801186e:	2101      	movgt	r1, #1
 8011870:	460a      	mov	r2, r1
 8011872:	e7e1      	b.n	8011838 <__ulp+0x18>
 8011874:	7ff00000 	.word	0x7ff00000

08011878 <__b2d>:
 8011878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801187a:	6905      	ldr	r5, [r0, #16]
 801187c:	f100 0714 	add.w	r7, r0, #20
 8011880:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011884:	1f2e      	subs	r6, r5, #4
 8011886:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801188a:	4620      	mov	r0, r4
 801188c:	f7ff fd52 	bl	8011334 <__hi0bits>
 8011890:	f1c0 0320 	rsb	r3, r0, #32
 8011894:	280a      	cmp	r0, #10
 8011896:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011914 <__b2d+0x9c>
 801189a:	600b      	str	r3, [r1, #0]
 801189c:	dc14      	bgt.n	80118c8 <__b2d+0x50>
 801189e:	f1c0 0e0b 	rsb	lr, r0, #11
 80118a2:	fa24 f10e 	lsr.w	r1, r4, lr
 80118a6:	42b7      	cmp	r7, r6
 80118a8:	ea41 030c 	orr.w	r3, r1, ip
 80118ac:	bf34      	ite	cc
 80118ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80118b2:	2100      	movcs	r1, #0
 80118b4:	3015      	adds	r0, #21
 80118b6:	fa04 f000 	lsl.w	r0, r4, r0
 80118ba:	fa21 f10e 	lsr.w	r1, r1, lr
 80118be:	ea40 0201 	orr.w	r2, r0, r1
 80118c2:	ec43 2b10 	vmov	d0, r2, r3
 80118c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80118c8:	42b7      	cmp	r7, r6
 80118ca:	bf3a      	itte	cc
 80118cc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80118d0:	f1a5 0608 	subcc.w	r6, r5, #8
 80118d4:	2100      	movcs	r1, #0
 80118d6:	380b      	subs	r0, #11
 80118d8:	d017      	beq.n	801190a <__b2d+0x92>
 80118da:	f1c0 0c20 	rsb	ip, r0, #32
 80118de:	fa04 f500 	lsl.w	r5, r4, r0
 80118e2:	42be      	cmp	r6, r7
 80118e4:	fa21 f40c 	lsr.w	r4, r1, ip
 80118e8:	ea45 0504 	orr.w	r5, r5, r4
 80118ec:	bf8c      	ite	hi
 80118ee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80118f2:	2400      	movls	r4, #0
 80118f4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80118f8:	fa01 f000 	lsl.w	r0, r1, r0
 80118fc:	fa24 f40c 	lsr.w	r4, r4, ip
 8011900:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011904:	ea40 0204 	orr.w	r2, r0, r4
 8011908:	e7db      	b.n	80118c2 <__b2d+0x4a>
 801190a:	ea44 030c 	orr.w	r3, r4, ip
 801190e:	460a      	mov	r2, r1
 8011910:	e7d7      	b.n	80118c2 <__b2d+0x4a>
 8011912:	bf00      	nop
 8011914:	3ff00000 	.word	0x3ff00000

08011918 <__d2b>:
 8011918:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801191c:	4689      	mov	r9, r1
 801191e:	2101      	movs	r1, #1
 8011920:	ec57 6b10 	vmov	r6, r7, d0
 8011924:	4690      	mov	r8, r2
 8011926:	f7ff fc0f 	bl	8011148 <_Balloc>
 801192a:	4604      	mov	r4, r0
 801192c:	b930      	cbnz	r0, 801193c <__d2b+0x24>
 801192e:	4602      	mov	r2, r0
 8011930:	4b25      	ldr	r3, [pc, #148]	; (80119c8 <__d2b+0xb0>)
 8011932:	4826      	ldr	r0, [pc, #152]	; (80119cc <__d2b+0xb4>)
 8011934:	f240 310a 	movw	r1, #778	; 0x30a
 8011938:	f7fd ff9e 	bl	800f878 <__assert_func>
 801193c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011940:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011944:	bb35      	cbnz	r5, 8011994 <__d2b+0x7c>
 8011946:	2e00      	cmp	r6, #0
 8011948:	9301      	str	r3, [sp, #4]
 801194a:	d028      	beq.n	801199e <__d2b+0x86>
 801194c:	4668      	mov	r0, sp
 801194e:	9600      	str	r6, [sp, #0]
 8011950:	f7ff fd10 	bl	8011374 <__lo0bits>
 8011954:	9900      	ldr	r1, [sp, #0]
 8011956:	b300      	cbz	r0, 801199a <__d2b+0x82>
 8011958:	9a01      	ldr	r2, [sp, #4]
 801195a:	f1c0 0320 	rsb	r3, r0, #32
 801195e:	fa02 f303 	lsl.w	r3, r2, r3
 8011962:	430b      	orrs	r3, r1
 8011964:	40c2      	lsrs	r2, r0
 8011966:	6163      	str	r3, [r4, #20]
 8011968:	9201      	str	r2, [sp, #4]
 801196a:	9b01      	ldr	r3, [sp, #4]
 801196c:	61a3      	str	r3, [r4, #24]
 801196e:	2b00      	cmp	r3, #0
 8011970:	bf14      	ite	ne
 8011972:	2202      	movne	r2, #2
 8011974:	2201      	moveq	r2, #1
 8011976:	6122      	str	r2, [r4, #16]
 8011978:	b1d5      	cbz	r5, 80119b0 <__d2b+0x98>
 801197a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801197e:	4405      	add	r5, r0
 8011980:	f8c9 5000 	str.w	r5, [r9]
 8011984:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011988:	f8c8 0000 	str.w	r0, [r8]
 801198c:	4620      	mov	r0, r4
 801198e:	b003      	add	sp, #12
 8011990:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011994:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011998:	e7d5      	b.n	8011946 <__d2b+0x2e>
 801199a:	6161      	str	r1, [r4, #20]
 801199c:	e7e5      	b.n	801196a <__d2b+0x52>
 801199e:	a801      	add	r0, sp, #4
 80119a0:	f7ff fce8 	bl	8011374 <__lo0bits>
 80119a4:	9b01      	ldr	r3, [sp, #4]
 80119a6:	6163      	str	r3, [r4, #20]
 80119a8:	2201      	movs	r2, #1
 80119aa:	6122      	str	r2, [r4, #16]
 80119ac:	3020      	adds	r0, #32
 80119ae:	e7e3      	b.n	8011978 <__d2b+0x60>
 80119b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80119b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80119b8:	f8c9 0000 	str.w	r0, [r9]
 80119bc:	6918      	ldr	r0, [r3, #16]
 80119be:	f7ff fcb9 	bl	8011334 <__hi0bits>
 80119c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80119c6:	e7df      	b.n	8011988 <__d2b+0x70>
 80119c8:	08013bc9 	.word	0x08013bc9
 80119cc:	08013cbc 	.word	0x08013cbc

080119d0 <__ratio>:
 80119d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119d4:	4688      	mov	r8, r1
 80119d6:	4669      	mov	r1, sp
 80119d8:	4681      	mov	r9, r0
 80119da:	f7ff ff4d 	bl	8011878 <__b2d>
 80119de:	a901      	add	r1, sp, #4
 80119e0:	4640      	mov	r0, r8
 80119e2:	ec55 4b10 	vmov	r4, r5, d0
 80119e6:	f7ff ff47 	bl	8011878 <__b2d>
 80119ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80119ee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80119f2:	eba3 0c02 	sub.w	ip, r3, r2
 80119f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80119fa:	1a9b      	subs	r3, r3, r2
 80119fc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011a00:	ec51 0b10 	vmov	r0, r1, d0
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	bfd6      	itet	le
 8011a08:	460a      	movle	r2, r1
 8011a0a:	462a      	movgt	r2, r5
 8011a0c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011a10:	468b      	mov	fp, r1
 8011a12:	462f      	mov	r7, r5
 8011a14:	bfd4      	ite	le
 8011a16:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011a1a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011a1e:	4620      	mov	r0, r4
 8011a20:	ee10 2a10 	vmov	r2, s0
 8011a24:	465b      	mov	r3, fp
 8011a26:	4639      	mov	r1, r7
 8011a28:	f7ee ff18 	bl	800085c <__aeabi_ddiv>
 8011a2c:	ec41 0b10 	vmov	d0, r0, r1
 8011a30:	b003      	add	sp, #12
 8011a32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011a36 <__copybits>:
 8011a36:	3901      	subs	r1, #1
 8011a38:	b570      	push	{r4, r5, r6, lr}
 8011a3a:	1149      	asrs	r1, r1, #5
 8011a3c:	6914      	ldr	r4, [r2, #16]
 8011a3e:	3101      	adds	r1, #1
 8011a40:	f102 0314 	add.w	r3, r2, #20
 8011a44:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011a48:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011a4c:	1f05      	subs	r5, r0, #4
 8011a4e:	42a3      	cmp	r3, r4
 8011a50:	d30c      	bcc.n	8011a6c <__copybits+0x36>
 8011a52:	1aa3      	subs	r3, r4, r2
 8011a54:	3b11      	subs	r3, #17
 8011a56:	f023 0303 	bic.w	r3, r3, #3
 8011a5a:	3211      	adds	r2, #17
 8011a5c:	42a2      	cmp	r2, r4
 8011a5e:	bf88      	it	hi
 8011a60:	2300      	movhi	r3, #0
 8011a62:	4418      	add	r0, r3
 8011a64:	2300      	movs	r3, #0
 8011a66:	4288      	cmp	r0, r1
 8011a68:	d305      	bcc.n	8011a76 <__copybits+0x40>
 8011a6a:	bd70      	pop	{r4, r5, r6, pc}
 8011a6c:	f853 6b04 	ldr.w	r6, [r3], #4
 8011a70:	f845 6f04 	str.w	r6, [r5, #4]!
 8011a74:	e7eb      	b.n	8011a4e <__copybits+0x18>
 8011a76:	f840 3b04 	str.w	r3, [r0], #4
 8011a7a:	e7f4      	b.n	8011a66 <__copybits+0x30>

08011a7c <__any_on>:
 8011a7c:	f100 0214 	add.w	r2, r0, #20
 8011a80:	6900      	ldr	r0, [r0, #16]
 8011a82:	114b      	asrs	r3, r1, #5
 8011a84:	4298      	cmp	r0, r3
 8011a86:	b510      	push	{r4, lr}
 8011a88:	db11      	blt.n	8011aae <__any_on+0x32>
 8011a8a:	dd0a      	ble.n	8011aa2 <__any_on+0x26>
 8011a8c:	f011 011f 	ands.w	r1, r1, #31
 8011a90:	d007      	beq.n	8011aa2 <__any_on+0x26>
 8011a92:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011a96:	fa24 f001 	lsr.w	r0, r4, r1
 8011a9a:	fa00 f101 	lsl.w	r1, r0, r1
 8011a9e:	428c      	cmp	r4, r1
 8011aa0:	d10b      	bne.n	8011aba <__any_on+0x3e>
 8011aa2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011aa6:	4293      	cmp	r3, r2
 8011aa8:	d803      	bhi.n	8011ab2 <__any_on+0x36>
 8011aaa:	2000      	movs	r0, #0
 8011aac:	bd10      	pop	{r4, pc}
 8011aae:	4603      	mov	r3, r0
 8011ab0:	e7f7      	b.n	8011aa2 <__any_on+0x26>
 8011ab2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011ab6:	2900      	cmp	r1, #0
 8011ab8:	d0f5      	beq.n	8011aa6 <__any_on+0x2a>
 8011aba:	2001      	movs	r0, #1
 8011abc:	e7f6      	b.n	8011aac <__any_on+0x30>

08011abe <_calloc_r>:
 8011abe:	b513      	push	{r0, r1, r4, lr}
 8011ac0:	434a      	muls	r2, r1
 8011ac2:	4611      	mov	r1, r2
 8011ac4:	9201      	str	r2, [sp, #4]
 8011ac6:	f7fb ff4f 	bl	800d968 <_malloc_r>
 8011aca:	4604      	mov	r4, r0
 8011acc:	b118      	cbz	r0, 8011ad6 <_calloc_r+0x18>
 8011ace:	9a01      	ldr	r2, [sp, #4]
 8011ad0:	2100      	movs	r1, #0
 8011ad2:	f7fb fef1 	bl	800d8b8 <memset>
 8011ad6:	4620      	mov	r0, r4
 8011ad8:	b002      	add	sp, #8
 8011ada:	bd10      	pop	{r4, pc}

08011adc <__ssputs_r>:
 8011adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ae0:	688e      	ldr	r6, [r1, #8]
 8011ae2:	429e      	cmp	r6, r3
 8011ae4:	4682      	mov	sl, r0
 8011ae6:	460c      	mov	r4, r1
 8011ae8:	4690      	mov	r8, r2
 8011aea:	461f      	mov	r7, r3
 8011aec:	d838      	bhi.n	8011b60 <__ssputs_r+0x84>
 8011aee:	898a      	ldrh	r2, [r1, #12]
 8011af0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011af4:	d032      	beq.n	8011b5c <__ssputs_r+0x80>
 8011af6:	6825      	ldr	r5, [r4, #0]
 8011af8:	6909      	ldr	r1, [r1, #16]
 8011afa:	eba5 0901 	sub.w	r9, r5, r1
 8011afe:	6965      	ldr	r5, [r4, #20]
 8011b00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011b04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011b08:	3301      	adds	r3, #1
 8011b0a:	444b      	add	r3, r9
 8011b0c:	106d      	asrs	r5, r5, #1
 8011b0e:	429d      	cmp	r5, r3
 8011b10:	bf38      	it	cc
 8011b12:	461d      	movcc	r5, r3
 8011b14:	0553      	lsls	r3, r2, #21
 8011b16:	d531      	bpl.n	8011b7c <__ssputs_r+0xa0>
 8011b18:	4629      	mov	r1, r5
 8011b1a:	f7fb ff25 	bl	800d968 <_malloc_r>
 8011b1e:	4606      	mov	r6, r0
 8011b20:	b950      	cbnz	r0, 8011b38 <__ssputs_r+0x5c>
 8011b22:	230c      	movs	r3, #12
 8011b24:	f8ca 3000 	str.w	r3, [sl]
 8011b28:	89a3      	ldrh	r3, [r4, #12]
 8011b2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b2e:	81a3      	strh	r3, [r4, #12]
 8011b30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b38:	6921      	ldr	r1, [r4, #16]
 8011b3a:	464a      	mov	r2, r9
 8011b3c:	f7ff faea 	bl	8011114 <memcpy>
 8011b40:	89a3      	ldrh	r3, [r4, #12]
 8011b42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011b46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b4a:	81a3      	strh	r3, [r4, #12]
 8011b4c:	6126      	str	r6, [r4, #16]
 8011b4e:	6165      	str	r5, [r4, #20]
 8011b50:	444e      	add	r6, r9
 8011b52:	eba5 0509 	sub.w	r5, r5, r9
 8011b56:	6026      	str	r6, [r4, #0]
 8011b58:	60a5      	str	r5, [r4, #8]
 8011b5a:	463e      	mov	r6, r7
 8011b5c:	42be      	cmp	r6, r7
 8011b5e:	d900      	bls.n	8011b62 <__ssputs_r+0x86>
 8011b60:	463e      	mov	r6, r7
 8011b62:	4632      	mov	r2, r6
 8011b64:	6820      	ldr	r0, [r4, #0]
 8011b66:	4641      	mov	r1, r8
 8011b68:	f000 fb36 	bl	80121d8 <memmove>
 8011b6c:	68a3      	ldr	r3, [r4, #8]
 8011b6e:	6822      	ldr	r2, [r4, #0]
 8011b70:	1b9b      	subs	r3, r3, r6
 8011b72:	4432      	add	r2, r6
 8011b74:	60a3      	str	r3, [r4, #8]
 8011b76:	6022      	str	r2, [r4, #0]
 8011b78:	2000      	movs	r0, #0
 8011b7a:	e7db      	b.n	8011b34 <__ssputs_r+0x58>
 8011b7c:	462a      	mov	r2, r5
 8011b7e:	f000 fb45 	bl	801220c <_realloc_r>
 8011b82:	4606      	mov	r6, r0
 8011b84:	2800      	cmp	r0, #0
 8011b86:	d1e1      	bne.n	8011b4c <__ssputs_r+0x70>
 8011b88:	6921      	ldr	r1, [r4, #16]
 8011b8a:	4650      	mov	r0, sl
 8011b8c:	f7fb fe9c 	bl	800d8c8 <_free_r>
 8011b90:	e7c7      	b.n	8011b22 <__ssputs_r+0x46>
	...

08011b94 <_svfiprintf_r>:
 8011b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b98:	4698      	mov	r8, r3
 8011b9a:	898b      	ldrh	r3, [r1, #12]
 8011b9c:	061b      	lsls	r3, r3, #24
 8011b9e:	b09d      	sub	sp, #116	; 0x74
 8011ba0:	4607      	mov	r7, r0
 8011ba2:	460d      	mov	r5, r1
 8011ba4:	4614      	mov	r4, r2
 8011ba6:	d50e      	bpl.n	8011bc6 <_svfiprintf_r+0x32>
 8011ba8:	690b      	ldr	r3, [r1, #16]
 8011baa:	b963      	cbnz	r3, 8011bc6 <_svfiprintf_r+0x32>
 8011bac:	2140      	movs	r1, #64	; 0x40
 8011bae:	f7fb fedb 	bl	800d968 <_malloc_r>
 8011bb2:	6028      	str	r0, [r5, #0]
 8011bb4:	6128      	str	r0, [r5, #16]
 8011bb6:	b920      	cbnz	r0, 8011bc2 <_svfiprintf_r+0x2e>
 8011bb8:	230c      	movs	r3, #12
 8011bba:	603b      	str	r3, [r7, #0]
 8011bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011bc0:	e0d1      	b.n	8011d66 <_svfiprintf_r+0x1d2>
 8011bc2:	2340      	movs	r3, #64	; 0x40
 8011bc4:	616b      	str	r3, [r5, #20]
 8011bc6:	2300      	movs	r3, #0
 8011bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8011bca:	2320      	movs	r3, #32
 8011bcc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011bd0:	f8cd 800c 	str.w	r8, [sp, #12]
 8011bd4:	2330      	movs	r3, #48	; 0x30
 8011bd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8011d80 <_svfiprintf_r+0x1ec>
 8011bda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011bde:	f04f 0901 	mov.w	r9, #1
 8011be2:	4623      	mov	r3, r4
 8011be4:	469a      	mov	sl, r3
 8011be6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011bea:	b10a      	cbz	r2, 8011bf0 <_svfiprintf_r+0x5c>
 8011bec:	2a25      	cmp	r2, #37	; 0x25
 8011bee:	d1f9      	bne.n	8011be4 <_svfiprintf_r+0x50>
 8011bf0:	ebba 0b04 	subs.w	fp, sl, r4
 8011bf4:	d00b      	beq.n	8011c0e <_svfiprintf_r+0x7a>
 8011bf6:	465b      	mov	r3, fp
 8011bf8:	4622      	mov	r2, r4
 8011bfa:	4629      	mov	r1, r5
 8011bfc:	4638      	mov	r0, r7
 8011bfe:	f7ff ff6d 	bl	8011adc <__ssputs_r>
 8011c02:	3001      	adds	r0, #1
 8011c04:	f000 80aa 	beq.w	8011d5c <_svfiprintf_r+0x1c8>
 8011c08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011c0a:	445a      	add	r2, fp
 8011c0c:	9209      	str	r2, [sp, #36]	; 0x24
 8011c0e:	f89a 3000 	ldrb.w	r3, [sl]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	f000 80a2 	beq.w	8011d5c <_svfiprintf_r+0x1c8>
 8011c18:	2300      	movs	r3, #0
 8011c1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011c1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011c22:	f10a 0a01 	add.w	sl, sl, #1
 8011c26:	9304      	str	r3, [sp, #16]
 8011c28:	9307      	str	r3, [sp, #28]
 8011c2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011c2e:	931a      	str	r3, [sp, #104]	; 0x68
 8011c30:	4654      	mov	r4, sl
 8011c32:	2205      	movs	r2, #5
 8011c34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c38:	4851      	ldr	r0, [pc, #324]	; (8011d80 <_svfiprintf_r+0x1ec>)
 8011c3a:	f7ee fad9 	bl	80001f0 <memchr>
 8011c3e:	9a04      	ldr	r2, [sp, #16]
 8011c40:	b9d8      	cbnz	r0, 8011c7a <_svfiprintf_r+0xe6>
 8011c42:	06d0      	lsls	r0, r2, #27
 8011c44:	bf44      	itt	mi
 8011c46:	2320      	movmi	r3, #32
 8011c48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c4c:	0711      	lsls	r1, r2, #28
 8011c4e:	bf44      	itt	mi
 8011c50:	232b      	movmi	r3, #43	; 0x2b
 8011c52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011c56:	f89a 3000 	ldrb.w	r3, [sl]
 8011c5a:	2b2a      	cmp	r3, #42	; 0x2a
 8011c5c:	d015      	beq.n	8011c8a <_svfiprintf_r+0xf6>
 8011c5e:	9a07      	ldr	r2, [sp, #28]
 8011c60:	4654      	mov	r4, sl
 8011c62:	2000      	movs	r0, #0
 8011c64:	f04f 0c0a 	mov.w	ip, #10
 8011c68:	4621      	mov	r1, r4
 8011c6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011c6e:	3b30      	subs	r3, #48	; 0x30
 8011c70:	2b09      	cmp	r3, #9
 8011c72:	d94e      	bls.n	8011d12 <_svfiprintf_r+0x17e>
 8011c74:	b1b0      	cbz	r0, 8011ca4 <_svfiprintf_r+0x110>
 8011c76:	9207      	str	r2, [sp, #28]
 8011c78:	e014      	b.n	8011ca4 <_svfiprintf_r+0x110>
 8011c7a:	eba0 0308 	sub.w	r3, r0, r8
 8011c7e:	fa09 f303 	lsl.w	r3, r9, r3
 8011c82:	4313      	orrs	r3, r2
 8011c84:	9304      	str	r3, [sp, #16]
 8011c86:	46a2      	mov	sl, r4
 8011c88:	e7d2      	b.n	8011c30 <_svfiprintf_r+0x9c>
 8011c8a:	9b03      	ldr	r3, [sp, #12]
 8011c8c:	1d19      	adds	r1, r3, #4
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	9103      	str	r1, [sp, #12]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	bfbb      	ittet	lt
 8011c96:	425b      	neglt	r3, r3
 8011c98:	f042 0202 	orrlt.w	r2, r2, #2
 8011c9c:	9307      	strge	r3, [sp, #28]
 8011c9e:	9307      	strlt	r3, [sp, #28]
 8011ca0:	bfb8      	it	lt
 8011ca2:	9204      	strlt	r2, [sp, #16]
 8011ca4:	7823      	ldrb	r3, [r4, #0]
 8011ca6:	2b2e      	cmp	r3, #46	; 0x2e
 8011ca8:	d10c      	bne.n	8011cc4 <_svfiprintf_r+0x130>
 8011caa:	7863      	ldrb	r3, [r4, #1]
 8011cac:	2b2a      	cmp	r3, #42	; 0x2a
 8011cae:	d135      	bne.n	8011d1c <_svfiprintf_r+0x188>
 8011cb0:	9b03      	ldr	r3, [sp, #12]
 8011cb2:	1d1a      	adds	r2, r3, #4
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	9203      	str	r2, [sp, #12]
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	bfb8      	it	lt
 8011cbc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011cc0:	3402      	adds	r4, #2
 8011cc2:	9305      	str	r3, [sp, #20]
 8011cc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8011d90 <_svfiprintf_r+0x1fc>
 8011cc8:	7821      	ldrb	r1, [r4, #0]
 8011cca:	2203      	movs	r2, #3
 8011ccc:	4650      	mov	r0, sl
 8011cce:	f7ee fa8f 	bl	80001f0 <memchr>
 8011cd2:	b140      	cbz	r0, 8011ce6 <_svfiprintf_r+0x152>
 8011cd4:	2340      	movs	r3, #64	; 0x40
 8011cd6:	eba0 000a 	sub.w	r0, r0, sl
 8011cda:	fa03 f000 	lsl.w	r0, r3, r0
 8011cde:	9b04      	ldr	r3, [sp, #16]
 8011ce0:	4303      	orrs	r3, r0
 8011ce2:	3401      	adds	r4, #1
 8011ce4:	9304      	str	r3, [sp, #16]
 8011ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011cea:	4826      	ldr	r0, [pc, #152]	; (8011d84 <_svfiprintf_r+0x1f0>)
 8011cec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011cf0:	2206      	movs	r2, #6
 8011cf2:	f7ee fa7d 	bl	80001f0 <memchr>
 8011cf6:	2800      	cmp	r0, #0
 8011cf8:	d038      	beq.n	8011d6c <_svfiprintf_r+0x1d8>
 8011cfa:	4b23      	ldr	r3, [pc, #140]	; (8011d88 <_svfiprintf_r+0x1f4>)
 8011cfc:	bb1b      	cbnz	r3, 8011d46 <_svfiprintf_r+0x1b2>
 8011cfe:	9b03      	ldr	r3, [sp, #12]
 8011d00:	3307      	adds	r3, #7
 8011d02:	f023 0307 	bic.w	r3, r3, #7
 8011d06:	3308      	adds	r3, #8
 8011d08:	9303      	str	r3, [sp, #12]
 8011d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011d0c:	4433      	add	r3, r6
 8011d0e:	9309      	str	r3, [sp, #36]	; 0x24
 8011d10:	e767      	b.n	8011be2 <_svfiprintf_r+0x4e>
 8011d12:	fb0c 3202 	mla	r2, ip, r2, r3
 8011d16:	460c      	mov	r4, r1
 8011d18:	2001      	movs	r0, #1
 8011d1a:	e7a5      	b.n	8011c68 <_svfiprintf_r+0xd4>
 8011d1c:	2300      	movs	r3, #0
 8011d1e:	3401      	adds	r4, #1
 8011d20:	9305      	str	r3, [sp, #20]
 8011d22:	4619      	mov	r1, r3
 8011d24:	f04f 0c0a 	mov.w	ip, #10
 8011d28:	4620      	mov	r0, r4
 8011d2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d2e:	3a30      	subs	r2, #48	; 0x30
 8011d30:	2a09      	cmp	r2, #9
 8011d32:	d903      	bls.n	8011d3c <_svfiprintf_r+0x1a8>
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d0c5      	beq.n	8011cc4 <_svfiprintf_r+0x130>
 8011d38:	9105      	str	r1, [sp, #20]
 8011d3a:	e7c3      	b.n	8011cc4 <_svfiprintf_r+0x130>
 8011d3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011d40:	4604      	mov	r4, r0
 8011d42:	2301      	movs	r3, #1
 8011d44:	e7f0      	b.n	8011d28 <_svfiprintf_r+0x194>
 8011d46:	ab03      	add	r3, sp, #12
 8011d48:	9300      	str	r3, [sp, #0]
 8011d4a:	462a      	mov	r2, r5
 8011d4c:	4b0f      	ldr	r3, [pc, #60]	; (8011d8c <_svfiprintf_r+0x1f8>)
 8011d4e:	a904      	add	r1, sp, #16
 8011d50:	4638      	mov	r0, r7
 8011d52:	f7fb ff03 	bl	800db5c <_printf_float>
 8011d56:	1c42      	adds	r2, r0, #1
 8011d58:	4606      	mov	r6, r0
 8011d5a:	d1d6      	bne.n	8011d0a <_svfiprintf_r+0x176>
 8011d5c:	89ab      	ldrh	r3, [r5, #12]
 8011d5e:	065b      	lsls	r3, r3, #25
 8011d60:	f53f af2c 	bmi.w	8011bbc <_svfiprintf_r+0x28>
 8011d64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011d66:	b01d      	add	sp, #116	; 0x74
 8011d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d6c:	ab03      	add	r3, sp, #12
 8011d6e:	9300      	str	r3, [sp, #0]
 8011d70:	462a      	mov	r2, r5
 8011d72:	4b06      	ldr	r3, [pc, #24]	; (8011d8c <_svfiprintf_r+0x1f8>)
 8011d74:	a904      	add	r1, sp, #16
 8011d76:	4638      	mov	r0, r7
 8011d78:	f7fc f994 	bl	800e0a4 <_printf_i>
 8011d7c:	e7eb      	b.n	8011d56 <_svfiprintf_r+0x1c2>
 8011d7e:	bf00      	nop
 8011d80:	08013e1c 	.word	0x08013e1c
 8011d84:	08013e26 	.word	0x08013e26
 8011d88:	0800db5d 	.word	0x0800db5d
 8011d8c:	08011add 	.word	0x08011add
 8011d90:	08013e22 	.word	0x08013e22

08011d94 <__sfputc_r>:
 8011d94:	6893      	ldr	r3, [r2, #8]
 8011d96:	3b01      	subs	r3, #1
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	b410      	push	{r4}
 8011d9c:	6093      	str	r3, [r2, #8]
 8011d9e:	da08      	bge.n	8011db2 <__sfputc_r+0x1e>
 8011da0:	6994      	ldr	r4, [r2, #24]
 8011da2:	42a3      	cmp	r3, r4
 8011da4:	db01      	blt.n	8011daa <__sfputc_r+0x16>
 8011da6:	290a      	cmp	r1, #10
 8011da8:	d103      	bne.n	8011db2 <__sfputc_r+0x1e>
 8011daa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011dae:	f7fd bca3 	b.w	800f6f8 <__swbuf_r>
 8011db2:	6813      	ldr	r3, [r2, #0]
 8011db4:	1c58      	adds	r0, r3, #1
 8011db6:	6010      	str	r0, [r2, #0]
 8011db8:	7019      	strb	r1, [r3, #0]
 8011dba:	4608      	mov	r0, r1
 8011dbc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011dc0:	4770      	bx	lr

08011dc2 <__sfputs_r>:
 8011dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011dc4:	4606      	mov	r6, r0
 8011dc6:	460f      	mov	r7, r1
 8011dc8:	4614      	mov	r4, r2
 8011dca:	18d5      	adds	r5, r2, r3
 8011dcc:	42ac      	cmp	r4, r5
 8011dce:	d101      	bne.n	8011dd4 <__sfputs_r+0x12>
 8011dd0:	2000      	movs	r0, #0
 8011dd2:	e007      	b.n	8011de4 <__sfputs_r+0x22>
 8011dd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011dd8:	463a      	mov	r2, r7
 8011dda:	4630      	mov	r0, r6
 8011ddc:	f7ff ffda 	bl	8011d94 <__sfputc_r>
 8011de0:	1c43      	adds	r3, r0, #1
 8011de2:	d1f3      	bne.n	8011dcc <__sfputs_r+0xa>
 8011de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011de8 <_vfiprintf_r>:
 8011de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dec:	460d      	mov	r5, r1
 8011dee:	b09d      	sub	sp, #116	; 0x74
 8011df0:	4614      	mov	r4, r2
 8011df2:	4698      	mov	r8, r3
 8011df4:	4606      	mov	r6, r0
 8011df6:	b118      	cbz	r0, 8011e00 <_vfiprintf_r+0x18>
 8011df8:	6983      	ldr	r3, [r0, #24]
 8011dfa:	b90b      	cbnz	r3, 8011e00 <_vfiprintf_r+0x18>
 8011dfc:	f7fe fcee 	bl	80107dc <__sinit>
 8011e00:	4b89      	ldr	r3, [pc, #548]	; (8012028 <_vfiprintf_r+0x240>)
 8011e02:	429d      	cmp	r5, r3
 8011e04:	d11b      	bne.n	8011e3e <_vfiprintf_r+0x56>
 8011e06:	6875      	ldr	r5, [r6, #4]
 8011e08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011e0a:	07d9      	lsls	r1, r3, #31
 8011e0c:	d405      	bmi.n	8011e1a <_vfiprintf_r+0x32>
 8011e0e:	89ab      	ldrh	r3, [r5, #12]
 8011e10:	059a      	lsls	r2, r3, #22
 8011e12:	d402      	bmi.n	8011e1a <_vfiprintf_r+0x32>
 8011e14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011e16:	f7ff f904 	bl	8011022 <__retarget_lock_acquire_recursive>
 8011e1a:	89ab      	ldrh	r3, [r5, #12]
 8011e1c:	071b      	lsls	r3, r3, #28
 8011e1e:	d501      	bpl.n	8011e24 <_vfiprintf_r+0x3c>
 8011e20:	692b      	ldr	r3, [r5, #16]
 8011e22:	b9eb      	cbnz	r3, 8011e60 <_vfiprintf_r+0x78>
 8011e24:	4629      	mov	r1, r5
 8011e26:	4630      	mov	r0, r6
 8011e28:	f7fd fcb8 	bl	800f79c <__swsetup_r>
 8011e2c:	b1c0      	cbz	r0, 8011e60 <_vfiprintf_r+0x78>
 8011e2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011e30:	07dc      	lsls	r4, r3, #31
 8011e32:	d50e      	bpl.n	8011e52 <_vfiprintf_r+0x6a>
 8011e34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e38:	b01d      	add	sp, #116	; 0x74
 8011e3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e3e:	4b7b      	ldr	r3, [pc, #492]	; (801202c <_vfiprintf_r+0x244>)
 8011e40:	429d      	cmp	r5, r3
 8011e42:	d101      	bne.n	8011e48 <_vfiprintf_r+0x60>
 8011e44:	68b5      	ldr	r5, [r6, #8]
 8011e46:	e7df      	b.n	8011e08 <_vfiprintf_r+0x20>
 8011e48:	4b79      	ldr	r3, [pc, #484]	; (8012030 <_vfiprintf_r+0x248>)
 8011e4a:	429d      	cmp	r5, r3
 8011e4c:	bf08      	it	eq
 8011e4e:	68f5      	ldreq	r5, [r6, #12]
 8011e50:	e7da      	b.n	8011e08 <_vfiprintf_r+0x20>
 8011e52:	89ab      	ldrh	r3, [r5, #12]
 8011e54:	0598      	lsls	r0, r3, #22
 8011e56:	d4ed      	bmi.n	8011e34 <_vfiprintf_r+0x4c>
 8011e58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011e5a:	f7ff f8e3 	bl	8011024 <__retarget_lock_release_recursive>
 8011e5e:	e7e9      	b.n	8011e34 <_vfiprintf_r+0x4c>
 8011e60:	2300      	movs	r3, #0
 8011e62:	9309      	str	r3, [sp, #36]	; 0x24
 8011e64:	2320      	movs	r3, #32
 8011e66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011e6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e6e:	2330      	movs	r3, #48	; 0x30
 8011e70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012034 <_vfiprintf_r+0x24c>
 8011e74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011e78:	f04f 0901 	mov.w	r9, #1
 8011e7c:	4623      	mov	r3, r4
 8011e7e:	469a      	mov	sl, r3
 8011e80:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e84:	b10a      	cbz	r2, 8011e8a <_vfiprintf_r+0xa2>
 8011e86:	2a25      	cmp	r2, #37	; 0x25
 8011e88:	d1f9      	bne.n	8011e7e <_vfiprintf_r+0x96>
 8011e8a:	ebba 0b04 	subs.w	fp, sl, r4
 8011e8e:	d00b      	beq.n	8011ea8 <_vfiprintf_r+0xc0>
 8011e90:	465b      	mov	r3, fp
 8011e92:	4622      	mov	r2, r4
 8011e94:	4629      	mov	r1, r5
 8011e96:	4630      	mov	r0, r6
 8011e98:	f7ff ff93 	bl	8011dc2 <__sfputs_r>
 8011e9c:	3001      	adds	r0, #1
 8011e9e:	f000 80aa 	beq.w	8011ff6 <_vfiprintf_r+0x20e>
 8011ea2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011ea4:	445a      	add	r2, fp
 8011ea6:	9209      	str	r2, [sp, #36]	; 0x24
 8011ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	f000 80a2 	beq.w	8011ff6 <_vfiprintf_r+0x20e>
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011eb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011ebc:	f10a 0a01 	add.w	sl, sl, #1
 8011ec0:	9304      	str	r3, [sp, #16]
 8011ec2:	9307      	str	r3, [sp, #28]
 8011ec4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011ec8:	931a      	str	r3, [sp, #104]	; 0x68
 8011eca:	4654      	mov	r4, sl
 8011ecc:	2205      	movs	r2, #5
 8011ece:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011ed2:	4858      	ldr	r0, [pc, #352]	; (8012034 <_vfiprintf_r+0x24c>)
 8011ed4:	f7ee f98c 	bl	80001f0 <memchr>
 8011ed8:	9a04      	ldr	r2, [sp, #16]
 8011eda:	b9d8      	cbnz	r0, 8011f14 <_vfiprintf_r+0x12c>
 8011edc:	06d1      	lsls	r1, r2, #27
 8011ede:	bf44      	itt	mi
 8011ee0:	2320      	movmi	r3, #32
 8011ee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ee6:	0713      	lsls	r3, r2, #28
 8011ee8:	bf44      	itt	mi
 8011eea:	232b      	movmi	r3, #43	; 0x2b
 8011eec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011ef0:	f89a 3000 	ldrb.w	r3, [sl]
 8011ef4:	2b2a      	cmp	r3, #42	; 0x2a
 8011ef6:	d015      	beq.n	8011f24 <_vfiprintf_r+0x13c>
 8011ef8:	9a07      	ldr	r2, [sp, #28]
 8011efa:	4654      	mov	r4, sl
 8011efc:	2000      	movs	r0, #0
 8011efe:	f04f 0c0a 	mov.w	ip, #10
 8011f02:	4621      	mov	r1, r4
 8011f04:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011f08:	3b30      	subs	r3, #48	; 0x30
 8011f0a:	2b09      	cmp	r3, #9
 8011f0c:	d94e      	bls.n	8011fac <_vfiprintf_r+0x1c4>
 8011f0e:	b1b0      	cbz	r0, 8011f3e <_vfiprintf_r+0x156>
 8011f10:	9207      	str	r2, [sp, #28]
 8011f12:	e014      	b.n	8011f3e <_vfiprintf_r+0x156>
 8011f14:	eba0 0308 	sub.w	r3, r0, r8
 8011f18:	fa09 f303 	lsl.w	r3, r9, r3
 8011f1c:	4313      	orrs	r3, r2
 8011f1e:	9304      	str	r3, [sp, #16]
 8011f20:	46a2      	mov	sl, r4
 8011f22:	e7d2      	b.n	8011eca <_vfiprintf_r+0xe2>
 8011f24:	9b03      	ldr	r3, [sp, #12]
 8011f26:	1d19      	adds	r1, r3, #4
 8011f28:	681b      	ldr	r3, [r3, #0]
 8011f2a:	9103      	str	r1, [sp, #12]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	bfbb      	ittet	lt
 8011f30:	425b      	neglt	r3, r3
 8011f32:	f042 0202 	orrlt.w	r2, r2, #2
 8011f36:	9307      	strge	r3, [sp, #28]
 8011f38:	9307      	strlt	r3, [sp, #28]
 8011f3a:	bfb8      	it	lt
 8011f3c:	9204      	strlt	r2, [sp, #16]
 8011f3e:	7823      	ldrb	r3, [r4, #0]
 8011f40:	2b2e      	cmp	r3, #46	; 0x2e
 8011f42:	d10c      	bne.n	8011f5e <_vfiprintf_r+0x176>
 8011f44:	7863      	ldrb	r3, [r4, #1]
 8011f46:	2b2a      	cmp	r3, #42	; 0x2a
 8011f48:	d135      	bne.n	8011fb6 <_vfiprintf_r+0x1ce>
 8011f4a:	9b03      	ldr	r3, [sp, #12]
 8011f4c:	1d1a      	adds	r2, r3, #4
 8011f4e:	681b      	ldr	r3, [r3, #0]
 8011f50:	9203      	str	r2, [sp, #12]
 8011f52:	2b00      	cmp	r3, #0
 8011f54:	bfb8      	it	lt
 8011f56:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011f5a:	3402      	adds	r4, #2
 8011f5c:	9305      	str	r3, [sp, #20]
 8011f5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012044 <_vfiprintf_r+0x25c>
 8011f62:	7821      	ldrb	r1, [r4, #0]
 8011f64:	2203      	movs	r2, #3
 8011f66:	4650      	mov	r0, sl
 8011f68:	f7ee f942 	bl	80001f0 <memchr>
 8011f6c:	b140      	cbz	r0, 8011f80 <_vfiprintf_r+0x198>
 8011f6e:	2340      	movs	r3, #64	; 0x40
 8011f70:	eba0 000a 	sub.w	r0, r0, sl
 8011f74:	fa03 f000 	lsl.w	r0, r3, r0
 8011f78:	9b04      	ldr	r3, [sp, #16]
 8011f7a:	4303      	orrs	r3, r0
 8011f7c:	3401      	adds	r4, #1
 8011f7e:	9304      	str	r3, [sp, #16]
 8011f80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f84:	482c      	ldr	r0, [pc, #176]	; (8012038 <_vfiprintf_r+0x250>)
 8011f86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011f8a:	2206      	movs	r2, #6
 8011f8c:	f7ee f930 	bl	80001f0 <memchr>
 8011f90:	2800      	cmp	r0, #0
 8011f92:	d03f      	beq.n	8012014 <_vfiprintf_r+0x22c>
 8011f94:	4b29      	ldr	r3, [pc, #164]	; (801203c <_vfiprintf_r+0x254>)
 8011f96:	bb1b      	cbnz	r3, 8011fe0 <_vfiprintf_r+0x1f8>
 8011f98:	9b03      	ldr	r3, [sp, #12]
 8011f9a:	3307      	adds	r3, #7
 8011f9c:	f023 0307 	bic.w	r3, r3, #7
 8011fa0:	3308      	adds	r3, #8
 8011fa2:	9303      	str	r3, [sp, #12]
 8011fa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011fa6:	443b      	add	r3, r7
 8011fa8:	9309      	str	r3, [sp, #36]	; 0x24
 8011faa:	e767      	b.n	8011e7c <_vfiprintf_r+0x94>
 8011fac:	fb0c 3202 	mla	r2, ip, r2, r3
 8011fb0:	460c      	mov	r4, r1
 8011fb2:	2001      	movs	r0, #1
 8011fb4:	e7a5      	b.n	8011f02 <_vfiprintf_r+0x11a>
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	3401      	adds	r4, #1
 8011fba:	9305      	str	r3, [sp, #20]
 8011fbc:	4619      	mov	r1, r3
 8011fbe:	f04f 0c0a 	mov.w	ip, #10
 8011fc2:	4620      	mov	r0, r4
 8011fc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011fc8:	3a30      	subs	r2, #48	; 0x30
 8011fca:	2a09      	cmp	r2, #9
 8011fcc:	d903      	bls.n	8011fd6 <_vfiprintf_r+0x1ee>
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d0c5      	beq.n	8011f5e <_vfiprintf_r+0x176>
 8011fd2:	9105      	str	r1, [sp, #20]
 8011fd4:	e7c3      	b.n	8011f5e <_vfiprintf_r+0x176>
 8011fd6:	fb0c 2101 	mla	r1, ip, r1, r2
 8011fda:	4604      	mov	r4, r0
 8011fdc:	2301      	movs	r3, #1
 8011fde:	e7f0      	b.n	8011fc2 <_vfiprintf_r+0x1da>
 8011fe0:	ab03      	add	r3, sp, #12
 8011fe2:	9300      	str	r3, [sp, #0]
 8011fe4:	462a      	mov	r2, r5
 8011fe6:	4b16      	ldr	r3, [pc, #88]	; (8012040 <_vfiprintf_r+0x258>)
 8011fe8:	a904      	add	r1, sp, #16
 8011fea:	4630      	mov	r0, r6
 8011fec:	f7fb fdb6 	bl	800db5c <_printf_float>
 8011ff0:	4607      	mov	r7, r0
 8011ff2:	1c78      	adds	r0, r7, #1
 8011ff4:	d1d6      	bne.n	8011fa4 <_vfiprintf_r+0x1bc>
 8011ff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011ff8:	07d9      	lsls	r1, r3, #31
 8011ffa:	d405      	bmi.n	8012008 <_vfiprintf_r+0x220>
 8011ffc:	89ab      	ldrh	r3, [r5, #12]
 8011ffe:	059a      	lsls	r2, r3, #22
 8012000:	d402      	bmi.n	8012008 <_vfiprintf_r+0x220>
 8012002:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012004:	f7ff f80e 	bl	8011024 <__retarget_lock_release_recursive>
 8012008:	89ab      	ldrh	r3, [r5, #12]
 801200a:	065b      	lsls	r3, r3, #25
 801200c:	f53f af12 	bmi.w	8011e34 <_vfiprintf_r+0x4c>
 8012010:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012012:	e711      	b.n	8011e38 <_vfiprintf_r+0x50>
 8012014:	ab03      	add	r3, sp, #12
 8012016:	9300      	str	r3, [sp, #0]
 8012018:	462a      	mov	r2, r5
 801201a:	4b09      	ldr	r3, [pc, #36]	; (8012040 <_vfiprintf_r+0x258>)
 801201c:	a904      	add	r1, sp, #16
 801201e:	4630      	mov	r0, r6
 8012020:	f7fc f840 	bl	800e0a4 <_printf_i>
 8012024:	e7e4      	b.n	8011ff0 <_vfiprintf_r+0x208>
 8012026:	bf00      	nop
 8012028:	08013bfc 	.word	0x08013bfc
 801202c:	08013c1c 	.word	0x08013c1c
 8012030:	08013bdc 	.word	0x08013bdc
 8012034:	08013e1c 	.word	0x08013e1c
 8012038:	08013e26 	.word	0x08013e26
 801203c:	0800db5d 	.word	0x0800db5d
 8012040:	08011dc3 	.word	0x08011dc3
 8012044:	08013e22 	.word	0x08013e22

08012048 <nan>:
 8012048:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012050 <nan+0x8>
 801204c:	4770      	bx	lr
 801204e:	bf00      	nop
 8012050:	00000000 	.word	0x00000000
 8012054:	7ff80000 	.word	0x7ff80000

08012058 <__sread>:
 8012058:	b510      	push	{r4, lr}
 801205a:	460c      	mov	r4, r1
 801205c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012060:	f000 f8fa 	bl	8012258 <_read_r>
 8012064:	2800      	cmp	r0, #0
 8012066:	bfab      	itete	ge
 8012068:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801206a:	89a3      	ldrhlt	r3, [r4, #12]
 801206c:	181b      	addge	r3, r3, r0
 801206e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012072:	bfac      	ite	ge
 8012074:	6563      	strge	r3, [r4, #84]	; 0x54
 8012076:	81a3      	strhlt	r3, [r4, #12]
 8012078:	bd10      	pop	{r4, pc}

0801207a <__swrite>:
 801207a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801207e:	461f      	mov	r7, r3
 8012080:	898b      	ldrh	r3, [r1, #12]
 8012082:	05db      	lsls	r3, r3, #23
 8012084:	4605      	mov	r5, r0
 8012086:	460c      	mov	r4, r1
 8012088:	4616      	mov	r6, r2
 801208a:	d505      	bpl.n	8012098 <__swrite+0x1e>
 801208c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012090:	2302      	movs	r3, #2
 8012092:	2200      	movs	r2, #0
 8012094:	f000 f88e 	bl	80121b4 <_lseek_r>
 8012098:	89a3      	ldrh	r3, [r4, #12]
 801209a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801209e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80120a2:	81a3      	strh	r3, [r4, #12]
 80120a4:	4632      	mov	r2, r6
 80120a6:	463b      	mov	r3, r7
 80120a8:	4628      	mov	r0, r5
 80120aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80120ae:	f000 b835 	b.w	801211c <_write_r>

080120b2 <__sseek>:
 80120b2:	b510      	push	{r4, lr}
 80120b4:	460c      	mov	r4, r1
 80120b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120ba:	f000 f87b 	bl	80121b4 <_lseek_r>
 80120be:	1c43      	adds	r3, r0, #1
 80120c0:	89a3      	ldrh	r3, [r4, #12]
 80120c2:	bf15      	itete	ne
 80120c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80120c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80120ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80120ce:	81a3      	strheq	r3, [r4, #12]
 80120d0:	bf18      	it	ne
 80120d2:	81a3      	strhne	r3, [r4, #12]
 80120d4:	bd10      	pop	{r4, pc}

080120d6 <__sclose>:
 80120d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80120da:	f000 b839 	b.w	8012150 <_close_r>

080120de <strncmp>:
 80120de:	b510      	push	{r4, lr}
 80120e0:	b16a      	cbz	r2, 80120fe <strncmp+0x20>
 80120e2:	3901      	subs	r1, #1
 80120e4:	1884      	adds	r4, r0, r2
 80120e6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80120ea:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80120ee:	4293      	cmp	r3, r2
 80120f0:	d103      	bne.n	80120fa <strncmp+0x1c>
 80120f2:	42a0      	cmp	r0, r4
 80120f4:	d001      	beq.n	80120fa <strncmp+0x1c>
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d1f5      	bne.n	80120e6 <strncmp+0x8>
 80120fa:	1a98      	subs	r0, r3, r2
 80120fc:	bd10      	pop	{r4, pc}
 80120fe:	4610      	mov	r0, r2
 8012100:	e7fc      	b.n	80120fc <strncmp+0x1e>

08012102 <__ascii_wctomb>:
 8012102:	b149      	cbz	r1, 8012118 <__ascii_wctomb+0x16>
 8012104:	2aff      	cmp	r2, #255	; 0xff
 8012106:	bf85      	ittet	hi
 8012108:	238a      	movhi	r3, #138	; 0x8a
 801210a:	6003      	strhi	r3, [r0, #0]
 801210c:	700a      	strbls	r2, [r1, #0]
 801210e:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8012112:	bf98      	it	ls
 8012114:	2001      	movls	r0, #1
 8012116:	4770      	bx	lr
 8012118:	4608      	mov	r0, r1
 801211a:	4770      	bx	lr

0801211c <_write_r>:
 801211c:	b538      	push	{r3, r4, r5, lr}
 801211e:	4d07      	ldr	r5, [pc, #28]	; (801213c <_write_r+0x20>)
 8012120:	4604      	mov	r4, r0
 8012122:	4608      	mov	r0, r1
 8012124:	4611      	mov	r1, r2
 8012126:	2200      	movs	r2, #0
 8012128:	602a      	str	r2, [r5, #0]
 801212a:	461a      	mov	r2, r3
 801212c:	f7f4 f91d 	bl	800636a <_write>
 8012130:	1c43      	adds	r3, r0, #1
 8012132:	d102      	bne.n	801213a <_write_r+0x1e>
 8012134:	682b      	ldr	r3, [r5, #0]
 8012136:	b103      	cbz	r3, 801213a <_write_r+0x1e>
 8012138:	6023      	str	r3, [r4, #0]
 801213a:	bd38      	pop	{r3, r4, r5, pc}
 801213c:	20001aec 	.word	0x20001aec

08012140 <abort>:
 8012140:	b508      	push	{r3, lr}
 8012142:	2006      	movs	r0, #6
 8012144:	f000 f8c2 	bl	80122cc <raise>
 8012148:	2001      	movs	r0, #1
 801214a:	f7f4 f8e7 	bl	800631c <_exit>
	...

08012150 <_close_r>:
 8012150:	b538      	push	{r3, r4, r5, lr}
 8012152:	4d06      	ldr	r5, [pc, #24]	; (801216c <_close_r+0x1c>)
 8012154:	2300      	movs	r3, #0
 8012156:	4604      	mov	r4, r0
 8012158:	4608      	mov	r0, r1
 801215a:	602b      	str	r3, [r5, #0]
 801215c:	f7f4 f921 	bl	80063a2 <_close>
 8012160:	1c43      	adds	r3, r0, #1
 8012162:	d102      	bne.n	801216a <_close_r+0x1a>
 8012164:	682b      	ldr	r3, [r5, #0]
 8012166:	b103      	cbz	r3, 801216a <_close_r+0x1a>
 8012168:	6023      	str	r3, [r4, #0]
 801216a:	bd38      	pop	{r3, r4, r5, pc}
 801216c:	20001aec 	.word	0x20001aec

08012170 <_fstat_r>:
 8012170:	b538      	push	{r3, r4, r5, lr}
 8012172:	4d07      	ldr	r5, [pc, #28]	; (8012190 <_fstat_r+0x20>)
 8012174:	2300      	movs	r3, #0
 8012176:	4604      	mov	r4, r0
 8012178:	4608      	mov	r0, r1
 801217a:	4611      	mov	r1, r2
 801217c:	602b      	str	r3, [r5, #0]
 801217e:	f7f4 f91c 	bl	80063ba <_fstat>
 8012182:	1c43      	adds	r3, r0, #1
 8012184:	d102      	bne.n	801218c <_fstat_r+0x1c>
 8012186:	682b      	ldr	r3, [r5, #0]
 8012188:	b103      	cbz	r3, 801218c <_fstat_r+0x1c>
 801218a:	6023      	str	r3, [r4, #0]
 801218c:	bd38      	pop	{r3, r4, r5, pc}
 801218e:	bf00      	nop
 8012190:	20001aec 	.word	0x20001aec

08012194 <_isatty_r>:
 8012194:	b538      	push	{r3, r4, r5, lr}
 8012196:	4d06      	ldr	r5, [pc, #24]	; (80121b0 <_isatty_r+0x1c>)
 8012198:	2300      	movs	r3, #0
 801219a:	4604      	mov	r4, r0
 801219c:	4608      	mov	r0, r1
 801219e:	602b      	str	r3, [r5, #0]
 80121a0:	f7f4 f91b 	bl	80063da <_isatty>
 80121a4:	1c43      	adds	r3, r0, #1
 80121a6:	d102      	bne.n	80121ae <_isatty_r+0x1a>
 80121a8:	682b      	ldr	r3, [r5, #0]
 80121aa:	b103      	cbz	r3, 80121ae <_isatty_r+0x1a>
 80121ac:	6023      	str	r3, [r4, #0]
 80121ae:	bd38      	pop	{r3, r4, r5, pc}
 80121b0:	20001aec 	.word	0x20001aec

080121b4 <_lseek_r>:
 80121b4:	b538      	push	{r3, r4, r5, lr}
 80121b6:	4d07      	ldr	r5, [pc, #28]	; (80121d4 <_lseek_r+0x20>)
 80121b8:	4604      	mov	r4, r0
 80121ba:	4608      	mov	r0, r1
 80121bc:	4611      	mov	r1, r2
 80121be:	2200      	movs	r2, #0
 80121c0:	602a      	str	r2, [r5, #0]
 80121c2:	461a      	mov	r2, r3
 80121c4:	f7f4 f914 	bl	80063f0 <_lseek>
 80121c8:	1c43      	adds	r3, r0, #1
 80121ca:	d102      	bne.n	80121d2 <_lseek_r+0x1e>
 80121cc:	682b      	ldr	r3, [r5, #0]
 80121ce:	b103      	cbz	r3, 80121d2 <_lseek_r+0x1e>
 80121d0:	6023      	str	r3, [r4, #0]
 80121d2:	bd38      	pop	{r3, r4, r5, pc}
 80121d4:	20001aec 	.word	0x20001aec

080121d8 <memmove>:
 80121d8:	4288      	cmp	r0, r1
 80121da:	b510      	push	{r4, lr}
 80121dc:	eb01 0402 	add.w	r4, r1, r2
 80121e0:	d902      	bls.n	80121e8 <memmove+0x10>
 80121e2:	4284      	cmp	r4, r0
 80121e4:	4623      	mov	r3, r4
 80121e6:	d807      	bhi.n	80121f8 <memmove+0x20>
 80121e8:	1e43      	subs	r3, r0, #1
 80121ea:	42a1      	cmp	r1, r4
 80121ec:	d008      	beq.n	8012200 <memmove+0x28>
 80121ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80121f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80121f6:	e7f8      	b.n	80121ea <memmove+0x12>
 80121f8:	4402      	add	r2, r0
 80121fa:	4601      	mov	r1, r0
 80121fc:	428a      	cmp	r2, r1
 80121fe:	d100      	bne.n	8012202 <memmove+0x2a>
 8012200:	bd10      	pop	{r4, pc}
 8012202:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012206:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801220a:	e7f7      	b.n	80121fc <memmove+0x24>

0801220c <_realloc_r>:
 801220c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801220e:	4607      	mov	r7, r0
 8012210:	4614      	mov	r4, r2
 8012212:	460e      	mov	r6, r1
 8012214:	b921      	cbnz	r1, 8012220 <_realloc_r+0x14>
 8012216:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801221a:	4611      	mov	r1, r2
 801221c:	f7fb bba4 	b.w	800d968 <_malloc_r>
 8012220:	b922      	cbnz	r2, 801222c <_realloc_r+0x20>
 8012222:	f7fb fb51 	bl	800d8c8 <_free_r>
 8012226:	4625      	mov	r5, r4
 8012228:	4628      	mov	r0, r5
 801222a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801222c:	f000 f86a 	bl	8012304 <_malloc_usable_size_r>
 8012230:	42a0      	cmp	r0, r4
 8012232:	d20f      	bcs.n	8012254 <_realloc_r+0x48>
 8012234:	4621      	mov	r1, r4
 8012236:	4638      	mov	r0, r7
 8012238:	f7fb fb96 	bl	800d968 <_malloc_r>
 801223c:	4605      	mov	r5, r0
 801223e:	2800      	cmp	r0, #0
 8012240:	d0f2      	beq.n	8012228 <_realloc_r+0x1c>
 8012242:	4631      	mov	r1, r6
 8012244:	4622      	mov	r2, r4
 8012246:	f7fe ff65 	bl	8011114 <memcpy>
 801224a:	4631      	mov	r1, r6
 801224c:	4638      	mov	r0, r7
 801224e:	f7fb fb3b 	bl	800d8c8 <_free_r>
 8012252:	e7e9      	b.n	8012228 <_realloc_r+0x1c>
 8012254:	4635      	mov	r5, r6
 8012256:	e7e7      	b.n	8012228 <_realloc_r+0x1c>

08012258 <_read_r>:
 8012258:	b538      	push	{r3, r4, r5, lr}
 801225a:	4d07      	ldr	r5, [pc, #28]	; (8012278 <_read_r+0x20>)
 801225c:	4604      	mov	r4, r0
 801225e:	4608      	mov	r0, r1
 8012260:	4611      	mov	r1, r2
 8012262:	2200      	movs	r2, #0
 8012264:	602a      	str	r2, [r5, #0]
 8012266:	461a      	mov	r2, r3
 8012268:	f7f4 f862 	bl	8006330 <_read>
 801226c:	1c43      	adds	r3, r0, #1
 801226e:	d102      	bne.n	8012276 <_read_r+0x1e>
 8012270:	682b      	ldr	r3, [r5, #0]
 8012272:	b103      	cbz	r3, 8012276 <_read_r+0x1e>
 8012274:	6023      	str	r3, [r4, #0]
 8012276:	bd38      	pop	{r3, r4, r5, pc}
 8012278:	20001aec 	.word	0x20001aec

0801227c <_raise_r>:
 801227c:	291f      	cmp	r1, #31
 801227e:	b538      	push	{r3, r4, r5, lr}
 8012280:	4604      	mov	r4, r0
 8012282:	460d      	mov	r5, r1
 8012284:	d904      	bls.n	8012290 <_raise_r+0x14>
 8012286:	2316      	movs	r3, #22
 8012288:	6003      	str	r3, [r0, #0]
 801228a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801228e:	bd38      	pop	{r3, r4, r5, pc}
 8012290:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8012292:	b112      	cbz	r2, 801229a <_raise_r+0x1e>
 8012294:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8012298:	b94b      	cbnz	r3, 80122ae <_raise_r+0x32>
 801229a:	4620      	mov	r0, r4
 801229c:	f000 f830 	bl	8012300 <_getpid_r>
 80122a0:	462a      	mov	r2, r5
 80122a2:	4601      	mov	r1, r0
 80122a4:	4620      	mov	r0, r4
 80122a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80122aa:	f000 b817 	b.w	80122dc <_kill_r>
 80122ae:	2b01      	cmp	r3, #1
 80122b0:	d00a      	beq.n	80122c8 <_raise_r+0x4c>
 80122b2:	1c59      	adds	r1, r3, #1
 80122b4:	d103      	bne.n	80122be <_raise_r+0x42>
 80122b6:	2316      	movs	r3, #22
 80122b8:	6003      	str	r3, [r0, #0]
 80122ba:	2001      	movs	r0, #1
 80122bc:	e7e7      	b.n	801228e <_raise_r+0x12>
 80122be:	2400      	movs	r4, #0
 80122c0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80122c4:	4628      	mov	r0, r5
 80122c6:	4798      	blx	r3
 80122c8:	2000      	movs	r0, #0
 80122ca:	e7e0      	b.n	801228e <_raise_r+0x12>

080122cc <raise>:
 80122cc:	4b02      	ldr	r3, [pc, #8]	; (80122d8 <raise+0xc>)
 80122ce:	4601      	mov	r1, r0
 80122d0:	6818      	ldr	r0, [r3, #0]
 80122d2:	f7ff bfd3 	b.w	801227c <_raise_r>
 80122d6:	bf00      	nop
 80122d8:	20000044 	.word	0x20000044

080122dc <_kill_r>:
 80122dc:	b538      	push	{r3, r4, r5, lr}
 80122de:	4d07      	ldr	r5, [pc, #28]	; (80122fc <_kill_r+0x20>)
 80122e0:	2300      	movs	r3, #0
 80122e2:	4604      	mov	r4, r0
 80122e4:	4608      	mov	r0, r1
 80122e6:	4611      	mov	r1, r2
 80122e8:	602b      	str	r3, [r5, #0]
 80122ea:	f7f4 f807 	bl	80062fc <_kill>
 80122ee:	1c43      	adds	r3, r0, #1
 80122f0:	d102      	bne.n	80122f8 <_kill_r+0x1c>
 80122f2:	682b      	ldr	r3, [r5, #0]
 80122f4:	b103      	cbz	r3, 80122f8 <_kill_r+0x1c>
 80122f6:	6023      	str	r3, [r4, #0]
 80122f8:	bd38      	pop	{r3, r4, r5, pc}
 80122fa:	bf00      	nop
 80122fc:	20001aec 	.word	0x20001aec

08012300 <_getpid_r>:
 8012300:	f7f3 bff4 	b.w	80062ec <_getpid>

08012304 <_malloc_usable_size_r>:
 8012304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012308:	1f18      	subs	r0, r3, #4
 801230a:	2b00      	cmp	r3, #0
 801230c:	bfbc      	itt	lt
 801230e:	580b      	ldrlt	r3, [r1, r0]
 8012310:	18c0      	addlt	r0, r0, r3
 8012312:	4770      	bx	lr

08012314 <_init>:
 8012314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012316:	bf00      	nop
 8012318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801231a:	bc08      	pop	{r3}
 801231c:	469e      	mov	lr, r3
 801231e:	4770      	bx	lr

08012320 <_fini>:
 8012320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012322:	bf00      	nop
 8012324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012326:	bc08      	pop	{r3}
 8012328:	469e      	mov	lr, r3
 801232a:	4770      	bx	lr
